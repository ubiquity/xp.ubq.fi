{"directoryName":"results-ubiquity-os-marketplace","files":[{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_115.json","json":{"gentlementlegen":{"userId":9807008,"total":30.95,"task":{"reward":25,"multiplier":1},"comments":[{"id":2521964924,"content":"GitHub comments have a hard limit for the content. When burst it will fail to post with the following comment:\r\nCould not post GitHub comment: HttpError: Validation Failed: {\"resource\":\"IssueComment\",\"code\":\"custom\",\"field\":\"body\",\"message\":\"body is too long (maximum is 65536 characters)\"} - https://docs.github.com/rest/issues/comments#update-an-issue-comment\r\nSee this [related run](https://github.com/ubiquibot/conversation-rewards/actions/runs/10828487091/job/30043960563#step:7:194).\r\nWe can remove html content from the metadata because it is not really useful and takes a lot of characters.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/115","commentType":"ISSUE_SPECIFICATION","score":{"reward":5.95,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":67,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":59.76253846153847,"syllables":121,"sentences":5,"score":0.9976253846153846},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 30.95 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.95</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/115\" target=\"_blank\" rel=\"noopener\">GitHub comments have a hard limit for the content. When burst it&hellip;</a></h6></td><td><details><summary>4.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 67&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>1</td><td>1</td><td>5.95</td></tr></tbody></table></details>"},"0x4007":{"total":0.27,"userId":4975670,"comments":[{"id":2346046013,"content":"@gentlementlegen run jordan's permit again","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/116#issuecomment-2346046013","commentType":"PULL_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":17.44500000000002,"syllables":13,"sentences":1,"score":0.5744500000000002},"multiplier":1,"relevance":0}}],"reviewRewards":[{"reviews":[{"reviewId":2300033612,"effect":{"addition":25,"deletion":2},"reward":0.27,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/116"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.27 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.27</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/116\" target=\"_blank\" rel=\"noopener\">#116</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+25 -2</td><td>1</td><td>0.27</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/116#issuecomment-2346046013\" target=\"_blank\" rel=\"noopener\">@gentlementlegen run jordan's permit again</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0</td><td>1</td><td>0</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_118.json","json":{"gentlementlegen":{"userId":9807008,"total":54.65,"task":{"reward":50,"multiplier":1},"comments":[{"id":2768429306,"content":"@whilefoo maybe we could simplify to just `collaborator` and `contributor`, and then map a group of roles to these two? Admin would just have no limits. I can do that in a secondary pull-request. @0x4007 rfc\r\n_Originally posted by @gentlementlegen in https://github.com/ubiquity-os-marketplace/command-start-stop/issues/116#issuecomment-2569982989_\r\nTo simplify the roles and avoid a long and complex configuration, we should regroup roles under `collaborator` (anyone with write access or from the organization) and `contributor` (everyone else). Admins should have no limits.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/118","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.65,"formatting":{"content":{"p":{"score":0,"elementCount":3},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":72,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":56.1005392156863,"syllables":137,"sentences":6,"score":0.961005392156863},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 54.65 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.65</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/118\" target=\"_blank\" rel=\"noopener\">@whilefoo maybe we could simplify to just &#96;collaborator&#96;&hellip;</a></h6></td><td><details><summary>3.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 72&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>1</td><td>1</td><td>4.65</td></tr></tbody></table></details>"},"whilefoo":{"total":14.652,"userId":139262667,"comments":[{"id":1912293463,"content":"since admin is not in settings anymore how would one restrict a label to just admins?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/119#discussion_r1912293463","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -23,47 +28,24 @@ const rolesWithReviewAuthority = T.Array(T.Enum(Role), {\n   ],\n });\n \n-const maxConcurrentTasks = T.Transform(\n-  T.Record(T.String(), T.Integer(), {\n-    default: { member: 10, contributor: 2 },\n+const maxConcurrentTasks = T.Object(\n+  { collaborator: T.Number({ default: 10 }), contributor: T.Number({ default: 2 }) },\n+  {\n     description: \"The maximum number of tasks a user can have assigned to them at once, based on their role.\",\n-    examples: [{ member: 5, contributor: 1 }],\n-  })\n-)\n-  .Decode((obj) => {\n-    // normalize the role keys to lowercase\n-    obj = Object.keys(obj).reduce(\n-      (acc, key) => {\n-        acc[key.toLowerCase()] = obj[key];\n-        return acc;\n-      },\n-      {} as Record<string, number>\n-    );\n-\n-    // If admin is omitted, defaults to infinity\n-    if (!obj[\"admin\"]) {\n-      obj[\"admin\"] = Infinity;\n-    }\n-\n-    return obj;\n-  })\n-  .Encode((value) => value);\n-\n-type IntoStringLiteralUnion<T> = { [K in keyof T]: T[K] extends string ? TLiteral<T[K]> : never };\n-\n-export function stringLiteralUnion<T extends string[]>(values: [...T]): Union<IntoStringLiteralUnion<T>> {\n-  const literals = values.map((value) => T.Literal(value));\n-  return T.Union(literals) as Union<IntoStringLiteralUnion<T>>;\n-}\n+    examples: [{ collaborator: 10, contributor: 2 }],\n+    default: {},\n+  }\n+);\n \n-const roles = stringLiteralUnion([\"admin\", \"member\", \"collaborator\", \"contributor\", \"owner\", \"billing_manager\", \"read\", \"write\"]);\n+const roles = T.KeyOf(maxConcurrentTasks);\n \n const requiredLabel = T.Object({\n   name: T.String({ description: \"The name of the required labels to start the task.\" }),\n-  roles: T.Array(roles, {\n+  allowedRoles: T.Array(roles, {\n     description: \"The list of allowed roles to start the task with the given label.\",\n     uniqueItems: true,\n-    default: [\"admin\", \"member\", \"collaborator\", \"contributor\", \"owner\", \"billing_manager\", \"write\", \"read\"],\n+    default: [\"collaborator\", \"contributor\"],\n+    examples: [[\"collaborator\", \"contributor\"]],\n   }),","score":{"reward":2.268,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":68.9825,"syllables":23,"sentences":1,"score":0.910175},"multiplier":1,"relevance":0.7}},{"id":1912421338,"content":"Maybe I'm missing something but for example if I set empty array and I'm a collaborator then this [if](https://github.com/ubiquity-os-marketplace/command-start-stop/pull/119/files#diff-47224fac5bab974df0f6fb9704d6fbb0f06375b3e98285797826104537bda3ccR34-R38) would evaluate to `false` so it would let me start the task","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/119#discussion_r1912421338","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -23,47 +28,24 @@ const rolesWithReviewAuthority = T.Array(T.Enum(Role), {\n   ],\n });\n \n-const maxConcurrentTasks = T.Transform(\n-  T.Record(T.String(), T.Integer(), {\n-    default: { member: 10, contributor: 2 },\n+const maxConcurrentTasks = T.Object(\n+  { collaborator: T.Number({ default: 10 }), contributor: T.Number({ default: 2 }) },\n+  {\n     description: \"The maximum number of tasks a user can have assigned to them at once, based on their role.\",\n-    examples: [{ member: 5, contributor: 1 }],\n-  })\n-)\n-  .Decode((obj) => {\n-    // normalize the role keys to lowercase\n-    obj = Object.keys(obj).reduce(\n-      (acc, key) => {\n-        acc[key.toLowerCase()] = obj[key];\n-        return acc;\n-      },\n-      {} as Record<string, number>\n-    );\n-\n-    // If admin is omitted, defaults to infinity\n-    if (!obj[\"admin\"]) {\n-      obj[\"admin\"] = Infinity;\n-    }\n-\n-    return obj;\n-  })\n-  .Encode((value) => value);\n-\n-type IntoStringLiteralUnion<T> = { [K in keyof T]: T[K] extends string ? TLiteral<T[K]> : never };\n-\n-export function stringLiteralUnion<T extends string[]>(values: [...T]): Union<IntoStringLiteralUnion<T>> {\n-  const literals = values.map((value) => T.Literal(value));\n-  return T.Union(literals) as Union<IntoStringLiteralUnion<T>>;\n-}\n+    examples: [{ collaborator: 10, contributor: 2 }],\n+    default: {},\n+  }\n+);\n \n-const roles = stringLiteralUnion([\"admin\", \"member\", \"collaborator\", \"contributor\", \"owner\", \"billing_manager\", \"read\", \"write\"]);\n+const roles = T.KeyOf(maxConcurrentTasks);\n \n const requiredLabel = T.Object({\n   name: T.String({ description: \"The name of the required labels to start the task.\" }),\n-  roles: T.Array(roles, {\n+  allowedRoles: T.Array(roles, {\n     description: \"The list of allowed roles to start the task with the given label.\",\n     uniqueItems: true,\n-    default: [\"admin\", \"member\", \"collaborator\", \"contributor\", \"owner\", \"billing_manager\", \"write\", \"read\"],\n+    default: [\"collaborator\", \"contributor\"],\n+    examples: [[\"collaborator\", \"contributor\"]],\n   }),","score":{"reward":6.064,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":55.38625000000003,"syllables":45,"sentences":1,"score":0.9538625000000003},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2545305750,"effect":{"addition":132,"deletion":146},"reward":5.56,"priority":2},{"reviewId":2545465764,"effect":{"addition":27,"deletion":11},"reward":0.76,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/119"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 14.652 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>6.32</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>8.332</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/119\" target=\"_blank\" rel=\"noopener\">#119</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+132 -146</td><td>2</td><td>5.56</td></tr><tr><td>+27 -11</td><td>2</td><td>0.76</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/119#discussion_r1912293463\" target=\"_blank\" rel=\"noopener\">since admin is not in settings anymore how would one restrict a &hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.268</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/119#discussion_r1912421338\" target=\"_blank\" rel=\"noopener\">Maybe I'm missing something but for example if I set empty array&hellip;</a></h6></td><td><details><summary>2.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.8</td><td>2</td><td>6.064</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-disqualifier_60.json","json":{"gentlementlegen":{"userId":9807008,"total":26.34,"task":{"reward":25,"multiplier":1},"comments":[{"id":2523769308,"content":"I think the description is a bit misleading: the task is open and the reminder is correct. However it should not be posted on a closed pull-request but rather on the main issue. (https://github.com/ubiquity-os/ubiquity-os-kernel/issues/195 is still opened and ongoing)","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/60#issuecomment-2523769308","commentType":"ISSUE_ASSIGNEE","score":{"reward":1,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":68.36451530612246,"syllables":73,"sentences":4,"score":0.9163548469387754},"multiplier":0.25,"relevance":1}},{"id":2225416786,"content":"Resolves #60\r\nQA: https://github.com/Meniole/daemon-disqualifier/issues/7","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/62","commentType":"PULL_SPECIFICATION","score":{"reward":0.34,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":47.434318181818185,"syllables":20,"sentences":2,"score":0.8743431818181818},"multiplier":1,"relevance":0.2}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 26.34 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.34</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/60#issuecomment-2523769308\" target=\"_blank\" rel=\"noopener\">I think the description is a bit misleading: the task is open an&hellip;</a></h6></td><td><details><summary>3.15</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.15&#13;</pre></details></td><td>1</td><td>1</td><td>1</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/62\" target=\"_blank\" rel=\"noopener\">Resolves #60QA: https://github.com/Meniole/daemon-disqualifier&hellip;</a></h6></td><td><details><summary>1.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.34</td></tr></tbody></table></details>"},"rndquu":{"total":5.46,"userId":119500907,"comments":[{"id":2525053118,"content":"Updated description","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/60#issuecomment-2525053118","commentType":"ISSUE_AUTHOR","score":{"reward":0.1,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":-6.694999999999993,"syllables":5,"sentences":1,"score":0},"multiplier":1,"relevance":0.4}},{"id":2722583732,"content":"Check [this](https://github.com/ubiquity-os/ubiquity-os-kernel/pull/199#issuecomment-2522638152) follow up message which was posted in a merged PR. \r\nExpected behavior: since the [main issue](https://github.com/ubiquity-os/ubiquity-os-kernel/issues/195) is still open (at the time of creating this task) the follow up message should've been posted in the issue comments, not in PR comments.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/60","commentType":"ISSUE_SPECIFICATION","score":{"reward":5.36,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":44,"wordValue":0.1,"result":2.27},"readability":{"fleschKincaid":74.90954545454547,"syllables":57,"sentences":2,"score":0.8509045454545453},"multiplier":1,"relevance":1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/62"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 5.46 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.36</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.1</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/60\" target=\"_blank\" rel=\"noopener\">Check [this](https://github.com/ubiquity-os/ubiquity-os-kernel/p&hellip;</a></h6></td><td><details><summary>4.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 44&#13;  wordValue: 0.1&#13;  result: 2.27&#13;</pre></details></td><td>1</td><td>1</td><td>5.36</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/60#issuecomment-2525053118\" target=\"_blank\" rel=\"noopener\">Updated description</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.1</td></tr></tbody></table></details>"},"0x4007":{"total":4.485,"userId":4975670,"comments":[{"id":2500207154,"content":"The code changes make sense. The QA I get a bit confused reviewing but nothing stands out to me as a mistake.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/62#pullrequestreview-2500207154","commentType":"PULL_COLLABORATOR","score":{"reward":0.945,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":91.84272727272729,"syllables":27,"sentences":2,"score":0.6815727272727271},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2500207154,"effect":{"addition":310,"deletion":44},"reward":3.54,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/62"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 4.485 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>3.54</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.945</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/62\" target=\"_blank\" rel=\"noopener\">#62</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+310 -44</td><td>1</td><td>3.54</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/62#pullrequestreview-2500207154\" target=\"_blank\" rel=\"noopener\">The code changes make sense. The QA I get a bit confused reviewi&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.945</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_27.json","json":{"gentlementlegen":{"userId":9807008,"total":152.23,"task":{"reward":150,"multiplier":1},"comments":[{"id":2489108053,"content":"The v1 of the bot would close the linked pull-requests if a user stops working on the task, or if the user manually unassigns itself.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/27","commentType":"ISSUE_SPECIFICATION","score":{"reward":2.23,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":66.56038461538463,"syllables":35,"sentences":1,"score":0.9343961538461536},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 152.23 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>150</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>2.23</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/27\" target=\"_blank\" rel=\"noopener\">The v1 of the bot would close the linked pull-requests if a user&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>1</td><td>1</td><td>2.23</td></tr></tbody></table></details>"},"whilefoo":{"total":9.036,"userId":139262667,"comments":[{"id":1758620086,"content":"```suggestion\r\nexport function isIssueEvent(context: Context): context is Context<\"issues.opened\"> {\r\n```\r\nI feel like `issue_comment.created` could lead to bugs because it would make types seem like there is a comment present even though you don't know if it is.\r\nEven more type safe would be to have a type guard for every event type.\r\nBut if a function is shared for many events and you want to simply know if issue is present in the payload you can just use if statement and typescript will automatically infer it","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/46#discussion_r1758620086","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -6,14 +6,14 @@ import { createAdapters } from \"../adapters\";\n import { Env } from \"./env\";\n import { Logs } from \"@ubiquity-dao/ubiquibot-logger\";\n \n-export type SupportedEventsU = \"issue_comment.created\" | \"issues.assigned\" | \"pull_request.opened\";\n+export type SupportedEventsU = \"issue_comment.created\" | \"issues.assigned\" | \"pull_request.opened\" | \"issues.unassigned\";\n \n export type SupportedEvents = {\n   [K in SupportedEventsU]: K extends WebhookEventName ? WebhookEvent<K> : never;\n };\n \n export function isContextCommentCreated(context: Context): context is Context<\"issue_comment.created\"> {","score":{"reward":4.676,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":77,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":68.71580086580087,"syllables":102,"sentences":3,"score":0.9128419913419913},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2302768854,"effect":{"addition":40,"deletion":7},"reward":0.94,"priority":2},{"reviewId":2303128033,"effect":{"addition":120,"deletion":51},"reward":3.42,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/46"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 9.036 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>4.36</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>4.676</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/46\" target=\"_blank\" rel=\"noopener\">#46</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+40 -7</td><td>2</td><td>0.94</td></tr><tr><td>+120 -51</td><td>2</td><td>3.42</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/46#discussion_r1758620086\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionexport function isIssueEvent(context:&hellip;</a></h6></td><td><details><summary>2.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 77&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.7</td><td>2</td><td>4.676</td></tr></tbody></table></details>"},"0x4007":{"total":8.424,"userId":4975670,"comments":[{"id":1759727990,"content":"I think this message is unnecessary. Please remove and then you can merge this. You can make it a debug log so that it doesn't comment too, thats fine.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/46#discussion_r1759727990","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,6 +112,26 @@ describe(\"User start/stop\", () => {\n     );\n   });\n \n+  test(\"Author's manual unassign should close linked issue\", async () => {\n+    const infoSpy = jest.spyOn(console, \"info\").mockImplementation(() => {});\n+    const issue = db.issue.findFirst({ where: { id: { equals: 2 } } }) as unknown as Issue;\n+    const sender = db.users.findFirst({ where: { id: { equals: 2 } } }) as unknown as PayloadSender;\n+    const context = createContext(issue, sender, \"\") as Context<\"issues.unassigned\">;\n+\n+    context.adapters = createAdapters(getSupabase(), context);\n+\n+    const { content } = await userUnassigned(context);\n+\n+    expect(content).toEqual(\"Linked pull-requests closed.\");\n+    const logs = infoSpy.mock.calls.flat();\n+    expect(logs[0]).toMatch(/Opened prs/);\n+    expect(cleanLogString(logs[3])).toMatch(\n+      cleanLogString(\n+        \" › ```diff# These linked pull requests are closed:  http://github.com/ubiquity/test-repo/pull/2  http://github.com/ubiquity/test-repo/pull/3\"","score":{"reward":4.104,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":89.52500000000002,"syllables":38,"sentences":3,"score":0.7047499999999998},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2304437397,"effect":{"addition":159,"deletion":57},"reward":4.32,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/46"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 8.424 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>4.32</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>4.104</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/46\" target=\"_blank\" rel=\"noopener\">#46</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+159 -57</td><td>2</td><td>4.32</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/46#discussion_r1759727990\" target=\"_blank\" rel=\"noopener\">I think this message is unnecessary. Please remove and then you &hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.9</td><td>2</td><td>4.104</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_65.json","json":{"gentlementlegen":{"userId":9807008,"total":53.97,"task":{"reward":50,"multiplier":1},"comments":[{"id":2421302794,"content":"The errors mentioned [here](https://github.com/ubiquibot/conversation-rewards/pull/58#issuecomment-2238566995) are actually present in the `development` branch so they are not caused by this PR. @gentlementlegen perhaps it makes sense to fix those errors in a separate PR.\r\n_Originally posted by @rndquu in https://github.com/ubiquibot/conversation-rewards/pull/58#pullrequestreview-2187708661_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/65","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.97,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":57.227717391304395,"syllables":75,"sentences":4,"score":0.9722771739130439},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 53.97 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.97</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/65\" target=\"_blank\" rel=\"noopener\">The errors mentioned [here](https://github.com/ubiquibot/convers&hellip;</a></h6></td><td><details><summary>3.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>1</td><td>1</td><td>3.97</td></tr></tbody></table></details>"},"0x4007":{"total":0.268,"userId":4975670,"comments":[{"id":2292945706,"content":"@gentlementlegen should this be closed?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/75#issuecomment-2292945706","commentType":"PULL_COLLABORATOR","score":{"reward":0.268,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":49.48000000000002,"syllables":9,"sentences":1,"score":0.8948000000000002},"multiplier":1,"relevance":0.4}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/75"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.268 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>0.268</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/75#issuecomment-2292945706\" target=\"_blank\" rel=\"noopener\">@gentlementlegen should this be closed?</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.268</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_208.json","json":{"gentlementlegen":{"userId":9807008,"total":21.09,"task":{"reward":18,"multiplier":1},"comments":[{"id":2724986329,"content":"> As I understand its the priority level thats the problem. Spec should always be a 3x multiplier. Maybe.\r\nI agree, priority should apply to review and implementation, but spec doesn't fit that well\r\n_Originally posted by @zugdev in https://github.com/ubiquity-os/ubiquity-os-plugin-installer/issues/19#issuecomment-2525291747_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/208","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.09,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":35.309411764705914,"syllables":62,"sentences":2,"score":0.7530941176470591},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 21.09 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>18</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.09</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/208\" target=\"_blank\" rel=\"noopener\">&gt; As I understand its the priority level thats the problem. S&hellip;</a></h6></td><td><details><summary>2.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>1</td><td>1</td><td>3.09</td></tr></tbody></table></details>"},"0x4007":{"total":18,"userId":4975670,"comments":[{"id":2556187288,"content":"This message should be removed","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/208#issuecomment-2556187288","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":83.32000000000004,"syllables":7,"sentences":1,"score":0.7667999999999996},"multiplier":1,"relevance":0}},{"id":2651984009,"content":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/222/files#r1951540966","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/208#issuecomment-2651984009","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.875,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":44.05288461538464,"syllables":24,"sentences":2,"score":0.8405288461538464},"multiplier":1,"relevance":0.5}},{"id":2516650205,"content":"Will approve to not slow this down","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/222#pullrequestreview-2516650205","commentType":"PULL_COLLABORATOR","score":{"reward":0.54,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":103.04428571428575,"syllables":8,"sentences":1,"score":1},"multiplier":1,"relevance":0.2}},{"id":1893389539,"content":"Can't you rewrite this so as to not circumvent our rules?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/222#discussion_r1893389539","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -124,15 +111,15 @@ export class ContentEvaluatorModule extends BaseModule {\n         currentRelevance = relevancesByAi[currentComment.id];\n       }\n \n-      const currentReward = this._getRewardForComment(currentComment, currentRelevance).mul(\n-        currentComment.score?.priority ?? 1\n-      );\n+      // eslint-disable-next-line sonarjs/prefer-nullish-coalescing","score":{"reward":1.152,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":81.85500000000002,"syllables":16,"sentences":1,"score":0.7814499999999999},"multiplier":1,"relevance":0.3}},{"id":1951540966,"content":"Looks like priority is still being applied here actually @gentlementlegen","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/222#discussion_r1951540966","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -124,15 +111,14 @@ export class ContentEvaluatorModule extends BaseModule {\n         currentRelevance = relevancesByAi[currentComment.id];\n       }\n \n-      const currentReward = this._getRewardForComment(currentComment, currentRelevance).mul(\n-        currentComment.score?.priority ?? 1\n-      );\n+      const currentReward = new Decimal(currentComment.score?.reward ?? 0);\n+      const priority = currentComment.score?.priority ?? 1;\n \n       currentComment.score = {\n         ...(currentComment.score || { multiplier: 0 }),\n         relevance: new Decimal(currentRelevance).toNumber(),\n-        priority: currentComment.score?.priority ?? 1,\n-        reward: currentReward.toNumber(),\n+        priority: priority,\n+        reward: currentReward.mul(currentRelevance).mul(priority).toDecimalPlaces(3).toNumber(),","score":{"reward":2.997,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":35.94500000000002,"syllables":19,"sentences":1,"score":0.7594500000000002},"multiplier":1,"relevance":0.9}},{"id":1958796813,"content":"I think this should be in config?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/278#discussion_r1958796813","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -139,7 +139,11 @@ export class ContentEvaluatorModule extends BaseModule {\n       }\n \n       const currentReward = new Decimal(currentComment.score?.reward ?? 0);\n-      const priority = currentComment.score?.priority ?? 1;\n+      const priority =\n+        // We do not apply priority multiplier on issue specification","score":{"reward":1.89,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":103.04428571428575,"syllables":8,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":2664123730,"content":"Before continuing on this can you check the pinned issue?\nSelective priority multiplier is more precise. I think we should close this issue as not planned","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/278#issuecomment-2664123730","commentType":"PULL_COLLABORATOR","score":{"reward":5.256,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":74.39217948717952,"syllables":38,"sentences":3,"score":0.8560782051282048},"multiplier":1,"relevance":0.8}},{"id":2664543486,"content":"Depends on how long it takes for you to get around to doing the other two new tasks. Those seem to solve the problem better I think","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/278#issuecomment-2664543486","commentType":"PULL_COLLABORATOR","score":{"reward":3.21,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":92.86583333333337,"syllables":32,"sentences":2,"score":0.6713416666666663},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2516642393,"effect":{"addition":8,"deletion":21},"reward":0.87,"priority":3},{"reviewId":2609942798,"effect":{"addition":1,"deletion":2},"reward":0.09,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/222"},{"reviews":[{"reviewId":2621993483,"effect":{"addition":16,"deletion":10},"reward":0.78,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/278"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 18 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>1.74</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>1.875</td></tr><tr><td>Review</td><td>Comment</td><td>6</td><td>15.045</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/222\" target=\"_blank\" rel=\"noopener\">#222</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+8 -21</td><td>3</td><td>0.87</td></tr><tr><td>+1 -2</td><td>3</td><td>0.09</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/278\" target=\"_blank\" rel=\"noopener\">#278</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+16 -10</td><td>3</td><td>0.78</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/208#issuecomment-2556187288\" target=\"_blank\" rel=\"noopener\">This message should be removed</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/208#issuecomment-2651984009\" target=\"_blank\" rel=\"noopener\">https://github.com/ubiquity-os-marketplace/text-conversation-rew&hellip;</a></h6></td><td><details><summary>1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.875</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/222#pullrequestreview-2516650205\" target=\"_blank\" rel=\"noopener\">Will approve to not slow this down</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.54</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/222#discussion_r1893389539\" target=\"_blank\" rel=\"noopener\">Can't you rewrite this so as to not circumvent our rules?</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.152</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/222#discussion_r1951540966\" target=\"_blank\" rel=\"noopener\">Looks like priority is still being applied here actually @gentle&hellip;</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.997</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/278#discussion_r1958796813\" target=\"_blank\" rel=\"noopener\">I think this should be in config?</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.89</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/278#issuecomment-2664123730\" target=\"_blank\" rel=\"noopener\">Before continuing on this can you check the pinned issue?Select&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.8</td><td>3</td><td>5.256</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/278#issuecomment-2664543486\" target=\"_blank\" rel=\"noopener\">Depends on how long it takes for you to get around to doing the &hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.5</td><td>3</td><td>3.21</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_152.json","json":{"gentlementlegen":{"userId":9807008,"total":40.9,"task":{"reward":30,"multiplier":1},"comments":[{"id":2404917331,"content":"`Locations` table was still there to support the part where all the permits are fetched. We could eventually make it a plugin now that we can run actions quickly, that would periodically fetch all the data.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2404917331","commentType":"ISSUE_ASSIGNEE","score":{"reward":2.925,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":5,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":70.63250000000004,"syllables":49,"sentences":2,"score":0.8936749999999997},"multiplier":0.25,"relevance":0.9}},{"id":2448886664,"content":"@ishowvel What do you mean? This issue is not a blocker for a proper run of the plug-in it just outputs an error.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2448886664","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.53,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":5,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":85.38,"syllables":31,"sentences":2,"score":0.7462000000000001},"multiplier":0.25,"relevance":0.6}},{"id":2448998483,"content":"RLS doesn't matter if you use the service key.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2448998483","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.945,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":5,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":95.165,"syllables":12,"sentences":1,"score":0.64835},"multiplier":0.25,"relevance":0.7}},{"id":2452912095,"content":"Error `42501` indeed means a problem while writing on the table according to [postgres](https://www.metisdata.io/knowledgebase/errors/postgresql-42501). It would mean that there is an RLS issue with the table, probably the key used not having enough privileges. It worked locally fine when I used the service key, maybe the environment value is wrong in this repo? I will check that.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2452912095","commentType":"ISSUE_ASSIGNEE","score":{"reward":5.5,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":5,"words":{"wordCount":56,"wordValue":0.1,"result":2.47},"readability":{"fleschKincaid":71.76785714285715,"syllables":80,"sentences":4,"score":0.8823214285714285},"multiplier":0.25,"relevance":1}}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 40.9 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>30</td></tr><tr><td>Issue</td><td>Comment</td><td>4</td><td>10.9</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2404917331\" target=\"_blank\" rel=\"noopener\">&#96;Locations&#96; table was still there to support the part wh&hellip;</a></h6></td><td><details><summary>2.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.9</td><td>5</td><td>2.925</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2448886664\" target=\"_blank\" rel=\"noopener\">@ishowvel What do you mean? This issue is not a blocker for a pr&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.6</td><td>5</td><td>1.53</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2448998483\" target=\"_blank\" rel=\"noopener\">RLS doesn't matter if you use the service key.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.7</td><td>5</td><td>0.945</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2452912095\" target=\"_blank\" rel=\"noopener\">Error &#96;42501&#96; indeed means a problem while writing on th&hellip;</a></h6></td><td><details><summary>3.47</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 56&#13;  wordValue: 0.1&#13;  result: 2.47&#13;</pre></details></td><td>1</td><td>5</td><td>5.5</td></tr></tbody></table></details>"},"0x4007":{"total":9.36,"userId":4975670,"comments":[{"id":2404876388,"content":"Locations table is obsolete and was removed","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2404876388","commentType":"ISSUE_COLLABORATOR","score":{"reward":3.87,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":5,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":42.61571428571432,"syllables":13,"sentences":1,"score":0.8261571428571431},"multiplier":1,"relevance":0.9}},{"id":2453295596,"content":"Maybe link the correct pull that fixed this and if it's not double dipping rewards then it's valid.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2453295596","commentType":"ISSUE_COLLABORATOR","score":{"reward":5.49,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":5,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":80.78500000000003,"syllables":25,"sentences":1,"score":0.7921499999999998},"multiplier":1,"relevance":0.6}}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 9.36 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>2</td><td>9.36</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2404876388\" target=\"_blank\" rel=\"noopener\">Locations table is obsolete and was removed</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.9</td><td>5</td><td>3.87</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2453295596\" target=\"_blank\" rel=\"noopener\">Maybe link the correct pull that fixed this and if it's not doub&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.6</td><td>5</td><td>5.49</td></tr></tbody></table></details>"},"imabutahersiddik":{"total":0,"userId":138387257},"ishowvel":{"total":4.24,"userId":186167176,"comments":[{"id":2448399902,"content":"i hope this issues gets fixed asap, this issue has become a blocker for me to qa my pull requests","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2448399902","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.84,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":5,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":76.55500000000004,"syllables":26,"sentences":1,"score":0.8344499999999997},"multiplier":0.25,"relevance":0.8}},{"id":2448983651,"content":"I fixed it after disabling rls for all tables 😔","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2448983651","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.3,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":5,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":75.50000000000003,"syllables":13,"sentences":1,"score":0.8449999999999998},"multiplier":0.25,"relevance":1}},{"id":2449025633,"content":"Sorry it is my first time using databases in this detail, happy to learn along the way smile 😄","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2449025633","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.1,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":5,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":66.36500000000001,"syllables":26,"sentences":1,"score":0.9363499999999999},"multiplier":0.25,"relevance":0.5}}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 4.24 XP ]</a>&nbsp;</h3><h6>@ishowvel</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>3</td><td>4.24</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2448399902\" target=\"_blank\" rel=\"noopener\">i hope this issues gets fixed asap, this issue has become a bloc&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.8</td><td>5</td><td>1.84</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2448983651\" target=\"_blank\" rel=\"noopener\">I fixed it after disabling rls for all tables 😔</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>1</td><td>5</td><td>1.3</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2449025633\" target=\"_blank\" rel=\"noopener\">Sorry it is my first time using databases in this detail, happy &hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.5</td><td>5</td><td>1.1</td></tr></tbody></table></details>"},"whilefoo":{"total":8.7,"userId":139262667,"comments":[{"id":2453092711,"content":"I guess we can make a new issue for removing location data because it's obsolete like @0x4007 stated","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2453092711","commentType":"ISSUE_AUTHOR","score":{"reward":7.4,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":5,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":62.87631578947371,"syllables":28,"sentences":1,"score":0.971236842105263},"multiplier":1,"relevance":0.8}},{"id":2575933840,"content":"```\r\nFailed to create a new location {\r\n  code: '42501',\r\n  details: null,\r\n  hint: null,\r\n  message: 'new row violates row-level security policy for table \"locations\"'\r\n}\r\nFailed to save permits to the database Error: Failed to retrieve the related location from issue [object Object]\r\n    at PermitGenerationModule._getOrCreateIssueLocation (/home/runner/work/conversation-rewards/conversation-rewards/src/parser/permit-generation-module.ts:248:13)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n    at PermitGenerationModule._savePermitsToDatabase (/home/runner/work/conversation-rewards/conversation-rewards/src/parser/permit-generation-module.ts:257:28)\r\n    at PermitGenerationModule.transform (/home/runner/work/conversation-rewards/conversation-rewards/src/parser/permit-generation-module.ts:122:9)\r\n    at Processor.run (/home/runner/work/conversation-rewards/conversation-rewards/src/parser/processor.ts:37:24)\r\n    at run (/home/runner/work/conversation-rewards/conversation-rewards/src/run.ts:25:5)\r\n```\r\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/actions/runs/11165001249/job/31035657102#step:7:443","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152","commentType":"ISSUE_SPECIFICATION","score":{"reward":1.3,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":58.8663235294118,"syllables":28,"sentences":2,"score":0.988663235294118},"multiplier":1,"relevance":1}}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 8.7 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Specification</td><td>1</td><td>1.3</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>7.4</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;Failed to create a new location {code: '425&hellip;</a></h6></td><td><details><summary>1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>1</td><td>1</td><td>1.3</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/152#issuecomment-2453092711\" target=\"_blank\" rel=\"noopener\">I guess we can make a new issue for removing location data becau&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.8</td><td>5</td><td>7.4</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_13.json","json":{"gentlementlegen":{"userId":9807008,"total":26.979,"task":{"reward":25,"multiplier":1},"comments":[{"id":2067297235,"content":"@rndquu Following our Telegram conversation, I think we shall transfer this issue to https://github.com/ubiquibot/conversation-rewards if that is still relevant","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2067297235","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.37,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":43.08000000000001,"syllables":43,"sentences":2,"score":0.8308000000000001},"multiplier":0.25,"relevance":0.5}},{"id":2067781996,"content":"@rndquu makes sense to me. In terms of DB structure, `credits` and `debits` would become one table (maybe `transactions`) and it would keep a record of any financial flow that occurred for a user correct?\r\nBut is it solving the fact that we do not save permits to the DB or is it something that would be aside this task?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2067781996","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.532,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":57,"wordValue":0.1,"result":2.48},"readability":{"fleschKincaid":82.17105263157896,"syllables":71,"sentences":3,"score":0.7782894736842104},"multiplier":0.25,"relevance":0.7}},{"id":2067800086,"content":"All these tables are empty so far so pretty safe to update them. But in the end, we should still push the generated permits to the table then, which is not yet the case right now. We might need a separate task for this?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2067800086","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.621,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":44,"wordValue":0.1,"result":2.27},"readability":{"fleschKincaid":88.12106060606062,"syllables":54,"sentences":3,"score":0.7187893939393938},"multiplier":0.25,"relevance":0.9}},{"id":2068422197,"content":"I don't think credit and debit should be separate tables. I don't know if XP should be on its own, this can be figured out when we implement it. Probably has to if we had Tiers and Rewards later on.\r\nBecause in the end credit is a positive value and debit a negative value. It is way easier to count / sort them if they exist on the same table, and it would be a common use case to have to fetch all of them ordered by date which implies lots of cross joins if they are separated. On the other hand, Postgres allows for Views to solve that as well. As long as the tables are properly indexed the performance should be similar.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2068422197","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.456,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":125,"wordValue":0.1,"result":2.45},"readability":{"fleschKincaid":77.71480000000001,"syllables":164,"sentences":7,"score":0.8228519999999999},"multiplier":0.25,"relevance":0.6}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 26.979 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr><tr><td>Issue</td><td>Comment</td><td>4</td><td>1.979</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2067297235\" target=\"_blank\" rel=\"noopener\">@rndquu Following our Telegram conversation, I think we shall tr&hellip;</a></h6></td><td><details><summary>2.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.37</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2067781996\" target=\"_blank\" rel=\"noopener\">@rndquu makes sense to me. In terms of DB structure, &#96;credit&hellip;</a></h6></td><td><details><summary>2.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 57&#13;  wordValue: 0.1&#13;  result: 2.48&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.532</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2067800086\" target=\"_blank\" rel=\"noopener\">All these tables are empty so far so pretty safe to update them.&hellip;</a></h6></td><td><details><summary>2.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 44&#13;  wordValue: 0.1&#13;  result: 2.27&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.621</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2068422197\" target=\"_blank\" rel=\"noopener\">I don't think credit and debit should be separate tables. I don'&hellip;</a></h6></td><td><details><summary>2.45</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 125&#13;  wordValue: 0.1&#13;  result: 2.45&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.456</td></tr></tbody></table></details>"},"rndquu":{"total":22.988,"userId":119500907,"comments":[{"id":2067312299,"content":"@gentlementlegen \r\nThere is [this](https://github.com/ubiquity/pay.ubq.fi/issues/174) issue which adds a \"Ubiquity virtual card\" feature (by using [gift cards API](https://docs.reloadly.com/gift-cards) under the hood). Simply put, collaborators will have 2 options for withdrawing rewards:\r\n1) Our usual permit URL\r\n2) Payout to generated virtual card\r\nThe thing is that for this feature we don't need to save permits in a DB. We just need to save/maintain \"debits and credits\" (in terms of pavlovcik's supabase DB instance) ledger table and only save smth to permits or virtual cards tables when collaborators actually want to withdraw a reward.\r\nSo I wanted to modify the current issue to implement the \"ledger style\" DB reward table. What do you think?\r\n<img width=\"1512\" alt=\"Screenshot 2024-04-20 at 00 35 06\" src=\"https://github.com/ubiquibot/conversation-rewards/assets/119500907/79fb6611-d652-49b1-995c-a5a72c80f8ca\">","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2067312299","commentType":"ISSUE_AUTHOR","score":{"reward":6.561,"formatting":{"content":{"p":{"score":0,"elementCount":7},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":3}},"result":3.2},"priority":1,"words":{"wordCount":126,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":57.64978417266187,"syllables":212,"sentences":7,"score":0.9764978417266187},"multiplier":1,"relevance":0.9}},{"id":2067786288,"content":"The `transactions` table is, as far as I understand, the `settlements` table in terms of pavlovcik's DB instance\r\n<img width=\"1512\" alt=\"Screenshot 2024-04-21 at 00 26 37\" src=\"https://github.com/ubiquibot/conversation-rewards/assets/119500907/1a0d6d49-35eb-4410-ae65-64611ddd7a1d\">\r\nFrom my understanding, when the `transactions/settlements` table is ready the `permits` table (along with the `virtual_cards` table) will be updated only when user requests a withdraw either in crypto (the way we use it now) either to a virtual card.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2067786288","commentType":"ISSUE_AUTHOR","score":{"reward":4.05,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":67,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":45.68000000000002,"syllables":114,"sentences":2,"score":0.8568000000000002},"multiplier":1,"relevance":0.9}},{"id":2254020884,"content":"Original [comment](https://github.com/ubiquity/pay.ubq.fi/issues/182#issuecomment-1980238150)\r\nWhat should be done:\r\n- on permits generation ([example](https://github.com/ubiquity/pay.ubq.fi/issues/182#issuecomment-1980167172)) we should save them to the `permits` table in supabase (use pavlovcik's DB instance)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.43,"formatting":{"content":{"p":{"score":0,"elementCount":2},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1.1},"priority":1,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":41.47500000000002,"syllables":40,"sentences":1,"score":0.8147500000000002},"multiplier":1,"relevance":1}},{"id":2060552795,"content":"Approving this, but pls fix the tests","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20#pullrequestreview-2060552795","commentType":"PULL_COLLABORATOR","score":{"reward":0.581,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":90.95857142857145,"syllables":9,"sentences":1,"score":0.6904142857142855},"multiplier":1,"relevance":0.7}},{"id":1602895310,"content":"@gentlementlegen Isn't the `locations` table deprecated? Shouldn't we just delete it or at least don't use at all?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20#discussion_r1602895310","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -100,13 +102,77 @@ export class PermitGenerationModule implements Module {\n           config.permitRequests\n         );\n         result[key].permitUrl = `https://pay.ubq.fi?claim=${encodePermits(permits)}`;\n+        await this._savePermitsToDatabase(result[key].userId, { issueUrl: payload.issueUrl, issueId }, permits);\n       } catch (e) {\n         console.error(e);\n       }\n     }\n     return result;\n   }\n \n+  async _getOrCreateIssueLocation(issue: { issueId: number; issueUrl: string }) {\n+    let locationId: number | null = null;\n+\n+    const { data: locationData } = await this._supabase\n+      .from(\"locations\")\n+      .select(\"id\")\n+      .eq(\"issue_id\", issue.issueId)\n+      .eq(\"node_url\", issue.issueUrl)\n+      .single();\n+\n+    if (!locationData) {\n+      const issueItem = await getRepo(parseGitHubUrl(issue.issueUrl));\n+      const { data: newLocationData, error } = await this._supabase\n+        .from(\"locations\")","score":{"reward":1.656,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":78.24500000000002,"syllables":28,"sentences":2,"score":0.8175499999999998},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2060031358,"effect":{"addition":494,"deletion":177},"reward":6.71,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 22.988 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>6.71</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.43</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>10.611</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>2.237</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20\" target=\"_blank\" rel=\"noopener\">#20</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+494 -177</td><td>1</td><td>6.71</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13\" target=\"_blank\" rel=\"noopener\">Original [comment](https://github.com/ubiquity/pay.ubq.fi/issues&hellip;</a></h6></td><td><details><summary>2.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.1&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>1</td><td>1</td><td>3.43</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2067312299\" target=\"_blank\" rel=\"noopener\">@gentlementlegen There is [this](https://github.com/ubiquity/p&hellip;</a></h6></td><td><details><summary>5.64</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 7&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 3.2&#13;regex:&#13;  wordCount: 126&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>0.9</td><td>1</td><td>6.561</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2067786288\" target=\"_blank\" rel=\"noopener\">The &#96;transactions&#96; table is, as far as I understand, the&hellip;</a></h6></td><td><details><summary>3.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 67&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>0.9</td><td>1</td><td>4.05</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20#pullrequestreview-2060552795\" target=\"_blank\" rel=\"noopener\">Approving this, but pls fix the tests</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.581</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20#discussion_r1602895310\" target=\"_blank\" rel=\"noopener\">@gentlementlegen Isn't the &#96;locations&#96; table deprecated?&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.9</td><td>1</td><td>1.656</td></tr></tbody></table></details>"},"0x4007":{"total":14.052,"userId":4975670,"comments":[{"id":2067940971,"content":"For additional context on why I broke everything apart into so many tables: I intended for transactions to also accommodate other forms of \"currency\" like XP \nPermits correspond only to \"cash\" (crypto) rewards. \nFor example a project admin can, for example, arbitrarily add 100 to your XP. So now your repo XP is registered as a \"credit\" (with no payment permit associated) with a value of 100. \nThe original intent was that I wanted to couple the XP scoring with dollars earned in the system. And then add additional modifiers on top primarily for subtractions for poor performance (without penalizing money)\nMaybe there could be a more elegant way to handle matters but I figured if they are so tightly coupled it would make sense to leave as is.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2067940971","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.432,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":129,"wordValue":0.1,"result":2.42},"readability":{"fleschKincaid":45.550325581395384,"syllables":206,"sentences":5,"score":0.8555032558139538},"multiplier":1,"relevance":0.8}},{"id":2118817684,"content":"It's impossible to have a permit associated with a debit so it doesn't make sense to combine them. Then you have wasted cells.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2118817684","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.47,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":82.47550000000001,"syllables":33,"sentences":2,"score":0.7752449999999999},"multiplier":1,"relevance":0.7}},{"id":1603955470,"content":"Yeah we should probably stop using that table and instead just add a new URL column wherever it makes sense in the other tables.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20#discussion_r1603955470","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -100,13 +102,77 @@ export class PermitGenerationModule implements Module {\n           config.permitRequests\n         );\n         result[key].permitUrl = `https://pay.ubq.fi?claim=${encodePermits(permits)}`;\n+        await this._savePermitsToDatabase(result[key].userId, { issueUrl: payload.issueUrl, issueId }, permits);\n       } catch (e) {\n         console.error(e);\n       }\n     }\n     return result;\n   }\n \n+  async _getOrCreateIssueLocation(issue: { issueId: number; issueUrl: string }) {\n+    let locationId: number | null = null;\n+\n+    const { data: locationData } = await this._supabase\n+      .from(\"locations\")\n+      .select(\"id\")\n+      .eq(\"issue_id\", issue.issueId)\n+      .eq(\"node_url\", issue.issueUrl)\n+      .single();\n+\n+    if (!locationData) {\n+      const issueItem = await getRepo(parseGitHubUrl(issue.issueUrl));\n+      const { data: newLocationData, error } = await this._supabase\n+        .from(\"locations\")","score":{"reward":1.498,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":62.62500000000003,"syllables":34,"sentences":1,"score":0.9737499999999997},"multiplier":1,"relevance":0.7}},{"id":1605786934,"content":"Don't worry about data migrations. Basically none of the old data is valuable. No need to do extra work to save it.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20#discussion_r1605786934","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -100,13 +102,77 @@ export class PermitGenerationModule implements Module {\n           config.permitRequests\n         );\n         result[key].permitUrl = `https://pay.ubq.fi?claim=${encodePermits(permits)}`;\n+        await this._savePermitsToDatabase(result[key].userId, { issueUrl: payload.issueUrl, issueId }, permits);\n       } catch (e) {\n         console.error(e);\n       }\n     }\n     return result;\n   }\n \n+  async _getOrCreateIssueLocation(issue: { issueId: number; issueUrl: string }) {\n+    let locationId: number | null = null;\n+\n+    const { data: locationData } = await this._supabase\n+      .from(\"locations\")\n+      .select(\"id\")\n+      .eq(\"issue_id\", issue.issueId)\n+      .eq(\"node_url\", issue.issueUrl)\n+      .single();\n+\n+    if (!locationData) {\n+      const issueItem = await getRepo(parseGitHubUrl(issue.issueUrl));\n+      const { data: newLocationData, error } = await this._supabase\n+        .from(\"locations\")","score":{"reward":1.632,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":70.31420289855075,"syllables":35,"sentences":3,"score":0.8968579710144925},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2061747936,"effect":{"addition":494,"deletion":177},"reward":6.71,"priority":1},{"reviewId":2064757954,"effect":{"addition":29,"deletion":2},"reward":0.31,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 14.052 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>7.02</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>3.902</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>3.13</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20\" target=\"_blank\" rel=\"noopener\">#20</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+494 -177</td><td>1</td><td>6.71</td></tr><tr><td>+29 -2</td><td>1</td><td>0.31</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2067940971\" target=\"_blank\" rel=\"noopener\">For additional context on why I broke everything apart into so m&hellip;</a></h6></td><td><details><summary>2.42</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 129&#13;  wordValue: 0.1&#13;  result: 2.42&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.432</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/13#issuecomment-2118817684\" target=\"_blank\" rel=\"noopener\">It's impossible to have a permit associated with a debit so it d&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.47</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20#discussion_r1603955470\" target=\"_blank\" rel=\"noopener\">Yeah we should probably stop using that table and instead just a&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.498</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20#discussion_r1605786934\" target=\"_blank\" rel=\"noopener\">Don't worry about data migrations. Basically none of the old dat&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.8</td><td>1</td><td>1.632</td></tr></tbody></table></details>"},"gitcoindev":{"total":7.06,"userId":88761781,"comments":[{"id":2116997557,"content":"I also did a review. The error handling looks good, after tests are fixed can be merged.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20#issuecomment-2116997557","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.24,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":88.72514705882354,"syllables":22,"sentences":2,"score":0.7127485294117646},"multiplier":0.25,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2062626357,"effect":{"addition":503,"deletion":179},"reward":6.82,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 7.06 XP ]</a>&nbsp;</h3><h6>@gitcoindev</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>6.82</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.24</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20\" target=\"_blank\" rel=\"noopener\">#20</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+503 -179</td><td>1</td><td>6.82</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/20#issuecomment-2116997557\" target=\"_blank\" rel=\"noopener\">I also did a review. The error handling looks good, after tests &hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.24</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_187.json","json":{"gentlementlegen":{"userId":9807008,"total":158.69,"task":{"reward":150,"multiplier":1},"comments":[{"id":2613739517,"content":"Yes it is still valid.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/187#issuecomment-2613739517","commentType":"ISSUE_AUTHOR","score":{"reward":2.07,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":100.24000000000002,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":1}},{"id":2666090001,"content":"## Issue\r\nIf more than 100 get requested, it will fail and throw an error:\r\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/blob/dee258982532d0514f7e74ff7bfd7d29c72162c7/src/helpers/get-comment-details.ts\r\nwe should loop and batch by amount of 100 nodes max to avoid a crash.\r\n## Repro steps\r\nRun the plugin on an issue having more than a hundred comments.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/187","commentType":"ISSUE_SPECIFICATION","score":{"reward":6.62,"formatting":{"content":{"h2":{"score":1,"elementCount":2},"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":1}},"result":3},"priority":1,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":73.17000000000003,"syllables":84,"sentences":4,"score":0.8682999999999997},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 158.69 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>150</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>6.62</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.07</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/187\" target=\"_blank\" rel=\"noopener\">## IssueIf more than 100 get requested, it will fail and throw&hellip;</a></h6></td><td><details><summary>5.25</summary><pre>content:&#13;  content:&#13;    h2:&#13;      score: 1&#13;      elementCount: 2&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 3&#13;regex:&#13;  wordCount: 43&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>1</td><td>1</td><td>6.62</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/187#issuecomment-2613739517\" target=\"_blank\" rel=\"noopener\">Yes it is still valid.</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>1</td><td>3</td><td>2.07</td></tr></tbody></table></details>"},"0x4007":{"total":3.51,"userId":4975670,"comments":[{"id":2613524470,"content":"Is this still valid @gentlementlegen","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/187#issuecomment-2613524470","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.56,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":32.56000000000003,"syllables":10,"sentences":1,"score":0.7256000000000004},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2583477227,"effect":{"addition":55,"deletion":10},"reward":1.95,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/255"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 3.51 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>1.95</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.56</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/255\" target=\"_blank\" rel=\"noopener\">#255</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+55 -10</td><td>3</td><td>1.95</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/187#issuecomment-2613524470\" target=\"_blank\" rel=\"noopener\">Is this still valid @gentlementlegen</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.56</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_9.json","json":{"gentlementlegen":{"userId":9807008,"total":101.267,"task":{"reward":100,"multiplier":1},"comments":[{"id":1817138591,"content":"Resolves #9 \r\nDepends on https://github.com/ubiquibot/permit-generation/pull/10","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8","commentType":"PULL_SPECIFICATION","score":{"reward":1.267,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":45.64500000000001,"syllables":22,"sentences":2,"score":0.8564500000000002},"multiplier":1,"relevance":0.7}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 101.267 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>1.267</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8\" target=\"_blank\" rel=\"noopener\">Resolves #9 Depends on https://github.com/ubiquibot/permit-gen&hellip;</a></h6></td><td><details><summary>1.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.267</td></tr></tbody></table></details>"},"gitcoindev":{"total":19.312,"userId":88761781,"comments":[{"id":1993600842,"content":"I added a few comments to clarify, but overall the pull request is very useful. Good job! I think it would be useful to add documentation about releases, perhaps an automated label in `README.md` would be fine and add the documentation on generating rewards on different network ids.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#pullrequestreview-1993600842","commentType":"PULL_CONTRIBUTOR","score":{"reward":2.368,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":47,"wordValue":0.1,"result":2.33},"readability":{"fleschKincaid":48.73333333333335,"syllables":79,"sentences":3,"score":0.8873333333333335},"multiplier":0.25,"relevance":0.8}},{"id":1560645540,"content":"I have not used this action yet, looks useful!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1560645540","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -0,0 +1,16 @@\n+name: Release Please\n+\n+on:\n+  workflow_dispatch:\n+  push:\n+    branches:\n+      - main\n+\n+jobs:\n+  release-please:\n+    runs-on: ubuntu-latest\n+    steps:\n+      - uses: google-github-actions/release-please-action@v4","score":{"reward":0.208,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":84.90000000000003,"syllables":12,"sentences":1,"score":0.7509999999999997},"multiplier":0.25,"relevance":0.2}},{"id":1560652119,"content":"All right. For the time being, the `contributionType` is always empty and will be implemented later. Is this correct?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1560652119","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -0,0 +1,120 @@\n+import { context } from \"@actions/github\";\n+import { Value } from \"@sinclair/typebox/value\";\n+import { createClient } from \"@supabase/supabase-js\";\n+import {\n+  Context,\n+  createAdapters,\n+  Database,\n+  encodePermits,\n+  generatePayoutPermit,\n+  SupportedEvents,\n+  TokenType,\n+} from \"@ubiquibot/permit-generation\";\n+import configuration from \"../configuration/config-reader\";\n+import contentEvaluatorConfig from \"../configuration/content-evaluator-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { IssueActivity } from \"../issue-activity\";\n+import { Module, Result } from \"./processor\";\n+import program from \"./command-line\";\n+\n+interface Payload {\n+  evmNetworkId: number;\n+  issueUrl: string;\n+  evmPrivateEncrypted: string;\n+  issue: { id: number };\n+}\n+\n+export class PermitGenerationModule implements Module {\n+  readonly _configuration: PermitGenerationModule = configuration.permitGeneration;\n+  readonly _supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    const payload: Context[\"payload\"] & Payload = {\n+      ...context.payload.inputs,\n+      issueUrl: program.opts().issue,\n+      evmPrivateEncrypted: program.opts().evmPrivateEncrypted,\n+      evmNetworkId: program.opts().evmNetworkId,\n+    };\n+    const issueId = Number(payload.issueUrl.match(/[0-9]+$/)?.[1]);\n+    payload.issue = {\n+      id: issueId,\n+    };\n+    const env = process.env;\n+    const eventName = context.eventName as SupportedEvents;\n+    const octokit = getOctokitInstance();\n+    const logger = {\n+      debug(message: unknown, optionalParams: unknown) {\n+        console.log(message, optionalParams);\n+      },\n+      error(message: unknown, optionalParams: unknown) {\n+        console.error(message, optionalParams);\n+      },\n+      fatal(message: unknown, optionalParams: unknown) {\n+        console.error(message, optionalParams);\n+      },\n+      info(message: unknown, optionalParams: unknown) {\n+        console.log(message, optionalParams);\n+      },\n+      warn(message: unknown, optionalParams: unknown) {\n+        console.warn(message, optionalParams);\n+      },\n+    };\n+    const adapters = {} as ReturnType<typeof createAdapters>;\n+\n+    for (const [key, value] of Object.entries(result)) {\n+      try {\n+        const config: Context[\"config\"] = {\n+          evmNetworkId: payload.evmNetworkId,\n+          evmPrivateEncrypted: payload.evmPrivateEncrypted,\n+          permitRequests: [\n+            {\n+              amount: value.total,\n+              userId: value.userId,\n+              contributionType: \"\",","score":{"reward":1.512,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":87.94500000000002,"syllables":24,"sentences":3,"score":0.7205499999999998},"multiplier":0.25,"relevance":0.9}},{"id":1560655268,"content":"This is a good practice. We should document it somewhere, that the releases are done automatically from the `main` branch only.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1560655268","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -0,0 +1,16 @@\n+name: Release Please\n+\n+on:\n+  workflow_dispatch:\n+  push:\n+    branches:\n+      - main","score":{"reward":1.344,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":61.32500000000002,"syllables":32,"sentences":2,"score":0.9867499999999998},"multiplier":0.25,"relevance":0.7}},{"id":1560771879,"content":"Yes, this is the correct workflow. Releases should be done from a `main` or `release` branch, separate from `development` branch.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1560771879","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -0,0 +1,16 @@\n+name: Release Please\n+\n+on:\n+  workflow_dispatch:\n+  push:\n+    branches:\n+      - main","score":{"reward":0.96,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":88.72514705882354,"syllables":22,"sentences":2,"score":0.7127485294117646},"multiplier":0.25,"relevance":0.6}},{"id":2049009264,"content":"Good catch! I will fix this repository Knip asap, also review the pr today.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#issuecomment-2049009264","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.592,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":66.7871428571429,"syllables":22,"sentences":2,"score":0.9321285714285711},"multiplier":0.25,"relevance":0.4}},{"id":2049190957,"content":"Knip config fixed at https://github.com/ubiquibot/conversation-rewards/pull/11 I am reviewing this pull request now.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#issuecomment-2049190957","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.768,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":59.16092105263158,"syllables":31,"sentences":2,"score":0.9916092105263158},"multiplier":0.25,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":1993600842,"effect":{"addition":270,"deletion":19},"reward":11.56,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 19.312 XP ]</a>&nbsp;</h3><h6>@gitcoindev</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>11.56</td></tr><tr><td>Review</td><td>Comment</td><td>7</td><td>7.752</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8\" target=\"_blank\" rel=\"noopener\">#8</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+270 -19</td><td>4</td><td>11.56</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#pullrequestreview-1993600842\" target=\"_blank\" rel=\"noopener\">I added a few comments to clarify, but overall the pull request &hellip;</a></h6></td><td><details><summary>2.33</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 47&#13;  wordValue: 0.1&#13;  result: 2.33&#13;</pre></details></td><td>0.8</td><td>4</td><td>2.368</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1560645540\" target=\"_blank\" rel=\"noopener\">I have not used this action yet, looks useful!</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.2</td><td>4</td><td>0.208</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1560652119\" target=\"_blank\" rel=\"noopener\">All right. For the time being, the &#96;contributionType&#96; is&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.9</td><td>4</td><td>1.512</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1560655268\" target=\"_blank\" rel=\"noopener\">This is a good practice. We should document it somewhere, that t&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.7</td><td>4</td><td>1.344</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1560771879\" target=\"_blank\" rel=\"noopener\">Yes, this is the correct workflow. Releases should be done from &hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.6</td><td>4</td><td>0.96</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#issuecomment-2049009264\" target=\"_blank\" rel=\"noopener\">Good catch! I will fix this repository Knip asap, also review th&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.4</td><td>4</td><td>0.592</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#issuecomment-2049190957\" target=\"_blank\" rel=\"noopener\">Knip config fixed at https://github.com/ubiquibot/conversation-r&hellip;</a></h6></td><td><details><summary>1.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.3</td><td>4</td><td>0.768</td></tr></tbody></table></details>"},"whilefoo":{"total":20.248,"userId":139262667,"comments":[{"id":2001311228,"content":"code looks good","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#pullrequestreview-2001311228","commentType":"PULL_COLLABORATOR","score":{"reward":0.184,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":119.19000000000003,"syllables":3,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}},{"id":1565858678,"content":"it's used in NFT","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1565858678","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,120 @@\n+import { context } from \"@actions/github\";\n+import { Value } from \"@sinclair/typebox/value\";\n+import { createClient } from \"@supabase/supabase-js\";\n+import {\n+  Context,\n+  createAdapters,\n+  Database,\n+  encodePermits,\n+  generatePayoutPermit,\n+  SupportedEvents,\n+  TokenType,\n+} from \"@ubiquibot/permit-generation\";\n+import configuration from \"../configuration/config-reader\";\n+import contentEvaluatorConfig from \"../configuration/content-evaluator-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { IssueActivity } from \"../issue-activity\";\n+import { Module, Result } from \"./processor\";\n+import program from \"./command-line\";\n+\n+interface Payload {\n+  evmNetworkId: number;\n+  issueUrl: string;\n+  evmPrivateEncrypted: string;\n+  issue: { id: number };\n+}\n+\n+export class PermitGenerationModule implements Module {\n+  readonly _configuration: PermitGenerationModule = configuration.permitGeneration;\n+  readonly _supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    const payload: Context[\"payload\"] & Payload = {\n+      ...context.payload.inputs,\n+      issueUrl: program.opts().issue,\n+      evmPrivateEncrypted: program.opts().evmPrivateEncrypted,\n+      evmNetworkId: program.opts().evmNetworkId,\n+    };\n+    const issueId = Number(payload.issueUrl.match(/[0-9]+$/)?.[1]);\n+    payload.issue = {\n+      id: issueId,\n+    };\n+    const env = process.env;\n+    const eventName = context.eventName as SupportedEvents;\n+    const octokit = getOctokitInstance();\n+    const logger = {\n+      debug(message: unknown, optionalParams: unknown) {\n+        console.log(message, optionalParams);\n+      },\n+      error(message: unknown, optionalParams: unknown) {\n+        console.error(message, optionalParams);\n+      },\n+      fatal(message: unknown, optionalParams: unknown) {\n+        console.error(message, optionalParams);\n+      },\n+      info(message: unknown, optionalParams: unknown) {\n+        console.log(message, optionalParams);\n+      },\n+      warn(message: unknown, optionalParams: unknown) {\n+        console.warn(message, optionalParams);\n+      },\n+    };\n+    const adapters = {} as ReturnType<typeof createAdapters>;\n+\n+    for (const [key, value] of Object.entries(result)) {\n+      try {\n+        const config: Context[\"config\"] = {\n+          evmNetworkId: payload.evmNetworkId,\n+          evmPrivateEncrypted: payload.evmPrivateEncrypted,\n+          permitRequests: [\n+            {\n+              amount: value.total,\n+              userId: value.userId,\n+              contributionType: \"\",","score":{"reward":0.552,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.2}},{"id":1565913454,"content":"```suggestion\r\n      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1565913454","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -12,6 +12,9 @@ jobs:\n     env:\n       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n       OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n+      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}\n+      SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.8}},{"id":1565913780,"content":"```suggestion\r\n      SUPABASE_KEY: string;\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1565913780","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,15 @@\n+declare global {\n+  namespace NodeJS {\n+    interface ProcessEnv {\n+      GITHUB_TOKEN: string;\n+      OPENAI_API_KEY: string;\n+      X25519_PRIVATE_KEY: string;\n+      SUPABASE_ANON_KEY: string;","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.7}},{"id":1565914656,"content":"```suggestion\r\n              type: TokenType.ERC20,\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1565914656","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,116 @@\n+import { context } from \"@actions/github\";\n+import { Value } from \"@sinclair/typebox/value\";\n+import { createClient } from \"@supabase/supabase-js\";\n+import {\n+  Context,\n+  createAdapters,\n+  Database,\n+  encodePermits,\n+  generatePayoutPermit,\n+  SupportedEvents,\n+  TokenType,\n+} from \"@ubiquibot/permit-generation\";\n+import configuration from \"../configuration/config-reader\";\n+import permitGenerationConfigurationType, {\n+  PermitGenerationConfiguration,\n+} from \"../configuration/permit-generation-configuration\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { IssueActivity } from \"../issue-activity\";\n+import { Module, Result } from \"./processor\";\n+\n+interface Payload {\n+  evmNetworkId: number;\n+  issueUrl: string;\n+  evmPrivateEncrypted: string;\n+  issue: { id: number };\n+}\n+\n+export class PermitGenerationModule implements Module {\n+  readonly _configuration: PermitGenerationConfiguration = configuration.permitGeneration;\n+  readonly _supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    const payload: Context[\"payload\"] & Payload = context.payload.inputs;\n+    const issueId = Number(payload.issueUrl.match(/[0-9]+$/)?.[1]);\n+    payload.issue = {\n+      id: issueId,\n+    };\n+    const env = process.env;\n+    const eventName = context.eventName as SupportedEvents;\n+    const octokit = getOctokitInstance();\n+    const logger = {\n+      debug(message: unknown, optionalParams: unknown) {\n+        console.log(message, optionalParams);\n+      },\n+      error(message: unknown, optionalParams: unknown) {\n+        console.error(message, optionalParams);\n+      },\n+      fatal(message: unknown, optionalParams: unknown) {\n+        console.error(message, optionalParams);\n+      },\n+      info(message: unknown, optionalParams: unknown) {\n+        console.log(message, optionalParams);\n+      },\n+      warn(message: unknown, optionalParams: unknown) {\n+        console.warn(message, optionalParams);\n+      },\n+    };\n+    const adapters = {} as ReturnType<typeof createAdapters>;\n+\n+    for (const [key, value] of Object.entries(result)) {\n+      try {\n+        const config: Context[\"config\"] = {\n+          evmNetworkId: payload.evmNetworkId,\n+          evmPrivateEncrypted: payload.evmPrivateEncrypted,\n+          permitRequests: [\n+            {\n+              amount: value.total,\n+              userId: value.userId,\n+              contributionType: \"\",\n+              type: TokenType.ERC20,\n+            },\n+          ],\n+        };\n+        const permits = await generatePayoutPermit(\n+          {\n+            env,\n+            eventName,\n+            logger,\n+            payload,\n+            adapters: createAdapters(this._supabase, {\n+              env,\n+              eventName,\n+              octokit,\n+              config,\n+              logger,\n+              payload,\n+              adapters,\n+            }),\n+            octokit,\n+            config,\n+          },\n+          [\n+            {\n+              type: \"ERC20\",","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1565915836,"content":"I think env should be validated but not a top priority","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1565915836","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,116 @@\n+import { context } from \"@actions/github\";\n+import { Value } from \"@sinclair/typebox/value\";\n+import { createClient } from \"@supabase/supabase-js\";\n+import {\n+  Context,\n+  createAdapters,\n+  Database,\n+  encodePermits,\n+  generatePayoutPermit,\n+  SupportedEvents,\n+  TokenType,\n+} from \"@ubiquibot/permit-generation\";\n+import configuration from \"../configuration/config-reader\";\n+import permitGenerationConfigurationType, {\n+  PermitGenerationConfiguration,\n+} from \"../configuration/permit-generation-configuration\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { IssueActivity } from \"../issue-activity\";\n+import { Module, Result } from \"./processor\";\n+\n+interface Payload {\n+  evmNetworkId: number;\n+  issueUrl: string;\n+  evmPrivateEncrypted: string;\n+  issue: { id: number };\n+}\n+\n+export class PermitGenerationModule implements Module {\n+  readonly _configuration: PermitGenerationConfiguration = configuration.permitGeneration;\n+  readonly _supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    const payload: Context[\"payload\"] & Payload = context.payload.inputs;\n+    const issueId = Number(payload.issueUrl.match(/[0-9]+$/)?.[1]);\n+    payload.issue = {\n+      id: issueId,\n+    };\n+    const env = process.env;","score":{"reward":1.92,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":80.30636363636367,"syllables":15,"sentences":1,"score":0.7969363636363633},"multiplier":1,"relevance":0.4}},{"id":1565984650,"content":"Why `Context[\"payload\"]` ?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1565984650","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,116 @@\n+import { context } from \"@actions/github\";\n+import { Value } from \"@sinclair/typebox/value\";\n+import { createClient } from \"@supabase/supabase-js\";\n+import {\n+  Context,\n+  createAdapters,\n+  Database,\n+  encodePermits,\n+  generatePayoutPermit,\n+  SupportedEvents,\n+  TokenType,\n+} from \"@ubiquibot/permit-generation\";\n+import configuration from \"../configuration/config-reader\";\n+import permitGenerationConfigurationType, {\n+  PermitGenerationConfiguration,\n+} from \"../configuration/permit-generation-configuration\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { IssueActivity } from \"../issue-activity\";\n+import { Module, Result } from \"./processor\";\n+\n+interface Payload {\n+  evmNetworkId: number;\n+  issueUrl: string;\n+  evmPrivateEncrypted: string;\n+  issue: { id: number };\n+}\n+\n+export class PermitGenerationModule implements Module {\n+  readonly _configuration: PermitGenerationConfiguration = configuration.permitGeneration;\n+  readonly _supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    const payload: Context[\"payload\"] & Payload = context.payload.inputs;","score":{"reward":0.432,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":1,"wordValue":0.1,"result":0.14},"readability":{"fleschKincaid":121.22000000000003,"syllables":1,"sentences":1,"score":1},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2001219677,"effect":{"addition":367,"deletion":43},"reward":16.4,"priority":4},{"reviewId":2005146861,"effect":{"addition":6,"deletion":13},"reward":0.76,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 20.248 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>17.16</td></tr><tr><td>Review</td><td>Comment</td><td>7</td><td>3.088</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8\" target=\"_blank\" rel=\"noopener\">#8</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+367 -43</td><td>4</td><td>16.4</td></tr><tr><td>+6 -13</td><td>4</td><td>0.76</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#pullrequestreview-2001311228\" target=\"_blank\" rel=\"noopener\">code looks good</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.184</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1565858678\" target=\"_blank\" rel=\"noopener\">it's used in NFT</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.2</td><td>4</td><td>0.552</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1565913454\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionSUPABASE_KEY: ${{ secrets.SUPAB&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.8</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1565913780\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionSUPABASE_KEY: string;&#96;&#9&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1565914656\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestiontype: TokenType.ERC20,&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1565915836\" target=\"_blank\" rel=\"noopener\">I think env should be validated but not a top priority</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.4</td><td>4</td><td>1.92</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#discussion_r1565984650\" target=\"_blank\" rel=\"noopener\">Why &#96;Context[\"payload\"]&#96; ?</a></h6></td><td><details><summary>0.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0.1&#13;  result: 0.14&#13;</pre></details></td><td>0.6</td><td>4</td><td>0.432</td></tr></tbody></table></details>"},"0x4007":{"total":5.968,"userId":4975670,"comments":[{"id":2053554966,"content":"Why five digits of precision? The industry standard is 18.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#issuecomment-2053554966","commentType":"PULL_COLLABORATOR","score":{"reward":3.68,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":66.40000000000003,"syllables":16,"sentences":2,"score":0.9359999999999996},"multiplier":1,"relevance":0.8}},{"id":2060511540,"content":"You can add words to cspell config. Sure you should run on pulls.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#issuecomment-2060511540","commentType":"PULL_COLLABORATOR","score":{"reward":2.288,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":109.12980769230771,"syllables":14,"sentences":2,"score":1},"multiplier":1,"relevance":0.4}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 5.968 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>2</td><td>5.968</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#issuecomment-2053554966\" target=\"_blank\" rel=\"noopener\">Why five digits of precision? The industry standard is 18.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.8</td><td>4</td><td>3.68</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#issuecomment-2060511540\" target=\"_blank\" rel=\"noopener\">You can add words to cspell config. Sure you should run on pulls.</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.4</td><td>4</td><td>2.288</td></tr></tbody></table></details>"},"molecula451":{"total":0.216,"userId":41552663,"comments":[{"id":2054882229,"content":"looks like 2 npm packages are in conflict @gentlementlegen","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#issuecomment-2054882229","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.216,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":56.70000000000002,"syllables":15,"sentences":1,"score":0.9670000000000002},"multiplier":0.25,"relevance":0.2}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.216 XP ]</a>&nbsp;</h3><h6>@molecula451</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>0.216</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/8#issuecomment-2054882229\" target=\"_blank\" rel=\"noopener\">looks like 2 npm packages are in conflict @gentlementlegen</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.2</td><td>4</td><td>0.216</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_6.json","json":{"Keyrxng":{"userId":106303466,"total":100.732,"task":{"reward":100,"multiplier":1},"comments":[{"id":2225153466,"content":"So I could start an issue as a team by saying `/start @0x4007` and it'll assign us both.\r\nIs this \"team\" now considered a single entity or two singles? E.g, could I then `/stop` and it'll remove my assignment but you would keep yours or we're both removed?\r\n<hr/>\r\nOnly one person is going to own the PR which makes `/stop` with auto-close for PRs tricky.\r\nI think to remove any burden from the user we:\r\n1. check if multiple assignees exist\r\n2. If they do and the person quitting is the PR owner then we do not close the PR, on the off chance that the other person is carrying on the work involved.\r\n3. If there is no activity on the issue then the remaining assignee should be kicked and the PR closed?\r\notherwise, the person still working will need to re-open the PR (which isn't a big deal but not the best UX)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2225153466","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.732,"formatting":{"content":{"p":{"score":0,"elementCount":9},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3}},"result":0.3},"priority":1,"words":{"wordCount":156,"wordValue":0.1,"result":2.17},"readability":{"fleschKincaid":78.03865384615386,"syllables":201,"sentences":8,"score":0.8196134615384614},"multiplier":0.25,"relevance":0.95}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 100.732 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.732</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2225153466\" target=\"_blank\" rel=\"noopener\">So I could start an issue as a team by saying &#96;/start @0x400&hellip;</a></h6></td><td><details><summary>2.47</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 9&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;  result: 0.3&#13;regex:&#13;  wordCount: 156&#13;  wordValue: 0.1&#13;  result: 2.17&#13;</pre></details></td><td>0.95</td><td>1</td><td>0.732</td></tr></tbody></table></details>"},"0x4007":{"total":14.378,"userId":4975670,"comments":[{"id":2225309977,"content":"I suppose just check if the person quitting is the pull author. If so then close it. If not then don't. \nStop is only for self not both.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2225309977","commentType":"ISSUE_AUTHOR","score":{"reward":1.928,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":100.29004310344831,"syllables":34,"sentences":4,"score":1},"multiplier":1,"relevance":0.8}},{"id":2229726337,"content":"Let's handle it in another task if needed! Not sure if necessary, will know after testing the feature some time in the future.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2229726337","commentType":"ISSUE_AUTHOR","score":{"reward":1.456,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":74.805,"syllables":34,"sentences":2,"score":0.85195},"multiplier":1,"relevance":0.7}},{"id":2300643425,"content":"@Keyrxng I don't wanna forget about installing this feature so after you get it installed mark it as complete","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2300643425","commentType":"ISSUE_AUTHOR","score":{"reward":0.573,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":63.86500000000004,"syllables":29,"sentences":1,"score":0.9613499999999996},"multiplier":1,"relevance":0.3}},{"id":2320066585,"content":"@Keyrxng can you install this plugin on the config? This should have been done right after merging.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2320066585","commentType":"ISSUE_AUTHOR","score":{"reward":0.32,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":88.72514705882354,"syllables":22,"sentences":2,"score":0.7127485294117646},"multiplier":1,"relevance":0.2}},{"id":2320363930,"content":"You guys need to focus on less tasks and get them done, probably!","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2320363930","commentType":"ISSUE_AUTHOR","score":{"reward":0.133,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":89.51692307692309,"syllables":16,"sentences":1,"score":0.704830769230769},"multiplier":1,"relevance":0.1}},{"id":2322750309,"content":"Time to lock in on three or less and complete them!","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2322750309","commentType":"ISSUE_AUTHOR","score":{"reward":0.126,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":103.37909090909093,"syllables":12,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}},{"id":2386087324,"content":"This reminds me that it would be really interesting in the future to support teams. Where I could write on a new task \r\n```\r\n/start @Keyrxng \r\n```\r\nAnd we would both be assigned (and be eligible to split the assignee reward.)\r\nI know a lot of developers work as lone rangers but it could make the experience more collaborative and exciting if we have a massive tasks marketplace and teams hunt projects to co-op on together.\r\nAlso if I am already assigned to a project and I write the above command, then it will add them as an assignee as well.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.38,"formatting":{"content":{"p":{"score":0,"elementCount":4}},"result":0},"priority":1,"words":{"wordCount":98,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":61.97362244897961,"syllables":139,"sentences":4,"score":0.9802637755102039},"multiplier":1,"relevance":1}},{"id":1718858199,"content":"@gentlementlegen rfc","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1718858199","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -32,9 +32,56 @@ export async function startStopTask(inputs: PluginInputs, env: Env) {\n       } else {\n         errorMessage = context.logger.error(`Failed to run comment evaluation. ${err}`, { err });\n       }\n-      await addCommentToIssue(context, `${errorMessage?.logMessage.diff}\\n<!--\\n${JSON.stringify(errorMessage?.metadata, null, 2)}\\n-->`);\n+\n+      await addCommentToIssue(context, `${sanitizeDiff(errorMessage?.logMessage.diff)}\\n<!--\\n${sanitizeMetadata(errorMessage?.metadata)}\\n-->`);\n     }\n   } else {\n     context.logger.error(`Unsupported event: ${context.eventName}`);\n   }\n }\n+\n+function sanitizeDiff(diff?: LogReturn[\"logMessage\"][\"diff\"]): string {\n+  if (!diff) return \"\";\n+  // eslint-disable-next-line no-useless-escape\n+  const backticks = diff.match(/\\`\\`\\`/g);\n+  if (!backticks) return \"```\\n\" + diff + \"\\n```\";","score":{"reward":0.175,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":-48.994999999999976,"syllables":6,"sentences":1,"score":0},"multiplier":1,"relevance":0.7}},{"id":2229628702,"content":"I don't really understand the full context of the question. I think in the future this makes more sense to discuss under the issue specification instead.\r\n`maxConcurrentTasks` is a setting that allows us to let some users only work on up to a certain amount of tasks at any given time. \r\nCore team members should have higher limits compared to external people. \r\nThe check only happens upon task assignment `/start`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#issuecomment-2229628702","commentType":"PULL_COLLABORATOR","score":{"reward":0.993,"formatting":{"content":{"p":{"score":0,"elementCount":4}},"result":0},"priority":1,"words":{"wordCount":69,"wordValue":0.1,"result":2.59},"readability":{"fleschKincaid":67.76713043478263,"syllables":102,"sentences":5,"score":0.9223286956521737},"multiplier":1,"relevance":0.3}},{"id":2229634664,"content":"Checking each user seems correct based on the vision.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#issuecomment-2229634664","commentType":"PULL_COLLABORATOR","score":{"reward":0.21,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":75.50000000000003,"syllables":13,"sentences":1,"score":0.8449999999999998},"multiplier":1,"relevance":0.2}},{"id":2272317375,"content":"If this isn't a lot of work I think just include the custom error message within this pull? Seems to me like this can be handled in a few lines of code.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#issuecomment-2272317375","commentType":"PULL_COLLABORATOR","score":{"reward":1.904,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":92.66931818181818,"syllables":38,"sentences":2,"score":0.6733068181818181},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2241115176,"effect":{"addition":194,"deletion":124},"reward":3.18,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 14.378 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>3.18</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.38</td></tr><tr><td>Issue</td><td>Comment</td><td>6</td><td>4.536</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>3.282</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11\" target=\"_blank\" rel=\"noopener\">#11</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+194 -124</td><td>1</td><td>3.18</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6\" target=\"_blank\" rel=\"noopener\">This reminds me that it would be really interesting in the futur&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;  result: 0&#13;regex:&#13;  wordCount: 98&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>1</td><td>1</td><td>3.38</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2225309977\" target=\"_blank\" rel=\"noopener\">I suppose just check if the person quitting is the pull author. &hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.8</td><td>1</td><td>1.928</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2229726337\" target=\"_blank\" rel=\"noopener\">Let's handle it in another task if needed! Not sure if necessary&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.456</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2300643425\" target=\"_blank\" rel=\"noopener\">@Keyrxng I don't wanna forget about installing this feature so a&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.573</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2320066585\" target=\"_blank\" rel=\"noopener\">@Keyrxng can you install this plugin on the config? This should &hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.32</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2320363930\" target=\"_blank\" rel=\"noopener\">You guys need to focus on less tasks and get them done, probably!</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.133</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2322750309\" target=\"_blank\" rel=\"noopener\">Time to lock in on three or less and complete them!</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.126</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1718858199\" target=\"_blank\" rel=\"noopener\">@gentlementlegen rfc</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.175</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#issuecomment-2229628702\" target=\"_blank\" rel=\"noopener\">I don't really understand the full context of the question. I th&hellip;</a></h6></td><td><details><summary>2.59</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;  result: 0&#13;regex:&#13;  wordCount: 69&#13;  wordValue: 0.1&#13;  result: 2.59&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.993</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#issuecomment-2229634664\" target=\"_blank\" rel=\"noopener\">Checking each user seems correct based on the vision.</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.21</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#issuecomment-2272317375\" target=\"_blank\" rel=\"noopener\">If this isn't a lot of work I think just include the custom erro&hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.8</td><td>1</td><td>1.904</td></tr></tbody></table></details>"},"gentlementlegen":{"total":13.204,"userId":9807008,"comments":[{"id":2320389500,"content":"@0x4007 I think the max is 3 currently, regardless of collaborator / contributor so pretty easy to hit (I have 3 huge tasks ongoing for me).\r\nAlso installing this feature just means merging into `main` to deploy the latest version of the worker (which is already done).","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2320389500","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.328,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":50.51750000000001,"syllables":71,"sentences":2,"score":0.9051750000000002},"multiplier":1,"relevance":0.8}},{"id":2247467135,"content":"Good to go for me when you addressed the remaining comments.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#pullrequestreview-2247467135","commentType":"PULL_COLLABORATOR","score":{"reward":0.48,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":80.30636363636367,"syllables":15,"sentences":1,"score":0.7969363636363633},"multiplier":1,"relevance":0.4}},{"id":1708509443,"content":"Probably should use `rest`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1708509443","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,11 +104,42 @@ export async function closePullRequestForAnIssue(context: Context, issueNumber:\n   return logger.info(comment);\n }\n \n+async function confirmMultiAssignment(context: Context, issueNumber: number, usernames: string[]) {\n+  const { logger, payload, octokit } = context;\n+\n+  if (usernames.length < 2) {\n+    return;\n+  }\n+\n+  const { private: isPrivate } = payload.repository;\n+\n+  const {\n+    data: { assignees },\n+  } = await octokit.issues.get({\n+    owner: payload.repository.owner.login,\n+    repo: payload.repository.name,\n+    issue_number: issueNumber,\n+  });\n+\n+  if (!assignees?.length) {\n+    const log = logger.error(\"We detected that this task was not assigned to anyone. Please report this to the maintainers.\", { issueNumber, usernames });\n+    await addCommentToIssue(context, log?.logMessage.diff as string);\n+    throw new Error(log?.logMessage.raw);\n+  }\n+\n+  if (isPrivate && assignees?.length <= 1) {\n+    const log = logger.error(\"This task belongs to a private repo and can only be assigned to one user without an official paid GitHub subscription.\", {\n+      issueNumber,\n+    });\n+    await addCommentToIssue(context, log?.logMessage.diff as string);\n+  }\n+}\n+\n export async function addAssignees(context: Context, issueNo: number, assignees: string[]) {\n   const payload = context.payload;\n \n   try {\n-    await context.octokit.rest.issues.addAssignees({\n+    await context.octokit.issues.addAssignees({","score":{"reward":0.315,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":62.79000000000002,"syllables":5,"sentences":1,"score":0.9720999999999997},"multiplier":1,"relevance":0.7}},{"id":1709005585,"content":"Had a talk with @whilefoo and `rest` seems to be the modern way to use it, the other one being the legacy.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1709005585","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,11 +104,42 @@ export async function closePullRequestForAnIssue(context: Context, issueNumber:\n   return logger.info(comment);\n }\n \n+async function confirmMultiAssignment(context: Context, issueNumber: number, usernames: string[]) {\n+  const { logger, payload, octokit } = context;\n+\n+  if (usernames.length < 2) {\n+    return;\n+  }\n+\n+  const { private: isPrivate } = payload.repository;\n+\n+  const {\n+    data: { assignees },\n+  } = await octokit.issues.get({\n+    owner: payload.repository.owner.login,\n+    repo: payload.repository.name,\n+    issue_number: issueNumber,\n+  });\n+\n+  if (!assignees?.length) {\n+    const log = logger.error(\"We detected that this task was not assigned to anyone. Please report this to the maintainers.\", { issueNumber, usernames });\n+    await addCommentToIssue(context, log?.logMessage.diff as string);\n+    throw new Error(log?.logMessage.raw);\n+  }\n+\n+  if (isPrivate && assignees?.length <= 1) {\n+    const log = logger.error(\"This task belongs to a private repo and can only be assigned to one user without an official paid GitHub subscription.\", {\n+      issueNumber,\n+    });\n+    await addCommentToIssue(context, log?.logMessage.diff as string);\n+  }\n+}\n+\n export async function addAssignees(context: Context, issueNo: number, assignees: string[]) {\n   const payload = context.payload;\n \n   try {\n-    await context.octokit.rest.issues.addAssignees({\n+    await context.octokit.issues.addAssignees({","score":{"reward":1.14,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":76.74857142857144,"syllables":27,"sentences":1,"score":0.8325142857142857},"multiplier":1,"relevance":0.6}},{"id":1717247857,"content":"It is a bit risky to stringify the object without making sure that the content is not escaped. If there is any special character (`<`, `>`, `-->` etc) there is a change the whole comment break. It would be great to sanitize it before.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1717247857","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -22,7 +23,17 @@ export async function startStopTask(inputs: PluginInputs, env: Env) {\n   context.adapters = createAdapters(supabase, context);\n \n   if (context.eventName === \"issue_comment.created\") {\n-    await userStartStop(context);\n+    try {\n+      return await userStartStop(context);\n+    } catch (err) {\n+      let errorMessage;\n+      if (err instanceof LogReturn) {\n+        errorMessage = context.logger.error(`Failed to run comment evaluation. ${err.logMessage?.raw || err}`, { err });\n+      } else {\n+        errorMessage = context.logger.error(`Failed to run comment evaluation. ${err}`, { err });\n+      }\n+      await addCommentToIssue(context, `${errorMessage?.logMessage.diff}\\n<!--\\n${JSON.stringify(errorMessage?.metadata, null, 2)}\\n-->`);","score":{"reward":2.484,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":75.3486991869919,"syllables":57,"sentences":3,"score":0.846513008130081},"multiplier":1,"relevance":0.9}},{"id":1721030693,"content":"If the backticks are not escaped they indeed could probably break the comment. It would be safer to transform them to their related code `&#96` if you intend to include them in GitHub comments, which would be safer. Otherwise our logger should take care of adding these around the comment body.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1721030693","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -32,9 +32,56 @@ export async function startStopTask(inputs: PluginInputs, env: Env) {\n       } else {\n         errorMessage = context.logger.error(`Failed to run comment evaluation. ${err}`, { err });\n       }\n-      await addCommentToIssue(context, `${errorMessage?.logMessage.diff}\\n<!--\\n${JSON.stringify(errorMessage?.metadata, null, 2)}\\n-->`);\n+\n+      await addCommentToIssue(context, `${sanitizeDiff(errorMessage?.logMessage.diff)}\\n<!--\\n${sanitizeMetadata(errorMessage?.metadata)}\\n-->`);\n     }\n   } else {\n     context.logger.error(`Unsupported event: ${context.eventName}`);\n   }\n }\n+\n+function sanitizeDiff(diff?: LogReturn[\"logMessage\"][\"diff\"]): string {\n+  if (!diff) return \"\";\n+  // eslint-disable-next-line no-useless-escape\n+  const backticks = diff.match(/\\`\\`\\`/g);\n+  if (!backticks) return \"```\\n\" + diff + \"\\n```\";","score":{"reward":2.567,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":50,"wordValue":0.1,"result":2.38},"readability":{"fleschKincaid":69.78633333333336,"syllables":71,"sentences":3,"score":0.9021366666666664},"multiplier":1,"relevance":0.85}}],"reviewRewards":[{"reviews":[{"reviewId":2226789086,"effect":{"addition":123,"deletion":66},"reward":1.89,"priority":1},{"reviewId":2227276893,"effect":{"addition":6,"deletion":6},"reward":0.12,"priority":1},{"reviewId":2238693380,"effect":{"addition":32,"deletion":66},"reward":0.98,"priority":1},{"reviewId":2244372518,"effect":{"addition":48,"deletion":1},"reward":0.49,"priority":1},{"reviewId":2247467135,"effect":{"addition":1,"deletion":40},"reward":0.41,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 13.204 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>5</td><td>3.89</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.328</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>6.986</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11\" target=\"_blank\" rel=\"noopener\">#11</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+123 -66</td><td>1</td><td>1.89</td></tr><tr><td>+6 -6</td><td>1</td><td>0.12</td></tr><tr><td>+32 -66</td><td>1</td><td>0.98</td></tr><tr><td>+48 -1</td><td>1</td><td>0.49</td></tr><tr><td>+1 -40</td><td>1</td><td>0.41</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/6#issuecomment-2320389500\" target=\"_blank\" rel=\"noopener\">@0x4007 I think the max is 3 currently, regardless of collaborat&hellip;</a></h6></td><td><details><summary>2.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.328</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#pullrequestreview-2247467135\" target=\"_blank\" rel=\"noopener\">Good to go for me when you addressed the remaining comments.</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.48</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1708509443\" target=\"_blank\" rel=\"noopener\">Probably should use &#96;rest&#96;</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.315</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1709005585\" target=\"_blank\" rel=\"noopener\">Had a talk with @whilefoo and &#96;rest&#96; seems to be the mod&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.6</td><td>1</td><td>1.14</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1717247857\" target=\"_blank\" rel=\"noopener\">It is a bit risky to stringify the object without making sure th&hellip;</a></h6></td><td><details><summary>2.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.9</td><td>1</td><td>2.484</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1721030693\" target=\"_blank\" rel=\"noopener\">If the backticks are not escaped they indeed could probably brea&hellip;</a></h6></td><td><details><summary>2.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 50&#13;  wordValue: 0.1&#13;  result: 2.38&#13;</pre></details></td><td>0.85</td><td>1</td><td>2.567</td></tr></tbody></table></details>"},"whilefoo":{"total":20.728,"userId":139262667,"comments":[{"id":1702365269,"content":"before you already checked that `assignees` is empty, no?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1702365269","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -83,16 +94,29 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   const duration: number = calculateDurations(labels).shift() ?? 0;\n \n   const { id, login } = sender;\n-  const logMessage = logger.info(\"Task assigned successfully\", { duration, priceLabel, revision: commitHash?.substring(0, 7) });\n+  const logMessage = logger.info(\"Task assigned successfully\", {\n+    duration,\n+    priceLabel,\n+    revision: commitHash?.substring(0, 7),\n+    teammates: teammates,\n+    assignee: login,\n+    issue: issue.number,\n+  });\n \n   const assignmentComment = await generateAssignmentComment(context, issue.created_at, issue.number, id, duration);\n   const metadata = structuredMetadata.create(\"Assignment\", logMessage);\n \n-  // add assignee\n-  if (!assignees.map((i: Partial<Assignee>) => i?.login).includes(login)) {\n-    await addAssignees(context, issue.number, [login]);\n+  const toAssign = [];\n+\n+  for (const teammate of teammates) {\n+    if (!assignees.find((assignee: Partial<Assignee>) => assignee?.login?.toLowerCase() === teammate.toLowerCase())) {","score":{"reward":0.768,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":71.81500000000001,"syllables":12,"sentences":1,"score":0.8818499999999999},"multiplier":1,"relevance":0.8}},{"id":1702365990,"content":"isn't this code the same as in start function? then you can call this function instead of repeating code","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1702365990","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -111,3 +135,19 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n \n   return { output: \"Task assigned successfully\" };\n }\n+\n+async function handleTaskLimitChecks(username: string, context: Context, maxConcurrentTasks: number, logger: Context[\"logger\"], sender: string) {","score":{"reward":1.611,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":90.935,"syllables":25,"sentences":2,"score":0.69065},"multiplier":1,"relevance":0.9}},{"id":1705810398,"content":"throw error","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1705810398","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -8,19 +8,14 @@ export function isParentIssue(body: string) {\n }\n \n export async function getAssignedIssues(context: Context, username: string): Promise<Issue[]> {\n-  const payload = context.payload;\n+  const { payload } = context;\n \n   try {\n-    return await context.octokit.paginate(\n-      context.octokit.issues.listForRepo,\n-      {\n-        owner: payload.repository.owner.login,\n-        repo: payload.repository.name,\n-        state: ISSUE_TYPE.OPEN,\n-        per_page: 100,\n-      },\n-      ({ data: issues }) => issues.filter((issue: Issue) => !issue.pull_request && issue.assignee && issue.assignee.login === username)\n-    );\n+    return (await context.octokit.search\n+      .issuesAndPullRequests({\n+        q: `is:open assignee:${username} org:${payload.repository.owner.login}`,\n+      })\n+      .then((response) => response.data.items)) as Issue[];\n   } catch (err: unknown) {\n     context.logger.error(\"Fetching assigned issues failed!\", { error: err as Error });\n     return [];","score":{"reward":0.186,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":77.90500000000002,"syllables":3,"sentences":1,"score":0.8209499999999998},"multiplier":1,"relevance":0.6}},{"id":1705811864,"content":"```suggestion\r\n        q: `is:open is:issue assignee:${username} org:${payload.repository.owner.login}`,\r\n```\r\nto match only issues","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1705811864","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -8,19 +8,14 @@ export function isParentIssue(body: string) {\n }\n \n export async function getAssignedIssues(context: Context, username: string): Promise<Issue[]> {\n-  const payload = context.payload;\n+  const { payload } = context;\n \n   try {\n-    return await context.octokit.paginate(\n-      context.octokit.issues.listForRepo,\n-      {\n-        owner: payload.repository.owner.login,\n-        repo: payload.repository.name,\n-        state: ISSUE_TYPE.OPEN,\n-        per_page: 100,\n-      },\n-      ({ data: issues }) => issues.filter((issue: Issue) => !issue.pull_request && issue.assignee && issue.assignee.login === username)\n-    );\n+    return (await context.octokit.search\n+      .issuesAndPullRequests({\n+        q: `is:open assignee:${username} org:${payload.repository.owner.login}`,","score":{"reward":0.495,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.9}},{"id":1705813741,"content":"consider adding paginate because even though it will still work because we just want to know if user has issues or not, somebody else might use this function thinking it will return all issues.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1705813741","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -8,19 +8,14 @@ export function isParentIssue(body: string) {\n }\n \n export async function getAssignedIssues(context: Context, username: string): Promise<Issue[]> {\n-  const payload = context.payload;\n+  const { payload } = context;\n \n   try {\n-    return await context.octokit.paginate(\n-      context.octokit.issues.listForRepo,\n-      {\n-        owner: payload.repository.owner.login,\n-        repo: payload.repository.name,\n-        state: ISSUE_TYPE.OPEN,\n-        per_page: 100,\n-      },\n-      ({ data: issues }) => issues.filter((issue: Issue) => !issue.pull_request && issue.assignee && issue.assignee.login === username)\n-    );\n+    return (await context.octokit.search\n+      .issuesAndPullRequests({","score":{"reward":2.024,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":45.425000000000026,"syllables":51,"sentences":1,"score":0.8542500000000003},"multiplier":1,"relevance":0.8}},{"id":1712692003,"content":"consider throwing the error which `logger.error` returns and let it bubble up and add a catch at the start of the chain where it posts a comment\r\nfor reference [this](https://github.com/ubiquibot/conversation-rewards/blob/development/src/index.ts) is how it's done in `conversation-rewards`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1712692003","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -107,6 +104,37 @@ export async function closePullRequestForAnIssue(context: Context, issueNumber:\n   return logger.info(comment);\n }\n \n+async function confirmMultiAssignment(context: Context, issueNumber: number, usernames: string[]) {\n+  const { logger, payload, octokit } = context;\n+\n+  if (usernames.length < 2) {\n+    return;\n+  }\n+\n+  const { private: isPrivate } = payload.repository;\n+\n+  const {\n+    data: { assignees },\n+  } = await octokit.rest.issues.get({\n+    owner: payload.repository.owner.login,\n+    repo: payload.repository.name,\n+    issue_number: issueNumber,\n+  });\n+\n+  if (!assignees?.length) {\n+    const log = logger.error(\"We detected that this task was not assigned to anyone. Please report this to the maintainers.\", { issueNumber, usernames });\n+    await addCommentToIssue(context, log?.logMessage.diff as string);\n+    throw new Error(log?.logMessage.raw);","score":{"reward":3.519,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":64.9557142857143,"syllables":44,"sentences":1,"score":0.950442857142857},"multiplier":1,"relevance":0.9}},{"id":1712980874,"content":"I think here would be a suitable place to add this logic https://github.com/ubiquibot/command-start-stop/blob/b50f0a8e65c4eb390c825247f0e22e224faf5bff/src/worker.ts#L43","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1712980874","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -107,6 +104,37 @@ export async function closePullRequestForAnIssue(context: Context, issueNumber:\n   return logger.info(comment);\n }\n \n+async function confirmMultiAssignment(context: Context, issueNumber: number, usernames: string[]) {\n+  const { logger, payload, octokit } = context;\n+\n+  if (usernames.length < 2) {\n+    return;\n+  }\n+\n+  const { private: isPrivate } = payload.repository;\n+\n+  const {\n+    data: { assignees },\n+  } = await octokit.rest.issues.get({\n+    owner: payload.repository.owner.login,\n+    repo: payload.repository.name,\n+    issue_number: issueNumber,\n+  });\n+\n+  if (!assignees?.length) {\n+    const log = logger.error(\"We detected that this task was not assigned to anyone. Please report this to the maintainers.\", { issueNumber, usernames });\n+    await addCommentToIssue(context, log?.logMessage.diff as string);\n+    throw new Error(log?.logMessage.raw);","score":{"reward":1.827,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":66.40066666666667,"syllables":39,"sentences":3,"score":0.9359933333333333},"multiplier":1,"relevance":0.7}},{"id":1714458352,"content":"because you awaited the function inside expect, it will return a value so `toThrow` is meaningless, but it will still work because you catch the error.\r\nI recommend:\r\n```suggestion\r\n    await expect(userStartStop(context as unknown as Context)).rejects.toThrow(logReturn)\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1714458352","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -110,22 +110,53 @@ describe(\"User start/stop\", () => {\n \n     context.adapters = createAdapters(getSupabase(), context as unknown as Context);\n \n-    const output = await userStartStop(context as unknown as Context);\n+    const logReturn: LogReturn = {\n+      logMessage: {\n+        diff: \"```diff\\n! You are not assigned to this task\\n```\",\n+        level: \"error\",\n+        raw: \"You are not assigned to this task\",\n+        type: \"error\",\n+      },\n+      metadata: {\n+        caller: \"error\",\n+        issueNumber: 2,\n+        user: \"ubiquity\",\n+      },\n+    };\n \n-    expect(output).toEqual({ output: \"You are not assigned to this task\" });\n+    try {\n+      expect(await userStartStop(context as unknown as Context)).toThrow(logReturn);\n+    } catch (error) {\n+      expect(error).toEqual(logReturn);\n+    }","score":{"reward":2.043,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":67.79916666666671,"syllables":40,"sentences":2,"score":0.9220083333333329},"multiplier":1,"relevance":0.9}},{"id":1715481237,"content":"I'm not sure but it's in the [docs](https://jestjs.io/docs/expect#rejects) so it should work","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1715481237","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -110,22 +110,53 @@ describe(\"User start/stop\", () => {\n \n     context.adapters = createAdapters(getSupabase(), context as unknown as Context);\n \n-    const output = await userStartStop(context as unknown as Context);\n+    const logReturn: LogReturn = {\n+      logMessage: {\n+        diff: \"```diff\\n! You are not assigned to this task\\n```\",\n+        level: \"error\",\n+        raw: \"You are not assigned to this task\",\n+        type: \"error\",\n+      },\n+      metadata: {\n+        caller: \"error\",\n+        issueNumber: 2,\n+        user: \"ubiquity\",\n+      },\n+    };\n \n-    expect(output).toEqual({ output: \"You are not assigned to this task\" });\n+    try {\n+      expect(await userStartStop(context as unknown as Context)).toThrow(logReturn);\n+    } catch (error) {\n+      expect(error).toEqual(logReturn);\n+    }","score":{"reward":1.405,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":108.025,"syllables":14,"sentences":1,"score":1},"multiplier":1,"relevance":0.5}},{"id":1718775390,"content":"why do we need to add ```, the diff already has that?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1718775390","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -32,9 +32,56 @@ export async function startStopTask(inputs: PluginInputs, env: Env) {\n       } else {\n         errorMessage = context.logger.error(`Failed to run comment evaluation. ${err}`, { err });\n       }\n-      await addCommentToIssue(context, `${errorMessage?.logMessage.diff}\\n<!--\\n${JSON.stringify(errorMessage?.metadata, null, 2)}\\n-->`);\n+\n+      await addCommentToIssue(context, `${sanitizeDiff(errorMessage?.logMessage.diff)}\\n<!--\\n${sanitizeMetadata(errorMessage?.metadata)}\\n-->`);\n     }\n   } else {\n     context.logger.error(`Unsupported event: ${context.eventName}`);\n   }\n }\n+\n+function sanitizeDiff(diff?: LogReturn[\"logMessage\"][\"diff\"]): string {\n+  if (!diff) return \"\";\n+  // eslint-disable-next-line no-useless-escape\n+  const backticks = diff.match(/\\`\\`\\`/g);\n+  if (!backticks) return \"```\\n\" + diff + \"\\n```\";","score":{"reward":0.812,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":95.68818181818183,"syllables":13,"sentences":1,"score":0.6431181818181817},"multiplier":1,"relevance":0.7}},{"id":2271360361,"content":"I'm not completely sure but I think that's because for private repos you need Github subscription to have that option","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#issuecomment-2271360361","commentType":"PULL_COLLABORATOR","score":{"reward":0.812,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":61.45045454545455,"syllables":32,"sentences":1,"score":0.9854954545454545},"multiplier":1,"relevance":0.4}},{"id":2271678606,"content":"I think it's fine without the messages (most orgs will have paid plans)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#issuecomment-2271678606","commentType":"PULL_COLLABORATOR","score":{"reward":0.276,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":95.93928571428573,"syllables":16,"sentences":1,"score":0.6406071428571427},"multiplier":1,"relevance":0.2}}],"reviewRewards":[{"reviews":[{"reviewId":2216473593,"effect":{"addition":83,"deletion":30},"reward":1.13,"priority":1},{"reviewId":2221751702,"effect":{"addition":3,"deletion":30},"reward":0.33,"priority":1},{"reviewId":2231641478,"effect":{"addition":57,"deletion":26},"reward":0.83,"priority":1},{"reviewId":2234162038,"effect":{"addition":67,"deletion":31},"reward":0.98,"priority":1},{"reviewId":2240985507,"effect":{"addition":52,"deletion":75},"reward":1.27,"priority":1},{"reviewId":2248491480,"effect":{"addition":1,"deletion":40},"reward":0.41,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 20.728 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>6</td><td>4.95</td></tr><tr><td>Review</td><td>Comment</td><td>12</td><td>15.778</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11\" target=\"_blank\" rel=\"noopener\">#11</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+83 -30</td><td>1</td><td>1.13</td></tr><tr><td>+3 -30</td><td>1</td><td>0.33</td></tr><tr><td>+57 -26</td><td>1</td><td>0.83</td></tr><tr><td>+67 -31</td><td>1</td><td>0.98</td></tr><tr><td>+52 -75</td><td>1</td><td>1.27</td></tr><tr><td>+1 -40</td><td>1</td><td>0.41</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1702365269\" target=\"_blank\" rel=\"noopener\">before you already checked that &#96;assignees&#96; is empty, no?</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.768</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1702365990\" target=\"_blank\" rel=\"noopener\">isn't this code the same as in start function? then you can call&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.9</td><td>1</td><td>1.611</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1705810398\" target=\"_blank\" rel=\"noopener\">throw error</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.186</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1705811864\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionq: &#96;is:open is:issue assi&hellip;</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.495</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1705813741\" target=\"_blank\" rel=\"noopener\">consider adding paginate because even though it will still work &hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.024</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1712692003\" target=\"_blank\" rel=\"noopener\">consider throwing the error which &#96;logger.error&#96; returns&hellip;</a></h6></td><td><details><summary>3.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.9</td><td>1</td><td>3.519</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1712980874\" target=\"_blank\" rel=\"noopener\">I think here would be a suitable place to add this logic https:/&hellip;</a></h6></td><td><details><summary>2.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.827</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1714458352\" target=\"_blank\" rel=\"noopener\">because you awaited the function inside expect, it will return a&hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.9</td><td>1</td><td>2.043</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1715481237\" target=\"_blank\" rel=\"noopener\">I'm not sure but it's in the [docs](https://jestjs.io/docs/expec&hellip;</a></h6></td><td><details><summary>2.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.5</td><td>1</td><td>1.405</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#discussion_r1718775390\" target=\"_blank\" rel=\"noopener\">why do we need to add &#96;&#96;&#96;, the diff already has that?</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.812</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#issuecomment-2271360361\" target=\"_blank\" rel=\"noopener\">I'm not completely sure but I think that's because for private r&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.812</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/11#issuecomment-2271678606\" target=\"_blank\" rel=\"noopener\">I think it's fine without the messages (most orgs will have paid&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.276</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_321.json","json":{"gentlementlegen":{"userId":9807008,"total":30,"task":{"reward":30,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 30 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>30</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":15.92,"userId":4975670,"comments":[{"id":2746034581,"content":"@gentlementlegen","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/321#issuecomment-2746034581","commentType":"ISSUE_AUTHOR","score":{"reward":0.07,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":5,"words":{"wordCount":1,"wordValue":0.1,"result":0.14},"readability":{"fleschKincaid":-217.17999999999998,"syllables":5,"sentences":1,"score":0},"multiplier":1,"relevance":0.1}},{"id":2940943842,"content":"Did some thorough testing (I set up a sandbox environment and everything) this is what the formula is supposed to be. We can normalize the config to multiplier 1 after we enable this. \n```js\nfunction calculateExponentialScore(wordCount: number): number {\n  return Math.pow(wordCount, 0.85) * Math.exp(-wordCount / 100);\n}\n```\nThis is needed for more accurate XP calculation.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/321","commentType":"ISSUE_SPECIFICATION","score":{"reward":2.84,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":56.7779674796748,"syllables":66,"sentences":3,"score":0.967779674796748},"multiplier":1,"relevance":1}},{"id":2709339341,"content":"Now that the exponent is fixed, this implies we must normalize all word count to $1 across every element and contributor designation. \r\nWe also need to support capturing double posting. Consolidate both comments into a single score to prevent gaming this exponent. \r\nUsing relevance and priority level we can reduce the score accordingly. Regarding word score:\r\n```\r\nP5=1.0\r\np4=0.8\r\np3=0.6\r\np2=0.4\r\np1=0.2\r\n```\r\nAnd relevance of course multiplies.\r\nRelevance prompt can be simplified quite a bit. I think we should only compare the spec and the comment. If the conversation veers off topic (by definition the spec) then even if the contributor is helping to answer a question we shouldn't apply a high relevance score. We can have a separate system for that like helpfulness and answering other peoples questions.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/323#pullrequestreview-2709339341","commentType":"PULL_COLLABORATOR","score":{"reward":12.56,"formatting":{"content":{"p":{"score":0,"elementCount":5}},"result":0},"priority":5,"words":{"wordCount":124,"wordValue":0.1,"result":2.46},"readability":{"fleschKincaid":52.30539426523299,"syllables":206,"sentences":9,"score":0.9230539426523299},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2709339341,"effect":{"addition":7,"deletion":2},"reward":0.45,"priority":5}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/323"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 15.92 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.45</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>2.84</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.07</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>12.56</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/323\" target=\"_blank\" rel=\"noopener\">#323</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+7 -2</td><td>5</td><td>0.45</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/321\" target=\"_blank\" rel=\"noopener\">Did some thorough testing (I set up a sandbox environment and ev&hellip;</a></h6></td><td><details><summary>2.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>1</td><td>1</td><td>2.84</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/321#issuecomment-2746034581\" target=\"_blank\" rel=\"noopener\">@gentlementlegen</a></h6></td><td><details><summary>0.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0.1&#13;  result: 0.14&#13;</pre></details></td><td>0.1</td><td>5</td><td>0.07</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/323#pullrequestreview-2709339341\" target=\"_blank\" rel=\"noopener\">Now that the exponent is fixed, this implies we must normalize a&hellip;</a></h6></td><td><details><summary>2.46</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;  result: 0&#13;regex:&#13;  wordCount: 124&#13;  wordValue: 0.1&#13;  result: 2.46&#13;</pre></details></td><td>0.8</td><td>5</td><td>12.56</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_300.json","json":{"gentlementlegen":{"userId":9807008,"total":50,"task":{"reward":50,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 50 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":28.094,"userId":4975670,"comments":[{"id":2719466720,"content":"@gentlementlegen some edge cases to get around to","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/300#issuecomment-2719466720","commentType":"ISSUE_AUTHOR","score":{"reward":1.584,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":61.24000000000001,"syllables":13,"sentences":1,"score":0.9875999999999999},"multiplier":1,"relevance":0.8}},{"id":2725324886,"content":"Yes the org config is fine.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/300#issuecomment-2725324886","commentType":"ISSUE_AUTHOR","score":{"reward":0.474,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":102.045,"syllables":7,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}},{"id":2728394921,"content":"Maybe we can automatically retry the run if this happens?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/300#issuecomment-2728394921","commentType":"ISSUE_AUTHOR","score":{"reward":2.07,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":52.86500000000001,"syllables":17,"sentences":1,"score":0.9286500000000001},"multiplier":1,"relevance":0.9}},{"id":2743539609,"content":"There obviously some bug that needs diagnosis","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/300#issuecomment-2743539609","commentType":"ISSUE_AUTHOR","score":{"reward":1.246,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":54.70142857142861,"syllables":12,"sentences":1,"score":0.947014285714286},"multiplier":1,"relevance":0.7}},{"id":2915484556,"content":"- \"Relevance / Comment length mismatch!\" https://github.com/ubiquity/business-development/issues/91#issuecomment-2719393191\n- \"Invalid Permits\" https://github.com/ubiquity-os/.github/issues/1#issuecomment-2719451765","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/300","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.34,"formatting":{"content":{"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2.2},"priority":1,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":22.595461538461564,"syllables":55,"sentences":5,"score":0.6259546153846156},"multiplier":1,"relevance":1}},{"id":2001236290,"content":"Maybe 5 retries. It shouldn't fail so many times but we saw it fail at least twice consecutively.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2001236290","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -113,22 +114,57 @@ export class ContentEvaluatorModule extends BaseModule {\n     const commentsWithScore: GithubCommentScore[] = [...comments];\n     const { commentsToEvaluate, prCommentsToEvaluate } = this._splitCommentsByPrompt(commentsWithScore);\n \n-    const relevancesByAi = await this._evaluateComments(\n-      specificationBody,\n-      commentsToEvaluate,\n-      allComments,\n-      prCommentsToEvaluate\n-    );\n+    const relevancesByAi = await retry(\n+      async () => {\n+        const relevances = await this._evaluateComments(\n+          specificationBody,\n+          commentsToEvaluate,\n+          allComments,\n+          prCommentsToEvaluate\n+        );\n \n-    if (Object.keys(relevancesByAi).length !== commentsToEvaluate.length + prCommentsToEvaluate.length) {\n-      throw this.context.logger.error(\"Relevance / Comment length mismatch!\", {\n-        expectedRelevances: commentsToEvaluate.length + prCommentsToEvaluate.length,\n-        receivedRelevances: Object.keys(relevancesByAi).length,\n-        relevancesByAi,\n-        commentsToEvaluate,\n-        prCommentsToEvaluate,\n-      });\n-    }\n+        if (Object.keys(relevances).length !== commentsToEvaluate.length + prCommentsToEvaluate.length) {\n+          throw this.context.logger.error(\"Relevance / Comment length mismatch!\", {\n+            expectedRelevances: commentsToEvaluate.length + prCommentsToEvaluate.length,\n+            receivedRelevances: Object.keys(relevances).length,\n+            relevances,\n+            commentsToEvaluate,\n+            prCommentsToEvaluate,\n+          });\n+        }\n+\n+        return relevances;\n+      },\n+      {\n+        maxRetries: this._configuration?.openAi.maxRetries ?? 3,","score":{"reward":2.832,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":81.42407894736841,"syllables":26,"sentences":2,"score":0.7857592105263158},"multiplier":1,"relevance":0.8}},{"id":2001237358,"content":"Warning?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2001237358","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -19,7 +19,7 @@ export class EventIncentivesModule extends BaseModule {\n \n   get enabled(): boolean {\n     if (!Value.Check(eventIncentivesConfigurationType, this.context.config.incentives.eventIncentives)) {\n-      this.context.logger.error(\"Invalid / missing configuration detected for PermitGenerationModule, disabling.\");\n+      this.context.logger.error(\"Invalid / missing configuration detected for EventIncentivesModule, disabling.\");","score":{"reward":0.238,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":1,"wordValue":0.1,"result":0.14},"readability":{"fleschKincaid":36.62000000000003,"syllables":2,"sentences":1,"score":0.7662000000000003},"multiplier":1,"relevance":0.7}},{"id":2001238497,"content":"I think `Error :` should be banned\r\nYou can just post the error I think its obvious","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2001238497","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -321,74 +357,47 @@ export class ContentEvaluatorModule extends BaseModule {\n       }\n     }\n \n+    if (\n+      userIssueComments.length !== Object.keys(commentRelevances).length ||\n+      userPrComments.length !== Object.keys(prCommentRelevances).length\n+    ) {\n+      this.context.logger.warn(\n+        `[_evaluateComments]: Result mismatch. Evaluated ${userIssueComments.length} user issue comments that gave ${Object.keys(commentRelevances).length} comment relevance, and ${userPrComments.length} that gave ${Object.keys(prCommentRelevances).length} pr comment relevance.`\n+      );\n+    }\n     return { ...commentRelevances, ...prCommentRelevances };\n   }\n \n   async _submitPrompt(prompt: string, maxTokens: number): Promise<Relevances> {\n     try {\n-      const relevances = await retry(\n-        async () => {\n-          const res = await this._openAi.chat.completions.create({\n-            model: this._configuration?.openAi.model ?? \"gpt-4o-2024-08-06\",\n-            response_format: {\n-              type: \"json_object\",\n-            },\n-            messages: [\n-              {\n-                role: \"system\",\n-                content: prompt,\n-              },\n-            ],\n-            max_tokens: maxTokens,\n-            top_p: 1,\n-            temperature: 1,\n-            frequency_penalty: 0,\n-            presence_penalty: 0,\n-          });\n-          const rawResponse = String(res.choices[0].message.content);\n-          this.context.logger.info(`OpenAI raw response (using max_tokens: ${maxTokens}): ${rawResponse}`);\n-\n-          const relevances = Value.Decode(openAiRelevanceResponseSchema, JSON.parse(rawResponse));\n-          this.context.logger.info(`Relevances by OpenAI: ${JSON.stringify(relevances)}`);\n-\n-          return relevances;\n+      const res = await this._openAi.chat.completions.create({\n+        model: this._configuration?.openAi.model ?? \"gpt-4o-2024-08-06\",\n+        response_format: {\n+          type: \"json_object\",\n         },\n-        {\n-          maxRetries: this._configuration?.openAi.maxRetries ?? 3,\n-          onError: async (error) => {\n-            if (this.context.config.incentives.githubComment?.post) {\n-              await postComment(this.context, this.context.logger.ok(\"Results are being retried\", { err: error }), {\n-                updateComment: true,\n-              });\n-            }\n+        messages: [\n+          {\n+            role: \"system\",\n+            content: prompt,\n           },\n-          isErrorRetryable: (error) => {\n-            if (error instanceof OpenAI.APIError && error.status) {\n-              if ([500, 503].includes(error.status)) {\n-                return true;\n-              }\n-              if (error.status === 429 && error.headers) {\n-                const retryAfterTokens = error.headers[\"x-ratelimit-reset-tokens\"];\n-                const retryAfterRequests = error.headers[\"x-ratelimit-reset-requests\"];\n-                if (!retryAfterTokens || !retryAfterRequests) {\n-                  return true;\n-                }\n-                const retryAfter = Math.max(ms(retryAfterTokens as StringValue), ms(retryAfterRequests as StringValue));\n-                return Number.isFinite(retryAfter) ? retryAfter : true;\n-              }\n-            }\n-            // Retry if there is a SyntaxError caused by malformed JSON or TypeBoxError caused by incorrect JSON from OpenAI\n-            return error instanceof SyntaxError || error instanceof TypeBoxError;\n-          },\n-        }\n-      );\n+        ],\n+        max_tokens: maxTokens,\n+        top_p: 1,\n+        temperature: 1,\n+        frequency_penalty: 0,\n+        presence_penalty: 0,\n+      });\n+      const rawResponse = String(res.choices[0].message.content);\n+      this.context.logger.info(`OpenAI raw response (using max_tokens: ${maxTokens}): ${rawResponse}`);\n+\n+      const relevances = Value.Decode(openAiRelevanceResponseSchema, JSON.parse(rawResponse));\n+      this.context.logger.info(`Relevances by OpenAI: ${JSON.stringify(relevances)}`);\n       return relevances;\n     } catch (e) {\n-      throw new Error(\n-        this.context.logger.error(`Invalid response type received from openai while evaluating: \\n\\nError: ${e}`, {\n-          error: e as Error,\n-        }).logMessage.raw\n-      );\n+      this.context.logger.error(`Invalid response type received from openai while evaluating: \\n\\nError: ${e}`, {","score":{"reward":1.752,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":90.09000000000002,"syllables":18,"sentences":1,"score":0.6990999999999998},"multiplier":1,"relevance":0.6}},{"id":2001240668,"content":"Maybe we should default to claude. Also we should use openrouter","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2001240668","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -321,74 +357,47 @@ export class ContentEvaluatorModule extends BaseModule {\n       }\n     }\n \n+    if (\n+      userIssueComments.length !== Object.keys(commentRelevances).length ||\n+      userPrComments.length !== Object.keys(prCommentRelevances).length\n+    ) {\n+      this.context.logger.warn(\n+        `[_evaluateComments]: Result mismatch. Evaluated ${userIssueComments.length} user issue comments that gave ${Object.keys(commentRelevances).length} comment relevance, and ${userPrComments.length} that gave ${Object.keys(prCommentRelevances).length} pr comment relevance.`\n+      );\n+    }\n     return { ...commentRelevances, ...prCommentRelevances };\n   }\n \n   async _submitPrompt(prompt: string, maxTokens: number): Promise<Relevances> {\n     try {\n-      const relevances = await retry(\n-        async () => {\n-          const res = await this._openAi.chat.completions.create({\n-            model: this._configuration?.openAi.model ?? \"gpt-4o-2024-08-06\",\n-            response_format: {\n-              type: \"json_object\",\n-            },\n-            messages: [\n-              {\n-                role: \"system\",\n-                content: prompt,\n-              },\n-            ],\n-            max_tokens: maxTokens,\n-            top_p: 1,\n-            temperature: 1,\n-            frequency_penalty: 0,\n-            presence_penalty: 0,\n-          });\n-          const rawResponse = String(res.choices[0].message.content);\n-          this.context.logger.info(`OpenAI raw response (using max_tokens: ${maxTokens}): ${rawResponse}`);\n-\n-          const relevances = Value.Decode(openAiRelevanceResponseSchema, JSON.parse(rawResponse));\n-          this.context.logger.info(`Relevances by OpenAI: ${JSON.stringify(relevances)}`);\n-\n-          return relevances;\n+      const res = await this._openAi.chat.completions.create({\n+        model: this._configuration?.openAi.model ?? \"gpt-4o-2024-08-06\",","score":{"reward":1.21,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":78.19795454545455,"syllables":16,"sentences":2,"score":0.8180204545454545},"multiplier":1,"relevance":0.5}},{"id":2001244334,"content":"```suggestion\r\n          throw this.context.logger.error(\"There was a mismatch between the relevance scores and amount of comments.\", {\r\n```\r\nThis errors should be written more naturally.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2001244334","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -113,22 +114,57 @@ export class ContentEvaluatorModule extends BaseModule {\n     const commentsWithScore: GithubCommentScore[] = [...comments];\n     const { commentsToEvaluate, prCommentsToEvaluate } = this._splitCommentsByPrompt(commentsWithScore);\n \n-    const relevancesByAi = await this._evaluateComments(\n-      specificationBody,\n-      commentsToEvaluate,\n-      allComments,\n-      prCommentsToEvaluate\n-    );\n+    const relevancesByAi = await retry(\n+      async () => {\n+        const relevances = await this._evaluateComments(\n+          specificationBody,\n+          commentsToEvaluate,\n+          allComments,\n+          prCommentsToEvaluate\n+        );\n \n-    if (Object.keys(relevancesByAi).length !== commentsToEvaluate.length + prCommentsToEvaluate.length) {\n-      throw this.context.logger.error(\"Relevance / Comment length mismatch!\", {\n-        expectedRelevances: commentsToEvaluate.length + prCommentsToEvaluate.length,\n-        receivedRelevances: Object.keys(relevancesByAi).length,\n-        relevancesByAi,\n-        commentsToEvaluate,\n-        prCommentsToEvaluate,\n-      });\n-    }\n+        if (Object.keys(relevances).length !== commentsToEvaluate.length + prCommentsToEvaluate.length) {\n+          throw this.context.logger.error(\"Relevance / Comment length mismatch!\", {","score":{"reward":1.602,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":54.70142857142861,"syllables":12,"sentences":1,"score":0.947014285714286},"multiplier":1,"relevance":0.9}},{"id":2001247670,"content":"I think we have a single task to update every plugin in one go.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2001247670","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -321,74 +357,47 @@ export class ContentEvaluatorModule extends BaseModule {\n       }\n     }\n \n+    if (\n+      userIssueComments.length !== Object.keys(commentRelevances).length ||\n+      userPrComments.length !== Object.keys(prCommentRelevances).length\n+    ) {\n+      this.context.logger.warn(\n+        `[_evaluateComments]: Result mismatch. Evaluated ${userIssueComments.length} user issue comments that gave ${Object.keys(commentRelevances).length} comment relevance, and ${userPrComments.length} that gave ${Object.keys(prCommentRelevances).length} pr comment relevance.`\n+      );\n+    }\n     return { ...commentRelevances, ...prCommentRelevances };\n   }\n \n   async _submitPrompt(prompt: string, maxTokens: number): Promise<Relevances> {\n     try {\n-      const relevances = await retry(\n-        async () => {\n-          const res = await this._openAi.chat.completions.create({\n-            model: this._configuration?.openAi.model ?? \"gpt-4o-2024-08-06\",\n-            response_format: {\n-              type: \"json_object\",\n-            },\n-            messages: [\n-              {\n-                role: \"system\",\n-                content: prompt,\n-              },\n-            ],\n-            max_tokens: maxTokens,\n-            top_p: 1,\n-            temperature: 1,\n-            frequency_penalty: 0,\n-            presence_penalty: 0,\n-          });\n-          const rawResponse = String(res.choices[0].message.content);\n-          this.context.logger.info(`OpenAI raw response (using max_tokens: ${maxTokens}): ${rawResponse}`);\n-\n-          const relevances = Value.Decode(openAiRelevanceResponseSchema, JSON.parse(rawResponse));\n-          this.context.logger.info(`Relevances by OpenAI: ${JSON.stringify(relevances)}`);\n-\n-          return relevances;\n+      const res = await this._openAi.chat.completions.create({\n+        model: this._configuration?.openAi.model ?? \"gpt-4o-2024-08-06\",","score":{"reward":0.58,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":77.81071428571428,"syllables":19,"sentences":1,"score":0.8218928571428572},"multiplier":1,"relevance":0.2}},{"id":2006252451,"content":"I wrote the change to this in another review for you","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2006252451","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -55,7 +56,7 @@ export class ContentEvaluatorModule extends BaseModule {\n \n   get enabled(): boolean {\n     if (!this._configuration) {\n-      this.context.logger.error(\"Invalid / missing configuration detected for ContentEvaluatorModule, disabling.\");\n+      this.context.logger.warn(\"Invalid / missing configuration detected for ContentEvaluatorModule, disabling.\");","score":{"reward":1.888,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":87.99727272727276,"syllables":14,"sentences":1,"score":0.7200272727272724},"multiplier":1,"relevance":0.8}},{"id":2006253693,"content":"All references to open ai should be generalized to LLM","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2006253693","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -321,74 +357,47 @@ export class ContentEvaluatorModule extends BaseModule {\n       }\n     }\n \n+    if (\n+      userIssueComments.length !== Object.keys(commentRelevances).length ||\n+      userPrComments.length !== Object.keys(prCommentRelevances).length\n+    ) {\n+      this.context.logger.warn(\n+        `[_evaluateComments]: Result mismatch. Evaluated ${userIssueComments.length} user issue comments that gave ${Object.keys(commentRelevances).length} comment relevance, and ${userPrComments.length} that gave ${Object.keys(prCommentRelevances).length} pr comment relevance.`\n+      );\n+    }\n     return { ...commentRelevances, ...prCommentRelevances };\n   }\n \n   async _submitPrompt(prompt: string, maxTokens: number): Promise<Relevances> {\n     try {\n-      const relevances = await retry(\n-        async () => {\n-          const res = await this._openAi.chat.completions.create({\n-            model: this._configuration?.openAi.model ?? \"gpt-4o-2024-08-06\",\n-            response_format: {\n-              type: \"json_object\",\n-            },\n-            messages: [\n-              {\n-                role: \"system\",\n-                content: prompt,\n-              },\n-            ],\n-            max_tokens: maxTokens,\n-            top_p: 1,\n-            temperature: 1,\n-            frequency_penalty: 0,\n-            presence_penalty: 0,\n-          });\n-          const rawResponse = String(res.choices[0].message.content);\n-          this.context.logger.info(`OpenAI raw response (using max_tokens: ${maxTokens}): ${rawResponse}`);\n-\n-          const relevances = Value.Decode(openAiRelevanceResponseSchema, JSON.parse(rawResponse));\n-          this.context.logger.info(`Relevances by OpenAI: ${JSON.stringify(relevances)}`);\n-\n-          return relevances;\n+      const res = await this._openAi.chat.completions.create({\n+        model: this._configuration?.openAi.model ?? \"gpt-4o-2024-08-06\",\n+        response_format: {\n+          type: \"json_object\",\n         },\n-        {\n-          maxRetries: this._configuration?.openAi.maxRetries ?? 3,\n-          onError: async (error) => {\n-            if (this.context.config.incentives.githubComment?.post) {\n-              await postComment(this.context, this.context.logger.ok(\"Results are being retried\", { err: error }), {\n-                updateComment: true,\n-              });\n-            }\n+        messages: [\n+          {\n+            role: \"system\",\n+            content: prompt,\n           },\n-          isErrorRetryable: (error) => {\n-            if (error instanceof OpenAI.APIError && error.status) {\n-              if ([500, 503].includes(error.status)) {\n-                return true;\n-              }\n-              if (error.status === 429 && error.headers) {\n-                const retryAfterTokens = error.headers[\"x-ratelimit-reset-tokens\"];\n-                const retryAfterRequests = error.headers[\"x-ratelimit-reset-requests\"];\n-                if (!retryAfterTokens || !retryAfterRequests) {\n-                  return true;\n-                }\n-                const retryAfter = Math.max(ms(retryAfterTokens as StringValue), ms(retryAfterRequests as StringValue));\n-                return Number.isFinite(retryAfter) ? retryAfter : true;\n-              }\n-            }\n-            // Retry if there is a SyntaxError caused by malformed JSON or TypeBoxError caused by incorrect JSON from OpenAI\n-            return error instanceof SyntaxError || error instanceof TypeBoxError;\n-          },\n-        }\n-      );\n+        ],\n+        max_tokens: maxTokens,\n+        top_p: 1,\n+        temperature: 1,\n+        frequency_penalty: 0,\n+        presence_penalty: 0,\n+      });\n+      const rawResponse = String(res.choices[0].message.content);\n+      this.context.logger.info(`OpenAI raw response (using max_tokens: ${maxTokens}): ${rawResponse}`);\n+\n+      const relevances = Value.Decode(openAiRelevanceResponseSchema, JSON.parse(rawResponse));\n+      this.context.logger.info(`Relevances by OpenAI: ${JSON.stringify(relevances)}`);","score":{"reward":1.638,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":61.32500000000002,"syllables":16,"sentences":1,"score":0.9867499999999998},"multiplier":1,"relevance":0.7}},{"id":2006254228,"content":"Follow the syntax I said in the other review.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2006254228","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,7 +15,7 @@ export class DataPurgeModule extends BaseModule {\n \n   get enabled(): boolean {\n     if (!this._configuration) {\n-      this.context.logger.error(\"Invalid / missing configuration detected for DataPurgeModule, disabling.\");\n+      this.context.logger.warn(\"Invalid / missing configuration detected for DataPurgeModule, disabling.\");","score":{"reward":1.26,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":75.50000000000003,"syllables":13,"sentences":1,"score":0.8449999999999998},"multiplier":1,"relevance":0.6}},{"id":2006255033,"content":"Yes this syntax","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2006255033","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -287,9 +287,9 @@ describe(\"Modules tests\", () => {\n     ];\n     await expect(processor.run(activity)).rejects.toMatchObject({\n       logMessage: {\n-        diff: \"> [!CAUTION]\\n> Relevance / Comment length mismatch!\",\n+        diff: \"> [!CAUTION]\\n> There was a mismatch between the relevance scores and amount of comments.\",","score":{"reward":0.756,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":90.99000000000004,"syllables":4,"sentences":1,"score":0.6900999999999996},"multiplier":1,"relevance":0.9}},{"id":2728383658,"content":"I can't say that this qualifies as a solution.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#issuecomment-2728383658","commentType":"PULL_COLLABORATOR","score":{"reward":0.224,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":78.24500000000002,"syllables":14,"sentences":1,"score":0.8175499999999998},"multiplier":1,"relevance":0.1}}],"reviewRewards":[{"reviews":[{"reviewId":2694887683,"effect":{"addition":162,"deletion":80},"reward":4.84,"priority":2},{"reviewId":2703780223,"effect":{"addition":14,"deletion":14},"reward":0.56,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 28.094 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>5.4</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.34</td></tr><tr><td>Issue</td><td>Comment</td><td>4</td><td>5.374</td></tr><tr><td>Review</td><td>Comment</td><td>11</td><td>13.98</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306\" target=\"_blank\" rel=\"noopener\">#306</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+162 -80</td><td>2</td><td>4.84</td></tr><tr><td>+14 -14</td><td>2</td><td>0.56</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/300\" target=\"_blank\" rel=\"noopener\">- \"Relevance / Comment length mismatch!\" https://github.com/ubiq&hellip;</a></h6></td><td><details><summary>2.81</summary><pre>content:&#13;  content:&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2.2&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>1</td><td>1</td><td>3.34</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/300#issuecomment-2719466720\" target=\"_blank\" rel=\"noopener\">@gentlementlegen some edge cases to get around to</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.584</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/300#issuecomment-2725324886\" target=\"_blank\" rel=\"noopener\">Yes the org config is fine.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.474</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/300#issuecomment-2728394921\" target=\"_blank\" rel=\"noopener\">Maybe we can automatically retry the run if this happens?</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.9</td><td>2</td><td>2.07</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/300#issuecomment-2743539609\" target=\"_blank\" rel=\"noopener\">There obviously some bug that needs diagnosis</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.246</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2001236290\" target=\"_blank\" rel=\"noopener\">Maybe 5 retries. It shouldn't fail so many times but we saw it f&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.832</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2001237358\" target=\"_blank\" rel=\"noopener\">Warning?</a></h6></td><td><details><summary>0.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0.1&#13;  result: 0.14&#13;</pre></details></td><td>0.7</td><td>2</td><td>0.238</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2001238497\" target=\"_blank\" rel=\"noopener\">I think &#96;Error :&#96; should be bannedYou can just post th&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.6</td><td>2</td><td>1.752</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2001240668\" target=\"_blank\" rel=\"noopener\">Maybe we should default to claude. Also we should use openrouter</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.5</td><td>2</td><td>1.21</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2001244334\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionthrow this.context.logger.e&hellip;</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.9</td><td>2</td><td>1.602</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2001247670\" target=\"_blank\" rel=\"noopener\">I think we have a single task to update every plugin in one go.</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.58</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2006252451\" target=\"_blank\" rel=\"noopener\">I wrote the change to this in another review for you</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.888</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2006253693\" target=\"_blank\" rel=\"noopener\">All references to open ai should be generalized to LLM</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.638</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2006254228\" target=\"_blank\" rel=\"noopener\">Follow the syntax I said in the other review.</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.6</td><td>2</td><td>1.26</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#discussion_r2006255033\" target=\"_blank\" rel=\"noopener\">Yes this syntax</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.9</td><td>2</td><td>0.756</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/306#issuecomment-2728383658\" target=\"_blank\" rel=\"noopener\">I can't say that this qualifies as a solution.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.224</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-disqualifier_59.json","json":{"gentlementlegen":{"userId":9807008,"total":77.73,"task":{"reward":75,"multiplier":1},"comments":[{"id":2527466338,"content":"Just to make sure, when the PR is converted back to a draft it still sends a reminder message correct?\nThe closing of the pull-request is currently handled by https://github.com/ubiquity-os-marketplace/command-start-stop.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59#issuecomment-2527466338","commentType":"ISSUE_ASSIGNEE","score":{"reward":2.73,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":74.33230769230771,"syllables":55,"sentences":3,"score":0.8566769230769229},"multiplier":0.25,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 77.73 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.73</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59#issuecomment-2527466338\" target=\"_blank\" rel=\"noopener\">Just to make sure, when the PR is converted back to a draft it s&hellip;</a></h6></td><td><details><summary>2.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>1</td><td>3</td><td>2.73</td></tr></tbody></table></details>"},"0x4007":{"total":30.33,"userId":4975670,"comments":[{"id":2527748996,"content":"Yes\nWhen disqualified it needs to close the pull","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59#issuecomment-2527748996","commentType":"ISSUE_AUTHOR","score":{"reward":2.781,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":84.90000000000003,"syllables":12,"sentences":1,"score":0.7509999999999997},"multiplier":1,"relevance":0.9}},{"id":2533071849,"content":"Let me try and think through the scenarios, ✅ means \"success condition\" or the assignee is not at fault and should not be penalized:\r\n- Assignee just opened a pull and nobody reviewed yet. ✅\r\n- Assignee received an approval. ✅\r\n- Assignee received a rejection. ❌\r\n- Assignee received a review comment. ❌\r\n- Assignee stopped commenting or committing, excluding one of the previously defined success conditions. ❌","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59#issuecomment-2533071849","commentType":"ISSUE_AUTHOR","score":{"reward":9.048,"formatting":{"content":{"p":{"score":0,"elementCount":6},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":5}},"result":0.5},"priority":3,"words":{"wordCount":58,"wordValue":0.1,"result":2.49},"readability":{"fleschKincaid":46.785402298850585,"syllables":103,"sentences":6,"score":0.8678540229885059},"multiplier":1,"relevance":0.8}},{"id":2533740287,"content":"It's not accepted so there is work they need to do, even if it means to answer the question.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59#issuecomment-2533740287","commentType":"ISSUE_AUTHOR","score":{"reward":3.801,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":85.01500000000003,"syllables":24,"sentences":1,"score":0.7498499999999997},"multiplier":1,"relevance":0.7}},{"id":2535526540,"content":"I have mixed feelings on this based on how we use comments in practice, but the way you frame it is logical and makes sense. Lets leave the pull request state as finalized in this situation then.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59#issuecomment-2535526540","commentType":"ISSUE_AUTHOR","score":{"reward":6.24,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":80.59263513513515,"syllables":47,"sentences":2,"score":0.7940736486486485},"multiplier":1,"relevance":0.8}},{"id":2538600194,"content":"We need to enable review comment incentives for everybody. Glad we have whilefoo for testing. @whilefoo perhaps you can open the pull and fix that. \nIt reminds me but we should also improve how it handles word count and long comments (this should be penalized/disincentivized heavily)","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59#issuecomment-2538600194","commentType":"ISSUE_AUTHOR","score":{"reward":3.6,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":47,"wordValue":0.1,"result":2.33},"readability":{"fleschKincaid":56.30875,"syllables":77,"sentences":4,"score":0.9630875},"multiplier":1,"relevance":0.4}},{"id":2717486939,"content":"- When a follow up occurs, the pull request should be turned into a draft.\r\n- If it is already a draft, only leave the follow up message. \r\n- When a disqualification occurs, the pull request should be closed. \r\nContext: https://github.com/ubiquity-os/plugins-wishlist/issues/60#issuecomment-2516409360\r\nRationale: when a contributor converts from draft to ready, then that signals it is ready for review.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.86,"formatting":{"content":{"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"p":{"score":0,"elementCount":5},"a":{"score":1,"elementCount":1}},"result":1.3},"priority":1,"words":{"wordCount":54,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":59.581538461538486,"syllables":103,"sentences":5,"score":0.9958153846153849},"multiplier":1,"relevance":1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/61"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 30.33 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.86</td></tr><tr><td>Issue</td><td>Comment</td><td>5</td><td>25.47</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59\" target=\"_blank\" rel=\"noopener\">- When a follow up occurs, the pull request should be turned int&hellip;</a></h6></td><td><details><summary>3.74</summary><pre>content:&#13;  content:&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.3&#13;regex:&#13;  wordCount: 54&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>1</td><td>1</td><td>4.86</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59#issuecomment-2527748996\" target=\"_blank\" rel=\"noopener\">YesWhen disqualified it needs to close the pull</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.781</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59#issuecomment-2533071849\" target=\"_blank\" rel=\"noopener\">Let me try and think through the scenarios, ✅ means \"success con&hellip;</a></h6></td><td><details><summary>2.99</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 5&#13;  result: 0.5&#13;regex:&#13;  wordCount: 58&#13;  wordValue: 0.1&#13;  result: 2.49&#13;</pre></details></td><td>0.8</td><td>3</td><td>9.048</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59#issuecomment-2533740287\" target=\"_blank\" rel=\"noopener\">It's not accepted so there is work they need to do, even if it m&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.801</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59#issuecomment-2535526540\" target=\"_blank\" rel=\"noopener\">I have mixed feelings on this based on how we use comments in pr&hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>0.8</td><td>3</td><td>6.24</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59#issuecomment-2538600194\" target=\"_blank\" rel=\"noopener\">We need to enable review comment incentives for everybody. Glad &hellip;</a></h6></td><td><details><summary>2.33</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 47&#13;  wordValue: 0.1&#13;  result: 2.33&#13;</pre></details></td><td>0.4</td><td>3</td><td>3.6</td></tr></tbody></table></details>"},"whilefoo":{"total":23.505,"userId":139262667,"comments":[{"id":2533038328,"content":"What if the user is waiting for a PR review? in that case it doesn't make sense to turn it into draft","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59#issuecomment-2533038328","commentType":"ISSUE_COLLABORATOR","score":{"reward":5.184,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":95.84945652173916,"syllables":27,"sentences":2,"score":0.6415054347826085},"multiplier":1,"relevance":0.9}},{"id":1878989444,"content":"I think we should leave it at `0.34.3` same as in SDK because I noticed even between patch releases there are Typescript errors when passing the schema to `createPlugin`","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/61#discussion_r1878989444","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -32,13 +32,12 @@\n   \"dependencies\": {\n     \"@octokit/graphql-schema\": \"^15.25.0\",\n     \"@octokit/rest\": \"^21.0.2\",\n-    \"@sinclair/typebox\": \"0.34.3\",\n-    \"@ubiquity-os/plugin-sdk\": \"^1.1.0\",\n+    \"@sinclair/typebox\": \"0.34.11\",","score":{"reward":5.52,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":63.49666666666667,"syllables":37,"sentences":1,"score":0.9650333333333333},"multiplier":1,"relevance":0.8}},{"id":1878994242,"content":"why `process.env`?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/61#discussion_r1878994242","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,26 @@\n+import { Manifest } from \"@ubiquity-os/plugin-sdk/dist/manifest\";\n+import { LOG_LEVEL } from \"@ubiquity-os/ubiquity-os-logger\";\n+import { createPlugin } from \"@ubiquity-os/plugin-sdk\";\n+import { run } from \"./run\";\n+import { Env, envSchema, PluginSettings, pluginSettingsSchema, SupportedEvents } from \"./types/plugin-input\";\n+import manifest from \"../manifest.json\";\n+\n+const app = createPlugin<PluginSettings, Env, null, SupportedEvents>(\n+  (context) => {\n+    return run(context);\n+  },\n+  manifest as Manifest,\n+  {\n+    envSchema: envSchema,\n+    settingsSchema: pluginSettingsSchema,\n+    logLevel: process.env.LOG_LEVEL || LOG_LEVEL.INFO,\n+    postCommentOnError: false,\n+    ...(process.env.KERNEL_PUBLIC_KEY && { kernelPublicKey: process.env.KERNEL_PUBLIC_KEY }),","score":{"reward":0.378,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":1,"wordValue":0.1,"result":0.14},"readability":{"fleschKincaid":121.22000000000003,"syllables":1,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":1880559948,"content":"Ideally I'd remove the package from plugin's dependencies and somehow use SDK's version, that way we don't need to change all plugins when we change the version in the SDK","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/61#discussion_r1880559948","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -32,13 +32,12 @@\n   \"dependencies\": {\n     \"@octokit/graphql-schema\": \"^15.25.0\",\n     \"@octokit/rest\": \"^21.0.2\",\n-    \"@sinclair/typebox\": \"0.34.3\",\n-    \"@ubiquity-os/plugin-sdk\": \"^1.1.0\",\n+    \"@sinclair/typebox\": \"0.34.11\",","score":{"reward":6.993,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":55.377941176470614,"syllables":47,"sentences":1,"score":0.9537794117647062},"multiplier":1,"relevance":0.9}},{"id":1880562880,"content":"ok so because this is only used for testing locally?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/61#discussion_r1880562880","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,26 @@\n+import { Manifest } from \"@ubiquity-os/plugin-sdk/dist/manifest\";\n+import { LOG_LEVEL } from \"@ubiquity-os/ubiquity-os-logger\";\n+import { createPlugin } from \"@ubiquity-os/plugin-sdk\";\n+import { run } from \"./run\";\n+import { Env, envSchema, PluginSettings, pluginSettingsSchema, SupportedEvents } from \"./types/plugin-input\";\n+import manifest from \"../manifest.json\";\n+\n+const app = createPlugin<PluginSettings, Env, null, SupportedEvents>(\n+  (context) => {\n+    return run(context);\n+  },\n+  manifest as Manifest,\n+  {\n+    envSchema: envSchema,\n+    settingsSchema: pluginSettingsSchema,\n+    logLevel: process.env.LOG_LEVEL || LOG_LEVEL.INFO,\n+    postCommentOnError: false,\n+    ...(process.env.KERNEL_PUBLIC_KEY && { kernelPublicKey: process.env.KERNEL_PUBLIC_KEY }),","score":{"reward":1.71,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":69.78500000000001,"syllables":15,"sentences":1,"score":0.9021499999999999},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2493792085,"effect":{"addition":99,"deletion":25},"reward":3.72,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/61"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 23.505 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>3.72</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>5.184</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>14.601</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/61\" target=\"_blank\" rel=\"noopener\">#61</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+99 -25</td><td>3</td><td>3.72</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/59#issuecomment-2533038328\" target=\"_blank\" rel=\"noopener\">What if the user is waiting for a PR review? in that case it doe&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.9</td><td>3</td><td>5.184</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/61#discussion_r1878989444\" target=\"_blank\" rel=\"noopener\">I think we should leave it at &#96;0.34.3&#96; same as in SDK be&hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.8</td><td>3</td><td>5.52</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/61#discussion_r1878994242\" target=\"_blank\" rel=\"noopener\">why &#96;process.env&#96;?</a></h6></td><td><details><summary>0.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0.1&#13;  result: 0.14&#13;</pre></details></td><td>0.7</td><td>3</td><td>0.378</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/61#discussion_r1880559948\" target=\"_blank\" rel=\"noopener\">Ideally I'd remove the package from plugin's dependencies and so&hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.9</td><td>3</td><td>6.993</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/61#discussion_r1880562880\" target=\"_blank\" rel=\"noopener\">ok so because this is only used for testing locally?</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.71</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_62.json","json":{"gentlementlegen":{"userId":9807008,"total":200,"task":{"reward":200,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 200 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>200</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":88.172,"userId":4975670,"comments":[{"id":2548130416,"content":"Yes and we do it by \"label class\" meaning we take the string before the colon. \n```yml \nprotectLabels:\n   - priority\n   - price\n```\nDefends all `Priority: ` and `Price: ` labels","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/62#issuecomment-2548130416","commentType":"ISSUE_AUTHOR","score":{"reward":6.516,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":86.70500000000001,"syllables":26,"sentences":2,"score":0.7329499999999999},"multiplier":1,"relevance":0.9}},{"id":2556203271,"content":"This is really cool if this works (I don't recall this to be implemented)\nBut I think my proposal takes real world use into consideration. I also like the idea of leveraging GitHub native capabilities as much as we can. Less code for us to maintain to solve the same business problem.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/62#issuecomment-2556203271","commentType":"ISSUE_AUTHOR","score":{"reward":8.792,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":53,"wordValue":0.1,"result":2.43},"readability":{"fleschKincaid":62.80144654088052,"syllables":79,"sentences":3,"score":0.9719855345911949},"multiplier":1,"relevance":0.7}},{"id":2556694092,"content":"Not globally. It's a whitelist of protected labels in the config.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/62#issuecomment-2556694092","commentType":"ISSUE_AUTHOR","score":{"reward":4.256,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":66.79500000000002,"syllables":19,"sentences":2,"score":0.9320499999999998},"multiplier":1,"relevance":0.8}},{"id":2735741271,"content":"- remove all code related to `/allow` command \n- always undo `priority` and `price` class label changes (add or remove) from collaborators EXCEPT if they are an admin/billing manager. \n- perhaps label classes should be configurable, with ours being the default, so that projects can design their own label systems. \nThis is a capability we need for some new hires, also this should really simplify this codebase. \nFull context: https://github.com/ubiquity-os-marketplace/command-start-stop/issues/104#issuecomment-2538648933","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/62","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.92,"formatting":{"content":{"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1.3},"priority":1,"words":{"wordCount":64,"wordValue":0.1,"result":2.55},"readability":{"fleschKincaid":52.76763636363637,"syllables":126,"sentences":5,"score":0.9276763636363637},"multiplier":1,"relevance":1}},{"id":2524851226,"content":"Good to see all the deleted files. Why did you change the lint rules?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#pullrequestreview-2524851226","commentType":"PULL_COLLABORATOR","score":{"reward":3.312,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":97.0014285714286,"syllables":17,"sentences":2,"score":0.6299857142857139},"multiplier":1,"relevance":0.6}},{"id":1899026533,"content":"Perhaps it makes sense to also make adjustments to the ts-template","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1899026533","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -74,6 +74,7 @@ export default tsEslint.config({\n     \"sonarjs/function-return-type\": \"off\",\n     \"sonarjs/no-misleading-array-reverse\": \"off\",\n     \"sonarjs/slow-regex\": \"off\",\n+    \"sonarjs/no-nested-template-literals\": \"off\",","score":{"reward":4.192,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":74.805,"syllables":17,"sentences":1,"score":0.85195},"multiplier":1,"relevance":0.8}},{"id":1899026829,"content":"No more start command? Isn't it convenient to run and test like this? Or does this require a slash command","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1899026829","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -11,17 +11,14 @@\n   },\n   \"scripts\": {\n     \"worker\": \"wrangler dev --env dev --port 4001\",\n-    \"start\": \"tsx src/index.ts\",","score":{"reward":5.096,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":94.98714285714289,"syllables":26,"sentences":3,"score":0.6501285714285712},"multiplier":1,"relevance":0.7}},{"id":1899027243,"content":"It makes sense to me to make null the last typing here so that it's optional to pass in, right?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1899027243","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,22 +1,19 @@\n-import { createClient } from \"@supabase/supabase-js\";\n import { createActionsPlugin } from \"@ubiquity-os/plugin-sdk\";\n import { LogLevel } from \"@ubiquity-os/ubiquity-os-logger\";\n-import { createAdapters } from \"./adapters\";\n import { run } from \"./run\";\n-import { Context, SupportedEvents } from \"./types/context\";\n+import { SupportedEvents } from \"./types/context\";\n import { Env, envSchema } from \"./types/env\";\n import { AssistivePricingSettings, pluginSettingsSchema } from \"./types/plugin-input\";\n-import { Command } from \"./types/command\";\n \n-createActionsPlugin<AssistivePricingSettings, Env, Command, SupportedEvents>(\n+createActionsPlugin<AssistivePricingSettings, Env, null, SupportedEvents>(","score":{"reward":6.624,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":88.83428571428574,"syllables":24,"sentences":1,"score":0.7116571428571425},"multiplier":1,"relevance":0.9}},{"id":1899027814,"content":"If somebody pushes a ton of commits in one shot, does this run for each? \nThis is a reference to our other discussion about how disqualifier runs multiple times","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1899027814","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -30,12 +19,6 @@ export async function run(context: Context) {\n         await onLabelChangeSetPricing(context);\n       }\n       break;\n-    case \"label.edited\":\n-      await watchLabelChange(context);\n-      break;\n-    case \"issue_comment.created\":\n-      await handleComment(context);\n-      break;\n     case \"push\":","score":{"reward":7.616,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":63.75887931034484,"syllables":44,"sentences":2,"score":0.9624112068965516},"multiplier":1,"relevance":0.8}},{"id":1899028178,"content":"I think it's redundant to write the users name in any of the warning and error messages.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1899028178","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -62,29 +65,26 @@ async function handleInsufficientPrivileges(\n   sender: string,\n   repo: Context[\"payload\"][\"repository\"],\n   action: string,\n-  labelName: string,\n-  eventName: string\n+  labelName: string\n ) {\n-  const { logger, payload } = context;\n+  const { logger, config } = context;\n   logger.info(\"Checking access for labels\", { repo: repo.full_name, user: sender, labelType });\n-  // check permission\n-  const { access, user } = context.adapters.supabase;\n-  const userId = await user.getUserId(context, sender);\n-  const accessible = await access.getAccess(userId, repo.id);\n-  if (accessible && accessible.labels?.includes(labelType)) {\n-    return true;\n-  }\n-\n-  if (action === \"labeled\") {\n-    await removeLabelFromIssue(context, labelName);\n-  } else if (action === \"unlabeled\") {\n-    await addLabelToIssue(context, labelName);\n-  }\n \n-  if (\"issue\" in payload && payload.issue) {\n-    await addCommentToIssue(context, `@${sender}, You are not allowed to ${eventName} ${labelName}`, payload.issue.number);\n-    logger.info(\"No access to edit label\", { sender, label: labelName });\n+  if (config.publicAccessControl.protectLabels.some((protectedLabel) => protectedLabel.toLowerCase() === labelType.toLowerCase())) {\n+    await postComment(\n+      context,\n+      logger.error(\n+        `@${sender}, you do not have permissions to adjust ${config.publicAccessControl.protectLabels.map((label) => `\\`${label}\\``).join(\", \")} labels.`,","score":{"reward":6.228,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":75.76500000000001,"syllables":24,"sentences":1,"score":0.8423499999999998},"multiplier":1,"relevance":0.9}},{"id":1899028475,"content":"Why do you guys change the port numbers? Is it to run many plugins locally concurrently?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1899028475","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -5,12 +5,14 @@\n # issue_number: the number of the issue, same as the one you would see in the url to that issue, e.g. \"1\"\n # command: the command you want to test, e.g. \"/allow @UbiquityOS\"\n # token: a valid GitHub token for auth, e.g. \"ghs_xxxxx\"\n-POST http://localhost:4000/\n+POST http://localhost:4001","score":{"reward":1.932,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":71.81500000000001,"syllables":24,"sentences":2,"score":0.8818499999999999},"multiplier":1,"relevance":0.3}},{"id":1903280255,"content":"Sure but my point is that we should update the template if we change any of these across any of our repositories.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1903280255","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -74,6 +74,7 @@ export default tsEslint.config({\n     \"sonarjs/function-return-type\": \"off\",\n     \"sonarjs/no-misleading-array-reverse\": \"off\",\n     \"sonarjs/slow-regex\": \"off\",\n+    \"sonarjs/no-nested-template-literals\": \"off\",","score":{"reward":5.544,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":72.9868181818182,"syllables":29,"sentences":1,"score":0.8701318181818181},"multiplier":1,"relevance":0.7}},{"id":2556226643,"content":"I'm on board for removing supabase dependencies by default. \nAlso, I don't recall this feature so it's probably one of many deprecated database dependent features","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#issuecomment-2556226643","commentType":"PULL_COLLABORATOR","score":{"reward":7.264,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":44.57500000000002,"syllables":49,"sentences":2,"score":0.8457500000000002},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2524851226,"effect":{"addition":139,"deletion":250},"reward":15.56,"priority":4},{"reviewId":2530907850,"effect":{"addition":4,"deletion":4},"reward":0.32,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 88.172 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>15.88</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.92</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>19.564</td></tr><tr><td>Review</td><td>Comment</td><td>9</td><td>47.808</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66\" target=\"_blank\" rel=\"noopener\">#66</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+139 -250</td><td>4</td><td>15.56</td></tr><tr><td>+4 -4</td><td>4</td><td>0.32</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/62\" target=\"_blank\" rel=\"noopener\">- remove all code related to &#96;/allow&#96; command - always &hellip;</a></h6></td><td><details><summary>3.85</summary><pre>content:&#13;  content:&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.3&#13;regex:&#13;  wordCount: 64&#13;  wordValue: 0.1&#13;  result: 2.55&#13;</pre></details></td><td>1</td><td>1</td><td>4.92</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/62#issuecomment-2548130416\" target=\"_blank\" rel=\"noopener\">Yes and we do it by \"label class\" meaning we take the string bef&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.9</td><td>4</td><td>6.516</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/62#issuecomment-2556203271\" target=\"_blank\" rel=\"noopener\">This is really cool if this works (I don't recall this to be imp&hellip;</a></h6></td><td><details><summary>2.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 53&#13;  wordValue: 0.1&#13;  result: 2.43&#13;</pre></details></td><td>0.7</td><td>4</td><td>8.792</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/62#issuecomment-2556694092\" target=\"_blank\" rel=\"noopener\">Not globally. It's a whitelist of protected labels in the config.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.8</td><td>4</td><td>4.256</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#pullrequestreview-2524851226\" target=\"_blank\" rel=\"noopener\">Good to see all the deleted files. Why did you change the lint r&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.6</td><td>4</td><td>3.312</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1899026533\" target=\"_blank\" rel=\"noopener\">Perhaps it makes sense to also make adjustments to the ts-templa&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.8</td><td>4</td><td>4.192</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1899026829\" target=\"_blank\" rel=\"noopener\">No more start command? Isn't it convenient to run and test like &hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.7</td><td>4</td><td>5.096</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1899027243\" target=\"_blank\" rel=\"noopener\">It makes sense to me to make null the last typing here so that i&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.9</td><td>4</td><td>6.624</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1899027814\" target=\"_blank\" rel=\"noopener\">If somebody pushes a ton of commits in one shot, does this run f&hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.8</td><td>4</td><td>7.616</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1899028178\" target=\"_blank\" rel=\"noopener\">I think it's redundant to write the users name in any of the war&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.9</td><td>4</td><td>6.228</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1899028475\" target=\"_blank\" rel=\"noopener\">Why do you guys change the port numbers? Is it to run many plugi&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.3</td><td>4</td><td>1.932</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1903280255\" target=\"_blank\" rel=\"noopener\">Sure but my point is that we should update the template if we ch&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.7</td><td>4</td><td>5.544</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#issuecomment-2556226643\" target=\"_blank\" rel=\"noopener\">I'm on board for removing supabase dependencies by default. Als&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.8</td><td>4</td><td>7.264</td></tr></tbody></table></details>"},"whilefoo":{"total":40.388,"userId":139262667,"comments":[{"id":2552257503,"content":"Sorry for being late for discussion, but I thought we will have our own allow list and not go by Github permissions.\r\nFor example: \r\n1. at first the user can't set any labels\r\n2. we begin to trust them so we allow them to set time labels `@UbiquityOS allow @user to change time labels`\r\n3. now the user can set labels with `@UbiquityOS set time label to 2 hours`\r\n4. then we add them to priority allow list and so on","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/62#issuecomment-2552257503","commentType":"ISSUE_COLLABORATOR","score":{"reward":13.644,"formatting":{"content":{"p":{"score":0,"elementCount":6},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":4}},"result":0.4},"priority":4,"words":{"wordCount":64,"wordValue":0.1,"result":2.55},"readability":{"fleschKincaid":64.63937500000003,"syllables":83,"sentences":2,"score":0.9536062499999997},"multiplier":1,"relevance":0.9}},{"id":1903297737,"content":"sure we can put it as last optional argument","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1903297737","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,22 +1,19 @@\n-import { createClient } from \"@supabase/supabase-js\";\n import { createActionsPlugin } from \"@ubiquity-os/plugin-sdk\";\n import { LogLevel } from \"@ubiquity-os/ubiquity-os-logger\";\n-import { createAdapters } from \"./adapters\";\n import { run } from \"./run\";\n-import { Context, SupportedEvents } from \"./types/context\";\n+import { SupportedEvents } from \"./types/context\";\n import { Env, envSchema } from \"./types/env\";\n import { AssistivePricingSettings, pluginSettingsSchema } from \"./types/plugin-input\";\n-import { Command } from \"./types/command\";\n \n-createActionsPlugin<AssistivePricingSettings, Env, Command, SupportedEvents>(\n+createActionsPlugin<AssistivePricingSettings, Env, null, SupportedEvents>(","score":{"reward":1.68,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":75.50000000000003,"syllables":13,"sentences":1,"score":0.8449999999999998},"multiplier":1,"relevance":0.4}},{"id":2552263146,"content":"The plugin also saves label changes (not issue label but actual label name change) but I can't remember why we did that (maybe for audit?) but if we remove that then we don't need supabase","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#issuecomment-2552263146","commentType":"PULL_COLLABORATOR","score":{"reward":9.504,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":73.7331756756757,"syllables":50,"sentences":2,"score":0.8626682432432431},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2530925457,"effect":{"addition":139,"deletion":250},"reward":15.56,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 40.388 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>15.56</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>13.644</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>11.184</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66\" target=\"_blank\" rel=\"noopener\">#66</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+139 -250</td><td>4</td><td>15.56</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/62#issuecomment-2552257503\" target=\"_blank\" rel=\"noopener\">Sorry for being late for discussion, but I thought we will have &hellip;</a></h6></td><td><details><summary>2.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 4&#13;  result: 0.4&#13;regex:&#13;  wordCount: 64&#13;  wordValue: 0.1&#13;  result: 2.55&#13;</pre></details></td><td>0.9</td><td>4</td><td>13.644</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#discussion_r1903297737\" target=\"_blank\" rel=\"noopener\">sure we can put it as last optional argument</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.4</td><td>4</td><td>1.68</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/66#issuecomment-2552263146\" target=\"_blank\" rel=\"noopener\">The plugin also saves label changes (not issue label but actual &hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>0.9</td><td>4</td><td>9.504</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_60.json","json":{"gentlementlegen":{"userId":9807008,"total":27.81,"task":{"reward":25,"multiplier":1},"comments":[{"id":2549885331,"content":"```diff\r\n! No labels are set.\r\n```\r\n_Originally posted by @ubiquity-os[bot] in https://github.com/ubiquity-os-marketplace/command-start-stop/issues/23#issuecomment-2376236748_\r\nThis should not be posted to the issue.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/60","commentType":"ISSUE_SPECIFICATION","score":{"reward":2.81,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":50.61785714285716,"syllables":47,"sentences":2,"score":0.9061785714285716},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 27.81 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>2.81</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/60\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;diff! No labels are set.&#96;&#96;&#96;_Ori&hellip;</a></h6></td><td><details><summary>2.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>1</td><td>1</td><td>2.81</td></tr></tbody></table></details>"},"0x4007":{"total":1.708,"userId":4975670,"comments":[{"id":2380550721,"content":"It would be nice to batch rolling changes because even one hour seems like too much for some of these small changes. Maybe we can make `Time: <5 Minutes` but that seems silly. I wonder what is a better process.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/60#issuecomment-2380550721","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.504,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":93.71126126126126,"syllables":44,"sentences":3,"score":0.6628873873873874},"multiplier":1,"relevance":0.2}},{"id":2384291423,"content":"I think makes more sense to batch these same types of changes. There's a fixed setup and breakdown time to get into this type of simple project.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/60#issuecomment-2384291423","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.434,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":92.91785714285714,"syllables":33,"sentences":2,"score":0.6708214285714286},"multiplier":1,"relevance":0.2}}],"reviewRewards":[{"reviews":[{"reviewId":2341988198,"effect":{"addition":41,"deletion":36},"reward":0.77,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/61"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 1.708 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.77</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>0.938</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/61\" target=\"_blank\" rel=\"noopener\">#61</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+41 -36</td><td>1</td><td>0.77</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/60#issuecomment-2380550721\" target=\"_blank\" rel=\"noopener\">It would be nice to batch rolling changes because even one hour &hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.504</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/60#issuecomment-2384291423\" target=\"_blank\" rel=\"noopener\">I think makes more sense to batch these same types of changes. T&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.434</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_30.json","json":{"Keyrxng":{"userId":106303466,"total":103.132,"task":{"reward":100,"multiplier":1},"comments":[{"id":1919559061,"content":"Resolves https://github.com/ubiquibot/conversation-rewards/issues/30\r\n- removed `js-tiktoken` due to the 128k token limit and strict `GPT-4o` usage\r\n- making one call instead of a batch of 10","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39","commentType":"PULL_SPECIFICATION","score":{"reward":3.132,"formatting":{"content":{"p":{"score":0,"elementCount":3},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1.2},"priority":1,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":59.68214285714288,"syllables":44,"sentences":2,"score":0.9968214285714287},"multiplier":1,"relevance":0.9}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 103.132 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>3.132</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39\" target=\"_blank\" rel=\"noopener\">Resolves https://github.com/ubiquibot/conversation-rewards/issue&hellip;</a></h6></td><td><details><summary>2.68</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.2&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.9</td><td>1</td><td>3.132</td></tr></tbody></table></details>"},"0x4007":{"total":17.414,"userId":4975670,"comments":[{"id":2334934600,"content":"_Originally posted by @0x4007 in https://github.com/ubiquity/ubiquibot-kernel/issues/43#issuecomment-2148880396_\r\nI expect that this will simplify our code quite a bit, and the model is significantly more intelligent which may increase the accuracy of the results.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/30","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.58,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":35.39823170731708,"syllables":73,"sentences":2,"score":0.7539823170731708},"multiplier":1,"relevance":1}},{"id":1639483446,"content":"Can replace this with just 4o. Probably best to just remove the function","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39#discussion_r1639483446","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -100,41 +100,21 @@ export class ContentEvaluatorModule implements Module {\n   }\n \n   _getOptimalModel(prompt: string) {","score":{"reward":1.89,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":83.09903846153848,"syllables":18,"sentences":2,"score":0.7690096153846152},"multiplier":1,"relevance":0.7}},{"id":1639483949,"content":"Consider removing the function entirely to simplify the codebase and not leave artifacts.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39#discussion_r1639483949","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -100,41 +100,21 @@ export class ContentEvaluatorModule implements Module {\n   }\n \n   _getOptimalModel(prompt: string) {\n-    const encoder = encodingForModel(\"gpt-3.5-turbo\");\n+    const encoder = encodingForModel(\"gpt-4o\");\n     const totalSumOfTokens = encoder.encode(prompt).length;\n \n     if (totalSumOfTokens <= 4097) {\n       return \"gpt-3.5-turbo\";\n     } else if (totalSumOfTokens <= 16385) {\n-      return \"gpt-3.5-turbo-16k\";\n+      return \"gpt-3.5-turbo-16k\"; // gpt-4o?\n     } else {\n       console.warn(\"Backup plan for development purposes only, but using gpt-4 due to huge context size\");\n-      return \"gpt-4-turbo-preview\";\n+      return \"gpt-4o\";\n     }\n   }\n \n   async _sampleRelevanceScoreResults(specification: string, comments: string[]) {","score":{"reward":2.322,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":17.932307692307717,"syllables":27,"sentences":1,"score":0.5793230769230772},"multiplier":1,"relevance":0.9}},{"id":2167540181,"content":"Yeah the primary work here is to simplify the code. \nNo more choosing an \"optimal\" model and no more sampling/averaging scoring!\nOnly use chatgpt 4o as it is superior in every way. \nWe also always strive to simplify the codebase whenever possible. Thanks @Keyrxng","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39#issuecomment-2167540181","commentType":"PULL_COLLABORATOR","score":{"reward":4.752,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":60.460000000000036,"syllables":73,"sentences":5,"score":0.9953999999999996},"multiplier":1,"relevance":0.8}},{"id":2186024089,"content":"@Keyrxng I assume you tested that this works.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39#issuecomment-2186024089","commentType":"PULL_COLLABORATOR","score":{"reward":0.99,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":103.54,"syllables":9,"sentences":1,"score":1},"multiplier":1,"relevance":0.5}},{"id":2186085942,"content":"Guess we will see if it works @gentlementlegen be sure to include these changes so we can test asap.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39#issuecomment-2186085942","commentType":"PULL_COLLABORATOR","score":{"reward":1.432,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":76.2342105263158,"syllables":25,"sentences":1,"score":0.8376578947368419},"multiplier":1,"relevance":0.4}},{"id":2186993904,"content":"It should always check the default branch and use that as the default. Given that we are rapidly iterating now, it makes sense for `development` to be our default branch. Later in the future when things are stable we can consider switching to `main` as the default.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39#issuecomment-2186993904","commentType":"PULL_COLLABORATOR","score":{"reward":1.148,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":75.05000000000003,"syllables":62,"sentences":3,"score":0.8494999999999997},"multiplier":1,"relevance":0.2}}],"reviewRewards":[{"reviews":[{"reviewId":2117832744,"effect":{"addition":8,"deletion":29},"reward":0.74,"priority":2},{"reviewId":2135180796,"effect":{"addition":4,"deletion":24},"reward":0.56,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 17.414 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>1.3</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.58</td></tr><tr><td>Review</td><td>Comment</td><td>6</td><td>12.534</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39\" target=\"_blank\" rel=\"noopener\">#39</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+8 -29</td><td>2</td><td>0.74</td></tr><tr><td>+4 -24</td><td>2</td><td>0.56</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/30\" target=\"_blank\" rel=\"noopener\">_Originally posted by @0x4007 in https://github.com/ubiquity/ubi&hellip;</a></h6></td><td><details><summary>2.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>1</td><td>1</td><td>3.58</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39#discussion_r1639483446\" target=\"_blank\" rel=\"noopener\">Can replace this with just 4o. Probably best to just remove the &hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.89</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39#discussion_r1639483949\" target=\"_blank\" rel=\"noopener\">Consider removing the function entirely to simplify the codebase&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.9</td><td>2</td><td>2.322</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39#issuecomment-2167540181\" target=\"_blank\" rel=\"noopener\">Yeah the primary work here is to simplify the code. No more cho&hellip;</a></h6></td><td><details><summary>2.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0.8</td><td>2</td><td>4.752</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39#issuecomment-2186024089\" target=\"_blank\" rel=\"noopener\">@Keyrxng I assume you tested that this works.</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.5</td><td>2</td><td>0.99</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39#issuecomment-2186085942\" target=\"_blank\" rel=\"noopener\">Guess we will see if it works @gentlementlegen be sure to includ&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.4</td><td>2</td><td>1.432</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39#issuecomment-2186993904\" target=\"_blank\" rel=\"noopener\">It should always check the default branch and use that as the de&hellip;</a></h6></td><td><details><summary>2.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0.2</td><td>2</td><td>1.148</td></tr></tbody></table></details>"},"gentlementlegen":{"total":5.74,"userId":9807008,"comments":[{"id":2186097555,"content":"@0x4007 Should be using it from now on. I noticed that because we set `development` as the default branch, when not specifying the branch on the `.ubiquibot-configuration.yml` it uses the `development` branch for runs which might not be wanted (I think we should rely on the `main` branch for production).\r\nhttps://github.com/ubiquibot/conversation-rewards/actions/workflows/compute.yml","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39#issuecomment-2186097555","commentType":"PULL_COLLABORATOR","score":{"reward":5.74,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":46,"wordValue":0.1,"result":2.31},"readability":{"fleschKincaid":80.6527142857143,"syllables":76,"sentences":5,"score":0.7934728571428571},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 5.74 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>5.74</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/39#issuecomment-2186097555\" target=\"_blank\" rel=\"noopener\">@0x4007 Should be using it from now on. I noticed that because w&hellip;</a></h6></td><td><details><summary>3.31</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 46&#13;  wordValue: 0.1&#13;  result: 2.31&#13;</pre></details></td><td>0.7</td><td>2</td><td>5.74</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_92.json","json":{"gentlementlegen":{"userId":9807008,"total":300,"task":{"reward":300,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 300 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>300</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":137.239,"userId":4975670,"comments":[{"id":2299560208,"content":"Originally created at https://github.com/ubiquibot/conversation-rewards/issues/83","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2299560208","commentType":"ISSUE_AUTHOR","score":{"reward":0.474,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":16.670681818181833,"syllables":24,"sentences":2,"score":0.5667068181818183},"multiplier":1,"relevance":0.1}},{"id":2299587456,"content":"Hope that you can prioritize this so that I can start fine tuning the incentives!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2299587456","commentType":"ISSUE_AUTHOR","score":{"reward":1.35,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":78.81000000000003,"syllables":20,"sentences":1,"score":0.8118999999999997},"multiplier":1,"relevance":0.3}},{"id":2352088749,"content":"Yes as I recall in the old implementation if it came across an \"ignored\" tag then it would count the total amount of words inside and then subtract from the net score.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2352088749","commentType":"ISSUE_AUTHOR","score":{"reward":6.072,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":60.67375000000003,"syllables":43,"sentences":1,"score":0.9932624999999997},"multiplier":1,"relevance":0.8}},{"id":2352316207,"content":"In normal front-end code I would express this logic as follows:\r\n```javascript\r\nconst codes = document.querySelectorAll(`code`);\r\nlet excludedWordCount = 0;\r\nfor (const code of codes){\r\n  excludedWordCount += getWordCount(code);\r\n}\r\n// ...\r\nconst netWordScore = totalWordCount - excludedWordCount;\r\nreturn netWordScore;\r\nfunction getWordCount(element) {\r\n  return element.textContent.split(\" \").length;\r\n}\r\n```\r\nBut ultimately it appears that we will scrap this word counting logic all together pretty soon. The more robust way to credit for productive contributions is via semantic understanding of the corpus. This will be handled by embeddings most likely. \r\nHowever I do want to retain the tag/element counter because there is definitely a high correlation with high quality comments and sample images, links, and code. \r\nSo definitely need to emphasize counting tags as per the original design. The word counting is an afterthought and will be removed when we figure out a good strategy with embeddings.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2352316207","commentType":"ISSUE_AUTHOR","score":{"reward":8.775,"formatting":{"content":{"p":{"score":0,"elementCount":4}},"result":0},"priority":3,"words":{"wordCount":110,"wordValue":0.1,"result":2.56},"readability":{"fleschKincaid":49.79030303030305,"syllables":180,"sentences":6,"score":0.8979030303030305},"multiplier":1,"relevance":0.9}},{"id":2357720289,"content":"Relevance should only apply to word count. \nTag count should remain unaffected. For example every image should guarantee $5","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2357720289","commentType":"ISSUE_AUTHOR","score":{"reward":4.392,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":53.4698245614035,"syllables":33,"sentences":3,"score":0.934698245614035},"multiplier":1,"relevance":0.8}},{"id":2360020719,"content":"It's really hard to say from those results. It's always been difficult to understand the results based on the results table unfortunately","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2360020719","commentType":"ISSUE_AUTHOR","score":{"reward":2.568,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":57.18000000000001,"syllables":39,"sentences":2,"score":0.9718000000000001},"multiplier":1,"relevance":0.4}},{"id":2360073706,"content":"Sounds good to me!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2360073706","commentType":"ISSUE_AUTHOR","score":{"reward":0.342,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.2}},{"id":2382179562,"content":"Looks like the rewards count is broken","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2382179562","commentType":"ISSUE_AUTHOR","score":{"reward":1.245,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":90.95857142857145,"syllables":9,"sentences":1,"score":0.6904142857142855},"multiplier":1,"relevance":0.5}},{"id":2382227483,"content":"That's strange. It excludes the relevance column with truncated output.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2382227483","commentType":"ISSUE_AUTHOR","score":{"reward":1.845,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":70.50704545454548,"syllables":17,"sentences":2,"score":0.8949295454545453},"multiplier":1,"relevance":0.5}},{"id":2398972541,"content":"I realize now its in the details table which is all excluded for truncated outputs so it makes sense. https://github.com/ubiquity/pay.ubq.fi/issues/287#issuecomment-2365437315\r\n<img width=\"1133\" alt=\"image\" src=\"https://github.com/user-attachments/assets/0dc9ef1f-e195-4ec2-868a-09011cc23da4\">","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2398972541","commentType":"ISSUE_AUTHOR","score":{"reward":9.681,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2},"priority":3,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":78.28416666666669,"syllables":67,"sentences":6,"score":0.8171583333333331},"multiplier":1,"relevance":0.7}},{"id":2476338464,"content":"I was reviewing this action run and its a lot more clear to me when looking at the clean JSON logs exactly whats going on here. I realized that the scoring is implemented incorrectly. The primary crediting strategy is supposed to be based on the amount of elements. The word counter is a separate scoring mechanism. This was added as an after thought in version one, but it seems that you prioritized word count over element count. \r\nThe problem is that the original emphasis on element count allows us to easily target and credit special and useful elements such as `<a>`, `<img>`, and `<code>`. Helpful comments generally have links, images and code samples. \r\n- With the following example, I would expect only one `<p>`\r\n- The comment word count is `7`\r\n- We also need the ability to ignore words inside of specific tags. For example, `<code>` \r\nNow you are keeping track of word count PER element which is more complex than it needs to be. Remember, the word count scoring strategy was added as an after thought for version one. Version one simply counts all the words in the comment (but also ignores words in specific elements, like `code`.) at the end of all the complex calculations.\r\nAside from the ignore capability, it doesn't care which element contains the words. \r\n```jsonc\r\n{\r\n  \"id\": 2014495969,\r\n  \"content\": \"Wouldn't solve scenarios requiring keys or credentials\",\r\n  \"url\": \"https://github.com/ubiquity/cloudflare-deploy-action/issues/6#issuecomment-2014495969\",\r\n  \"type\": \"ISSUE_ASSIGNEE\",\r\n  \"score\": {\r\n    \"formatting\": {\r\n      \"content\": {\r\n        \"p\": {\r\n          \"count\": 7, // should be changed to `wordCount` and you should correctly count the amount of `p` tags to be `elementCount`\r\n          \"score\": 1\r\n        }\r\n      },\r\n      \"wordValue\": 0,\r\n      \"formattingMultiplier\": 0\r\n    },\r\n    \"reward\": 0,\r\n    \"relevance\": 0.3\r\n  }\r\n}\r\n```\r\n- I would expect our `p` scoring to be `0` but our word scoring to be `0.1` for a grand total of `0.7`. \r\n- Because this is the assignee writing on the issue (not the pull) we can provide credit; so the multiplier should not be `0`. \r\n- Perhaps we could do a 4x multiplier, which yields `2.8` but then multiply by relevance to yield a sum of `0.84` for the comment.\r\n[Source](https://github.com/ubiquibot/conversation-rewards/actions/runs/10474375714/job/29008494818#step:7:527)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.43,"formatting":{"content":{"p":{"score":0,"elementCount":11},"ul":{"score":0,"elementCount":2},"li":{"score":0.1,"elementCount":6},"a":{"score":1,"elementCount":1}},"result":1.6},"priority":1,"words":{"wordCount":275,"wordValue":0.1,"result":1.07},"readability":{"fleschKincaid":65.20788235294121,"syllables":407,"sentences":17,"score":0.9479211764705879},"multiplier":1,"relevance":1}},{"id":1769498289,"content":"I'm assuming this was for testing. Let's default at 5 \nAs well as for code and links.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1769498289","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -18,7 +18,7 @@ const htmlType = Type.Record(Type.String(), Type.Number(), {\n     code: 1,\n     p: 1,\n     em: 0,\n-    img: 0,\n+    img: 1,","score":{"reward":4.104,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":94.78197368421053,"syllables":23,"sentences":2,"score":0.6521802631578947},"multiplier":1,"relevance":0.8}},{"id":1769498369,"content":"I would switch these args around and then make it \ncomment?:\nInstead of writing undefined as the type","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1769498369","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -74,6 +74,19 @@ export class ContentEvaluatorModule implements Module {\n     return result;\n   }\n \n+  _getRewardForComment(comment: GithubCommentScore | undefined, relevance: number) {","score":{"reward":3.549,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":84.90000000000003,"syllables":24,"sentences":2,"score":0.7509999999999997},"multiplier":1,"relevance":0.7}},{"id":1769700991,"content":"Then remove `| undefined`\nIt's logically the same","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1769700991","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -74,6 +74,19 @@ export class ContentEvaluatorModule implements Module {\n     return result;\n   }\n \n+  _getRewardForComment(comment: GithubCommentScore | undefined, relevance: number) {","score":{"reward":1.32,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":66.7871428571429,"syllables":11,"sentences":1,"score":0.9321285714285711},"multiplier":1,"relevance":0.5}},{"id":1771522860,"content":"Where are the standardized headers? Body should be json compliant. \n This needs to be used across all plugins for a single parser to work","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1771522860","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -52,6 +52,9 @@ export class GithubCommentModule implements Module {\n         result[key].evaluationCommentHtml = await this._generateHtml(key, value, true);\n         strippedBody.push(result[key].evaluationCommentHtml);\n       }\n+      strippedBody.push(\"\\n<!--\");\n+      strippedBody.push(this._encodeHTML(`\\n${getGithubWorkflowRunUrl()}`));","score":{"reward":4.92,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":82.39000000000001,"syllables":33,"sentences":3,"score":0.7760999999999999},"multiplier":1,"relevance":0.8}},{"id":1771527708,"content":"Just use textContent from the top level parent element as we discussed several times. Copy my first implementation. The word counting was never complex.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1771527708","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -113,66 +114,83 @@ export class FormattingEvaluatorModule implements Module {\n     logger.debug(\"Will analyze formatting for the current content\", { comment: comment.content, html });\n     const temp = new JSDOM(html);\n     if (temp.window.document.body) {\n-      const res = this.classifyTagsWithWordCount(temp.window.document.body, comment.type);\n+      const res = this._classifyTagsWithWordCount(temp.window.document.body, comment.type);\n       return { formatting: res };\n     } else {\n       throw new Error(`Could not create DOM for comment [${comment}]`);\n     }\n   }\n \n-  _countSymbols(regexes: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"rewards\"][\"regex\"], text: string) {\n-    const counts: { [p: string]: { count: number; multiplier: number } } = {};\n-    for (const [regex, multiplier] of Object.entries(regexes)) {\n+  _countSymbolsFromRegex(\n+    regexes: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"rewards\"][\"regex\"],\n+    text: string\n+  ) {\n+    const counts: RegexCount = {};\n+    for (const [regex, wordValue] of Object.entries(regexes)) {\n       const match = text.trim().match(new RegExp(regex, \"g\"));\n       counts[regex] = {\n-        count: match?.length || 1,\n-        multiplier,\n+        wordCount: match?.length || 0,\n+        wordValue: wordValue,\n       };\n     }\n     return counts;\n   }\n \n-  classifyTagsWithWordCount(htmlElement: HTMLElement, commentType: GithubCommentScore[\"type\"]) {\n-    const tagWordCount: Record<\n-      string,\n-      { symbols: { [p: string]: { count: number; multiplier: number } }; score: number }\n-    > = {};\n+  _updateTagCount(\n+    tagCount: Record<string, { regex: RegexCount; score: number; elementCount: number }>,\n+    tagName: string,\n+    regexCount: RegexCount,\n+    score: number\n+  ) {\n+    // If we already had that tag included in the result, merge them and update total count\n+    if (Object.keys(tagCount).includes(tagName)) {\n+      for (const [k, v] of Object.entries(regexCount)) {\n+        if (Object.keys(tagCount[tagName].regex).includes(k)) {\n+          tagCount[tagName].regex[k] = {\n+            ...tagCount[tagName].regex[k],\n+            wordCount: tagCount[tagName].regex[k].wordCount + v.wordCount,\n+          };\n+          tagCount[tagName].elementCount += 1;\n+        }\n+      }\n+    } else {\n+      tagCount[tagName] = {\n+        regex: regexCount,\n+        score,\n+        elementCount: 1,\n+      };\n+    }\n+  }\n+\n+  _classifyTagsWithWordCount(htmlElement: HTMLElement, commentType: GithubCommentScore[\"type\"]) {\n+    const tagCount: Record<string, { regex: RegexCount; score: number; elementCount: number }> = {};\n     const elements = htmlElement.getElementsByTagName(\"*\");\n \n     for (const element of elements) {\n       const tagName = element.tagName.toLowerCase();\n-      // We cannot use textContent otherwise we would duplicate counts, so instead we extract text nodes\n-      const textNodes = Array.from(element?.childNodes || []).filter((node) => node.nodeType === 3);\n-      const innerText = textNodes\n-        .map((node) => node.nodeValue?.trim())\n-        .join(\" \")\n-        .trim();\n-      const symbols = this._countSymbols(this._multipliers[commentType].regex, innerText);\n       let score = 0;\n       if (this._multipliers[commentType]?.html[tagName] !== undefined) {\n         score = this._multipliers[commentType].html[tagName];\n-      } else {\n-        logger.error(`Could not find multiplier for comment [${commentType}], <${tagName}>`);\n-      }\n-      logger.debug(\"Tag content results\", { tagName, symbols, text: element.textContent });\n-      // If we already had that tag included in the result, merge them and update total count\n-      if (Object.keys(tagWordCount).includes(tagName)) {\n-        for (const [k, v] of Object.entries(symbols)) {\n-          if (Object.keys(tagWordCount[tagName].symbols).includes(k)) {\n-            tagWordCount[tagName].symbols[k] = {\n-              ...tagWordCount[tagName].symbols[k],\n-              count: tagWordCount[tagName].symbols[k].count + v.count,\n-            };\n-          }\n+        if (score === 0) {\n+          element.remove();\n+          continue;\n         }\n       } else {\n-        tagWordCount[tagName] = {\n-          symbols: symbols,\n-          score,\n-        };\n+        logger.error(`Could not find multiplier for element <${tagName}> in comment [${element.outerHTML}]`);\n+        element.remove();\n+        continue;\n       }\n-    }\n \n-    return tagWordCount;\n+      // We cannot use textContent otherwise we would duplicate counts, so instead we extract text nodes","score":{"reward":5.751,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":54.190000000000026,"syllables":41,"sentences":3,"score":0.9419000000000003},"multiplier":1,"relevance":0.9}},{"id":1771532629,"content":"Is there another config to subtract words inside for this and block quote?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1771532629","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,10 +15,10 @@ const regexType = Type.Record(Type.String(), Type.Number(), { minProperties: 1 }\n const htmlType = Type.Record(Type.String(), Type.Number(), {\n   default: {\n     br: 0,\n-    code: 1,\n+    code: 5,","score":{"reward":2.898,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":76.50153846153849,"syllables":18,"sentences":1,"score":0.8349846153846151},"multiplier":1,"relevance":0.7}},{"id":1771604702,"content":"We also discussed that several times. The scoring, which is all that really matters, was correct regarding word count. The analytics counter wasn't.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1771604702","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -113,66 +114,83 @@ export class FormattingEvaluatorModule implements Module {\n     logger.debug(\"Will analyze formatting for the current content\", { comment: comment.content, html });\n     const temp = new JSDOM(html);\n     if (temp.window.document.body) {\n-      const res = this.classifyTagsWithWordCount(temp.window.document.body, comment.type);\n+      const res = this._classifyTagsWithWordCount(temp.window.document.body, comment.type);\n       return { formatting: res };\n     } else {\n       throw new Error(`Could not create DOM for comment [${comment}]`);\n     }\n   }\n \n-  _countSymbols(regexes: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"rewards\"][\"regex\"], text: string) {\n-    const counts: { [p: string]: { count: number; multiplier: number } } = {};\n-    for (const [regex, multiplier] of Object.entries(regexes)) {\n+  _countSymbolsFromRegex(\n+    regexes: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"rewards\"][\"regex\"],\n+    text: string\n+  ) {\n+    const counts: RegexCount = {};\n+    for (const [regex, wordValue] of Object.entries(regexes)) {\n       const match = text.trim().match(new RegExp(regex, \"g\"));\n       counts[regex] = {\n-        count: match?.length || 1,\n-        multiplier,\n+        wordCount: match?.length || 0,\n+        wordValue: wordValue,\n       };\n     }\n     return counts;\n   }\n \n-  classifyTagsWithWordCount(htmlElement: HTMLElement, commentType: GithubCommentScore[\"type\"]) {\n-    const tagWordCount: Record<\n-      string,\n-      { symbols: { [p: string]: { count: number; multiplier: number } }; score: number }\n-    > = {};\n+  _updateTagCount(\n+    tagCount: Record<string, { regex: RegexCount; score: number; elementCount: number }>,\n+    tagName: string,\n+    regexCount: RegexCount,\n+    score: number\n+  ) {\n+    // If we already had that tag included in the result, merge them and update total count\n+    if (Object.keys(tagCount).includes(tagName)) {\n+      for (const [k, v] of Object.entries(regexCount)) {\n+        if (Object.keys(tagCount[tagName].regex).includes(k)) {\n+          tagCount[tagName].regex[k] = {\n+            ...tagCount[tagName].regex[k],\n+            wordCount: tagCount[tagName].regex[k].wordCount + v.wordCount,\n+          };\n+          tagCount[tagName].elementCount += 1;\n+        }\n+      }\n+    } else {\n+      tagCount[tagName] = {\n+        regex: regexCount,\n+        score,\n+        elementCount: 1,\n+      };\n+    }\n+  }\n+\n+  _classifyTagsWithWordCount(htmlElement: HTMLElement, commentType: GithubCommentScore[\"type\"]) {\n+    const tagCount: Record<string, { regex: RegexCount; score: number; elementCount: number }> = {};\n     const elements = htmlElement.getElementsByTagName(\"*\");\n \n     for (const element of elements) {\n       const tagName = element.tagName.toLowerCase();\n-      // We cannot use textContent otherwise we would duplicate counts, so instead we extract text nodes\n-      const textNodes = Array.from(element?.childNodes || []).filter((node) => node.nodeType === 3);\n-      const innerText = textNodes\n-        .map((node) => node.nodeValue?.trim())\n-        .join(\" \")\n-        .trim();\n-      const symbols = this._countSymbols(this._multipliers[commentType].regex, innerText);\n       let score = 0;\n       if (this._multipliers[commentType]?.html[tagName] !== undefined) {\n         score = this._multipliers[commentType].html[tagName];\n-      } else {\n-        logger.error(`Could not find multiplier for comment [${commentType}], <${tagName}>`);\n-      }\n-      logger.debug(\"Tag content results\", { tagName, symbols, text: element.textContent });\n-      // If we already had that tag included in the result, merge them and update total count\n-      if (Object.keys(tagWordCount).includes(tagName)) {\n-        for (const [k, v] of Object.entries(symbols)) {\n-          if (Object.keys(tagWordCount[tagName].symbols).includes(k)) {\n-            tagWordCount[tagName].symbols[k] = {\n-              ...tagWordCount[tagName].symbols[k],\n-              count: tagWordCount[tagName].symbols[k].count + v.count,\n-            };\n-          }\n+        if (score === 0) {\n+          element.remove();\n+          continue;\n         }\n       } else {\n-        tagWordCount[tagName] = {\n-          symbols: symbols,\n-          score,\n-        };\n+        logger.error(`Could not find multiplier for element <${tagName}> in comment [${element.outerHTML}]`);\n+        element.remove();\n+        continue;\n       }\n-    }\n \n-    return tagWordCount;\n+      // We cannot use textContent otherwise we would duplicate counts, so instead we extract text nodes","score":{"reward":5.112,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":64.76500000000001,"syllables":38,"sentences":3,"score":0.9523499999999998},"multiplier":1,"relevance":0.8}},{"id":1771605099,"content":"Yes","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1771605099","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,10 +15,10 @@ const regexType = Type.Record(Type.String(), Type.Number(), { minProperties: 1 }\n const htmlType = Type.Record(Type.String(), Type.Number(), {\n   default: {\n     br: 0,\n-    code: 1,\n+    code: 5,","score":{"reward":0.162,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":1,"wordValue":0.1,"result":0.14},"readability":{"fleschKincaid":121.22000000000003,"syllables":1,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}},{"id":1771607389,"content":"Last time I coded for bot features was v1. You can check there. \nWe should have one function in our SDK and encourage use across plugins for any comments\n@whilefoo as I recall you were working on the SDK, perhaps you can prioritize making this.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1771607389","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -52,6 +52,9 @@ export class GithubCommentModule implements Module {\n         result[key].evaluationCommentHtml = await this._generateHtml(key, value, true);\n         strippedBody.push(result[key].evaluationCommentHtml);\n       }\n+      strippedBody.push(\"\\n<!--\");\n+      strippedBody.push(this._encodeHTML(`\\n${getGithubWorkflowRunUrl()}`));","score":{"reward":5.985,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":78.81000000000003,"syllables":60,"sentences":3,"score":0.8118999999999997},"multiplier":1,"relevance":0.7}},{"id":1772685213,"content":"No. \r\nHowever we need to be able to exclude word count from `blockquote` and `code`.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1772685213","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -113,66 +114,83 @@ export class FormattingEvaluatorModule implements Module {\n     logger.debug(\"Will analyze formatting for the current content\", { comment: comment.content, html });\n     const temp = new JSDOM(html);\n     if (temp.window.document.body) {\n-      const res = this.classifyTagsWithWordCount(temp.window.document.body, comment.type);\n+      const res = this._classifyTagsWithWordCount(temp.window.document.body, comment.type);\n       return { formatting: res };\n     } else {\n       throw new Error(`Could not create DOM for comment [${comment}]`);\n     }\n   }\n \n-  _countSymbols(regexes: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"rewards\"][\"regex\"], text: string) {\n-    const counts: { [p: string]: { count: number; multiplier: number } } = {};\n-    for (const [regex, multiplier] of Object.entries(regexes)) {\n+  _countSymbolsFromRegex(\n+    regexes: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"rewards\"][\"regex\"],\n+    text: string\n+  ) {\n+    const counts: RegexCount = {};\n+    for (const [regex, wordValue] of Object.entries(regexes)) {\n       const match = text.trim().match(new RegExp(regex, \"g\"));\n       counts[regex] = {\n-        count: match?.length || 1,\n-        multiplier,\n+        wordCount: match?.length || 0,\n+        wordValue: wordValue,\n       };\n     }\n     return counts;\n   }\n \n-  classifyTagsWithWordCount(htmlElement: HTMLElement, commentType: GithubCommentScore[\"type\"]) {\n-    const tagWordCount: Record<\n-      string,\n-      { symbols: { [p: string]: { count: number; multiplier: number } }; score: number }\n-    > = {};\n+  _updateTagCount(\n+    tagCount: Record<string, { regex: RegexCount; score: number; elementCount: number }>,\n+    tagName: string,\n+    regexCount: RegexCount,\n+    score: number\n+  ) {\n+    // If we already had that tag included in the result, merge them and update total count\n+    if (Object.keys(tagCount).includes(tagName)) {\n+      for (const [k, v] of Object.entries(regexCount)) {\n+        if (Object.keys(tagCount[tagName].regex).includes(k)) {\n+          tagCount[tagName].regex[k] = {\n+            ...tagCount[tagName].regex[k],\n+            wordCount: tagCount[tagName].regex[k].wordCount + v.wordCount,\n+          };\n+          tagCount[tagName].elementCount += 1;\n+        }\n+      }\n+    } else {\n+      tagCount[tagName] = {\n+        regex: regexCount,\n+        score,\n+        elementCount: 1,\n+      };\n+    }\n+  }\n+\n+  _classifyTagsWithWordCount(htmlElement: HTMLElement, commentType: GithubCommentScore[\"type\"]) {\n+    const tagCount: Record<string, { regex: RegexCount; score: number; elementCount: number }> = {};\n     const elements = htmlElement.getElementsByTagName(\"*\");\n \n     for (const element of elements) {\n       const tagName = element.tagName.toLowerCase();\n-      // We cannot use textContent otherwise we would duplicate counts, so instead we extract text nodes\n-      const textNodes = Array.from(element?.childNodes || []).filter((node) => node.nodeType === 3);\n-      const innerText = textNodes\n-        .map((node) => node.nodeValue?.trim())\n-        .join(\" \")\n-        .trim();\n-      const symbols = this._countSymbols(this._multipliers[commentType].regex, innerText);\n       let score = 0;\n       if (this._multipliers[commentType]?.html[tagName] !== undefined) {\n         score = this._multipliers[commentType].html[tagName];\n-      } else {\n-        logger.error(`Could not find multiplier for comment [${commentType}], <${tagName}>`);\n-      }\n-      logger.debug(\"Tag content results\", { tagName, symbols, text: element.textContent });\n-      // If we already had that tag included in the result, merge them and update total count\n-      if (Object.keys(tagWordCount).includes(tagName)) {\n-        for (const [k, v] of Object.entries(symbols)) {\n-          if (Object.keys(tagWordCount[tagName].symbols).includes(k)) {\n-            tagWordCount[tagName].symbols[k] = {\n-              ...tagWordCount[tagName].symbols[k],\n-              count: tagWordCount[tagName].symbols[k].count + v.count,\n-            };\n-          }\n+        if (score === 0) {\n+          element.remove();\n+          continue;\n         }\n       } else {\n-        tagWordCount[tagName] = {\n-          symbols: symbols,\n-          score,\n-        };\n+        logger.error(`Could not find multiplier for element <${tagName}> in comment [${element.outerHTML}]`);\n+        element.remove();\n+        continue;\n       }\n-    }\n \n-    return tagWordCount;\n+      // We cannot use textContent otherwise we would duplicate counts, so instead we extract text nodes","score":{"reward":3.192,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":89.6067307692308,"syllables":17,"sentences":2,"score":0.7039326923076921},"multiplier":1,"relevance":0.8}},{"id":1773100601,"content":"Default to `true` \r\nThe only ones that don't count words are `code` and `blockquote`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1773100601","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,10 +15,10 @@ const regexType = Type.Record(Type.String(), Type.Number(), { minProperties: 1 }\n const htmlType = Type.Record(Type.String(), Type.Number(), {\n   default: {\n     br: 0,\n-    code: 1,\n+    code: 5,","score":{"reward":2.604,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":95.955,"syllables":14,"sentences":1,"score":0.64045},"multiplier":1,"relevance":0.7}},{"id":1777701867,"content":"We are currently only using it for word counting which I kind of hate. We should hardcode a word counter config property and then under the hood it just uses this regex. \nThe repeated regex declarations in our configs looks bad and can be easily replaced with something like \"word counter\"","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1777701867","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -110,69 +107,67 @@ export class FormattingEvaluatorModule implements Module {\n   _getFormattingScore(comment: GithubCommentScore) {\n     // Change the \\r to \\n to fix markup interpretation\n     const html = this._md.render(comment.content.replaceAll(\"\\r\", \"\\n\"));\n-    logger.debug(\"Will analyze formatting for the current content\", { comment: comment.content, html });\n+    logger.debug(\"Will analyze formatting for the current content:\", { comment: comment.content, html });\n     const temp = new JSDOM(html);\n     if (temp.window.document.body) {\n-      const res = this.classifyTagsWithWordCount(temp.window.document.body, comment.type);\n-      return { formatting: res };\n+      const res = this._classifyTagsWithWordCount(temp.window.document.body, comment.type);\n+      return { formatting: res.formatting, regex: res.regex };\n     } else {\n       throw new Error(`Could not create DOM for comment [${comment}]`);\n     }\n   }\n \n-  _countSymbols(regexes: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"rewards\"][\"regex\"], text: string) {\n-    const counts: { [p: string]: { count: number; multiplier: number } } = {};\n-    for (const [regex, multiplier] of Object.entries(regexes)) {\n+  _countSymbolsFromRegex(\n+    regexes: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"rewards\"][\"regex\"],\n+    text: string\n+  ) {\n+    const counts: RegexCount = {};\n+    for (const [regex, wordValue] of Object.entries(regexes)) {\n       const match = text.trim().match(new RegExp(regex, \"g\"));\n+      const wordCount = match?.length || 0;\n+      const result = new Decimal(wordCount).pow(this._wordCountExponent).mul(wordValue).toDecimalPlaces(2).toNumber();\n       counts[regex] = {\n-        count: match?.length || 1,\n-        multiplier,\n+        wordCount,\n+        wordValue,\n+        result,\n       };\n     }","score":{"reward":7.392,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":65.16823529411766,"syllables":75,"sentences":3,"score":0.9483176470588234},"multiplier":1,"relevance":0.8}},{"id":1778710740,"content":"Can handle in a new pull but basically I'm suggesting to hard code this regex in place of a new config property so the config looks prettier.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1778710740","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -110,69 +107,67 @@ export class FormattingEvaluatorModule implements Module {\n   _getFormattingScore(comment: GithubCommentScore) {\n     // Change the \\r to \\n to fix markup interpretation\n     const html = this._md.render(comment.content.replaceAll(\"\\r\", \"\\n\"));\n-    logger.debug(\"Will analyze formatting for the current content\", { comment: comment.content, html });\n+    logger.debug(\"Will analyze formatting for the current content:\", { comment: comment.content, html });\n     const temp = new JSDOM(html);\n     if (temp.window.document.body) {\n-      const res = this.classifyTagsWithWordCount(temp.window.document.body, comment.type);\n-      return { formatting: res };\n+      const res = this._classifyTagsWithWordCount(temp.window.document.body, comment.type);\n+      return { formatting: res.formatting, regex: res.regex };\n     } else {\n       throw new Error(`Could not create DOM for comment [${comment}]`);\n     }\n   }\n \n-  _countSymbols(regexes: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"rewards\"][\"regex\"], text: string) {\n-    const counts: { [p: string]: { count: number; multiplier: number } } = {};\n-    for (const [regex, multiplier] of Object.entries(regexes)) {\n+  _countSymbolsFromRegex(\n+    regexes: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"rewards\"][\"regex\"],\n+    text: string\n+  ) {\n+    const counts: RegexCount = {};\n+    for (const [regex, wordValue] of Object.entries(regexes)) {\n       const match = text.trim().match(new RegExp(regex, \"g\"));\n+      const wordCount = match?.length || 0;\n+      const result = new Decimal(wordCount).pow(this._wordCountExponent).mul(wordValue).toDecimalPlaces(2).toNumber();\n       counts[regex] = {\n-        count: match?.length || 1,\n-        multiplier,\n+        wordCount,\n+        wordValue,\n+        result,\n       };\n     }","score":{"reward":4.212,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":57.55785714285717,"syllables":40,"sentences":1,"score":0.9755785714285717},"multiplier":1,"relevance":0.6}},{"id":2377892909,"content":"The permit link doesn't work. \nAlso I realize that most defaults should be set to 0 probably. It seems like your default scores are very high. \nOff hand what I recall from version one:\n$5: img, code, a\n$1: ol, ul, h1-6\n$0.5: li\n$0.1: word counter,\n$0: blockquote, bold \nPlease fix defaults and ensure permit links are working","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#issuecomment-2377892909","commentType":"PULL_COLLABORATOR","score":{"reward":8.316,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":63,"wordValue":0.1,"result":2.55},"readability":{"fleschKincaid":90.09178571428573,"syllables":79,"sentences":6,"score":0.6990821428571427},"multiplier":1,"relevance":0.9}},{"id":2379037086,"content":"We should throw an error for this instead of generating a fake link.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#issuecomment-2379037086","commentType":"PULL_COLLABORATOR","score":{"reward":2.898,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":76.50153846153849,"syllables":18,"sentences":1,"score":0.8349846153846151},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2319676047,"effect":{"addition":171,"deletion":126},"reward":8.91,"priority":3},{"reviewId":2322379901,"effect":{"addition":427,"deletion":124},"reward":16.53,"priority":3},{"reviewId":2332295832,"effect":{"addition":107,"deletion":94},"reward":6.03,"priority":3},{"reviewId":2333889569,"effect":{"addition":6,"deletion":6},"reward":0.36,"priority":3},{"reviewId":2336429682,"effect":{"addition":44,"deletion":50},"reward":2.82,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 137.239 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>5</td><td>34.65</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.43</td></tr><tr><td>Issue</td><td>Comment</td><td>10</td><td>36.744</td></tr><tr><td>Review</td><td>Comment</td><td>15</td><td>62.415</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121\" target=\"_blank\" rel=\"noopener\">#121</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+171 -126</td><td>3</td><td>8.91</td></tr><tr><td>+427 -124</td><td>3</td><td>16.53</td></tr><tr><td>+107 -94</td><td>3</td><td>6.03</td></tr><tr><td>+6 -6</td><td>3</td><td>0.36</td></tr><tr><td>+44 -50</td><td>3</td><td>2.82</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92\" target=\"_blank\" rel=\"noopener\">I was reviewing this action run and its a lot more clear to me w&hellip;</a></h6></td><td><details><summary>2.67</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 11&#13;    ul:&#13;      score: 0&#13;      elementCount: 2&#13;    li:&#13;      score: 0.1&#13;      elementCount: 6&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.6&#13;regex:&#13;  wordCount: 275&#13;  wordValue: 0.1&#13;  result: 1.07&#13;</pre></details></td><td>1</td><td>1</td><td>3.43</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2299560208\" target=\"_blank\" rel=\"noopener\">Originally created at https://github.com/ubiquibot/conversation-&hellip;</a></h6></td><td><details><summary>1.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.474</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2299587456\" target=\"_blank\" rel=\"noopener\">Hope that you can prioritize this so that I can start fine tunin&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.35</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2352088749\" target=\"_blank\" rel=\"noopener\">Yes as I recall in the old implementation if it came across an \"&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.8</td><td>3</td><td>6.072</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2352316207\" target=\"_blank\" rel=\"noopener\">In normal front-end code I would express this logic as follows:&hellip;</a></h6></td><td><details><summary>2.56</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;  result: 0&#13;regex:&#13;  wordCount: 110&#13;  wordValue: 0.1&#13;  result: 2.56&#13;</pre></details></td><td>0.9</td><td>3</td><td>8.775</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2357720289\" target=\"_blank\" rel=\"noopener\">Relevance should only apply to word count. Tag count should rem&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.392</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2360020719\" target=\"_blank\" rel=\"noopener\">It's really hard to say from those results. It's always been dif&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.4</td><td>3</td><td>2.568</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2360073706\" target=\"_blank\" rel=\"noopener\">Sounds good to me!</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.342</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2382179562\" target=\"_blank\" rel=\"noopener\">Looks like the rewards count is broken</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.245</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2382227483\" target=\"_blank\" rel=\"noopener\">That's strange. It excludes the relevance column with truncated &hellip;</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.845</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/92#issuecomment-2398972541\" target=\"_blank\" rel=\"noopener\">I realize now its in the details table which is all excluded for&hellip;</a></h6></td><td><details><summary>3.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.7</td><td>3</td><td>9.681</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1769498289\" target=\"_blank\" rel=\"noopener\">I'm assuming this was for testing. Let's default at 5 As well a&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.104</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1769498369\" target=\"_blank\" rel=\"noopener\">I would switch these args around and then make it comment?:Ins&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.549</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1769700991\" target=\"_blank\" rel=\"noopener\">Then remove &#96;| undefined&#96;It's logically the same</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.32</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1771522860\" target=\"_blank\" rel=\"noopener\">Where are the standardized headers? Body should be json complian&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.92</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1771527708\" target=\"_blank\" rel=\"noopener\">Just use textContent from the top level parent element as we dis&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.9</td><td>3</td><td>5.751</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1771532629\" target=\"_blank\" rel=\"noopener\">Is there another config to subtract words inside for this and bl&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.898</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1771604702\" target=\"_blank\" rel=\"noopener\">We also discussed that several times. The scoring, which is all &hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.8</td><td>3</td><td>5.112</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1771605099\" target=\"_blank\" rel=\"noopener\">Yes</a></h6></td><td><details><summary>0.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0.1&#13;  result: 0.14&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.162</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1771607389\" target=\"_blank\" rel=\"noopener\">Last time I coded for bot features was v1. You can check there. &hellip;</a></h6></td><td><details><summary>2.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0.7</td><td>3</td><td>5.985</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1772685213\" target=\"_blank\" rel=\"noopener\">No. However we need to be able to exclude word count from &#96&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.192</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1773100601\" target=\"_blank\" rel=\"noopener\">Default to &#96;true&#96; The only ones that don't count words&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.604</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1777701867\" target=\"_blank\" rel=\"noopener\">We are currently only using it for word counting which I kind of&hellip;</a></h6></td><td><details><summary>2.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 51&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>0.8</td><td>3</td><td>7.392</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1778710740\" target=\"_blank\" rel=\"noopener\">Can handle in a new pull but basically I'm suggesting to hard co&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.6</td><td>3</td><td>4.212</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#issuecomment-2377892909\" target=\"_blank\" rel=\"noopener\">The permit link doesn't work. Also I realize that most defaults&hellip;</a></h6></td><td><details><summary>2.55</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 63&#13;  wordValue: 0.1&#13;  result: 2.55&#13;</pre></details></td><td>0.9</td><td>3</td><td>8.316</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#issuecomment-2379037086\" target=\"_blank\" rel=\"noopener\">We should throw an error for this instead of generating a fake l&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.898</td></tr></tbody></table></details>"},"whilefoo":{"total":30.42,"userId":139262667,"comments":[{"id":1777696954,"content":"regex doesn't necessarily mean words so this doesn't make sense to me","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1777696954","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -110,69 +107,67 @@ export class FormattingEvaluatorModule implements Module {\n   _getFormattingScore(comment: GithubCommentScore) {\n     // Change the \\r to \\n to fix markup interpretation\n     const html = this._md.render(comment.content.replaceAll(\"\\r\", \"\\n\"));\n-    logger.debug(\"Will analyze formatting for the current content\", { comment: comment.content, html });\n+    logger.debug(\"Will analyze formatting for the current content:\", { comment: comment.content, html });\n     const temp = new JSDOM(html);\n     if (temp.window.document.body) {\n-      const res = this.classifyTagsWithWordCount(temp.window.document.body, comment.type);\n-      return { formatting: res };\n+      const res = this._classifyTagsWithWordCount(temp.window.document.body, comment.type);\n+      return { formatting: res.formatting, regex: res.regex };\n     } else {\n       throw new Error(`Could not create DOM for comment [${comment}]`);\n     }\n   }\n \n-  _countSymbols(regexes: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"rewards\"][\"regex\"], text: string) {\n-    const counts: { [p: string]: { count: number; multiplier: number } } = {};\n-    for (const [regex, multiplier] of Object.entries(regexes)) {\n+  _countSymbolsFromRegex(\n+    regexes: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"rewards\"][\"regex\"],\n+    text: string\n+  ) {\n+    const counts: RegexCount = {};\n+    for (const [regex, wordValue] of Object.entries(regexes)) {\n       const match = text.trim().match(new RegExp(regex, \"g\"));\n+      const wordCount = match?.length || 0;\n+      const result = new Decimal(wordCount).pow(this._wordCountExponent).mul(wordValue).toDecimalPlaces(2).toNumber();\n       counts[regex] = {\n-        count: match?.length || 1,\n-        multiplier,\n+        wordCount,\n+        wordValue,\n+        result,\n       };\n     }","score":{"reward":2.61,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":77.81071428571428,"syllables":19,"sentences":1,"score":0.8218928571428572},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2332288075,"effect":{"addition":644,"deletion":283},"reward":27.81,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 30.42 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>27.81</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>2.61</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121\" target=\"_blank\" rel=\"noopener\">#121</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+644 -283</td><td>3</td><td>27.81</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/121#discussion_r1777696954\" target=\"_blank\" rel=\"noopener\">regex doesn't necessarily mean words so this doesn't make sense &hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.6</td><td>3</td><td>2.61</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_47.json","json":{"gentlementlegen":{"userId":9807008,"total":25.616,"task":{"reward":25,"multiplier":1},"comments":[{"id":2359870571,"content":"@0x4007 Do you want me to rebase your PR and reopen it, or it is not an emergency and you'll do that next week?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/47#issuecomment-2359870571","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.106,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":79.94000000000001,"syllables":30,"sentences":1,"score":0.8005999999999999},"multiplier":0.25,"relevance":0.2}},{"id":2079945202,"content":"Resolves #47\r\nQA: https://github.com/Meniole/command-start-stop/issues/22","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/53","commentType":"PULL_SPECIFICATION","score":{"reward":0.51,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":73.84500000000001,"syllables":18,"sentences":2,"score":0.8615499999999998},"multiplier":1,"relevance":0.3}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 25.616 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.106</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.51</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/47#issuecomment-2359870571\" target=\"_blank\" rel=\"noopener\">@0x4007 Do you want me to rebase your PR and reopen it, or it is&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.106</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/53\" target=\"_blank\" rel=\"noopener\">Resolves #47QA: https://github.com/Meniole/command-start-stop/&hellip;</a></h6></td><td><details><summary>1.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.51</td></tr></tbody></table></details>"},"0x4007":{"total":8.86,"userId":4975670,"comments":[{"id":2359871289,"content":"You can rebase probably and no it's not an emergency but should only take a few seconds","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/47#issuecomment-2359871289","commentType":"ISSUE_AUTHOR","score":{"reward":1.416,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":66.36500000000001,"syllables":26,"sentences":1,"score":0.9363499999999999},"multiplier":1,"relevance":0.8}},{"id":2359906973,"content":"Guess we should've split the assignee reward but it's ok","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/47#issuecomment-2359906973","commentType":"ISSUE_AUTHOR","score":{"reward":0.504,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":88.905,"syllables":15,"sentences":1,"score":0.71095},"multiplier":1,"relevance":0.4}},{"id":2526320837,"content":"# New design\r\n<samp>\r\n<table>\r\n<tr><td>Deadline</td><td><b>Sat, Sep 14, 11:37 AM UTC</b></td></tr>\r\n<tr><td>Beneficiary</td><td><b>0x4007CE2083c7F3E18097aeB3A39bb8eC149a341d</b></td></tr>\r\n</table>\r\n</samp>\r\n_Originally posted by @ubiquity-os[bot] in https://github.com/ubiquibot/assistive-pricing/issues/33#issuecomment-2350931464_","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/47","commentType":"ISSUE_SPECIFICATION","score":{"reward":5.19,"formatting":{"content":{"h1":{"score":1,"elementCount":1},"p":{"score":0,"elementCount":7},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":2},"priority":1,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":43.845051020408164,"syllables":80,"sentences":2,"score":0.8384505102040817},"multiplier":1,"relevance":1}},{"id":2359900203,"content":"Somehow tests broke though","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/53#issuecomment-2359900203","commentType":"PULL_COLLABORATOR","score":{"reward":0.11,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.2}}],"reviewRewards":[{"reviews":[{"reviewId":2314310365,"effect":{"addition":116,"deletion":48},"reward":1.64,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/53"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 8.86 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>1.64</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.19</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>1.92</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.11</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/53\" target=\"_blank\" rel=\"noopener\">#53</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+116 -48</td><td>1</td><td>1.64</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/47\" target=\"_blank\" rel=\"noopener\"># New design&lt;samp&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;D&hellip;</a></h6></td><td><details><summary>4.15</summary><pre>content:&#13;  content:&#13;    h1:&#13;      score: 1&#13;      elementCount: 1&#13;    p:&#13;      score: 0&#13;      elementCount: 7&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 2&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.15&#13;</pre></details></td><td>1</td><td>1</td><td>5.19</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/47#issuecomment-2359871289\" target=\"_blank\" rel=\"noopener\">You can rebase probably and no it's not an emergency but should &hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.8</td><td>1</td><td>1.416</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/47#issuecomment-2359906973\" target=\"_blank\" rel=\"noopener\">Guess we should've split the assignee reward but it's ok</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.504</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/53#issuecomment-2359900203\" target=\"_blank\" rel=\"noopener\">Somehow tests broke though</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.11</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_316.json","json":{"gentlementlegen":{"userId":9807008,"total":57.452,"task":{"reward":50,"multiplier":1},"comments":[{"id":2743015832,"content":"@shiv810 I am a bit confused by the recommendations here","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/316#issuecomment-2743015832","commentType":"ISSUE_AUTHOR","score":{"reward":0.684,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":69.78500000000001,"syllables":15,"sentences":1,"score":0.9021499999999999},"multiplier":1,"relevance":0.3}},{"id":2743093901,"content":"@0x4007 Right but the second user and repo are not even part of our organization, does that make sense?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/316#issuecomment-2743093901","commentType":"ISSUE_AUTHOR","score":{"reward":0.366,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":67.32894736842107,"syllables":27,"sentences":1,"score":0.9267105263157893},"multiplier":1,"relevance":0.1}},{"id":2743095614,"content":"I'll work on this as it makes tests fail too often and it gets annoying.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/316#issuecomment-2743095614","commentType":"ISSUE_AUTHOR","score":{"reward":2.772,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":90.13250000000001,"syllables":19,"sentences":1,"score":0.6986749999999999},"multiplier":1,"relevance":0.9}},{"id":2938015403,"content":"Often, Jest testing suite fails due to tests exceeding their allowed runtime. This is due to RPCs being extremely slow at times. For testing, it would make more sense to mock these because there are not needed and would allow for much faster and reliable testing.\nOptions to consider:\n- mocking the RPC package via Jest\n- mocking endpoints via MSWJS\n- using a local server like Anvil","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/316","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.63,"formatting":{"content":{"p":{"score":0,"elementCount":1},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3}},"result":0.3},"priority":1,"words":{"wordCount":65,"wordValue":0.1,"result":2.56},"readability":{"fleschKincaid":70.59971153846155,"syllables":92,"sentences":4,"score":0.8940028846153845},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 57.452 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.63</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>3.822</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/316\" target=\"_blank\" rel=\"noopener\">Often, Jest testing suite fails due to tests exceeding their all&hellip;</a></h6></td><td><details><summary>2.86</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;  result: 0.3&#13;regex:&#13;  wordCount: 65&#13;  wordValue: 0.1&#13;  result: 2.56&#13;</pre></details></td><td>1</td><td>1</td><td>3.63</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/316#issuecomment-2743015832\" target=\"_blank\" rel=\"noopener\">@shiv810 I am a bit confused by the recommendations here</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.684</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/316#issuecomment-2743093901\" target=\"_blank\" rel=\"noopener\">@0x4007 Right but the second user and repo are not even part of &hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.366</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/316#issuecomment-2743095614\" target=\"_blank\" rel=\"noopener\">I'll work on this as it makes tests fail too often and it gets a&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.9</td><td>2</td><td>2.772</td></tr></tbody></table></details>"},"0x4007":{"total":0,"userId":4975670,"comments":[{"id":2743078367,"content":"@gentlementlegen you have been appointed, the OS has spoken","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/316#issuecomment-2743078367","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":56.70000000000002,"syllables":15,"sentences":1,"score":0.9670000000000002},"multiplier":1,"relevance":0}},{"id":2743162626,"content":"I think I made a proposal to discount relevance based on repo and org like 25 and 50%\nWe never implemented yet because it doesn't seem like a priority.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/316#issuecomment-2743162626","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":57.945000000000036,"syllables":42,"sentences":1,"score":0.9794500000000004},"multiplier":1,"relevance":0}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/319"}]},"whilefoo":{"total":22.151,"userId":139262667,"comments":[{"id":2009257640,"content":"doesn't this mean this is also an issue in production?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/319#discussion_r2009257640","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,149 @@\n+import { decrypt, parseDecryptedPrivateKey } from \"@ubiquity-os/permit-generation/utils\";\n+import { ethers, utils } from \"ethers\";\n+import { ContextPlugin } from \"../../src/types/plugin-input\";\n+\n+type PermitDetails = {\n+  token: string; // address\n+  amount: ethers.BigNumberish; // uint160\n+  expiration: string; // uint48\n+  nonce: ethers.BigNumberish; // uint48\n+};\n+\n+type PermitSingle = {\n+  details: PermitDetails;\n+  spender: string; // address\n+  sigDeadline: ethers.BigNumberish; // uint256\n+};\n+\n+// These are the EIP-712 type definitions from Uniswap's Permit2.\n+const permit2Types = {\n+  PermitSingle: [\n+    { name: \"details\", type: \"PermitDetails\" },\n+    { name: \"spender\", type: \"address\" },\n+    { name: \"sigDeadline\", type: \"uint256\" },\n+  ],\n+  PermitDetails: [\n+    { name: \"token\", type: \"address\" },\n+    { name: \"amount\", type: \"uint160\" },\n+    { name: \"expiration\", type: \"uint48\" },\n+    { name: \"nonce\", type: \"uint48\" },\n+  ],\n+};\n+\n+/**\n+ * signPermit2() generates an EIP-712 signature for Uniswap's Permit2.\n+ *\n+ * @param privateKey the private key of the signer\n+ * @param permit2Address the deployed Permit2 contract address\n+ * @param chainId the chain ID\n+ * @param permitSingle the permit data\n+ * @returns the signature string\n+ */\n+export async function signPermit2(\n+  privateKey: string,\n+  permit2Address: string,\n+  chainId: number,\n+  permitSingle: PermitSingle\n+): Promise<string> {\n+  const domainData = {\n+    name: \"Permit2\",\n+    version: \"1\",\n+    chainId,\n+    verifyingContract: permit2Address,\n+  };\n+\n+  const wallet = new ethers.Wallet(privateKey);\n+  return wallet._signTypedData(domainData, permit2Types, permitSingle);\n+}\n+\n+async function getPrivateKey(evmPrivateEncrypted: string) {\n+  try {\n+    const privateKeyDecrypted = await decrypt(evmPrivateEncrypted, String(process.env.X25519_PRIVATE_KEY));\n+    const privateKeyParsed = parseDecryptedPrivateKey(privateKeyDecrypted);\n+    const privateKey = privateKeyParsed.privateKey;\n+    if (!privateKey) throw new Error(\"Private key is not defined\");\n+    return privateKey;\n+  } catch (error) {\n+    const errorMessage = `Failed to decrypt a private key: ${error}`;\n+    throw new Error(errorMessage);\n+  }\n+}\n+\n+/**\n+ * Generates a claim base64 encoded compatible with pay.ubq.fi\n+ */\n+export async function generatePermitUrlPayload(\n+  context: ContextPlugin,\n+  permitRequests: {\n+    type: string,\n+    username: string,\n+    amount: number\n+    tokenAddress: string\n+  }[]\n+) {\n+  const {amount, username} = permitRequests[0];\n+  // @ts-ignore\n+  const {config, adapters, payload} = context;\n+  const chainId = config.evmNetworkId\n+  const privateKey = await getPrivateKey(context.config.evmPrivateEncrypted);\n+  const permit2Address = \"0x000000000022D473030F116dDEE9F6B43aC78BA3\";\n+  const convertedAmount = utils.parseUnits(amount.toString(), 18);\n+  const deadline = new Date(0).getTime().toString();\n+  const spenderWallet = new ethers.Wallet(privateKey);\n+  const { data: userData } = await context.octokit.rest.users.getByUsername({ username });\n+\n+  context.logger.info(\"Generating permit.\", {\n+    username,\n+    amount,\n+    chainId,\n+  });\n+\n+  if (!userData) {\n+    throw new Error(`GitHub user was not found for id ${username}`);\n+  }\n+\n+  let nodeId = \"\";\n+  if ('issue' in payload) {\n+    nodeId = payload.issue.node_id\n+  }\n+  // Had to truncate the nonce to fit in an uint48\n+  const nonce =\n+    BigInt(utils.keccak256(utils.toUtf8Bytes(`${userData.id}-${nodeId}`))) % BigInt(2 ** 48);","score":{"reward":0.48,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":80.30636363636367,"syllables":15,"sentences":1,"score":0.7969363636363633},"multiplier":1,"relevance":0.2}},{"id":2010479433,"content":"I suppose if it gets truncated then it means that there's a higher chance that a collision happens although it's probably still very unlikely.\r\nJust looked up the permit2 contract and it shows that nonce is [uint256](https://github.com/Uniswap/permit2/blob/cc56ad0f3439c502c246fc5cfcc3db92bb8b7219/src/interfaces/ISignatureTransfer.sol#L33)\r\nIt seems you got those types from [AllowanceTransfer](https://github.com/Uniswap/permit2/blob/cc56ad0f3439c502c246fc5cfcc3db92bb8b7219/src/interfaces/IAllowanceTransfer.sol) but we are using SignatureTransfer","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/319#discussion_r2010479433","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,149 @@\n+import { decrypt, parseDecryptedPrivateKey } from \"@ubiquity-os/permit-generation/utils\";\n+import { ethers, utils } from \"ethers\";\n+import { ContextPlugin } from \"../../src/types/plugin-input\";\n+\n+type PermitDetails = {\n+  token: string; // address\n+  amount: ethers.BigNumberish; // uint160\n+  expiration: string; // uint48\n+  nonce: ethers.BigNumberish; // uint48\n+};\n+\n+type PermitSingle = {\n+  details: PermitDetails;\n+  spender: string; // address\n+  sigDeadline: ethers.BigNumberish; // uint256\n+};\n+\n+// These are the EIP-712 type definitions from Uniswap's Permit2.\n+const permit2Types = {\n+  PermitSingle: [\n+    { name: \"details\", type: \"PermitDetails\" },\n+    { name: \"spender\", type: \"address\" },\n+    { name: \"sigDeadline\", type: \"uint256\" },\n+  ],\n+  PermitDetails: [\n+    { name: \"token\", type: \"address\" },\n+    { name: \"amount\", type: \"uint160\" },\n+    { name: \"expiration\", type: \"uint48\" },\n+    { name: \"nonce\", type: \"uint48\" },\n+  ],\n+};\n+\n+/**\n+ * signPermit2() generates an EIP-712 signature for Uniswap's Permit2.\n+ *\n+ * @param privateKey the private key of the signer\n+ * @param permit2Address the deployed Permit2 contract address\n+ * @param chainId the chain ID\n+ * @param permitSingle the permit data\n+ * @returns the signature string\n+ */\n+export async function signPermit2(\n+  privateKey: string,\n+  permit2Address: string,\n+  chainId: number,\n+  permitSingle: PermitSingle\n+): Promise<string> {\n+  const domainData = {\n+    name: \"Permit2\",\n+    version: \"1\",\n+    chainId,\n+    verifyingContract: permit2Address,\n+  };\n+\n+  const wallet = new ethers.Wallet(privateKey);\n+  return wallet._signTypedData(domainData, permit2Types, permitSingle);\n+}\n+\n+async function getPrivateKey(evmPrivateEncrypted: string) {\n+  try {\n+    const privateKeyDecrypted = await decrypt(evmPrivateEncrypted, String(process.env.X25519_PRIVATE_KEY));\n+    const privateKeyParsed = parseDecryptedPrivateKey(privateKeyDecrypted);\n+    const privateKey = privateKeyParsed.privateKey;\n+    if (!privateKey) throw new Error(\"Private key is not defined\");\n+    return privateKey;\n+  } catch (error) {\n+    const errorMessage = `Failed to decrypt a private key: ${error}`;\n+    throw new Error(errorMessage);\n+  }\n+}\n+\n+/**\n+ * Generates a claim base64 encoded compatible with pay.ubq.fi\n+ */\n+export async function generatePermitUrlPayload(\n+  context: ContextPlugin,\n+  permitRequests: {\n+    type: string,\n+    username: string,\n+    amount: number\n+    tokenAddress: string\n+  }[]\n+) {\n+  const {amount, username} = permitRequests[0];\n+  // @ts-ignore\n+  const {config, adapters, payload} = context;\n+  const chainId = config.evmNetworkId\n+  const privateKey = await getPrivateKey(context.config.evmPrivateEncrypted);\n+  const permit2Address = \"0x000000000022D473030F116dDEE9F6B43aC78BA3\";\n+  const convertedAmount = utils.parseUnits(amount.toString(), 18);\n+  const deadline = new Date(0).getTime().toString();\n+  const spenderWallet = new ethers.Wallet(privateKey);\n+  const { data: userData } = await context.octokit.rest.users.getByUsername({ username });\n+\n+  context.logger.info(\"Generating permit.\", {\n+    username,\n+    amount,\n+    chainId,\n+  });\n+\n+  if (!userData) {\n+    throw new Error(`GitHub user was not found for id ${username}`);\n+  }\n+\n+  let nodeId = \"\";\n+  if ('issue' in payload) {\n+    nodeId = payload.issue.node_id\n+  }\n+  // Had to truncate the nonce to fit in an uint48\n+  const nonce =\n+    BigInt(utils.keccak256(utils.toUtf8Bytes(`${userData.id}-${nodeId}`))) % BigInt(2 ** 48);","score":{"reward":9.605,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":2}},"result":2},"priority":2,"words":{"wordCount":52,"wordValue":0.1,"result":2.41},"readability":{"fleschKincaid":53.54500000000003,"syllables":78,"sentences":2,"score":0.9354500000000003},"multiplier":1,"relevance":0.85}},{"id":2016430868,"content":"The code for creating a nonce in `permit-generation` is correct. You just need to change to correct [types](https://github.com/Uniswap/sdks/blob/416793e034dd065fe3310f7c26b75c7255f610bb/sdks/permit2-sdk/src/signatureTransfer.ts#L19) and it should work. Alternatively you can use SDK `@uniswap/permit2-sdk`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/319#discussion_r2016430868","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,149 @@\n+import { decrypt, parseDecryptedPrivateKey } from \"@ubiquity-os/permit-generation/utils\";\n+import { ethers, utils } from \"ethers\";\n+import { ContextPlugin } from \"../../src/types/plugin-input\";\n+\n+type PermitDetails = {\n+  token: string; // address\n+  amount: ethers.BigNumberish; // uint160\n+  expiration: string; // uint48\n+  nonce: ethers.BigNumberish; // uint48\n+};\n+\n+type PermitSingle = {\n+  details: PermitDetails;\n+  spender: string; // address\n+  sigDeadline: ethers.BigNumberish; // uint256\n+};\n+\n+// These are the EIP-712 type definitions from Uniswap's Permit2.\n+const permit2Types = {\n+  PermitSingle: [\n+    { name: \"details\", type: \"PermitDetails\" },\n+    { name: \"spender\", type: \"address\" },\n+    { name: \"sigDeadline\", type: \"uint256\" },\n+  ],\n+  PermitDetails: [\n+    { name: \"token\", type: \"address\" },\n+    { name: \"amount\", type: \"uint160\" },\n+    { name: \"expiration\", type: \"uint48\" },\n+    { name: \"nonce\", type: \"uint48\" },\n+  ],\n+};\n+\n+/**\n+ * signPermit2() generates an EIP-712 signature for Uniswap's Permit2.\n+ *\n+ * @param privateKey the private key of the signer\n+ * @param permit2Address the deployed Permit2 contract address\n+ * @param chainId the chain ID\n+ * @param permitSingle the permit data\n+ * @returns the signature string\n+ */\n+export async function signPermit2(\n+  privateKey: string,\n+  permit2Address: string,\n+  chainId: number,\n+  permitSingle: PermitSingle\n+): Promise<string> {\n+  const domainData = {\n+    name: \"Permit2\",\n+    version: \"1\",\n+    chainId,\n+    verifyingContract: permit2Address,\n+  };\n+\n+  const wallet = new ethers.Wallet(privateKey);\n+  return wallet._signTypedData(domainData, permit2Types, permitSingle);\n+}\n+\n+async function getPrivateKey(evmPrivateEncrypted: string) {\n+  try {\n+    const privateKeyDecrypted = await decrypt(evmPrivateEncrypted, String(process.env.X25519_PRIVATE_KEY));\n+    const privateKeyParsed = parseDecryptedPrivateKey(privateKeyDecrypted);\n+    const privateKey = privateKeyParsed.privateKey;\n+    if (!privateKey) throw new Error(\"Private key is not defined\");\n+    return privateKey;\n+  } catch (error) {\n+    const errorMessage = `Failed to decrypt a private key: ${error}`;\n+    throw new Error(errorMessage);\n+  }\n+}\n+\n+/**\n+ * Generates a claim base64 encoded compatible with pay.ubq.fi\n+ */\n+export async function generatePermitUrlPayload(\n+  context: ContextPlugin,\n+  permitRequests: {\n+    type: string,\n+    username: string,\n+    amount: number\n+    tokenAddress: string\n+  }[]\n+) {\n+  const {amount, username} = permitRequests[0];\n+  // @ts-ignore\n+  const {config, adapters, payload} = context;\n+  const chainId = config.evmNetworkId\n+  const privateKey = await getPrivateKey(context.config.evmPrivateEncrypted);\n+  const permit2Address = \"0x000000000022D473030F116dDEE9F6B43aC78BA3\";\n+  const convertedAmount = utils.parseUnits(amount.toString(), 18);\n+  const deadline = new Date(0).getTime().toString();\n+  const spenderWallet = new ethers.Wallet(privateKey);\n+  const { data: userData } = await context.octokit.rest.users.getByUsername({ username });\n+\n+  context.logger.info(\"Generating permit.\", {\n+    username,\n+    amount,\n+    chainId,\n+  });\n+\n+  if (!userData) {\n+    throw new Error(`GitHub user was not found for id ${username}`);\n+  }\n+\n+  let nodeId = \"\";\n+  if ('issue' in payload) {\n+    nodeId = payload.issue.node_id\n+  }\n+  // Had to truncate the nonce to fit in an uint48\n+  const nonce =\n+    BigInt(utils.keccak256(utils.toUtf8Bytes(`${userData.id}-${nodeId}`))) % BigInt(2 ** 48);","score":{"reward":6.346,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":87.40756410256414,"syllables":34,"sentences":3,"score":0.7259243589743586},"multiplier":1,"relevance":0.95}}],"reviewRewards":[{"reviews":[{"reviewId":2708805985,"effect":{"addition":151,"deletion":135},"reward":5.72,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/319"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 22.151 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>5.72</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>16.431</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/319\" target=\"_blank\" rel=\"noopener\">#319</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+151 -135</td><td>2</td><td>5.72</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/319#discussion_r2009257640\" target=\"_blank\" rel=\"noopener\">doesn't this mean this is also an issue in production?</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.48</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/319#discussion_r2010479433\" target=\"_blank\" rel=\"noopener\">I suppose if it gets truncated then it means that there's a high&hellip;</a></h6></td><td><details><summary>4.41</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 52&#13;  wordValue: 0.1&#13;  result: 2.41&#13;</pre></details></td><td>0.85</td><td>2</td><td>9.605</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/319#discussion_r2016430868\" target=\"_blank\" rel=\"noopener\">The code for creating a nonce in &#96;permit-generation&#96; is &hellip;</a></h6></td><td><details><summary>2.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.95</td><td>2</td><td>6.346</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_129.json","json":{"gentlementlegen":{"userId":9807008,"total":20.89,"task":{"reward":12,"multiplier":1},"comments":[{"id":2796823804,"content":"I think it basically should be disabled in respect to automations for normal GitHub issues without pricing. Then it won't get in the way for partners easing into using the system\n_Originally posted by @0x4007 in https://github.com/ubiquity-os/ubiquity-os-kernel/issues/234#issuecomment-2599513665_\n## What happened\nThe pull-request that was linked to the issue got closed because the related issue had no price tag set.\n## What was expected\nThe pull-request should not get closed when the price label is missing.\n## How to reproduce\n- create an issue with no price tag, only time estimate for example\n- link a pull-request that would close it (Resolves #)\n- notice that the pull-request gets closed by the bot","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/129","commentType":"ISSUE_SPECIFICATION","score":{"reward":8.89,"formatting":{"content":{"p":{"score":0,"elementCount":3},"em":{"score":0,"elementCount":1},"h2":{"score":1,"elementCount":3},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":4.3},"priority":1,"words":{"wordCount":109,"wordValue":0.1,"result":2.56},"readability":{"fleschKincaid":58.518280991735566,"syllables":177,"sentences":5,"score":0.9851828099173556},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 20.89 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>12</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>8.89</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/129\" target=\"_blank\" rel=\"noopener\">I think it basically should be disabled in respect to automation&hellip;</a></h6></td><td><details><summary>6.86</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    h2:&#13;      score: 1&#13;      elementCount: 3&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 4.3&#13;regex:&#13;  wordCount: 109&#13;  wordValue: 0.1&#13;  result: 2.56&#13;</pre></details></td><td>1</td><td>1</td><td>8.89</td></tr></tbody></table></details>"},"0x4007":{"total":12,"userId":4975670,"comments":[{"id":2621898839,"content":"The term contributor refers to an outside contributor. We use the term collaborator for anybody added to our organization or repo as a team member.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/129#issuecomment-2621898839","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.68,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":38.48350000000002,"syllables":46,"sentences":2,"score":0.7848350000000002},"multiplier":1,"relevance":0.4}},{"id":2621900340,"content":"I'm inclined to go with your judgement but not quite understanding how that looks in practice.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/129#issuecomment-2621900340","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.352,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":70.14470588235295,"syllables":24,"sentences":1,"score":0.8985529411764704},"multiplier":1,"relevance":0.7}},{"id":2621909633,"content":"@shiv810","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/129#issuecomment-2621909633","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.036,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":1,"wordValue":0.1,"result":0.14},"readability":{"fleschKincaid":121.22000000000003,"syllables":1,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}},{"id":2621910305,"content":"The term contributor refers to an outside contributor. We use the term collaborator for anybody added to our organization or repo as a team member.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/129#issuecomment-2621910305","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.68,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":38.48350000000002,"syllables":46,"sentences":2,"score":0.7848350000000002},"multiplier":1,"relevance":0.4}},{"id":2621979695,"content":"I'm not sure why I'm having difficulties wrapping my head around the full picture here. Maybe I'm getting sick now. \nI just hope we don't have a situation where we have hanging open pulls that are forgotten about (this used to happen a lot)\nSo either we have follow ups, auto merges, or something else.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/129#issuecomment-2621979695","commentType":"ISSUE_COLLABORATOR","score":{"reward":5.072,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":59,"wordValue":0.1,"result":2.51},"readability":{"fleschKincaid":72.16146892655368,"syllables":80,"sentences":3,"score":0.8783853107344632},"multiplier":1,"relevance":0.8}},{"id":2622143719,"content":"Let's do what you want to do and observe when it's running","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/129#issuecomment-2622143719","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.484,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":95.93928571428573,"syllables":16,"sentences":1,"score":0.6406071428571427},"multiplier":1,"relevance":0.9}},{"id":1935210800,"content":"Why do you need to wrap the logger call with an error that seems wrong","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1935210800","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -71,16 +73,17 @@ export async function start(\n \n   const labels = issue.labels ?? [];\n   const priceLabel = labels.find((label: Label) => label.name.startsWith(\"Price: \"));\n+  const userAssociation = await getUserRoleAndTaskLimit(context, sender.login);\n+  const userRole = getTransformedRole(userAssociation.role);\n \n   const startErrors: Error[] = [];\n \n-  if (!priceLabel) {\n-    const errorText = \"No price label is set to calculate the duration\";\n-    logger.error(errorText, { issueNumber: issue.number });\n-    startErrors.push(new Error(errorText));\n+  // Collaborators and admins can start un-priced tasks\n+  if (!priceLabel && userRole === \"contributor\") {\n+    startErrors.push(new Error(logger.error(\"No price label is set to calculate the duration\", { issueNumber: issue.number }).logMessage.raw));","score":{"reward":2.448,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":95.73000000000002,"syllables":17,"sentences":1,"score":0.6426999999999998},"multiplier":1,"relevance":0.85}},{"id":1935353774,"content":"Still seems wrong. Why not remove new Error","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1935353774","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -71,16 +73,17 @@ export async function start(\n \n   const labels = issue.labels ?? [];\n   const priceLabel = labels.find((label: Label) => label.name.startsWith(\"Price: \"));\n+  const userAssociation = await getUserRoleAndTaskLimit(context, sender.login);\n+  const userRole = getTransformedRole(userAssociation.role);\n \n   const startErrors: Error[] = [];\n \n-  if (!priceLabel) {\n-    const errorText = \"No price label is set to calculate the duration\";\n-    logger.error(errorText, { issueNumber: issue.number });\n-    startErrors.push(new Error(errorText));\n+  // Collaborators and admins can start un-priced tasks\n+  if (!priceLabel && userRole === \"contributor\") {\n+    startErrors.push(new Error(logger.error(\"No price label is set to calculate the duration\", { issueNumber: issue.number }).logMessage.raw));","score":{"reward":1.35,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":97.025,"syllables":10,"sentences":2,"score":0.6297499999999999},"multiplier":1,"relevance":0.75}},{"id":1936741833,"content":"I think you can make a spec and take initiative on it if it's a problem.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1936741833","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -71,16 +73,17 @@ export async function start(\n \n   const labels = issue.labels ?? [];\n   const priceLabel = labels.find((label: Label) => label.name.startsWith(\"Price: \"));\n+  const userAssociation = await getUserRoleAndTaskLimit(context, sender.login);\n+  const userRole = getTransformedRole(userAssociation.role);\n \n   const startErrors: Error[] = [];\n \n-  if (!priceLabel) {\n-    const errorText = \"No price label is set to calculate the duration\";\n-    logger.error(errorText, { issueNumber: issue.number });\n-    startErrors.push(new Error(errorText));\n+  // Collaborators and admins can start un-priced tasks\n+  if (!priceLabel && userRole === \"contributor\") {\n+    startErrors.push(new Error(logger.error(\"No price label is set to calculate the duration\", { issueNumber: issue.number }).logMessage.raw));","score":{"reward":0.81,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":85.07411764705884,"syllables":21,"sentences":1,"score":0.7492588235294115},"multiplier":1,"relevance":0.25}},{"id":1938205167,"content":"It's just weird to me that you have to store error objects in the array. \nAll the other logger classes just work with strings.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1938205167","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -71,16 +73,17 @@ export async function start(\n \n   const labels = issue.labels ?? [];\n   const priceLabel = labels.find((label: Label) => label.name.startsWith(\"Price: \"));\n+  const userAssociation = await getUserRoleAndTaskLimit(context, sender.login);\n+  const userRole = getTransformedRole(userAssociation.role);\n \n   const startErrors: Error[] = [];\n \n-  if (!priceLabel) {\n-    const errorText = \"No price label is set to calculate the duration\";\n-    logger.error(errorText, { issueNumber: issue.number });\n-    startErrors.push(new Error(errorText));\n+  // Collaborators and admins can start un-priced tasks\n+  if (!priceLabel && userRole === \"contributor\") {\n+    startErrors.push(new Error(logger.error(\"No price label is set to calculate the duration\", { issueNumber: issue.number }).logMessage.raw));","score":{"reward":2.856,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":92.62750000000001,"syllables":30,"sentences":2,"score":0.6737249999999999},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2583244873,"effect":{"addition":389,"deletion":55},"reward":8.88,"priority":2},{"reviewId":2588257442,"effect":{"addition":140,"deletion":87},"reward":4.54,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 12 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>⚠️ Your rewards have been limited to the task price of 12 XP.</h6><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>13.42</td></tr><tr><td>Issue</td><td>Comment</td><td>6</td><td>13.304</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>7.464</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133\" target=\"_blank\" rel=\"noopener\">#133</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+389 -55</td><td>2</td><td>8.88</td></tr><tr><td>+140 -87</td><td>2</td><td>4.54</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/129#issuecomment-2621898839\" target=\"_blank\" rel=\"noopener\">The term contributor refers to an outside contributor. We use th&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.4</td><td>2</td><td>1.68</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/129#issuecomment-2621900340\" target=\"_blank\" rel=\"noopener\">I'm inclined to go with your judgement but not quite understandi&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.352</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/129#issuecomment-2621909633\" target=\"_blank\" rel=\"noopener\">@shiv810</a></h6></td><td><details><summary>0.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0.1&#13;  result: 0.14&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.036</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/129#issuecomment-2621910305\" target=\"_blank\" rel=\"noopener\">The term contributor refers to an outside contributor. We use th&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.4</td><td>2</td><td>1.68</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/129#issuecomment-2621979695\" target=\"_blank\" rel=\"noopener\">I'm not sure why I'm having difficulties wrapping my head around&hellip;</a></h6></td><td><details><summary>2.51</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 59&#13;  wordValue: 0.1&#13;  result: 2.51&#13;</pre></details></td><td>0.8</td><td>2</td><td>5.072</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/129#issuecomment-2622143719\" target=\"_blank\" rel=\"noopener\">Let's do what you want to do and observe when it's running</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.9</td><td>2</td><td>2.484</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1935210800\" target=\"_blank\" rel=\"noopener\">Why do you need to wrap the logger call with an error that seems&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.85</td><td>2</td><td>2.448</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1935353774\" target=\"_blank\" rel=\"noopener\">Still seems wrong. Why not remove new Error</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.75</td><td>2</td><td>1.35</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1936741833\" target=\"_blank\" rel=\"noopener\">I think you can make a spec and take initiative on it if it's a &hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.25</td><td>2</td><td>0.81</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1938205167\" target=\"_blank\" rel=\"noopener\">It's just weird to me that you have to store error objects in th&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.856</td></tr></tbody></table></details>"},"whilefoo":{"total":12,"userId":139262667,"comments":[{"id":1936393467,"content":"This is why I proposed long time ago that `LogReturn` should be extending `Error` class so you can use it anywhere that accepts `Error` type","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1936393467","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -71,16 +73,17 @@ export async function start(\n \n   const labels = issue.labels ?? [];\n   const priceLabel = labels.find((label: Label) => label.name.startsWith(\"Price: \"));\n+  const userAssociation = await getUserRoleAndTaskLimit(context, sender.login);\n+  const userRole = getTransformedRole(userAssociation.role);\n \n   const startErrors: Error[] = [];\n \n-  if (!priceLabel) {\n-    const errorText = \"No price label is set to calculate the duration\";\n-    logger.error(errorText, { issueNumber: issue.number });\n-    startErrors.push(new Error(errorText));\n+  // Collaborators and admins can start un-priced tasks\n+  if (!priceLabel && userRole === \"contributor\") {\n+    startErrors.push(new Error(logger.error(\"No price label is set to calculate the duration\", { issueNumber: issue.number }).logMessage.raw));","score":{"reward":3.136,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":76.83227272727274,"syllables":28,"sentences":1,"score":0.8316772727272727},"multiplier":1,"relevance":0.8}},{"id":1936395440,"content":"maybe we should also handle `AggregateError` inside the SDK to have this functionality everywhere","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1936395440","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -107,9 +107,9 @@ export async function userPullRequest(context: Context<\"pull_request.opened\" | \"\n         try {\n           return await start(context, issueWithComment, pull_request.user ?? payload.sender, []);\n         } catch (error) {\n-          context.logger.info(\"The task could not be started, closing linked pull-request.\", { pull_request });\n           await closePullRequest(context, { number: pull_request.number });\n-          throw error;\n+          // Makes sure to concatenate error messages on AggregateError for proper display\n+          throw error instanceof AggregateError ? context.logger.error(error.errors.map(String).join(\"\\n\"), { error }) : error;","score":{"reward":1.932,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":43.963076923076954,"syllables":23,"sentences":1,"score":0.8396307692307695},"multiplier":1,"relevance":0.7}},{"id":1936424286,"content":"this test can be deceiving because there could be both errors (no price label + no business priority) so you wouldn't actually know that it's not working","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1936424286","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -130,7 +132,81 @@ describe(\"Collaborator tests\", () => {\n     const { startStopTask } = await import(\"../src/plugin\");\n     await startStopTask(context);\n     // Make sure the author is the one who starts and not the sender who modified the comment\n-    expect(start).toHaveBeenCalledWith(expect.anything(), expect.anything(), { id: 1, login: \"ubiquity-os-author\" }, []);\n+    expect(start).toHaveBeenCalledWith(expect.anything(), expect.anything(), { id: 1, login: userLogin }, []);\n     start.mockReset();\n   });\n+  it(\"Should properly update the close status of a linked pull-request\", async () => {\n+    const issue = db.issue.findFirst({ where: { id: { equals: 1 } } }) as unknown as Issue;\n+    issue.labels = [];\n+    const sender = db.users.findFirst({ where: { id: { equals: 1 } } }) as unknown as PayloadSender;\n+\n+    const context = createContext(issue, sender, \"\") as Context<\"pull_request.opened\">;\n+    context.eventName = \"pull_request.opened\";\n+    context.payload.pull_request = {\n+      html_url: \"https://github.com/ubiquity-os-marketplace/command-start-stop\",\n+      number: 1,\n+      user: {\n+        id: 1,\n+        login: userLogin,\n+      },\n+    } as unknown as Context<\"pull_request.edited\">[\"payload\"][\"pull_request\"];\n+    context.octokit = {\n+      rest: {\n+        pulls: {\n+          update: jest.fn(),\n+        },\n+      },\n+      graphql: {\n+        paginate: jest.fn(() =>\n+          Promise.resolve({\n+            repository: {\n+              pullRequest: {\n+                closingIssuesReferences: {\n+                  nodes: [\n+                    {\n+                      assignees: {\n+                        nodes: [],\n+                      },\n+                      labels: {\n+                        nodes: [{ name: \"Time: <1 Hour\" }],\n+                      },\n+                    },\n+                  ],\n+                },\n+              },\n+            },\n+          })\n+        ),\n+      },\n+    } as unknown as Context<\"pull_request.edited\">[\"octokit\"];\n+    jest.unstable_mockModule(\"@supabase/supabase-js\", () => ({\n+      createClient: jest.fn(),\n+    }));\n+    jest.unstable_mockModule(\"../src/adapters\", () => ({\n+      createAdapters: jest.fn(),\n+    }));\n+    const { startStopTask } = await import(\"../src/plugin\");\n+    await expect(startStopTask(context)).rejects.toMatchObject({\n+      logMessage: {\n+        raw: expect.stringContaining(\"No price label is set to calculate the duration\"),\n+      },\n+    });\n+    context.octokit = {\n+      ...context.octokit,\n+      //@ts-expect-error partial mock of the endpoint\n+      paginate: jest.fn(() => []),\n+      rest: {\n+        ...context.octokit.rest,\n+        orgs: {\n+          //@ts-expect-error partial mock of the endpoint\n+          getMembershipForUser: jest.fn(() => ({ data: { role: \"member\" } })),\n+        },\n+      },\n+    };\n+    await expect(startStopTask(context)).rejects.toMatchObject({\n+      logMessage: {\n+        raw: expect.stringContaining(\"This task does not reflect a business priority at the moment\"),\n+      },\n+    });","score":{"reward":4.212,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":57.55785714285717,"syllables":40,"sentences":1,"score":0.9755785714285717},"multiplier":1,"relevance":0.9}},{"id":1937647078,"content":"why did this change?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1937647078","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -152,11 +148,7 @@ describe(\"User start/stop\", () => {\n     expect(content).toEqual(\"Linked pull-requests closed.\");\n     const logs = infoSpy.mock.calls.flat();\n     expect(logs[0]).toMatch(/Opened prs/);\n-    expect(cleanLogString(logs[3])).toMatch(\n-      cleanLogString(\n-        \" › ```diff# These linked pull requests are closed:  http://github.com/ubiquity/test-repo/pull/2  http://github.com/ubiquity/test-repo/pull/3\"\n-      )\n-    );\n+    expect(cleanLogString(logs[3])).toMatch(cleanLogString(\"›Closinglinkedpull-request.\"));","score":{"reward":0.57,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2585223381,"effect":{"addition":389,"deletion":55},"reward":8.88,"priority":2},{"reviewId":2587355908,"effect":{"addition":140,"deletion":87},"reward":4.54,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 12 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>13.42</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>9.85</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133\" target=\"_blank\" rel=\"noopener\">#133</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+389 -55</td><td>2</td><td>8.88</td></tr><tr><td>+140 -87</td><td>2</td><td>4.54</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1936393467\" target=\"_blank\" rel=\"noopener\">This is why I proposed long time ago that &#96;LogReturn&#96; sh&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.8</td><td>2</td><td>3.136</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1936395440\" target=\"_blank\" rel=\"noopener\">maybe we should also handle &#96;AggregateError&#96; inside the &hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.932</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1936424286\" target=\"_blank\" rel=\"noopener\">this test can be deceiving because there could be both errors (n&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.9</td><td>2</td><td>4.212</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/133#discussion_r1937647078\" target=\"_blank\" rel=\"noopener\">why did this change?</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.5</td><td>2</td><td>0.57</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_33.json","json":{"0x4007":{"userId":4975670,"total":53.95,"task":{"reward":50,"multiplier":1},"comments":[{"id":2526150289,"content":"https://github.com/ubiquibot/assistive-pricing/blob/2fd11e285c61148c01eaa934faf59b247ffe6d34/src/shared/label.ts#L5\r\n- I noticed that many price labels are being set to the `default` color. Fix this to be the correct `price` color.\r\n- Make sure to change the color of incorrect price labels as well.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/33","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.95,"formatting":{"content":{"p":{"score":0,"elementCount":3},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1.2},"priority":1,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":71.00300000000003,"syllables":66,"sentences":5,"score":0.8899699999999997},"multiplier":1,"relevance":1}}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 53.95 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.95</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/33\" target=\"_blank\" rel=\"noopener\">https://github.com/ubiquibot/assistive-pricing/blob/2fd11e285c61&hellip;</a></h6></td><td><details><summary>3.12</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.2&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>1</td><td>1</td><td>3.95</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_128.json","json":{"gentlementlegen":{"userId":9807008,"total":79.68,"task":{"reward":75,"multiplier":1},"comments":[{"id":2375866536,"content":"Good idea, and we also should make sure that the pull-request authors are within the assignees list, or that users who open a PR against an issue where there are not assigned gets closed instantly (I think it is the case) to avoid having open issues linked that will never get merged.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/128#issuecomment-2375866536","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.575,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":53,"wordValue":0.1,"result":2.43},"readability":{"fleschKincaid":38.11169811320758,"syllables":72,"sentences":1,"score":0.7811169811320758},"multiplier":0.25,"relevance":0.7}},{"id":2376391890,"content":"@0x4007 Should we add a warning that the conversation-rewards plugin is awaiting on other tasks to be closed when skipping for this reason? Also I think we should consider drafts as blocking too. Basically anything not closed should stop the generation.\r\nAlso it seems there is not way to prevent an issue close when a linked pull-request is closed, so not sure if we shall reopen it every time: https://github.com/orgs/community/discussions/17308","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/128#issuecomment-2376391890","commentType":"ISSUE_ASSIGNEE","score":{"reward":3.105,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":71,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":67.35484615384617,"syllables":114,"sentences":5,"score":0.9264515384615383},"multiplier":0.25,"relevance":0.9}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 79.68 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>4.68</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/128#issuecomment-2375866536\" target=\"_blank\" rel=\"noopener\">Good idea, and we also should make sure that the pull-request au&hellip;</a></h6></td><td><details><summary>2.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 53&#13;  wordValue: 0.1&#13;  result: 2.43&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.575</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/128#issuecomment-2376391890\" target=\"_blank\" rel=\"noopener\">@0x4007 Should we add a warning that the conversation-rewards pl&hellip;</a></h6></td><td><details><summary>3.6</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 71&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>0.9</td><td>3</td><td>3.105</td></tr></tbody></table></details>"},"0x4007":{"total":29.326,"userId":4975670,"comments":[{"id":2377565335,"content":"Issue close is fine just don't generate the permits and throw a warning for it.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/128#issuecomment-2377565335","commentType":"ISSUE_AUTHOR","score":{"reward":4.266,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":79.5575,"syllables":21,"sentences":1,"score":0.804425},"multiplier":1,"relevance":0.9}},{"id":2378865267,"content":"```diff\n! All linked pull requests must be closed to generate rewards.  \n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/128#issuecomment-2378865267","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.8}},{"id":2549131520,"content":"Sometimes we have complex tasks that require multiple pulls across multiple repositories. When one is merged, and others are still open, the rewards should not generate.\r\n- Check if there are other open pulls against the issue when `issues.closed` occurs. \r\n- If there are open pulls, abort rewards generation.\r\nContext/example: https://github.com/ubiquity/.github/issues/115","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/128","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.57,"formatting":{"content":{"p":{"score":0,"elementCount":4},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1.2},"priority":1,"words":{"wordCount":48,"wordValue":0.1,"result":2.35},"readability":{"fleschKincaid":55.80909090909094,"syllables":93,"sentences":7,"score":0.9580909090909094},"multiplier":1,"relevance":1}},{"id":2346335995,"content":"Based on QA seems fine.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/132#pullrequestreview-2346335995","commentType":"PULL_COLLABORATOR","score":{"reward":0.621,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}},{"id":1786634621,"content":"I thought our logger abstracts all this away. Why not just add a param `postComment: boolean` in the logger methods? I'm pretty sure I implemented that the first go around. It was the third parameter I believe. \r\n(`message: string, metadata: Record<key, value>, postComment: boolean`)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/132#discussion_r1786634621","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -13,6 +15,11 @@ export async function run() {\n     if (eventPayload.issue.state_reason !== \"completed\") {\n       return logger.info(\"Issue was not closed as completed. Skipping.\").logMessage.raw;\n     }\n+    if (!(await preCheck())) {\n+      const result = logger.error(\"All linked pull requests must be closed to generate rewards.\");\n+      await githubCommentModuleInstance.postComment(result.logMessage.diff);\n+      return result.logMessage.raw;","score":{"reward":6.12,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":82.02700000000003,"syllables":50,"sentences":5,"score":0.7797299999999997},"multiplier":1,"relevance":0.8}},{"id":1787156404,"content":"I think you can file a spec before it's forgotten about","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/132#discussion_r1787156404","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -13,6 +15,11 @@ export async function run() {\n     if (eventPayload.issue.state_reason !== \"completed\") {\n       return logger.info(\"Issue was not closed as completed. Skipping.\").logMessage.raw;\n     }\n+    if (!(await preCheck())) {\n+      const result = logger.error(\"All linked pull requests must be closed to generate rewards.\");\n+      await githubCommentModuleInstance.postComment(result.logMessage.diff);\n+      return result.logMessage.raw;","score":{"reward":1.965,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":74.805,"syllables":17,"sentences":1,"score":0.85195},"multiplier":1,"relevance":0.5}},{"id":2391938424,"content":"All of them but it should only render the rewards when the last one is closed.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/132#issuecomment-2391938424","commentType":"PULL_COLLABORATOR","score":{"reward":3.234,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":90.13250000000001,"syllables":19,"sentences":1,"score":0.6986749999999999},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2346331155,"effect":{"addition":219,"deletion":66},"reward":8.55,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/132"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 29.326 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>8.55</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.57</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>4.266</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>11.94</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/132\" target=\"_blank\" rel=\"noopener\">#132</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+219 -66</td><td>3</td><td>8.55</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/128\" target=\"_blank\" rel=\"noopener\">Sometimes we have complex tasks that require multiple pulls acro&hellip;</a></h6></td><td><details><summary>3.55</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.2&#13;regex:&#13;  wordCount: 48&#13;  wordValue: 0.1&#13;  result: 2.35&#13;</pre></details></td><td>1</td><td>1</td><td>4.57</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/128#issuecomment-2377565335\" target=\"_blank\" rel=\"noopener\">Issue close is fine just don't generate the permits and throw a &hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.9</td><td>3</td><td>4.266</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/128#issuecomment-2378865267\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;diff! All linked pull requests must be closed to&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.8</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/132#pullrequestreview-2346335995\" target=\"_blank\" rel=\"noopener\">Based on QA seems fine.</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.621</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/132#discussion_r1786634621\" target=\"_blank\" rel=\"noopener\">I thought our logger abstracts all this away. Why not just add a&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.8</td><td>3</td><td>6.12</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/132#discussion_r1787156404\" target=\"_blank\" rel=\"noopener\">I think you can file a spec before it's forgotten about</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.965</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/132#issuecomment-2391938424\" target=\"_blank\" rel=\"noopener\">All of them but it should only render the rewards when the last &hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.234</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_102.json","json":{"gentlementlegen":{"userId":9807008,"total":633.594,"task":{"reward":600,"multiplier":1},"comments":[{"id":2310531373,"content":"It can be run locally even now, as long as you provide a valid Open AI key. But it requires you to clone, setup the env etc. which feels less handy than just writing a comment on a testing PR, even more for third parties who want to test.\r\n---\r\nYou could imagine going to `ubiquibot-sandbox`, open an issue and simply type `/rewards url_to_any_issue` and get a preview of the results, then change the configuration and repeat.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2310531373","commentType":"ISSUE_AUTHOR","score":{"reward":9.87,"formatting":{"content":{"p":{"score":0,"elementCount":2},"hr":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":73,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":73.57974315068493,"syllables":99,"sentences":4,"score":0.8642025684931507},"multiplier":1,"relevance":1}},{"id":2310584449,"content":"Except the caching part, this is already runnable client side as long as you provide the full environment and setup up the project, the database etc. Caching and CLI can be added. We can combine this with a command through Github commands so it can run locally and within Github as well.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2310584449","commentType":"ISSUE_AUTHOR","score":{"reward":9.24,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":52,"wordValue":0.1,"result":2.41},"readability":{"fleschKincaid":67.22243589743591,"syllables":75,"sentences":3,"score":0.9277756410256408},"multiplier":1,"relevance":1}},{"id":2310588792,"content":"Probably caching cannot be achieved as easily outside of a local environment, but sure could happen locally.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2310588792","commentType":"ISSUE_AUTHOR","score":{"reward":3.84,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":30.332941176470626,"syllables":32,"sentences":1,"score":0.7033294117647063},"multiplier":1,"relevance":0.8}},{"id":2311474572,"content":"I think both are quite nice because doing it from GitHub allows very quick testing without needing the whole setup locally as well, which is nice to test pull-requests. I think this is quite a long task however.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2311474572","commentType":"ISSUE_AUTHOR","score":{"reward":7.344,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":72.07326923076926,"syllables":53,"sentences":2,"score":0.8792673076923074},"multiplier":1,"relevance":0.9}},{"id":2487074749,"content":"For testing purposes and fine tuning, it would be handy to have a way to run the `conversation-rewards` manually against any pull-request within a sandbox to test and fine tune the incentives as desired.\r\nMy first thought would be to have a `/simulate-rewards issue_url` or some similar command that would generate the results within the issue / pr where it is run, without generating the permits, which would allow for testing and tuning without needed to open / close issues manually to trigger a run.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.3,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":81,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":44.57194444444448,"syllables":116,"sentences":2,"score":0.8457194444444448},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 633.594 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>600</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.3</td></tr><tr><td>Issue</td><td>Comment</td><td>4</td><td>30.294</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102\" target=\"_blank\" rel=\"noopener\">For testing purposes and fine tuning, it would be handy to have &hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 81&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>1</td><td>1</td><td>3.3</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2310531373\" target=\"_blank\" rel=\"noopener\">It can be run locally even now, as long as you provide a valid O&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 73&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>1</td><td>3</td><td>9.87</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2310584449\" target=\"_blank\" rel=\"noopener\">Except the caching part, this is already runnable client side as&hellip;</a></h6></td><td><details><summary>2.41</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 52&#13;  wordValue: 0.1&#13;  result: 2.41&#13;</pre></details></td><td>1</td><td>3</td><td>9.24</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2310588792\" target=\"_blank\" rel=\"noopener\">Probably caching cannot be achieved as easily outside of a local&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.84</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2311474572\" target=\"_blank\" rel=\"noopener\">I think both are quite nice because doing it from GitHub allows &hellip;</a></h6></td><td><details><summary>2.15</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.15&#13;</pre></details></td><td>0.9</td><td>3</td><td>7.344</td></tr></tbody></table></details>"},"0x4007":{"total":105.45,"userId":4975670,"comments":[{"id":2310528182,"content":"How about from a cli?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2310528182","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.863,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":100.24000000000002,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.9}},{"id":2310559957,"content":"Ideally we should be able to live tweak. For example, running this client side and caching all the comments etc. \r\nThen we can edit the config and instantly see what the rewards would be. This requires a client, hence CLI. It would be significantly faster to fine tune incentives this way, with a cache of some sort.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2310559957","commentType":"ISSUE_COLLABORATOR","score":{"reward":9.24,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":57,"wordValue":0.1,"result":2.48},"readability":{"fleschKincaid":79.49557894736843,"syllables":78,"sentences":5,"score":0.8050442105263157},"multiplier":1,"relevance":1}},{"id":2310586097,"content":"Sure. The main thing I am requesting is instant feedback.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2310586097","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.997,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":83.32000000000004,"syllables":14,"sentences":2,"score":0.7667999999999996},"multiplier":1,"relevance":0.9}},{"id":2310597090,"content":"Cool set a time for it and lets focus on the caching bit. Running locally and instant feedback is more useful than test runs on GitHub via a command.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2310597090","commentType":"ISSUE_COLLABORATOR","score":{"reward":6.96,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":75.42784482758621,"syllables":40,"sentences":2,"score":0.8457215517241379},"multiplier":1,"relevance":1}},{"id":2311475987,"content":"Make them two separate tasks and lets prioritize the caching and instant results on local.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2311475987","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.71,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":61.890000000000015,"syllables":23,"sentences":1,"score":0.9810999999999999},"multiplier":1,"relevance":1}},{"id":2420124728,"content":"I wish I could help you with advice but I never tried running this locally. \nIn other news I realize that we could host a UI from this plugin for testing. That could be more convenient than local setup for normal use in the future, but that can be a lower priority task.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2420124728","commentType":"ISSUE_COLLABORATOR","score":{"reward":7.32,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":53,"wordValue":0.1,"result":2.43},"readability":{"fleschKincaid":75.57125786163523,"syllables":71,"sentences":3,"score":0.8442874213836477},"multiplier":1,"relevance":0.8}},{"id":2423732158,"content":"I wasn't considering caching for this purpose, but this is a bit restrictive. If we are tweaking the prompt, then of course we need to run the LLM every time. \r\nHowever, if you want to scope this task to accommodate changes ONLY to the quantitative \"formatting\" score, then it makes sense to cache the LLM score per saved issue as well!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2423732158","commentType":"ISSUE_COLLABORATOR","score":{"reward":8.694,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":62,"wordValue":0.1,"result":2.54},"readability":{"fleschKincaid":71.23897849462368,"syllables":84,"sentences":3,"score":0.8876102150537633},"multiplier":1,"relevance":0.9}},{"id":1845970510,"content":"Elaborate is not the right word to use here \nIs this meaning it is used to serve as a base for future configs?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#discussion_r1845970510","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,12 @@\n+# This file serves as a base to elaborate a custom configuration","score":{"reward":4.221,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":76.82043478260871,"syllables":29,"sentences":1,"score":0.8317956521739128},"multiplier":1,"relevance":0.7}},{"id":1847390423,"content":"Create is a better word.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#discussion_r1847390423","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,12 @@\n+# This file serves as a base to elaborate a custom configuration","score":{"reward":1.035,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":100.24000000000002,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170"},{"reviews":[{"reviewId":2441669023,"effect":{"addition":1713,"deletion":173},"reward":56.58,"priority":3},{"reviewId":2443928685,"effect":{"addition":40,"deletion":21},"reward":1.83,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 105.45 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>58.41</td></tr><tr><td>Issue</td><td>Comment</td><td>7</td><td>41.784</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>5.256</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181\" target=\"_blank\" rel=\"noopener\">#181</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1713 -173</td><td>3</td><td>56.58</td></tr><tr><td>+40 -21</td><td>3</td><td>1.83</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2310528182\" target=\"_blank\" rel=\"noopener\">How about from a cli?</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.9</td><td>3</td><td>1.863</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2310559957\" target=\"_blank\" rel=\"noopener\">Ideally we should be able to live tweak. For example, running th&hellip;</a></h6></td><td><details><summary>2.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 57&#13;  wordValue: 0.1&#13;  result: 2.48&#13;</pre></details></td><td>1</td><td>3</td><td>9.24</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2310586097\" target=\"_blank\" rel=\"noopener\">Sure. The main thing I am requesting is instant feedback.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.997</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2310597090\" target=\"_blank\" rel=\"noopener\">Cool set a time for it and lets focus on the caching bit. Runnin&hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>1</td><td>3</td><td>6.96</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2311475987\" target=\"_blank\" rel=\"noopener\">Make them two separate tasks and lets prioritize the caching and&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>1</td><td>3</td><td>4.71</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2420124728\" target=\"_blank\" rel=\"noopener\">I wish I could help you with advice but I never tried running th&hellip;</a></h6></td><td><details><summary>2.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 53&#13;  wordValue: 0.1&#13;  result: 2.43&#13;</pre></details></td><td>0.8</td><td>3</td><td>7.32</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2423732158\" target=\"_blank\" rel=\"noopener\">I wasn't considering caching for this purpose, but this is a bit&hellip;</a></h6></td><td><details><summary>2.54</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 62&#13;  wordValue: 0.1&#13;  result: 2.54&#13;</pre></details></td><td>0.9</td><td>3</td><td>8.694</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#discussion_r1845970510\" target=\"_blank\" rel=\"noopener\">Elaborate is not the right word to use here Is this meaning it &hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.221</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#discussion_r1847390423\" target=\"_blank\" rel=\"noopener\">Create is a better word.</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.035</td></tr></tbody></table></details>"},"KodeSage":{"total":2.268,"userId":40062598,"comments":[{"id":2420062903,"content":"Hello @gentlementlegen , is the issue still available?\r\nI will like to work on it But I will need some clarification on this on how I can run it locally so I can test it locally and have general insights on the project as I did not understand much from the docs.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2420062903","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.638,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":58.19955882352944,"syllables":74,"sentences":2,"score":0.9819955882352944},"multiplier":0.25,"relevance":0.7}},{"id":2420719107,"content":"alright, thank you.\r\nBut can you still give me the overview of the project.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2420719107","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.63,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":90.95857142857145,"syllables":18,"sentences":2,"score":0.6904142857142855},"multiplier":0.25,"relevance":0.6}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170"},{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 2.268 XP ]</a>&nbsp;</h3><h6>@KodeSage</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>2</td><td>2.268</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2420062903\" target=\"_blank\" rel=\"noopener\">Hello @gentlementlegen , is the issue still available?I will l&hellip;</a></h6></td><td><details><summary>2.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 51&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.638</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/102#issuecomment-2420719107\" target=\"_blank\" rel=\"noopener\">alright, thank you.But can you still give me the overview of t&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.6</td><td>3</td><td>0.63</td></tr></tbody></table></details>"},"Keyrxng":{"total":79.404,"userId":106303466,"comments":[{"id":1828203773,"content":"Could you add `cross-env`? I had to to get this to work","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1828203773","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -7,15 +7,17 @@\n   \"engines\": {\n     \"node\": \">=20.10.0\"\n   },\n+  \"type\": \"module\",\n   \"scripts\": {\n-    \"test\": \"jest --setupFiles dotenv/config --coverage\",\n+    \"test\": \"NODE_OPTIONS=\\\"$NODE_OPTIONS --experimental-vm-modules\\\" jest --setupFiles dotenv/config --coverage\",","score":{"reward":0.672,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":116.6525,"syllables":11,"sentences":2,"score":1},"multiplier":0.25,"relevance":0.7}},{"id":1828208170,"content":"Are you against having a logger exported from somewhere other than `context`? I've found it handy as it means you don't need to pass the logger or ctx through all of your fns. \r\nJust curious if it's allowed oor if it'll hold back PRs in the future","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1828208170","commentType":"PULL_CONTRIBUTOR","diffHunk":"","score":{"reward":1.095,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":50,"wordValue":0.1,"result":2.38},"readability":{"fleschKincaid":83.32233333333336,"syllables":63,"sentences":3,"score":0.7667766666666664},"multiplier":0.25,"relevance":0.5}},{"id":1828212323,"content":"I think we can find this type some friends to live with instead of sitting here alone","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1828212323","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -1,28 +1 @@\n-import * as github from \"@actions/github\";\n-import { config } from \"dotenv\";\n-import { EmitterWebhookEvent as WebhookEvent, EmitterWebhookEventName as WebhookEventName } from \"@octokit/webhooks\";\n-\n-config();\n-\n export type SupportedEvents = \"issues.closed\";","score":{"reward":0.72,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":90.05058823529413,"syllables":20,"sentences":1,"score":0.6994941176470587},"multiplier":0.25,"relevance":0.6}},{"id":1828217087,"content":"just wondering why we don't throw the logger if the SDK is handling the catch? Should we only use `throw new Error` I assume?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1828217087","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -220,16 +217,18 @@ export class ContentEvaluatorModule implements Module {\n     });\n \n     const rawResponse = String(response.choices[0].message.content);\n-    logger.info(`OpenAI raw response (using max_tokens: ${maxTokens}): ${rawResponse}`);\n+    this.context.logger.info(`OpenAI raw response (using max_tokens: ${maxTokens}): ${rawResponse}`);\n \n     const jsonResponse = JSON.parse(rawResponse);\n \n     try {\n       const relevances = Value.Decode(openAiRelevanceResponseSchema, jsonResponse);\n-      logger.info(`Relevances by OpenAI: ${JSON.stringify(relevances)}`);\n+      this.context.logger.info(`Relevances by OpenAI: ${JSON.stringify(relevances)}`);\n       return relevances;\n     } catch (e) {\n-      logger.error(`Invalid response type received from openai while evaluating: ${jsonResponse} \\n\\nError: ${e}`);","score":{"reward":1.152,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":87.99727272727276,"syllables":28,"sentences":2,"score":0.7200272727272724},"multiplier":0.25,"relevance":0.8}},{"id":1828230883,"content":"Do you think the SDK should export a function to create the `customOctokit` it uses to help avoid casts?\r\nIt won't fix everything though because `permit-generation` is running off of it's own `Context` and `octokit` type so it'll need bumped too.\r\nA dedicated task for it for sure","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1828230883","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -36,42 +33,37 @@ interface Payload {\n   issue: { node_id: string };\n }\n \n-export class PermitGenerationModule implements Module {\n-  readonly _configuration: PermitGenerationConfiguration | null = configuration.incentives.permitGeneration;\n-  readonly _supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);\n+export class PermitGenerationModule extends BaseModule {\n+  readonly _configuration: PermitGenerationConfiguration | null = this.context.config.incentives.permitGeneration;\n+  readonly _supabase = createClient<Database>(this.context.env.SUPABASE_URL, this.context.env.SUPABASE_KEY);\n \n   async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n     const payload: Context[\"payload\"] & Payload = {\n       ...context.payload.inputs,\n-      issueUrl: program.eventPayload.issue.html_url,\n-      evmPrivateEncrypted: configuration.evmPrivateEncrypted,\n-      evmNetworkId: configuration.evmNetworkId,\n-      erc20RewardToken: configuration.erc20RewardToken,\n+      issueUrl: this.context.payload.issue.html_url,\n+      evmPrivateEncrypted: this.context.config.evmPrivateEncrypted,\n+      evmNetworkId: this.context.config.evmNetworkId,\n+      erc20RewardToken: this.context.config.erc20RewardToken,\n     };\n     const issueId = Number(payload.issueUrl.match(/\\d+$/)?.[0]);\n     payload.issue = {\n-      node_id: program.eventPayload.issue.node_id,\n+      node_id: this.context.payload.issue.node_id,\n     };\n-    const env = Value.Default(envConfigSchema, process.env) as EnvConfigType;\n-    if (!envValidator.test(env)) {\n-      console.warn(\"[PermitGenerationModule] Invalid env detected, skipping.\");\n-      for (const error of envValidator.errors(env)) {\n-        console.error(error);\n-      }\n-      return Promise.resolve(result);\n-    }\n+    const env = this.context.env;\n     const isPrivateKeyAllowed = await this._isPrivateKeyAllowed(\n       payload.evmPrivateEncrypted,\n-      program.eventPayload.repository.owner.id,\n-      program.eventPayload.repository.id,\n+      this.context.payload.repository.owner.id,\n+      this.context.payload.repository.id,\n       env\n     );\n     if (!isPrivateKeyAllowed) {\n-      console.warn(\"[PermitGenerationModule] Private key is not allowed to be used in this organization/repository.\");\n+      this.context.logger.error(\n+        \"[PermitGenerationModule] Private key is not allowed to be used in this organization/repository.\"\n+      );\n       return Promise.resolve(result);\n     }\n     const eventName = context.eventName as SupportedEvents;\n-    const octokit = getOctokitInstance();\n+    const octokit = this.context.octokit as unknown as Octokit;","score":{"reward":1.491,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":3,"words":{"wordCount":47,"wordValue":0.1,"result":2.33},"readability":{"fleschKincaid":88.33333333333334,"syllables":57,"sentences":3,"score":0.7166666666666666},"multiplier":0.25,"relevance":0.7}},{"id":1828232730,"content":"could remove this comment I think","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1828232730","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -57,41 +33,53 @@ import { getMinimizedCommentStatus } from \"./helpers/get-comment-details\";\n export type IssueParams = ReturnType<typeof parseGitHubUrl>;\n export type PullParams = { owner: string; repo: string; pull_number: number };\n \n-export async function getRepo(params: IssueParams): Promise<GitHubRepository> {\n-  const octokit = getOctokitInstance();\n-  return (await octokit.repos.get(params)).data;\n+// Assuming ContextPlugin contains octokitInstance or a method to get octokitInstance","score":{"reward":0.342,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":87.94500000000002,"syllables":8,"sentences":1,"score":0.7205499999999998},"multiplier":0.25,"relevance":0.6}},{"id":2455427207,"content":"I think I might be doing something wrong\r\n![image](https://github.com/user-attachments/assets/738452e3-2a3b-419b-bfde-798be146fcfc)\r\n![image](https://github.com/user-attachments/assets/b055a0f1-5de6-41fe-8be9-b737b2af9445)\r\nI've bun linked the kernel PR and ran the tests both with the test configs as they are and using my env vars from the `permit-generation` tests and tests are failing for the same reason.\r\n---\r\nIt's unclear what I'm qa-ing in this PR sorry, is it just a general code review as this is a stepping stone PR into the fully featured 'local runs'?\r\nI'm seeing `output.html` but I don't think that's it","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#issuecomment-2455427207","commentType":"PULL_CONTRIBUTOR","score":{"reward":2.241,"formatting":{"content":{"p":{"score":0,"elementCount":6},"hr":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":86,"wordValue":0.1,"result":2.64},"readability":{"fleschKincaid":75.43135658914731,"syllables":104,"sentences":3,"score":0.8456864341085268},"multiplier":0.25,"relevance":0.9}},{"id":2455488708,"content":"Last thing, if you wrote `output.html` as `output.md` you can quick preview it locally and copy/pasting or parsing it shouldn't change anything. Not really important but a little more efficient vs copy/pasting into github or whatever\r\nThis plugin is a beast mentlegen it's going to need it's own plugins shortly lmao 🤣 \r\nQA-d what I could but a little unclear what I'm testing for exactly, anything specific you can point me towards to stress test or whatever I'll be happy to.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#issuecomment-2455488708","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.23,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":3,"words":{"wordCount":86,"wordValue":0.1,"result":2.64},"readability":{"fleschKincaid":41.2086046511628,"syllables":124,"sentences":2,"score":0.812086046511628},"multiplier":0.25,"relevance":0.5}},{"id":2480635857,"content":"Sorry @gentlementlegen if there's any confusion but I've been told by Rndquu not to perform review until things are cleared up regarding my status, I thought 0x4007 would have mentioned it to you sorry man.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#issuecomment-2480635857","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.201,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":50.3827027027027,"syllables":52,"sentences":1,"score":0.903827027027027},"multiplier":0.25,"relevance":0.1}}],"reviewRewards":[{"reviews":[{"reviewId":2413834197,"effect":{"addition":1235,"deletion":1107},"reward":70.26,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170"},{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 79.404 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>70.26</td></tr><tr><td>Review</td><td>Comment</td><td>9</td><td>9.144</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170\" target=\"_blank\" rel=\"noopener\">#170</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1235 -1107</td><td>3</td><td>70.26</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1828203773\" target=\"_blank\" rel=\"noopener\">Could you add &#96;cross-env&#96;? I had to to get this to work</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.7</td><td>3</td><td>0.672</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1828208170\" target=\"_blank\" rel=\"noopener\">Are you against having a logger exported from somewhere other th&hellip;</a></h6></td><td><details><summary>2.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 50&#13;  wordValue: 0.1&#13;  result: 2.38&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.095</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1828212323\" target=\"_blank\" rel=\"noopener\">I think we can find this type some friends to live with instead &hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.6</td><td>3</td><td>0.72</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1828217087\" target=\"_blank\" rel=\"noopener\">just wondering why we don't throw the logger if the SDK is handl&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.152</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1828230883\" target=\"_blank\" rel=\"noopener\">Do you think the SDK should export a function to create the &#96&hellip;</a></h6></td><td><details><summary>2.33</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 47&#13;  wordValue: 0.1&#13;  result: 2.33&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.491</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1828232730\" target=\"_blank\" rel=\"noopener\">could remove this comment I think</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.6</td><td>3</td><td>0.342</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#issuecomment-2455427207\" target=\"_blank\" rel=\"noopener\">I think I might be doing something wrong![image](https://githu&hellip;</a></h6></td><td><details><summary>2.64</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 86&#13;  wordValue: 0.1&#13;  result: 2.64&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.241</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#issuecomment-2455488708\" target=\"_blank\" rel=\"noopener\">Last thing, if you wrote &#96;output.html&#96; as &#96;output.md&hellip;</a></h6></td><td><details><summary>2.64</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 86&#13;  wordValue: 0.1&#13;  result: 2.64&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.23</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#issuecomment-2480635857\" target=\"_blank\" rel=\"noopener\">Sorry @gentlementlegen if there's any confusion but I've been to&hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.201</td></tr></tbody></table></details>"},"whilefoo":{"total":87.831,"userId":139262667,"comments":[{"id":1829546074,"content":"in kernel I had to use `transformIgnorePatterns: []` to transform all node modules to ESM, but does this do the same?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1829546074","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -12,6 +17,11 @@ const cfg: Config = {\n   coverageDirectory: \"coverage\",\n   testTimeout: 20000,\n   roots: [\"<rootDir>\", \"tests\"],\n+  extensionsToTreatAsEsm: [\".ts\"],","score":{"reward":3.675,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":85.13947368421054,"syllables":23,"sentences":1,"score":0.7486052631578946},"multiplier":1,"relevance":0.7}},{"id":1829548209,"content":"does it not run without this? In the kernel I never used this and it worked anyway","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1829548209","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -7,15 +7,17 @@\n   \"engines\": {\n     \"node\": \">=20.10.0\"\n   },\n+  \"type\": \"module\",\n   \"scripts\": {\n-    \"test\": \"jest --setupFiles dotenv/config --coverage\",\n+    \"test\": \"cross-env NODE_OPTIONS=\\\"$NODE_OPTIONS --experimental-vm-modules\\\" jest --setupFiles dotenv/config --coverage\",","score":{"reward":3.84,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":88.72514705882354,"syllables":22,"sentences":2,"score":0.7127485294117646},"multiplier":1,"relevance":0.8}},{"id":1829550353,"content":"I hope using Bun runtime will be without bugs :D","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1829550353","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -7,15 +7,17 @@\n   \"engines\": {\n     \"node\": \">=20.10.0\"\n   },\n+  \"type\": \"module\",\n   \"scripts\": {\n-    \"test\": \"jest --setupFiles dotenv/config --coverage\",\n+    \"test\": \"cross-env NODE_OPTIONS=\\\"$NODE_OPTIONS --experimental-vm-modules\\\" jest --setupFiles dotenv/config --coverage\",\n     \"start\": \"tsx src/index.ts\",\n     \"format\": \"run-s format:lint format:prettier format:cspell\",\n     \"format:lint\": \"eslint --fix .\",\n     \"format:prettier\": \"prettier --write .\",\n     \"format:cspell\": \"cspell **/*\",\n     \"knip\": \"knip\",\n-    \"prepare\": \"husky install\"\n+    \"prepare\": \"husky install\",\n+    \"dev\": \"bun --watch src/index.ts\"","score":{"reward":1.32,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":86.70500000000001,"syllables":13,"sentences":1,"score":0.7329499999999999},"multiplier":1,"relevance":0.4}},{"id":1829552098,"content":"downgrade?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1829552098","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -59,31 +57,34 @@\n     \"@cspell/dict-typescript\": \"3.1.9\",\n     \"@eslint/js\": \"^9.12.0\",\n     \"@mswjs/data\": \"0.16.2\",\n+    \"@octokit/plugin-paginate-graphql\": \"^5.2.4\",\n     \"@types/jest\": \"29.5.12\",\n     \"@types/jsdom\": \"21.1.6\",\n     \"@types/markdown-it\": \"13.0.7\",\n     \"@types/node\": \"20.11.28\",\n     \"babel-jest\": \"29.7.0\",\n+    \"cross-env\": \"^7.0.3\",\n     \"cspell\": \"8.15.2\",\n+    \"dotenv\": \"^16.4.5\",\n     \"eslint\": \"9.12.0\",\n     \"eslint-plugin-check-file\": \"^2.8.0\",\n     \"eslint-plugin-sonarjs\": \"2.0.3\",\n     \"husky\": \"8.0.3\",\n     \"jest\": \"29.7.0\",\n     \"jest-junit\": \"16.0.0\",\n     \"jest-md-dashboard\": \"0.8.0\",\n-    \"knip\": \"5.7.0\",\n+    \"knip\": \"^5.36.2\",\n     \"lint-staged\": \"15.2.2\",\n     \"msw\": \"2.4.9\",\n     \"npm-run-all\": \"4.1.5\",\n     \"prettier\": \"3.3.3\",\n     \"ts-node\": \"10.9.2\",\n-    \"typescript\": \"5.6.2\",\n+    \"typescript\": \"5.5.4\",","score":{"reward":0.306,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":1,"wordValue":0.1,"result":0.14},"readability":{"fleschKincaid":36.62000000000003,"syllables":2,"sentences":1,"score":0.7662000000000003},"multiplier":1,"relevance":0.6}},{"id":1829562452,"content":"this basically assigns it automatically? I never knew that, seems cool but also confusing at first","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1829562452","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -20,12 +19,19 @@ import {\n   IssueParams,\n   PullParams,\n } from \"./start\";\n-import logger from \"./helpers/logger\";\n+import { ContextPlugin } from \"./types/plugin-input\";\n \n export class IssueActivity {\n-  readonly _configuration: DataCollectionConfiguration = configuration.dataCollection;\n+  private readonly _context: ContextPlugin;\n+  readonly _configuration: DataCollectionConfiguration;\n \n-  constructor(private _issueParams: IssueParams) {}\n+  constructor(\n+    context: ContextPlugin,\n+    private _issueParams: IssueParams","score":{"reward":3.36,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":45.377500000000026,"syllables":29,"sentences":2,"score":0.8537750000000003},"multiplier":1,"relevance":0.7}},{"id":2457625422,"content":"is this [PR](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181) the one for local runs? You might wanna update PR names because I was confused :D","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#issuecomment-2457625422","commentType":"PULL_COLLABORATOR","score":{"reward":4.41,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":90.32934210526317,"syllables":24,"sentences":2,"score":0.6967065789473683},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2415948647,"effect":{"addition":1236,"deletion":1112},"reward":70.44,"priority":3},{"reviewId":2419475162,"effect":{"addition":10,"deletion":6},"reward":0.48,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170"},{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 87.831 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>70.92</td></tr><tr><td>Review</td><td>Comment</td><td>6</td><td>16.911</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170\" target=\"_blank\" rel=\"noopener\">#170</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1236 -1112</td><td>3</td><td>70.44</td></tr><tr><td>+10 -6</td><td>3</td><td>0.48</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1829546074\" target=\"_blank\" rel=\"noopener\">in kernel I had to use &#96;transformIgnorePatterns: []&#96; to &hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.675</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1829548209\" target=\"_blank\" rel=\"noopener\">does it not run without this? In the kernel I never used this an&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.84</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1829550353\" target=\"_blank\" rel=\"noopener\">I hope using Bun runtime will be without bugs :D</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.32</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1829552098\" target=\"_blank\" rel=\"noopener\">downgrade?</a></h6></td><td><details><summary>0.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0.1&#13;  result: 0.14&#13;</pre></details></td><td>0.6</td><td>3</td><td>0.306</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#discussion_r1829562452\" target=\"_blank\" rel=\"noopener\">this basically assigns it automatically? I never knew that, seem&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.36</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170#issuecomment-2457625422\" target=\"_blank\" rel=\"noopener\">is this [PR](https://github.com/ubiquity-os-marketplace/text-con&hellip;</a></h6></td><td><details><summary>2.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.5</td><td>3</td><td>4.41</td></tr></tbody></table></details>"},"rndquu":{"total":116.226,"userId":119500907,"comments":[{"id":1846790501,"content":"There's no such command, pls update the readme","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#discussion_r1846790501","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,56 @@\n+# @ubiquity-os/text-conversation-rewards-ui\n+\n+This project provides a user interface for managing text conversation rewards. It includes several scripts for building, developing, and previewing the UI.\n+\n+## Scripts\n+\n+You can run the following scripts using `bun run <script>`:\n+\n+- **server**: Starts the server with file watching.\n+- **ui:dev**: Starts the Vite development server.\n+- **ui:build**: Builds the production-ready UI bundle.\n+- **ui:build-watch**: Builds the UI bundle and watches for changes.\n+- **ui:preview**: Previews the built UI bundle.\n+\n+## How to Get Started\n+\n+1. **Install dependencies**: Make sure you have [Bun](https://bun.sh/) installed, then run:\n+\n+   ```sh\n+   bun install\n+   ```\n+\n+2. **Start the server**:\n+\n+   ```sh\n+   bun run server","score":{"reward":0.909,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":94.30000000000001,"syllables":11,"sentences":1,"score":0.6569999999999999},"multiplier":1,"relevance":0.3}},{"id":2483388347,"content":"@gentlementlegen \r\nRunning `bun run ui:dev` and getting the `POST http://localhost:3000/ net::ERR_CONNECTION_REFUSED` error:\r\n<img width=\"1511\" alt=\"Screenshot 2024-11-18 at 18 29 50\" src=\"https://github.com/user-attachments/assets/64901de1-8c58-4c39-8b26-81f3e4925bf5\">\r\nWhat am I doing wrong and why do we need to run some service at `http://localhost:3000` ?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#issuecomment-2483388347","commentType":"PULL_COLLABORATOR","score":{"reward":15.168,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":3}},"result":3},"priority":3,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":73.07750000000001,"syllables":59,"sentences":2,"score":0.8692249999999998},"multiplier":1,"relevance":0.8}},{"id":2483408341,"content":"So I need to:\r\n1. Run `bun ui:build` from the `src/web` folder\r\n2. Run `bun server` from the root folder\r\nCorrect?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#issuecomment-2483408341","commentType":"PULL_COLLABORATOR","score":{"reward":2.475,"formatting":{"content":{"p":{"score":0,"elementCount":4},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":89.89642857142859,"syllables":17,"sentences":1,"score":0.7010357142857141},"multiplier":1,"relevance":0.5}},{"id":2483415665,"content":"@gentlementlegen \r\nGetting 500 error on \"Generate\" click:\r\n```\r\n$ bun --watch src/web/api/index.ts\r\nStarted server http://localhost:3000\r\n{\r\n  type: 45,\r\n  schema: {\r\n    default: \"info\",\r\n    [Symbol(TypeBox.Hint)]: \"Enum\",\r\n    [Symbol(TypeBox.Kind)]: \"Union\",\r\n    anyOf: [\r\n      [Object ...], [Object ...], [Object ...], [Object ...], [Object ...]\r\n    ],\r\n  },\r\n  path: \"/logLevel\",\r\n  value: undefined,\r\n  message: \"Expected required property\",\r\n  errors: [],\r\n}\r\n1 | /** The base Error type thrown for all TypeBox exceptions  */\r\n2 | export class TypeBoxError extends Error {\r\n3 |     constructor(message) {\r\n4 |         super(message);\r\n            ^\r\nerror: Unable to decode value as it does not match the expected schema\r\n```\r\n<img width=\"1511\" alt=\"Screenshot 2024-11-18 at 18 40 45\" src=\"https://github.com/user-attachments/assets/8b278af1-a51a-43e3-a69f-8d710edc3368\">\r\nWhat am I doing wrong?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#issuecomment-2483415665","commentType":"PULL_COLLABORATOR","score":{"reward":9.288,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":68.715,"syllables":51,"sentences":2,"score":0.9128499999999999},"multiplier":1,"relevance":0.9}},{"id":2484948011,"content":"Getting another 500 error:\r\n```\r\n$ bun --watch src/web/api/index.ts\r\nStarted server http://localhost:3000\r\n{\r\n  type: 45,\r\n  schema: {\r\n    [Symbol(TypeBox.Kind)]: \"String\",\r\n    type: \"string\",\r\n  },\r\n  path: \"/evmPrivateEncrypted\",\r\n  value: undefined,\r\n  message: \"Expected required property\",\r\n  errors: [],\r\n}\r\n1 | /** The base Error type thrown for all TypeBox exceptions  */\r\n2 | export class TypeBoxError extends Error {\r\n3 |     constructor(message) {\r\n4 |         super(message);\r\n            ^\r\nerror: Unable to decode value as it does not match the expected schema\r\n```\r\nDon't fully understand where `evmPrivateEncrypted` should be placed.\r\nHow to reproduce:\r\n1. Run `bun server`\r\n2. Open `http://localhost:3000/`\r\n3. Put `ubiquity-os-marketplace` in the \"Owner\" field, `text-conversation-rewards` in the \"Repo\" field, `102` in the \"Issue Id\" field\r\n4. Disable `cache` and `Open AI`\r\n5. Click `Generate`\r\nAlso notice that the [latest](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/actions/runs/11903102706) jest run is failing.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#issuecomment-2484948011","commentType":"PULL_COLLABORATOR","score":{"reward":16.551,"formatting":{"content":{"p":{"score":0,"elementCount":9},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":5},"a":{"score":1,"elementCount":2}},"result":2.5},"priority":3,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":63.03110465116282,"syllables":62,"sentences":2,"score":0.9696889534883718},"multiplier":1,"relevance":0.9}},{"id":2485930852,"content":"@gentlementlegen [This](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#issuecomment-2484948011) error is still present. Could you either add a default value for `evmPrivateEncrypted` in [.ubiquity-os.config.yml](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/blob/b273e07fbb338914be5d5fbe7232828f0e3aa89b/src/web/.ubiquity-os.config.yml) either mention it in the `.env.example`?\r\nOtherwise looks good. \r\nOverall we need some kind of a \"mini kernel\" which would send predefined github payloads to plugins. Smth like (example for the `/wallet` command):\r\n```\r\n# run the plugin as a worker\r\nyarn worker\r\n# send github payload to the plugin\r\n$ ubiquity-os send \"issue_comment.created\" --body \"/wallet 0x01\"\r\n```\r\nBut since https://github.com/ubiquity-os/ubiquity-os-kernel/issues/171 is ready (I haven't checked how it works yet) probably the above approach is not really necessary.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#issuecomment-2485930852","commentType":"PULL_COLLABORATOR","score":{"reward":12.495,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":2}},"result":2},"priority":3,"words":{"wordCount":70,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":62.45277777777781,"syllables":128,"sentences":9,"score":0.9754722222222219},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/170"},{"reviews":[{"reviewId":2442960297,"effect":{"addition":1732,"deletion":173},"reward":57.15,"priority":3},{"reviewId":2445849951,"effect":{"addition":37,"deletion":36},"reward":2.19,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 116.226 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>59.34</td></tr><tr><td>Review</td><td>Comment</td><td>6</td><td>56.886</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181\" target=\"_blank\" rel=\"noopener\">#181</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1732 -173</td><td>3</td><td>57.15</td></tr><tr><td>+37 -36</td><td>3</td><td>2.19</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#discussion_r1846790501\" target=\"_blank\" rel=\"noopener\">There's no such command, pls update the readme</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.909</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#issuecomment-2483388347\" target=\"_blank\" rel=\"noopener\">@gentlementlegen Running &#96;bun run ui:dev&#96; and getting &hellip;</a></h6></td><td><details><summary>5.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 3&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.8</td><td>3</td><td>15.168</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#issuecomment-2483408341\" target=\"_blank\" rel=\"noopener\">So I need to:1. Run &#96;bun ui:build&#96; from the &#96;src/w&hellip;</a></h6></td><td><details><summary>1.36</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.5</td><td>3</td><td>2.475</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#issuecomment-2483415665\" target=\"_blank\" rel=\"noopener\">@gentlementlegen Getting 500 error on \"Generate\" click:&#96;&hellip;</a></h6></td><td><details><summary>2.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.9</td><td>3</td><td>9.288</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#issuecomment-2484948011\" target=\"_blank\" rel=\"noopener\">Getting another 500 error:&#96;&#96;&#96;$ bun --watch src/w&hellip;</a></h6></td><td><details><summary>4.75</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 9&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 5&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2.5&#13;regex:&#13;  wordCount: 43&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>0.9</td><td>3</td><td>16.551</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/181#issuecomment-2485930852\" target=\"_blank\" rel=\"noopener\">@gentlementlegen [This](https://github.com/ubiquity-os-marketpla&hellip;</a></h6></td><td><details><summary>4.6</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 70&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>0.7</td><td>3</td><td>12.495</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_32.json","json":{"hhio618":{"userId":1272158,"total":75.217,"task":{"reward":75,"multiplier":1},"comments":[{"id":2080575757,"content":"Resolves #32\r\n```ts\r\n// Examples:\r\nconsole.log(customTruncate(1.799999));          // Output: 1\r\nconsole.log(customTruncate(3.00000001));        // Output: 3\r\nconsole.log(customTruncate(3.001));             // Output: 3\r\nconsole.log(customTruncate(456.99999999998));   // Output: 457\r\nconsole.log(customTruncate(10.689876543));      // Output: 10\r\n```","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35","commentType":"PULL_SPECIFICATION","score":{"reward":0.217,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":77.90500000000002,"syllables":3,"sentences":1,"score":0.8209499999999998},"multiplier":1,"relevance":0.7}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 75.217 XP ]</a>&nbsp;</h3><h6>@hhio618</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.217</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35\" target=\"_blank\" rel=\"noopener\">Resolves #32&#96;&#96;&#96;ts// Examples:console.log(custo&hellip;</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.217</td></tr></tbody></table></details>"},"0x4007":{"total":9.898,"userId":4975670,"comments":[{"id":2362676192,"content":"Two start messages but only one assigned. This isn't right @gentlementlegen \nAlso it should assign and then post the start message.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/32#issuecomment-2362676192","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.396,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":72.61545454545457,"syllables":32,"sentences":2,"score":0.8738454545454544},"multiplier":1,"relevance":0.1}},{"id":2391753343,"content":"@gentlementlegen my link doesn't work","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/32#issuecomment-2391753343","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.158,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":59.745000000000005,"syllables":10,"sentences":1,"score":0.9974500000000001},"multiplier":1,"relevance":0.1}},{"id":2399043677,"content":"@whilefoo can you make a fix for this?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/32#issuecomment-2399043677","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.274,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":92.965,"syllables":10,"sentences":1,"score":0.67035},"multiplier":1,"relevance":0.7}},{"id":2317150200,"content":"Bad approach use a number library so rounding is accurate. You're just rounding down","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#pullrequestreview-2317150200","commentType":"PULL_COLLABORATOR","score":{"reward":2.464,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":69.5025,"syllables":23,"sentences":2,"score":0.904975},"multiplier":1,"relevance":0.8}},{"id":2334465016,"content":"Seems close","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#pullrequestreview-2334465016","commentType":"PULL_COLLABORATOR","score":{"reward":0.132,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":120.20500000000001,"syllables":2,"sentences":1,"score":1},"multiplier":1,"relevance":0.2}},{"id":1779049561,"content":"Probably should add more tests  with two decimals and more decimals.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#discussion_r1779049561","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -77,6 +78,36 @@ describe(\"User tests\", () => {\n     });\n   });\n \n+  it(\"Should accurately calculate prices\", () => {\n+    const context = {\n+      config: {\n+        basePriceMultiplier: 3.0,\n+      },\n+    };\n+    const testCases = [","score":{"reward":2.25,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":64.9245454545455,"syllables":17,"sentences":1,"score":0.9507545454545451},"multiplier":1,"relevance":0.9}},{"id":2370181663,"content":"Two seem appropriate like traditional currency.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#issuecomment-2370181663","commentType":"PULL_COLLABORATOR","score":{"reward":0.864,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":17.44500000000002,"syllables":13,"sentences":1,"score":0.5744500000000002},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2317150200,"effect":{"addition":11,"deletion":1},"reward":0.24,"priority":2},{"reviewId":2334465016,"effect":{"addition":36,"deletion":13},"reward":0.98,"priority":2},{"reviewId":2345965451,"effect":{"addition":54,"deletion":3},"reward":1.14,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 9.898 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>2.36</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>1.828</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>5.71</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35\" target=\"_blank\" rel=\"noopener\">#35</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+11 -1</td><td>2</td><td>0.24</td></tr><tr><td>+36 -13</td><td>2</td><td>0.98</td></tr><tr><td>+54 -3</td><td>2</td><td>1.14</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/32#issuecomment-2362676192\" target=\"_blank\" rel=\"noopener\">Two start messages but only one assigned. This isn't right @gent&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.396</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/32#issuecomment-2391753343\" target=\"_blank\" rel=\"noopener\">@gentlementlegen my link doesn't work</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.158</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/32#issuecomment-2399043677\" target=\"_blank\" rel=\"noopener\">@whilefoo can you make a fix for this?</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.274</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#pullrequestreview-2317150200\" target=\"_blank\" rel=\"noopener\">Bad approach use a number library so rounding is accurate. You'r&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.464</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#pullrequestreview-2334465016\" target=\"_blank\" rel=\"noopener\">Seems close</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.132</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#discussion_r1779049561\" target=\"_blank\" rel=\"noopener\">Probably should add more tests  with two decimals and more decim&hellip;</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.9</td><td>2</td><td>2.25</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#issuecomment-2370181663\" target=\"_blank\" rel=\"noopener\">Two seem appropriate like traditional currency.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.6</td><td>2</td><td>0.864</td></tr></tbody></table></details>"},"gentlementlegen":{"total":75,"userId":9807008,"comments":[{"id":2362687081,"content":"@Keyrxng rfc\r\nWhat I think happened is:\r\n- no user was assigned\r\n- a pull-request was linked to this issue, which triggers an assignment of the user opening that PR\r\n- the user somehow didn't get assigned (you can see from the timeline only the start message was triggered)\r\n- `/start` assigned the user and displayed the message again\r\nIt should have just said \"You are already assigned to this task\" because it should have been the case.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/32#issuecomment-2362687081","commentType":"ISSUE_AUTHOR","score":{"reward":0.7,"formatting":{"content":{"p":{"score":0,"elementCount":7},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":4}},"result":0.4},"priority":2,"words":{"wordCount":75,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":13.398000000000039,"syllables":104,"sentences":1,"score":0.5339800000000003},"multiplier":1,"relevance":0.1}},{"id":2391808818,"content":"@0x4007 This error seems familiar: https://github.com/ubiquity-os-marketplace/conversation-rewards/actions/runs/11165001249/job/31035657102#step:7:463\r\n```\r\nError: Failed to get token decimals for token: 0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d\r\n    at ZB (/home/runner/work/conversation-rewards/conversation-rewards/node_modules/@ubiquibot/permit-generation/dist/core/index-BeQ_V1CH.js:31:1707)\r\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n    at async nb (/home/runner/work/conversation-rewards/conversation-rewards/node_modules/@ubiquibot/permit-generation/dist/core/index-BeQ_V1CH.js:31:4773)\r\n    at PermitGenerationModule.transform (/home/runner/work/conversation-rewards/conversation-rewards/src/parser/permit-generation-module.ts:101:25)\r\n    at Processor.run (/home/runner/work/conversation-rewards/conversation-rewards/src/parser/processor.ts:37:24)\r\n    at run (/home/runner/work/conversation-rewards/conversation-rewards/src/run.ts:25:5)\r\n```","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/32#issuecomment-2391808818","commentType":"ISSUE_AUTHOR","score":{"reward":1.576,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":55.17750000000001,"syllables":35,"sentences":2,"score":0.951775},"multiplier":1,"relevance":0.4}},{"id":2521311852,"content":"When using certain duration settings, the pricing doesn't round up and ends with a lot of decimals. In this case the number should be properly calculated and eventually truncated if needed. This happens for example when setting a time like `Time: <1 Minute`.\r\n_Originally posted by @gentlementlegen in https://github.com/ubiquibot/sandbox/issues/23#issuecomment-2343101400_","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/32","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.23,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":46,"wordValue":0.1,"result":2.31},"readability":{"fleschKincaid":52.61909090909094,"syllables":93,"sentences":5,"score":0.9261909090909094},"multiplier":1,"relevance":1}},{"id":2334875128,"content":"Please add the required tests, otherwise good to go with the PR.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#pullrequestreview-2334875128","commentType":"PULL_COLLABORATOR","score":{"reward":2.016,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":88.905,"syllables":15,"sentences":1,"score":0.71095},"multiplier":1,"relevance":0.8}},{"id":2338968201,"content":"It seems your last commit added a lot of files that should not be here, and a lot of public keys.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#pullrequestreview-2338968201","commentType":"PULL_COLLABORATOR","score":{"reward":3.312,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":88.83428571428574,"syllables":24,"sentences":1,"score":0.7116571428571425},"multiplier":1,"relevance":0.9}},{"id":1779362272,"content":"Maybe add a test with `0.73 hours` or things like that to force long decimals for the tests.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#discussion_r1779362272","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -77,6 +78,36 @@ describe(\"User tests\", () => {\n     });\n   });\n \n+  it(\"Should accurately calculate prices\", () => {\n+    const context = {\n+      config: {\n+        basePriceMultiplier: 3.0,\n+      },\n+    };\n+    const testCases = [","score":{"reward":2.584,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":95.42,"syllables":18,"sentences":1,"score":0.6457999999999999},"multiplier":1,"relevance":0.85}},{"id":1780815923,"content":"I think you can use `as unknown as Context` to avoid disabling `ts checks`.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#discussion_r1780815923","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -77,6 +78,54 @@ describe(\"User tests\", () => {\n     });\n   });\n \n+  it(\"Should accurately calculates prices\", () => {\n+    const context = {\n+      config: {\n+        basePriceMultiplier: 3.0,\n+      },\n+    };\n+    const priority1 = \"1 priority\";\n+    const priority2 = \"2 priority\";\n+    const priority3 = \"3 priority\";\n+    const testCases = [\n+      {\n+        timeValue: calculateLabelValue(\"<1 minutes\"),\n+        priorityValue: calculateLabelValue(priority3),\n+        expectedPrice: \"1.8\",\n+      },\n+      {\n+        timeValue: calculateLabelValue(\"<4 hours\"),\n+        priorityValue: calculateLabelValue(priority2),\n+        expectedPrice: \"300\",\n+      },\n+      {\n+        timeValue: calculateLabelValue(\"<1 hours\"),\n+        priorityValue: calculateLabelValue(priority2),\n+        expectedPrice: \"75\",\n+      },\n+      {\n+        timeValue: calculateLabelValue(\"<1.52 hours\"),\n+        priorityValue: calculateLabelValue(priority3),\n+        expectedPrice: \"112.5\",\n+      },\n+      {\n+        timeValue: calculateLabelValue(\"<139.876 minutes\"),\n+        priorityValue: calculateLabelValue(priority1),\n+        expectedPrice: \"83.4\",\n+      },\n+      {\n+        timeValue: calculateLabelValue(\"<12.333333 weeks\"),\n+        priorityValue: calculateLabelValue(priority2),\n+        expectedPrice: \"7800\",\n+      },\n+    ];\n+    for (const testCase of testCases) {\n+      // @ts-expect-error ignore untyped context;\n+      const price = calculateTaskPrice(context, testCase.timeValue, testCase.priorityValue);","score":{"reward":1.41,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":82.39000000000001,"syllables":11,"sentences":1,"score":0.7760999999999999},"multiplier":1,"relevance":0.75}},{"id":1782012700,"content":"Should be removed.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#discussion_r1782012700","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.336,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":90.99000000000004,"syllables":4,"sentences":1,"score":0.6900999999999996},"multiplier":1,"relevance":0.4}},{"id":1782012785,"content":"Should be removed.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#discussion_r1782012785","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.336,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":90.99000000000004,"syllables":4,"sentences":1,"score":0.6900999999999996},"multiplier":1,"relevance":0.4}},{"id":1782013081,"content":"Should be removed.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#discussion_r1782013081","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.336,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":90.99000000000004,"syllables":4,"sentences":1,"score":0.6900999999999996},"multiplier":1,"relevance":0.4}},{"id":2365038253,"content":"Could you add:\r\n- unit tests\r\n- a link to a QA test","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#issuecomment-2365038253","commentType":"PULL_COLLABORATOR","score":{"reward":2.584,"formatting":{"content":{"p":{"score":0,"elementCount":3},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":103.37909090909093,"syllables":12,"sentences":1,"score":1},"multiplier":1,"relevance":0.85}},{"id":2367114405,"content":"@hhio618 Thank you. If you could try running it in your org with a configuration containing `1 minute` for valid time and show that tags are properly generated, that would be great.\r\n---\r\nTested within my own org with `1.5 minutes` which seemed to price the task at `0 USD`: https://github.com/Meniole/assistive-pricing/issues/2","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#issuecomment-2367114405","commentType":"PULL_COLLABORATOR","score":{"reward":5.698,"formatting":{"content":{"p":{"score":0,"elementCount":2},"hr":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":76.11727941176473,"syllables":71,"sentences":4,"score":0.8388272058823527},"multiplier":1,"relevance":0.7}},{"id":2368774734,"content":"@hhio618 This might help you get started: https://github.com/ubiquity/ubiquibot-kernel/wiki/Hello-world-plugin-onboarding-tutorial\r\n`0.3` is a valid price, We do support decimals, I do not know how many we want for the pricing tag, @0x4007 would know better.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#issuecomment-2368774734","commentType":"PULL_COLLABORATOR","score":{"reward":5.278,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":57.12877906976746,"syllables":65,"sentences":2,"score":0.9712877906976746},"multiplier":1,"relevance":0.7}},{"id":2391718846,"content":"No, just a second pair of eyes, when @0x4007 approves it will get merged.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#issuecomment-2391718846","commentType":"PULL_COLLABORATOR","score":{"reward":0.84,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":89.89642857142859,"syllables":17,"sentences":1,"score":0.7010357142857141},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2334874991,"effect":{"addition":36,"deletion":3},"reward":0.78,"priority":2},{"reviewId":2337007723,"effect":{"addition":22,"deletion":4},"reward":0.52,"priority":2},{"reviewId":2338967224,"effect":{"addition":80824,"deletion":8},"reward":1616.64,"priority":2},{"reviewId":2339404284,"effect":{"addition":54,"deletion":3},"reward":1.14,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 75 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>4</td><td>1619.08</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.23</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>2.276</td></tr><tr><td>Review</td><td>Comment</td><td>11</td><td>24.73</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35\" target=\"_blank\" rel=\"noopener\">#35</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+36 -3</td><td>2</td><td>0.78</td></tr><tr><td>+22 -4</td><td>2</td><td>0.52</td></tr><tr><td>+80824 -8</td><td>2</td><td>1616.64</td></tr><tr><td>+54 -3</td><td>2</td><td>1.14</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/32\" target=\"_blank\" rel=\"noopener\">When using certain duration settings, the pricing doesn't round &hellip;</a></h6></td><td><details><summary>3.31</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 46&#13;  wordValue: 0.1&#13;  result: 2.31&#13;</pre></details></td><td>1</td><td>1</td><td>4.23</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/32#issuecomment-2362687081\" target=\"_blank\" rel=\"noopener\">@Keyrxng rfcWhat I think happened is:- no user was assigned&hellip;</a></h6></td><td><details><summary>3.02</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 7&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 4&#13;  result: 0.4&#13;regex:&#13;  wordCount: 75&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.7</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/32#issuecomment-2391808818\" target=\"_blank\" rel=\"noopener\">@0x4007 This error seems familiar: https://github.com/ubiquity-o&hellip;</a></h6></td><td><details><summary>1.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.4</td><td>2</td><td>1.576</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#pullrequestreview-2334875128\" target=\"_blank\" rel=\"noopener\">Please add the required tests, otherwise good to go with the PR.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.016</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#pullrequestreview-2338968201\" target=\"_blank\" rel=\"noopener\">It seems your last commit added a lot of files that should not b&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.9</td><td>2</td><td>3.312</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#discussion_r1779362272\" target=\"_blank\" rel=\"noopener\">Maybe add a test with &#96;0.73 hours&#96; or things like that t&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.85</td><td>2</td><td>2.584</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#discussion_r1780815923\" target=\"_blank\" rel=\"noopener\">I think you can use &#96;as unknown as Context&#96; to avoid dis&hellip;</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.75</td><td>2</td><td>1.41</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#discussion_r1782012700\" target=\"_blank\" rel=\"noopener\">Should be removed.</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.4</td><td>2</td><td>0.336</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#discussion_r1782012785\" target=\"_blank\" rel=\"noopener\">Should be removed.</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.4</td><td>2</td><td>0.336</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#discussion_r1782013081\" target=\"_blank\" rel=\"noopener\">Should be removed.</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.4</td><td>2</td><td>0.336</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#issuecomment-2365038253\" target=\"_blank\" rel=\"noopener\">Could you add:- unit tests- a link to a QA test</a></h6></td><td><details><summary>1.17</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.85</td><td>2</td><td>2.584</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#issuecomment-2367114405\" target=\"_blank\" rel=\"noopener\">@hhio618 Thank you. If you could try running it in your org with&hellip;</a></h6></td><td><details><summary>3.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 43&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>0.7</td><td>2</td><td>5.698</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#issuecomment-2368774734\" target=\"_blank\" rel=\"noopener\">@hhio618 This might help you get started: https://github.com/ubi&hellip;</a></h6></td><td><details><summary>2.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.7</td><td>2</td><td>5.278</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/35#issuecomment-2391718846\" target=\"_blank\" rel=\"noopener\">No, just a second pair of eyes, when @0x4007 approves it will ge&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.84</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_331.json","json":{"gentlementlegen":{"userId":9807008,"total":15.99,"task":{"reward":12,"multiplier":1},"comments":[{"id":2430600860,"content":"Helps to get default values if no `.gitattributes` file is found, which I believe are safe to be always ignored. Can be overridden by the repo's own `.gitattributes` file.\r\nResolves https://github.com/ubiquity/business-development/issues/152 (helps to generate more accurate results)\r\nResolves #331 \r\nQA:\r\n<img width=\"731\" alt=\"image\" src=\"https://github.com/user-attachments/assets/efc6edc7-a2cb-4b2e-b280-84914dba3b9f\" />\r\n(before the fix the reward was around 9000)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334","commentType":"PULL_SPECIFICATION","score":{"reward":3.99,"formatting":{"content":{"p":{"score":0,"elementCount":6},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":52,"wordValue":0.1,"result":2.41},"readability":{"fleschKincaid":62.54312676056338,"syllables":109,"sentences":5,"score":0.9745687323943661},"multiplier":1,"relevance":0.7}},{"id":2023534809,"content":"Yes, I was trying to do a more generic function that would handle all files but thought the code would be messier.\r\nThe second reason I forgot about was that files like `tsconfig` support having comments in them, and this will crash `JSON.parse` because comments are actually not supported in normal `json` files, `tsConfig` probably has its own parser, so that's why it is done through a regex instead.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#discussion_r2023534809","commentType":"PULL_AUTHOR","diffHunk":"@@ -33,16 +33,68 @@ async function parseGitAttributes(content: string): Promise<GitAttributes[]> {\n     .filter((item): item is GitAttributes => item !== null);\n }\n \n-export async function getExcludedFiles(context: ContextPlugin, owner: string, repo: string, ref?: string) {\n-  const gitAttributesContent = await getFileContent(context, owner, repo, \".gitattributes\", ref);\n-  if (!gitAttributesContent) {\n-    return null;\n+const DEFAULT_EXCLUDED_PATTERNS = [\"dist/**\", \"*.lockb\", \"*.lock\", \"tests/__mocks__/\", \"bin/\"];\n+\n+function parsePrettierIgnore(content: string): string[] {\n+  return content\n+    .split(\"\\n\")\n+    .map((line) => line.trim())\n+    .filter((line) => line && !line.startsWith(\"#\"));\n+}\n+\n+function parseTsConfigExclude(content: string): string[] {\n+  const patterns: string[] = [];\n+  try {\n+    const excludeRegex = /\"exclude\"\\s*:\\s*\\[([^\\]]*)\\]/;\n+    const match = RegExp(excludeRegex).exec(content);\n+    if (match && match[1]) {\n+      const excludeContent = match[1];\n+      const stringLiteralRegex = /\"([^\"]*)\"/g;\n+      let stringMatch;\n+      while ((stringMatch = stringLiteralRegex.exec(excludeContent)) !== null) {\n+        if (stringMatch[1]) {\n+          patterns.push(stringMatch[1]);\n+        }\n+      }\n+    }","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":66,"wordValue":0,"result":0},"readability":{"fleschKincaid":55.41272727272728,"syllables":92,"sentences":2,"score":0.9541272727272728},"multiplier":0,"relevance":0.8}},{"id":2023544909,"content":"Was encountering some mock reset issues, but it seems it was unrelated, I removed it.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#discussion_r2023544909","commentType":"PULL_AUTHOR","diffHunk":"@@ -1,54 +1,189 @@\n-import { afterEach, beforeEach, describe, expect, it, jest } from \"@jest/globals\";\n+import { afterAll, afterEach, beforeAll, beforeEach, describe, expect, it, jest } from \"@jest/globals\";\n+import { OctokitResponse, RequestParameters } from \"@octokit/types\";\n import { Logs } from \"@ubiquity-os/ubiquity-os-logger\";\n+import { getExcludedFiles } from \"../src/helpers/excluded-files\";\n import { ContextPlugin } from \"../src/types/plugin-input\";\n import { server } from \"./__mocks__/node\";\n import cfg from \"./__mocks__/results/valid-configuration.json\";\n-import { customOctokit as Octokit } from \"@ubiquity-os/plugin-sdk/octokit\";\n+\n+type MockGetContent = jest.Mock<\n+  (\n+    params?: RequestParameters & { ref?: string; owner: string; repo: string; path: string }\n+  ) => Promise<OctokitResponse<unknown>>\n+>;\n+\n+const mockGetContentFunction: MockGetContent = jest.fn();\n+const mockOctokit = {\n+  rest: {\n+    repos: {\n+      getContent: mockGetContentFunction,\n+    },\n+  },\n+};\n \n const ctx = {\n   config: cfg,\n   logger: new Logs(\"debug\"),\n-  octokit: new Octokit({ auth: process.env.GITHUB_TOKEN }),\n+  octokit: mockOctokit,\n+  payload: { repository: { owner: { login: \"test-owner\" }, name: \"test-repo\" } },\n } as unknown as ContextPlugin;\n \n+const mockGetContent: MockGetContent = mockGetContentFunction;\n+","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0,"result":0},"readability":{"fleschKincaid":61.890000000000015,"syllables":23,"sentences":1,"score":0.9810999999999999},"multiplier":0,"relevance":0.4}},{"id":2768468293,"content":"@0x4007 I can add these as well, but we are not guaranteed that they will reference `lock` files, which is mostly the file I am worried about when computing the code review rewards. Maybe we could add these always (`.lock` & `.lockb`), then append `.gitattributes`, `.prettierignore` and `tsconfig`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#issuecomment-2768468293","commentType":"PULL_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":41,"wordValue":0,"result":0},"readability":{"fleschKincaid":70.47628048780489,"syllables":56,"sentences":2,"score":0.8952371951219511},"multiplier":0,"relevance":0.9}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 15.99 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>12</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>3.99</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334\" target=\"_blank\" rel=\"noopener\">Helps to get default values if no &#96;.gitattributes&#96; file &hellip;</a></h6></td><td><details><summary>4.41</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 52&#13;  wordValue: 0.1&#13;  result: 2.41&#13;</pre></details></td><td>0.7</td><td>1</td><td>3.99</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#discussion_r2023534809\" target=\"_blank\" rel=\"noopener\">Yes, I was trying to do a more generic function that would handl&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 66&#13;  wordValue: 0&#13;  result: 0&#13;</pre></details></td><td>0.8</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#discussion_r2023544909\" target=\"_blank\" rel=\"noopener\">Was encountering some mock reset issues, but it seems it was unr&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0&#13;  result: 0&#13;</pre></details></td><td>0.4</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#issuecomment-2768468293\" target=\"_blank\" rel=\"noopener\">@0x4007 I can add these as well, but we are not guaranteed that &hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>2</td><td>0</td></tr></tbody></table></details>"},"0x4007":{"total":8.064,"userId":4975670,"comments":[{"id":2954122864,"content":"I was thinking that relying on `.gitattributes` for ignoring files is shaky for other partners. I think we should use a dictionary of common lockfiles and other files that should not be reviewed to ignore and hard code it in.\nOr ideally lets check all the ignores across all common configs like prettier and eslint.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/331","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.15,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":54,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":63.23166666666668,"syllables":80,"sentences":3,"score":0.9676833333333331},"multiplier":1,"relevance":1}},{"id":2768431134,"content":"Wouldn't it make more sense to parse these values from tsconfig etc? All the ignore files like prettier etc are robust clues for what the developers don't want to credit.\r\nprettier ignore and eslint ignore. possibly even knip","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#issuecomment-2768431134","commentType":"PULL_COLLABORATOR","score":{"reward":4.914,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":40,"wordValue":0.1,"result":2.18},"readability":{"fleschKincaid":76.13000000000001,"syllables":57,"sentences":4,"score":0.8386999999999999},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 8.064 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.15</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>4.914</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/331\" target=\"_blank\" rel=\"noopener\">I was thinking that relying on &#96;.gitattributes&#96; for igno&hellip;</a></h6></td><td><details><summary>2.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 54&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>1</td><td>1</td><td>3.15</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#issuecomment-2768431134\" target=\"_blank\" rel=\"noopener\">Wouldn't it make more sense to parse these values from tsconfig &hellip;</a></h6></td><td><details><summary>2.18</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 40&#13;  wordValue: 0.1&#13;  result: 2.18&#13;</pre></details></td><td>0.9</td><td>2</td><td>4.914</td></tr></tbody></table></details>"},"whilefoo":{"total":12,"userId":139262667,"comments":[{"id":2740940777,"content":"<img width=\"982\" alt=\"image\" src=\"https://github.com/user-attachments/assets/ebc673d1-fbdd-4dbd-9fbd-8190532c719b\" />\r\nworks","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#pullrequestreview-2740940777","commentType":"PULL_COLLABORATOR","score":{"reward":1.656,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":84.90000000000003,"syllables":24,"sentences":2,"score":0.7509999999999997},"multiplier":1,"relevance":0.4}},{"id":2022780036,"content":"I can't select it but in this function, can you fix the logger to use actual file name instead of hard-coded `.gitattributes`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#discussion_r2022780036","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -33,16 +33,68 @@ async function parseGitAttributes(content: string): Promise<GitAttributes[]> {\n     .filter((item): item is GitAttributes => item !== null);\n }\n \n-export async function getExcludedFiles(context: ContextPlugin, owner: string, repo: string, ref?: string) {\n-  const gitAttributesContent = await getFileContent(context, owner, repo, \".gitattributes\", ref);\n-  if (!gitAttributesContent) {\n-    return null;\n+const DEFAULT_EXCLUDED_PATTERNS = [\"dist/**\", \"*.lockb\", \"*.lock\", \"tests/__mocks__/\", \"bin/\"];\n+\n+function parsePrettierIgnore(content: string): string[] {\n+  return content\n+    .split(\"\\n\")\n+    .map((line) => line.trim())\n+    .filter((line) => line && !line.startsWith(\"#\"));\n+}\n+\n+function parseTsConfigExclude(content: string): string[] {\n+  const patterns: string[] = [];\n+  try {\n+    const excludeRegex = /\"exclude\"\\s*:\\s*\\[([^\\]]*)\\]/;\n+    const match = RegExp(excludeRegex).exec(content);\n+    if (match && match[1]) {\n+      const excludeContent = match[1];\n+      const stringLiteralRegex = /\"([^\"]*)\"/g;\n+      let stringMatch;\n+      while ((stringMatch = stringLiteralRegex.exec(excludeContent)) !== null) {\n+        if (stringMatch[1]) {\n+          patterns.push(stringMatch[1]);\n+        }\n+      }\n+    }\n+  } catch {\n+    // Silently ignore parsing errors, returning patterns found so far\n+  }\n+  return patterns;\n+}\n+\n+export async function getExcludedFiles(\n+  context: ContextPlugin,\n+  owner: string,\n+  repo: string,\n+  ref?: string\n+): Promise<string[]> {\n+  const allPatterns = [...DEFAULT_EXCLUDED_PATTERNS];\n+\n+  const [gitAttributesContent, prettierIgnoreContent, tsConfigContent] = await Promise.all([\n+    getFileContent(context, owner, repo, \".gitattributes\", ref),\n+    getFileContent(context, owner, repo, \".prettierignore\", ref),\n+    getFileContent(context, owner, repo, \"tsconfig.json\", ref),\n+  ]);\n+\n+  if (gitAttributesContent) {\n+    const gitAttributesLinguistGenerated = (await parseGitAttributes(gitAttributesContent))\n+      .filter((v) => v.attributes[\"linguist-generated\"])\n+      .map((v) => v.pattern);\n+    allPatterns.push(...gitAttributesLinguistGenerated);\n+  }\n+\n+  if (prettierIgnoreContent) {\n+    const prettierPatterns = parsePrettierIgnore(prettierIgnoreContent);\n+    allPatterns.push(...prettierPatterns);\n+  }\n+\n+  if (tsConfigContent) {\n+    const tsConfigPatterns = parseTsConfigExclude(tsConfigContent);\n+    allPatterns.push(...tsConfigPatterns);\n   }\n-  const gitAttributesLinguistGenerated = (await parseGitAttributes(gitAttributesContent))\n-    .filter((v) => v.attributes[\"linguist-generated\"])\n-    .map((v) => v.pattern);\n \n-  return gitAttributesLinguistGenerated;\n+  return [...new Set(allPatterns)];\n }\n \n async function getFileContent(","score":{"reward":3.618,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":76.82043478260871,"syllables":29,"sentences":1,"score":0.8317956521739128},"multiplier":1,"relevance":0.9}},{"id":2022782222,"content":"I would add `package-lock.json`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#discussion_r2022782222","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -33,16 +33,68 @@ async function parseGitAttributes(content: string): Promise<GitAttributes[]> {\n     .filter((item): item is GitAttributes => item !== null);\n }\n \n-export async function getExcludedFiles(context: ContextPlugin, owner: string, repo: string, ref?: string) {\n-  const gitAttributesContent = await getFileContent(context, owner, repo, \".gitattributes\", ref);\n-  if (!gitAttributesContent) {\n-    return null;\n+const DEFAULT_EXCLUDED_PATTERNS = [\"dist/**\", \"*.lockb\", \"*.lock\", \"tests/__mocks__/\", \"bin/\"];","score":{"reward":0.736,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":119.19000000000003,"syllables":3,"sentences":1,"score":1},"multiplier":1,"relevance":0.8}},{"id":2022804109,"content":"couldn't you just parse it as JSON?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#discussion_r2022804109","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -33,16 +33,68 @@ async function parseGitAttributes(content: string): Promise<GitAttributes[]> {\n     .filter((item): item is GitAttributes => item !== null);\n }\n \n-export async function getExcludedFiles(context: ContextPlugin, owner: string, repo: string, ref?: string) {\n-  const gitAttributesContent = await getFileContent(context, owner, repo, \".gitattributes\", ref);\n-  if (!gitAttributesContent) {\n-    return null;\n+const DEFAULT_EXCLUDED_PATTERNS = [\"dist/**\", \"*.lockb\", \"*.lock\", \"tests/__mocks__/\", \"bin/\"];\n+\n+function parsePrettierIgnore(content: string): string[] {\n+  return content\n+    .split(\"\\n\")\n+    .map((line) => line.trim())\n+    .filter((line) => line && !line.startsWith(\"#\"));\n+}\n+\n+function parseTsConfigExclude(content: string): string[] {\n+  const patterns: string[] = [];\n+  try {\n+    const excludeRegex = /\"exclude\"\\s*:\\s*\\[([^\\]]*)\\]/;\n+    const match = RegExp(excludeRegex).exec(content);\n+    if (match && match[1]) {\n+      const excludeContent = match[1];\n+      const stringLiteralRegex = /\"([^\"]*)\"/g;\n+      let stringMatch;\n+      while ((stringMatch = stringLiteralRegex.exec(excludeContent)) !== null) {\n+        if (stringMatch[1]) {\n+          patterns.push(stringMatch[1]);\n+        }\n+      }\n+    }","score":{"reward":1.386,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":114.11500000000001,"syllables":8,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":2022832498,"content":"I'm curious why did you assign it to a new variable, as far as I know you can call the original mock directly to change implementations","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#discussion_r2022832498","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,54 +1,189 @@\n-import { afterEach, beforeEach, describe, expect, it, jest } from \"@jest/globals\";\n+import { afterAll, afterEach, beforeAll, beforeEach, describe, expect, it, jest } from \"@jest/globals\";\n+import { OctokitResponse, RequestParameters } from \"@octokit/types\";\n import { Logs } from \"@ubiquity-os/ubiquity-os-logger\";\n+import { getExcludedFiles } from \"../src/helpers/excluded-files\";\n import { ContextPlugin } from \"../src/types/plugin-input\";\n import { server } from \"./__mocks__/node\";\n import cfg from \"./__mocks__/results/valid-configuration.json\";\n-import { customOctokit as Octokit } from \"@ubiquity-os/plugin-sdk/octokit\";\n+\n+type MockGetContent = jest.Mock<\n+  (\n+    params?: RequestParameters & { ref?: string; owner: string; repo: string; path: string }\n+  ) => Promise<OctokitResponse<unknown>>\n+>;\n+\n+const mockGetContentFunction: MockGetContent = jest.fn();\n+const mockOctokit = {\n+  rest: {\n+    repos: {\n+      getContent: mockGetContentFunction,\n+    },\n+  },\n+};\n \n const ctx = {\n   config: cfg,\n   logger: new Logs(\"debug\"),\n-  octokit: new Octokit({ auth: process.env.GITHUB_TOKEN }),\n+  octokit: mockOctokit,\n+  payload: { repository: { owner: { login: \"test-owner\" }, name: \"test-repo\" } },\n } as unknown as ContextPlugin;\n \n+const mockGetContent: MockGetContent = mockGetContentFunction;\n+","score":{"reward":2.27,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":50.96333333333334,"syllables":41,"sentences":1,"score":0.9096333333333334},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2732561932,"effect":{"addition":424,"deletion":80},"reward":10.08,"priority":2},{"reviewId":2740940777,"effect":{"addition":10,"deletion":12},"reward":0.44,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 12 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>10.52</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>9.666</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334\" target=\"_blank\" rel=\"noopener\">#334</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+424 -80</td><td>2</td><td>10.08</td></tr><tr><td>+10 -12</td><td>2</td><td>0.44</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#pullrequestreview-2740940777\" target=\"_blank\" rel=\"noopener\">&lt;img width=\"982\" alt=\"image\" src=\"https://github.com/user-att&hellip;</a></h6></td><td><details><summary>1.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.4</td><td>2</td><td>1.656</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#discussion_r2022780036\" target=\"_blank\" rel=\"noopener\">I can't select it but in this function, can you fix the logger t&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.9</td><td>2</td><td>3.618</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#discussion_r2022782222\" target=\"_blank\" rel=\"noopener\">I would add &#96;package-lock.json&#96;</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.8</td><td>2</td><td>0.736</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#discussion_r2022804109\" target=\"_blank\" rel=\"noopener\">couldn't you just parse it as JSON?</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.386</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/334#discussion_r2022832498\" target=\"_blank\" rel=\"noopener\">I'm curious why did you assign it to a new variable, as far as I&hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.5</td><td>2</td><td>2.27</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_95.json","json":{"gentlementlegen":{"userId":9807008,"total":79.45,"task":{"reward":75,"multiplier":1},"comments":[{"id":2484109507,"content":"@gentlementlegen it didnt collect any review comments this time.\r\n_Originally posted by @0x4007 in https://github.com/ubiquity/devpool-directory-bounties/issues/31#issuecomment-2306908267_\r\nMy suspicion is that the linked pull-request was not properly fetched. This can be solved by using graphql instead of manually fetching linked events. This might not be the cause of the problem but this is a needed improvement.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/95","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.45,"formatting":{"content":{"p":{"score":0,"elementCount":3},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":54,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":58.28000000000003,"syllables":104,"sentences":5,"score":0.9828000000000003},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 79.45 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.45</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/95\" target=\"_blank\" rel=\"noopener\">@gentlementlegen it didnt collect any review comments this time.&hellip;</a></h6></td><td><details><summary>3.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 54&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>1</td><td>1</td><td>4.45</td></tr></tbody></table></details>"},"0x4007":{"total":4.071,"userId":4975670,"comments":[{"id":2308100015,"content":"Honestly doesn't make sense to me though. Never had this problem in development and testing.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/95#issuecomment-2308100015","commentType":"ISSUE_COLLABORATOR","score":{"reward":3.864,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":71.81500000000001,"syllables":24,"sentences":2,"score":0.8818499999999999},"multiplier":1,"relevance":0.8}},{"id":2311536284,"content":"I don't know GraphQL","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98#issuecomment-2311536284","commentType":"PULL_COLLABORATOR","score":{"reward":0.207,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 4.071 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>3.864</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.207</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/95#issuecomment-2308100015\" target=\"_blank\" rel=\"noopener\">Honestly doesn't make sense to me though. Never had this problem&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.864</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98#issuecomment-2311536284\" target=\"_blank\" rel=\"noopener\">I don't know GraphQL</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.207</td></tr></tbody></table></details>"},"Keyrxng":{"total":29.073,"userId":106303466,"comments":[{"id":2260080447,"content":"Looks okay to me","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98#pullrequestreview-2260080447","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.039,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":97.025,"syllables":5,"sentences":1,"score":0.6297499999999999},"multiplier":0.25,"relevance":0.1}},{"id":1730870884,"content":"Since the `graphql.config.yml` should provide static type-checking I believe, is it okay to skip validating the query using the function from `@octokit/graphql-schema`? The API call would fail in development if the query was wrong anyway and the API would tell you why so I guess so right?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98#discussion_r1730870884","commentType":"PULL_CONTRIBUTOR","diffHunk":"","score":{"reward":1.554,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":46,"wordValue":0.1,"result":2.31},"readability":{"fleschKincaid":67.62478260869567,"syllables":63,"sentences":2,"score":0.9237521739130433},"multiplier":0.25,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2260077516,"effect":{"addition":539,"deletion":377},"reward":27.48,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 29.073 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>27.48</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>1.593</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98\" target=\"_blank\" rel=\"noopener\">#98</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+539 -377</td><td>3</td><td>27.48</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98#pullrequestreview-2260080447\" target=\"_blank\" rel=\"noopener\">Looks okay to me</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.039</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98#discussion_r1730870884\" target=\"_blank\" rel=\"noopener\">Since the &#96;graphql.config.yml&#96; should provide static typ&hellip;</a></h6></td><td><details><summary>2.31</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 46&#13;  wordValue: 0.1&#13;  result: 2.31&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.554</td></tr></tbody></table></details>"},"whilefoo":{"total":32.772,"userId":139262667,"comments":[{"id":1732614790,"content":"maybe it's possible to use `typeof customOctokit`?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98#discussion_r1732614790","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -2,12 +2,13 @@ import { Octokit } from \"@octokit/rest\";\n import { retry } from \"@octokit/plugin-retry\";\n import program from \"./parser/command-line\";\n import configuration from \"./configuration/config-reader\";\n+import { paginateGraphQL, paginateGraphQLInterface } from \"@octokit/plugin-paginate-graphql\";\n \n-const customOctokit = Octokit.plugin(retry);\n+const customOctokit = Octokit.plugin(retry, paginateGraphQL);\n \n-let octokitInstance: Octokit | null = null;\n+let octokitInstance: (Octokit & paginateGraphQLInterface) | null = null;","score":{"reward":1.332,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":87.94500000000002,"syllables":8,"sentences":1,"score":0.7205499999999998},"multiplier":1,"relevance":0.6}},{"id":1732909822,"content":"try to wrap in `InstanceType<>` because I think the type from constructor is different than instance type","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98#discussion_r1732909822","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -2,12 +2,13 @@ import { Octokit } from \"@octokit/rest\";\n import { retry } from \"@octokit/plugin-retry\";\n import program from \"./parser/command-line\";\n import configuration from \"./configuration/config-reader\";\n+import { paginateGraphQL, paginateGraphQLInterface } from \"@octokit/plugin-paginate-graphql\";\n \n-const customOctokit = Octokit.plugin(retry);\n+const customOctokit = Octokit.plugin(retry, paginateGraphQL);\n \n-let octokitInstance: Octokit | null = null;\n+let octokitInstance: (Octokit & paginateGraphQLInterface) | null = null;","score":{"reward":3.84,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":74.27000000000001,"syllables":22,"sentences":1,"score":0.8573},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2262935790,"effect":{"addition":541,"deletion":379},"reward":27.6,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 32.772 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>27.6</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>5.172</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98\" target=\"_blank\" rel=\"noopener\">#98</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+541 -379</td><td>3</td><td>27.6</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98#discussion_r1732614790\" target=\"_blank\" rel=\"noopener\">maybe it's possible to use &#96;typeof customOctokit&#96;?</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.332</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/98#discussion_r1732909822\" target=\"_blank\" rel=\"noopener\">try to wrap in &#96;InstanceType&lt;&gt;&#96; because I think th&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.84</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_88.json","json":{"gentlementlegen":{"userId":9807008,"total":31.37,"task":{"reward":25,"multiplier":1},"comments":[{"id":2297858452,"content":"Moving this to https://github.com/ubiquibot/conversation-rewards as it is more relevant there.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/88#issuecomment-2297858452","commentType":"ISSUE_AUTHOR","score":{"reward":2.35,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":52.58250000000001,"syllables":26,"sentences":2,"score":0.9258250000000001},"multiplier":1,"relevance":1}},{"id":2474602405,"content":"@gentlementlegen I noticed that it posted a message \"evaluating results\" but it shouldn't do that work at all when closed as not planned. We should also change the message to something like:\r\n```diff\r\n# Ineligible for rewards because the issue was closed as not planned.\r\n```\r\n_Originally posted by @0x4007 in https://github.com/ubiquibot/automated-merging/issues/3#issuecomment-2259706008_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/88","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.02,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":38,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":54.88249999999999,"syllables":77,"sentences":3,"score":0.9488249999999999},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 31.37 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.02</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.35</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/88\" target=\"_blank\" rel=\"noopener\">@gentlementlegen I noticed that it posted a message \"evaluating &hellip;</a></h6></td><td><details><summary>3.13</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 38&#13;  wordValue: 0.1&#13;  result: 2.13&#13;</pre></details></td><td>1</td><td>1</td><td>4.02</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/88#issuecomment-2297858452\" target=\"_blank\" rel=\"noopener\">Moving this to https://github.com/ubiquibot/conversation-rewards&hellip;</a></h6></td><td><details><summary>1.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>1</td><td>1</td><td>2.35</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_105.json","json":{"gentlementlegen":{"userId":9807008,"total":13.722,"task":{"reward":12,"multiplier":1},"comments":[{"id":2538874289,"content":"Maybe the deadline message should also be removed from the regular message assignment as well.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/105#issuecomment-2538874289","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.702,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":56.25000000000003,"syllables":24,"sentences":1,"score":0.9625000000000002},"multiplier":0.25,"relevance":0.9}},{"id":2252266285,"content":"Resolves #105\r\nQA: https://github.com/Meniole/command-start-stop/issues/52","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/112","commentType":"PULL_SPECIFICATION","score":{"reward":1.02,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":73.84500000000001,"syllables":18,"sentences":2,"score":0.8615499999999998},"multiplier":1,"relevance":0.6}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 13.722 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>12</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.702</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>1.02</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/105#issuecomment-2538874289\" target=\"_blank\" rel=\"noopener\">Maybe the deadline message should also be removed from the regul&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.9</td><td>2</td><td>0.702</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/112\" target=\"_blank\" rel=\"noopener\">Resolves #105QA: https://github.com/Meniole/command-start-stop&hellip;</a></h6></td><td><details><summary>1.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.6</td><td>1</td><td>1.02</td></tr></tbody></table></details>"},"0x4007":{"total":3.942,"userId":4975670,"comments":[{"id":2735766893,"content":"This has been deprecated in favor of the reminder schedule comments immediately following.  \n_Originally posted by @ubiquity-os-beta in https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/64#issuecomment-2538758209_","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/105","commentType":"ISSUE_SPECIFICATION","score":{"reward":2.92,"formatting":{"content":{"p":{"score":0,"elementCount":1},"br":{"score":0,"elementCount":1},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":18.77909090909094,"syllables":69,"sentences":3,"score":0.5877909090909094},"multiplier":1,"relevance":1}},{"id":2526917816,"content":"Code changes seem fine","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/112#pullrequestreview-2526917816","commentType":"PULL_COLLABORATOR","score":{"reward":0.342,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2526917816,"effect":{"addition":14,"deletion":20},"reward":0.68,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/112"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 3.942 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.68</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>2.92</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.342</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/112\" target=\"_blank\" rel=\"noopener\">#112</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+14 -20</td><td>2</td><td>0.68</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/105\" target=\"_blank\" rel=\"noopener\">This has been deprecated in favor of the reminder schedule comme&hellip;</a></h6></td><td><details><summary>2.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    br:&#13;      score: 0&#13;      elementCount: 1&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>1</td><td>1</td><td>2.92</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/112#pullrequestreview-2526917816\" target=\"_blank\" rel=\"noopener\">Code changes seem fine</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.342</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_249.json","json":{"whilefoo":{"userId":139262667,"total":50,"task":{"reward":50,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 50 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":8,"userId":4975670,"comments":[{"id":2629097797,"content":"@gentlementlegen  maybe this scenario should receive a special error explaining that a human collaborator must close the issue to generate permits.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/249#issuecomment-2629097797","commentType":"ISSUE_COLLABORATOR","score":{"reward":3.24,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":20.34857142857146,"syllables":41,"sentences":1,"score":0.6034857142857146},"multiplier":1,"relevance":0.9}},{"id":2577084385,"content":"Code and QA seem fine","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/250#pullrequestreview-2577084385","commentType":"PULL_COLLABORATOR","score":{"reward":0.414,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}},{"id":1931519964,"content":"Dist in src seems weird","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/250#discussion_r1931519964","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -9,7 +9,7 @@ export default tsEslint.config({\n     \"@typescript-eslint\": tsEslint.plugin,\n     \"check-file\": checkFile,\n   },\n-  ignores: [\".github/knip.ts\", \"dist/\", \"tests/__mocks__/**\", \"coverage/**\", \"dist/**\"],\n+  ignores: [\".github/knip.ts\", \"dist/\", \"tests/__mocks__/**\", \"coverage/**\", \"dist/**\", \"src/web/dist/**\"],","score":{"reward":0.966,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2577084385,"effect":{"addition":155,"deletion":14},"reward":3.38,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/250"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 8 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>3.38</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>3.24</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>1.38</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/250\" target=\"_blank\" rel=\"noopener\">#250</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+155 -14</td><td>2</td><td>3.38</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/249#issuecomment-2629097797\" target=\"_blank\" rel=\"noopener\">@gentlementlegen  maybe this scenario should receive a special e&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.9</td><td>2</td><td>3.24</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/250#pullrequestreview-2577084385\" target=\"_blank\" rel=\"noopener\">Code and QA seem fine</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.414</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/250#discussion_r1931519964\" target=\"_blank\" rel=\"noopener\">Dist in src seems weird</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>2</td><td>0.966</td></tr></tbody></table></details>"},"gentlementlegen":{"total":20.314,"userId":9807008,"comments":[{"id":2812029807,"content":"_Originally posted by @gentlementlegen in [#60](https://github.com/ubiquity-os/plugins-wishlist/issues/60#issuecomment-2614800109)_\n## What happened\nThe issue got re-opened because all the linked pull-request were not closed, one was still a draft. However, it should have been closed because the drafted PR should be ignored.\n## What was expected\nBecause the drafted pull-request would not close the issue and should be discarded, and because none of the admins have rights to close it, the bot should check the assignee list and the author of the pull-requests, and ignore them if they are not authored by someone from the assignee list.\n## How to reproduce\n- create an issue\n- link a pull-request from an unrelated repo (just need to put \"Resolves #url\" in the body\n- try to close the issue through another pull-request\n- notice the bot reopens the PR saying that not every pull-request is closed","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/249","commentType":"ISSUE_SPECIFICATION","score":{"reward":8.63,"formatting":{"content":{"p":{"score":0,"elementCount":3},"em":{"score":0,"elementCount":1},"h2":{"score":1,"elementCount":3},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":4},"a":{"score":1,"elementCount":1}},"result":4.4},"priority":1,"words":{"wordCount":142,"wordValue":0.1,"result":2.31},"readability":{"fleschKincaid":55.22221830985917,"syllables":194,"sentences":4,"score":0.9522221830985917},"multiplier":1,"relevance":1}},{"id":2619259141,"content":"Here is my QA, seems good so far:\r\n- [ignore other user pull-request which is not the assigned user](https://github.com/Meniole/text-conversation-rewards/issues/47)\r\n- [close and generate reward when all the PRs are closed](https://github.com/Meniole/text-conversation-rewards/issues/60)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/250#issuecomment-2619259141","commentType":"PULL_COLLABORATOR","score":{"reward":8.304,"formatting":{"content":{"p":{"score":0,"elementCount":3},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2.2},"priority":2,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":66.5448275862069,"syllables":38,"sentences":1,"score":0.934551724137931},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2578550424,"effect":{"addition":155,"deletion":14},"reward":3.38,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/250"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 20.314 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>3.38</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>8.63</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>8.304</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/250\" target=\"_blank\" rel=\"noopener\">#250</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+155 -14</td><td>2</td><td>3.38</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/249\" target=\"_blank\" rel=\"noopener\">_Originally posted by @gentlementlegen in [#60](https://github.c&hellip;</a></h6></td><td><details><summary>6.71</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    h2:&#13;      score: 1&#13;      elementCount: 3&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 4.4&#13;regex:&#13;  wordCount: 142&#13;  wordValue: 0.1&#13;  result: 2.31&#13;</pre></details></td><td>1</td><td>1</td><td>8.63</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/250#issuecomment-2619259141\" target=\"_blank\" rel=\"noopener\">Here is my QA, seems good so far:- [ignore other user pull-req&hellip;</a></h6></td><td><details><summary>4.05</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2.2&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.8</td><td>2</td><td>8.304</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-disqualifier_68.json","json":{"gentlementlegen":{"userId":9807008,"total":377.978,"task":{"reward":300,"multiplier":1},"comments":[{"id":2561980491,"content":"@0x4007 continuing the discussion here to not pollute the other issue.\r\nI think the proper solution is to only run the `disqualifier` checks within the repo where the event was triggered (not the whole org). This is because we can have repo scoped configurations, which only apply to that specific repo.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2561980491","commentType":"ISSUE_AUTHOR","score":{"reward":9.27,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":50,"wordValue":0.1,"result":2.38},"readability":{"fleschKincaid":59.63433333333336,"syllables":77,"sentences":3,"score":0.9963433333333336},"multiplier":1,"relevance":1}},{"id":2562042581,"content":"Then we should simply ensure that the disqualifier runs not based on event but time intervals.\r\nHaving the disqualifier being able to read configs would just lead to code duplication and complex workflow logic, which should be avoided. Also if the base org does not have the disqualifer but the repo does have it, it means that either way events would only be triggered from this repo and the config would apply to other repos (which should not happen since the org does not have the plugin enabled).","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2562042581","commentType":"ISSUE_AUTHOR","score":{"reward":10.17,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":88,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":55.92984848484849,"syllables":126,"sentences":3,"score":0.9592984848484849},"multiplier":1,"relevance":1}},{"id":2563037352,"content":"The SDK does not handle the configuration for plugins, only the kernel knows how to read / decode / validate it. Plugins are only aware of their own configuration which is sent by the kernel.\r\nConsider the following scenario:\r\n- the organization does not have `daemon-disqualifier` enabled\r\n- this repository has `daemon-disqualifier` enabled\r\nin this case, the `daemon-disqualifier` will run in the whole org regardless, which I don't think is a desired behavior.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2563037352","commentType":"ISSUE_AUTHOR","score":{"reward":10.53,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":3,"words":{"wordCount":67,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":47.796517412935344,"syllables":108,"sentences":3,"score":0.8779651741293535},"multiplier":1,"relevance":1}},{"id":2567330701,"content":"To me the solutions are either:\r\n- run the disqualifier only on the repo where the event happened;\r\n- run the disqualifier on a time based interval to not rely on events happening\r\nThe base of the problem is calling all the repositories for an event.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2567330701","commentType":"ISSUE_AUTHOR","score":{"reward":8.91,"formatting":{"content":{"p":{"score":0,"elementCount":4},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":3,"words":{"wordCount":44,"wordValue":0.1,"result":2.27},"readability":{"fleschKincaid":27.584090909090946,"syllables":70,"sentences":1,"score":0.6758409090909094},"multiplier":1,"relevance":1}},{"id":2567339192,"content":"Yes but the run itself is triggered from the kernel, which tells the plugin to run. The problem is that this plugin runs on the whole organization using its own configuration which should be specific to its repository only.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2567339192","commentType":"ISSUE_AUTHOR","score":{"reward":8.25,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":52.550192307692356,"syllables":62,"sentences":2,"score":0.9255019230769236},"multiplier":1,"relevance":1}},{"id":2567344308,"content":"Yes but this issue was filled to fix the following scenario:\r\n- `business-development` is configured to not disqualify on missing pull-request\r\n- `daemon-disqualifier` was triggered from another repository in the `ubiquity` organization, which was configured to disqualify on missing pull-request\r\n- `daemon-disqualifier` evaluated issues in `business-development` using the other repository configuration, thus disqualifying the user\r\nLast step is incorrect, and would be solved by running `daemon-disqualifer` only in the repo where the event happened.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2567344308","commentType":"ISSUE_AUTHOR","score":{"reward":8.64,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3}},"result":0.3},"priority":3,"words":{"wordCount":67,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":-13.955074626865667,"syllables":121,"sentences":1,"score":0},"multiplier":1,"relevance":1}},{"id":2570286936,"content":"I had an idea that maybe would solve our problems, without needing to change anything inside of the kernel nor implementing crons within our system.\r\nTo handle the cron part, we could have an Action script like `cron.yml` which would trigger once every 24h, which only purpose is to trigger a `compute.yml` run.\r\nThe workflow would be the following:\r\n- `daemon-disqualifier` would run the same as it is now\r\n- at the end of the run, we would store the repository list that needs reminders to be sent (could be a json within this repo?)\r\n- `cron.yml` waits 24h, then triggers `compute.yml`\r\n- `compute.yml` runs as usual, updates the repository reminders read from the list we stored before\r\n- if there is nothing to be done (e.g. there is no more assignees to watch anywhere), then `compute.yml` disables `cron.yml` workflow\r\n- later on, if someone gets assigned, enable `cron.yml` workflow from `compute.yml`, rinse and repeat\r\nThis way, no useless runs would happen from the cron, we would properly watch repositories and use the correct configuration during runs. This would also lower our API usage significantly.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2570286936","commentType":"ISSUE_AUTHOR","score":{"reward":10.23,"formatting":{"content":{"p":{"score":0,"elementCount":10},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":6}},"result":0.6},"priority":3,"words":{"wordCount":170,"wordValue":0.1,"result":2.03},"readability":{"fleschKincaid":58.2708823529412,"syllables":249,"sentences":7,"score":0.982708823529412},"multiplier":1,"relevance":1}},{"id":2571621218,"content":"You are correct. For the installation token, we have `APP_ID` and `APP_PRIVATE_KEY` organization wide, which should enable the cron to authenticate as well?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2571621218","commentType":"ISSUE_AUTHOR","score":{"reward":4.095,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":55.17750000000001,"syllables":35,"sentences":2,"score":0.951775},"multiplier":1,"relevance":0.7}},{"id":2604014962,"content":"Also about the `CRON`, quoting the docs:","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2604014962","commentType":"ISSUE_AUTHOR","score":{"reward":0.693,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":73.84500000000001,"syllables":9,"sentences":1,"score":0.8615499999999998},"multiplier":1,"relevance":0.3}},{"id":2759063221,"content":"@0x4007 So the configuration is correct and does not require a pull-request as you can see [here](https://github.com/ubiquity/business-development/blob/development/.github/.ubiquity-os.config.yml#L370). However during the run that value was `true` as you can see [here](https://github.com/ubiquity-os-marketplace/daemon-disqualifier/actions/runs/12478009115/job/34824958340#step:3:26). This is probably due to the fact that the run was triggered from another repo where that value is `true`. Not sure how we should handle this scenario.\r\n_Originally posted by @gentlementlegen in https://github.com/ubiquity/business-development/issues/103#issuecomment-2560735421_","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68","commentType":"ISSUE_SPECIFICATION","score":{"reward":7.19,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":3}},"result":3},"priority":1,"words":{"wordCount":62,"wordValue":0.1,"result":2.54},"readability":{"fleschKincaid":60.70500000000001,"syllables":114,"sentences":6,"score":0.9929499999999999},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 377.978 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>300</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>7.19</td></tr><tr><td>Issue</td><td>Comment</td><td>9</td><td>70.788</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68\" target=\"_blank\" rel=\"noopener\">@0x4007 So the configuration is correct and does not require a p&hellip;</a></h6></td><td><details><summary>5.54</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 3&#13;regex:&#13;  wordCount: 62&#13;  wordValue: 0.1&#13;  result: 2.54&#13;</pre></details></td><td>1</td><td>1</td><td>7.19</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2561980491\" target=\"_blank\" rel=\"noopener\">@0x4007 continuing the discussion here to not pollute the other &hellip;</a></h6></td><td><details><summary>2.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 50&#13;  wordValue: 0.1&#13;  result: 2.38&#13;</pre></details></td><td>1</td><td>3</td><td>9.27</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2562042581\" target=\"_blank\" rel=\"noopener\">Then we should simply ensure that the disqualifier runs not base&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 88&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>1</td><td>3</td><td>10.17</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2563037352\" target=\"_blank\" rel=\"noopener\">The SDK does not handle the configuration for plugins, only the &hellip;</a></h6></td><td><details><summary>2.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 67&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>1</td><td>3</td><td>10.53</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2567330701\" target=\"_blank\" rel=\"noopener\">To me the solutions are either:- run the disqualifier only on &hellip;</a></h6></td><td><details><summary>2.47</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 44&#13;  wordValue: 0.1&#13;  result: 2.27&#13;</pre></details></td><td>1</td><td>3</td><td>8.91</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2567339192\" target=\"_blank\" rel=\"noopener\">Yes but the run itself is triggered from the kernel, which tells&hellip;</a></h6></td><td><details><summary>2.15</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.15&#13;</pre></details></td><td>1</td><td>3</td><td>8.25</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2567344308\" target=\"_blank\" rel=\"noopener\">Yes but this issue was filled to fix the following scenario:- &hellip;</a></h6></td><td><details><summary>2.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;  result: 0.3&#13;regex:&#13;  wordCount: 67&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>1</td><td>3</td><td>8.64</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2570286936\" target=\"_blank\" rel=\"noopener\">I had an idea that maybe would solve our problems, without needi&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 10&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 6&#13;  result: 0.6&#13;regex:&#13;  wordCount: 170&#13;  wordValue: 0.1&#13;  result: 2.03&#13;</pre></details></td><td>1</td><td>3</td><td>10.23</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2571621218\" target=\"_blank\" rel=\"noopener\">You are correct. For the installation token, we have &#96;APP_ID&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.095</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2604014962\" target=\"_blank\" rel=\"noopener\">Also about the &#96;CRON&#96;, quoting the docs:</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.693</td></tr></tbody></table></details>"},"0x4007":{"total":53.916,"userId":4975670,"comments":[{"id":2561996883,"content":"I disagree. There's many repos without much activity and a few with the most so the former would be very unmaintained by the disqualifier. \nInstead the disqualifier should build a mapping of every (merged) config to every repo. \nIdeally it should use the identical SDK logic the kernel uses to interpret the configs.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2561996883","commentType":"ISSUE_COLLABORATOR","score":{"reward":8.397,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":54,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":52.13250000000002,"syllables":90,"sentences":4,"score":0.9213250000000002},"multiplier":1,"relevance":0.9}},{"id":2563008357,"content":"I'm not convinced. I think the SDK handles most of the config related logic so duplication is fine because it's imported.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2563008357","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.872,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":73.77989130434786,"syllables":33,"sentences":2,"score":0.8622010869565214},"multiplier":1,"relevance":0.8}},{"id":2567115749,"content":"@whilefoo rfc \nI'm not sure what else can be done here","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2567115749","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.86,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":95.955,"syllables":14,"sentences":1,"score":0.64045},"multiplier":1,"relevance":0.5}},{"id":2567333417,"content":"Another idea is to hand off the event from the kernel to a GitHub Action, and have the Action continue to retry, with an exponential backoff, if there are failures. \r\nIn less than six hours it should be able to sort itself out with this strategy.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2567333417","commentType":"ISSUE_COLLABORATOR","score":{"reward":8.073,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":46,"wordValue":0.1,"result":2.31},"readability":{"fleschKincaid":62.10739130434784,"syllables":66,"sentences":2,"score":0.9789260869565216},"multiplier":1,"relevance":0.9}},{"id":2567340498,"content":"No my idea is that it should run on every repository in the organization. The problem we are trying to solve is related to rate limits and exponential backoffs are a solution to this.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2567340498","commentType":"ISSUE_COLLABORATOR","score":{"reward":6.966,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":55.21529411764709,"syllables":54,"sentences":2,"score":0.9521529411764709},"multiplier":1,"relevance":0.9}},{"id":2571622197,"content":"We can try your suggestion I just hope it's not too brittle but that depends on how well it's implemented","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2571622197","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.704,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":76.83227272727274,"syllables":28,"sentences":1,"score":0.8316772727272727},"multiplier":1,"relevance":0.8}},{"id":2605122894,"content":"It would be nice if the script can toggle itself to renew that timer.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2605122894","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.982,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":83.85357142857143,"syllables":18,"sentences":1,"score":0.7614642857142857},"multiplier":1,"relevance":0.7}},{"id":2572912395,"content":"I guess let's merge and try in production I think this one is difficult to QA","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/73#pullrequestreview-2572912395","commentType":"PULL_COLLABORATOR","score":{"reward":1.944,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":85.07411764705884,"syllables":21,"sentences":1,"score":0.7492588235294115},"multiplier":1,"relevance":0.4}},{"id":2612436421,"content":"Seems like it might be tedious to show QA but are you able to show any? Alternatively we can merge and observe the business-development repo","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/73#issuecomment-2612436421","commentType":"PULL_COLLABORATOR","score":{"reward":4.068,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":60.23230769230773,"syllables":41,"sentences":2,"score":0.9976769230769227},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2572912395,"effect":{"addition":313,"deletion":22},"reward":10.05,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/73"},{"url":"https://github.com/ubiquity-os/plugin-sdk/pull/55"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 53.916 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>10.05</td></tr><tr><td>Issue</td><td>Comment</td><td>7</td><td>37.854</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>6.012</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/73\" target=\"_blank\" rel=\"noopener\">#73</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+313 -22</td><td>3</td><td>10.05</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2561996883\" target=\"_blank\" rel=\"noopener\">I disagree. There's many repos without much activity and a few w&hellip;</a></h6></td><td><details><summary>2.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 54&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>0.9</td><td>3</td><td>8.397</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2563008357\" target=\"_blank\" rel=\"noopener\">I'm not convinced. I think the SDK handles most of the config re&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.872</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2567115749\" target=\"_blank\" rel=\"noopener\">@whilefoo rfc I'm not sure what else can be done here</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.86</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2567333417\" target=\"_blank\" rel=\"noopener\">Another idea is to hand off the event from the kernel to a GitHu&hellip;</a></h6></td><td><details><summary>2.31</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 46&#13;  wordValue: 0.1&#13;  result: 2.31&#13;</pre></details></td><td>0.9</td><td>3</td><td>8.073</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2567340498\" target=\"_blank\" rel=\"noopener\">No my idea is that it should run on every repository in the orga&hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.9</td><td>3</td><td>6.966</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2571622197\" target=\"_blank\" rel=\"noopener\">We can try your suggestion I just hope it's not too brittle but &hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.704</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2605122894\" target=\"_blank\" rel=\"noopener\">It would be nice if the script can toggle itself to renew that t&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.982</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/73#pullrequestreview-2572912395\" target=\"_blank\" rel=\"noopener\">I guess let's merge and try in production I think this one is di&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.944</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/73#issuecomment-2612436421\" target=\"_blank\" rel=\"noopener\">Seems like it might be tedious to show QA but are you able to sh&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.6</td><td>3</td><td>4.068</td></tr></tbody></table></details>"},"whilefoo":{"total":37.016,"userId":139262667,"comments":[{"id":2569302512,"content":"There's no easy answer to this. \r\nWe could implement cron jobs but that would hit rate limits even faster because on every kernel run (for example every minute) it would have to check every config that exists and see if there's a cron plugin that needs to be run.\r\nFetching all repo configs on every org event is also not a good idea for rate limits but can be a fix for the problem of correct configs.\r\nA temporary fix would be to put the plugin in org config and specify all repos that require a PR.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2569302512","commentType":"ISSUE_COLLABORATOR","score":{"reward":9.126,"formatting":{"content":{"p":{"score":0,"elementCount":4}},"result":0},"priority":3,"words":{"wordCount":99,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":61.22284090909092,"syllables":141,"sentences":4,"score":0.9877715909090908},"multiplier":1,"relevance":0.9}},{"id":2571617515,"content":"If I understand correctly every time `issues.assigned` triggers the plugin it would add the issue to a list and store it somewhere and on `issues.unassigned` remove it from the list and if the list is non-empty it would enable `cron.yml` that would run `compute.yml` every x hours, and if the list is empty it would disable `cron.yml`. On every `compute.yml` run it would check if reminders need to be sent or unassign inactive users.\r\nThe main problem I see is how would the plugin get the installation token when it's run by `cron.yml`?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2571617515","commentType":"ISSUE_COLLABORATOR","score":{"reward":8.696,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":88,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":58.81393939393941,"syllables":123,"sentences":3,"score":0.9881393939393941},"multiplier":1,"relevance":0.85}},{"id":1929282598,"content":"don't we use [actions/create-github-app-token](https://github.com/actions/create-github-app-token) now?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/73#discussion_r1929282598","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -42,3 +46,22 @@ jobs:\n \n       - name: Watch Activity\n         uses: ./\n+\n+      - name: Get GitHub App token\n+        if: env.APP_ID != '' && env.APP_PRIVATE_KEY != ''\n+        uses: tibdex/github-app-token@v1.7.0","score":{"reward":4.872,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":86.70500000000001,"syllables":13,"sentences":1,"score":0.7329499999999999},"multiplier":1,"relevance":0.7}},{"id":1929312919,"content":"isn't this basically the same as calling `removeEntryFromDatabase`?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/73#discussion_r1929312919","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -91,6 +106,14 @@ async function updateReminders(context: ContextPlugin, repo: ListForOrg[\"data\"][\n         await updateTaskReminder(context, repo, issue);\n       } else {\n         logger.info(`Skipping issue ${issue.html_url} because no user is assigned.`);\n+        const { owner, repo } = parseIssueUrl(issue.html_url);\n+        const key = `${owner}/${repo}`;\n+        if (db.data[key]) {\n+          await db.update((data) => {\n+            data[key] = data[key].filter((o) => o.issueNumber !== issue.number);\n+            return data;\n+          });\n+        }","score":{"reward":2.592,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":71.81500000000001,"syllables":12,"sentences":1,"score":0.8818499999999999},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2573658843,"effect":{"addition":313,"deletion":22},"reward":10.05,"priority":3},{"reviewId":2573985682,"effect":{"addition":16,"deletion":20},"reward":1.08,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/73"},{"reviews":[{"reviewId":2568365211,"effect":{"addition":17,"deletion":3},"reward":0.6,"priority":3}],"url":"https://github.com/ubiquity-os/plugin-sdk/pull/55"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 37.016 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>11.73</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>17.822</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>7.464</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/73\" target=\"_blank\" rel=\"noopener\">#73</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+313 -22</td><td>3</td><td>10.05</td></tr><tr><td>+16 -20</td><td>3</td><td>1.08</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os/plugin-sdk/pull/55\" target=\"_blank\" rel=\"noopener\">#55</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+17 -3</td><td>3</td><td>0.6</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2569302512\" target=\"_blank\" rel=\"noopener\">There's no easy answer to this. We could implement cron jobs b&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;  result: 0&#13;regex:&#13;  wordCount: 99&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.9</td><td>3</td><td>9.126</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/68#issuecomment-2571617515\" target=\"_blank\" rel=\"noopener\">If I understand correctly every time &#96;issues.assigned&#96; t&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 88&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.85</td><td>3</td><td>8.696</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/73#discussion_r1929282598\" target=\"_blank\" rel=\"noopener\">don't we use [actions/create-github-app-token](https://github.co&hellip;</a></h6></td><td><details><summary>1.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.872</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/73#discussion_r1929312919\" target=\"_blank\" rel=\"noopener\">isn't this basically the same as calling &#96;removeEntryFromDat&hellip;</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.592</td></tr></tbody></table></details>"},"Keyrxng":{"total":0.129,"userId":106303466,"comments":[{"id":2608067974,"content":"Hey @gentlementlegen, would you mind shooting me a dm on telegram when you see this please? Thank you.","url":"https://github.com/ubiquity-os/plugin-sdk/pull/55#issuecomment-2608067974","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.129,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":80.20000000000003,"syllables":25,"sentences":2,"score":0.7979999999999997},"multiplier":0.25,"relevance":0.1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/73"},{"url":"https://github.com/ubiquity-os/plugin-sdk/pull/55"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.129 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>0.129</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os/plugin-sdk/pull/55#issuecomment-2608067974\" target=\"_blank\" rel=\"noopener\">Hey @gentlementlegen, would you mind shooting me a dm on telegra&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.129</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-disqualifier_63.json","json":{"gentlementlegen":{"userId":9807008,"total":59.64,"task":{"reward":50,"multiplier":1},"comments":[{"id":2735144855,"content":"> > [!IMPORTANT]\r\nWe should only do disqualification when there are labels and it's funded  \r\nAlso maybe you should put some effort into writing proper specs, at least until we get issue matching and task recommendation to work.\r\n_Originally posted by @0x4007 in https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/212#issuecomment-2537926078_\r\nThe disqualifier should not run on task that are not funded (e.g. have no price label).\r\n## What happened\r\nThe `daemon-disqualifier` ran and sent a message on an issue that was not priced, thus not subject to disqualification (no deadline needed).\r\n## What was expected\r\n`daemon-disqualifier` should run on priced tasks, and ignored unpriced tasks.\r\n## How to reproduce\r\n- create a task without any price label\r\n- assign a user to that task\r\n- notice the notification message being sent by `daemon-disqualifier`","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/63","commentType":"ISSUE_SPECIFICATION","score":{"reward":8.81,"formatting":{"content":{"p":{"score":0,"elementCount":9},"em":{"score":0,"elementCount":1},"h2":{"score":1,"elementCount":3},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":4.3},"priority":1,"words":{"wordCount":116,"wordValue":0.1,"result":2.52},"readability":{"fleschKincaid":62.58440406976746,"syllables":195,"sentences":8,"score":0.9741559593023255},"multiplier":1,"relevance":1}},{"id":2263811470,"content":"Resolves #63\r\nQA: https://github.com/Meniole/daemon-disqualifier/issues/10#issuecomment-2575151732","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/69","commentType":"PULL_SPECIFICATION","score":{"reward":0.83,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":37.54519230769233,"syllables":25,"sentences":2,"score":0.7754519230769233},"multiplier":1,"relevance":0.5}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 59.64 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>8.81</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.83</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/63\" target=\"_blank\" rel=\"noopener\">&gt; &gt; [!IMPORTANT]We should only do disqualification when &hellip;</a></h6></td><td><details><summary>6.82</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 9&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    h2:&#13;      score: 1&#13;      elementCount: 3&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 4.3&#13;regex:&#13;  wordCount: 116&#13;  wordValue: 0.1&#13;  result: 2.52&#13;</pre></details></td><td>1</td><td>1</td><td>8.81</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/69\" target=\"_blank\" rel=\"noopener\">Resolves #63QA: https://github.com/Meniole/daemon-disqualifier&hellip;</a></h6></td><td><details><summary>1.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.83</td></tr></tbody></table></details>"},"0x4007":{"total":0.648,"userId":4975670,"comments":[{"id":2567337040,"content":"Please add time estimates whenever you file new issues!","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/63#issuecomment-2567337040","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.648,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":56.70000000000002,"syllables":15,"sentences":1,"score":0.9670000000000002},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/69"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.648 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.648</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/63#issuecomment-2567337040\" target=\"_blank\" rel=\"noopener\">Please add time estimates whenever you file new issues!</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.648</td></tr></tbody></table></details>"},"whilefoo":{"total":2.58,"userId":139262667,"comments":[{"id":1906049416,"content":"why is `!!` needed if `draft` is a boolean?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/69#discussion_r1906049416","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -48,8 +48,16 @@ export async function watchUserActivity(context: ContextPlugin) {\n   return { message: \"OK\" };\n }\n \n+/*\n+ * We ignore the issue if:\n+ * - draft\n+ * - pull request\n+ * - locked\n+ * - not in \"open\" state\n+ * - not priced (no price label found)\n+ */\n function shouldIgnoreIssue(issue: IssueType) {\n-  return issue.draft || issue.pull_request || issue.locked || issue.state !== \"open\";\n+  return !!issue.draft || !!issue.pull_request || issue.locked || issue.state !== \"open\" || parsePriceLabel(issue.labels) === null;","score":{"reward":1.44,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":103.04428571428575,"syllables":8,"sentences":1,"score":1},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2535383128,"effect":{"addition":47,"deletion":8},"reward":1.1,"priority":2},{"reviewId":2536974171,"effect":{"addition":1,"deletion":1},"reward":0.04,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/69"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 2.58 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>1.14</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>1.44</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/69\" target=\"_blank\" rel=\"noopener\">#69</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+47 -8</td><td>2</td><td>1.1</td></tr><tr><td>+1 -1</td><td>2</td><td>0.04</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/69#discussion_r1906049416\" target=\"_blank\" rel=\"noopener\">why is &#96;!!&#96; needed if &#96;draft&#96; is a boolean?</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.44</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_39.json","json":{"ishowvel":{"userId":186167176,"total":76.269,"task":{"reward":75,"multiplier":1},"comments":[{"id":2435086828,"content":"Do you mean removing the higher time estimate assuming the price is label is rendered with the lower time estimate?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/39#issuecomment-2435086828","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.269,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":51.17500000000004,"syllables":32,"sentences":1,"score":0.9117500000000004},"multiplier":0.25,"relevance":0.9}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 76.269 XP ]</a>&nbsp;</h3><h6>@ishowvel</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.269</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/39#issuecomment-2435086828\" target=\"_blank\" rel=\"noopener\">Do you mean removing the higher time estimate assuming the price&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.9</td><td>3</td><td>1.269</td></tr></tbody></table></details>"},"0x4007":{"total":15.863,"userId":4975670,"comments":[{"id":2435129149,"content":"There are two scales: for time and priority. Remove the higher of each if theres more than one. There should only be a single priority or time label per task.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/39#issuecomment-2435129149","commentType":"ISSUE_AUTHOR","score":{"reward":6.93,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":83.88500000000002,"syllables":40,"sentences":3,"score":0.7611499999999998},"multiplier":1,"relevance":1}},{"id":2435138780,"content":"Setting up a plugin to run can be a bit of a headache, but is necessary to prove that your changes work. That is why this is set to 1 hour. Good luck!","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/39#issuecomment-2435138780","commentType":"ISSUE_AUTHOR","score":{"reward":1.416,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":95.68818181818183,"syllables":39,"sentences":3,"score":0.6431181818181817},"multiplier":1,"relevance":0.2}},{"id":2435140263,"content":"@ubiquityos can you offer a guide on how to set up a development instance of the kernel, and to set up this plugin for QA tests on changes in a pull request?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/39#issuecomment-2435140263","commentType":"ISSUE_AUTHOR","score":{"reward":0.759,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":60.67375000000003,"syllables":43,"sentences":1,"score":0.9932624999999997},"multiplier":1,"relevance":0.1}},{"id":2435154957,"content":"It looks like there are some hallucinations. Do you think that adding code parsing/embeddings will help with this @sshivaditya2019? Perhaps we should use a model like 4o instead of o1-mini for dealing with huge contexts. @gentlementlegen perhaps you can offer advice on how to set up the kernel to work on the plugin for QA. I never successfully set up the kernel to work on a plugin so I don't know.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/39#issuecomment-2435154957","commentType":"ISSUE_AUTHOR","score":{"reward":0.993,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":74,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":70.62921621621624,"syllables":106,"sentences":5,"score":0.8937078378378377},"multiplier":1,"relevance":0.1}},{"id":2559332175,"content":"We do this already when rendering the price, but when we have two different time labels (or two different priority labels) the pricing algorithm will always take the lowest combination. \nWe should remove the higher labels as well so that there is no confusion.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/39","commentType":"ISSUE_SPECIFICATION","score":{"reward":2.9,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":44,"wordValue":0.1,"result":2.27},"readability":{"fleschKincaid":51.83681818181819,"syllables":69,"sentences":2,"score":0.9183681818181819},"multiplier":1,"relevance":1}},{"id":2397507800,"content":"Thanks for your QA","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#pullrequestreview-2397507800","commentType":"PULL_COLLABORATOR","score":{"reward":0.171,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}},{"id":2438776473,"content":"Yes @gentlementlegen please produce a clear guide for us to get started on plugin development.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#issuecomment-2438776473","commentType":"PULL_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":56.25000000000003,"syllables":24,"sentences":1,"score":0.9625000000000002},"multiplier":1,"relevance":0}},{"id":2439681195,"content":"@gentlementlegen @whilefoo rfc","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#issuecomment-2439681195","commentType":"PULL_COLLABORATOR","score":{"reward":0.21,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":-50.00999999999996,"syllables":9,"sentences":1,"score":0},"multiplier":1,"relevance":0.2}},{"id":2439763001,"content":"Please file an urgent priority task in the kernel repo I presume thats the most fitting repo.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#issuecomment-2439763001","commentType":"PULL_COLLABORATOR","score":{"reward":2.064,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":60.19176470588238,"syllables":26,"sentences":1,"score":0.9980823529411762},"multiplier":1,"relevance":0.4}}],"reviewRewards":[{"reviews":[{"reviewId":2397507800,"effect":{"addition":13,"deletion":1},"reward":0.42,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 15.863 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.42</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>2.9</td></tr><tr><td>Issue</td><td>Comment</td><td>4</td><td>10.098</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>2.445</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49\" target=\"_blank\" rel=\"noopener\">#49</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+13 -1</td><td>3</td><td>0.42</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/39\" target=\"_blank\" rel=\"noopener\">We do this already when rendering the price, but when we have tw&hellip;</a></h6></td><td><details><summary>2.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 44&#13;  wordValue: 0.1&#13;  result: 2.27&#13;</pre></details></td><td>1</td><td>1</td><td>2.9</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/39#issuecomment-2435129149\" target=\"_blank\" rel=\"noopener\">There are two scales: for time and priority. Remove the higher o&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>1</td><td>3</td><td>6.93</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/39#issuecomment-2435138780\" target=\"_blank\" rel=\"noopener\">Setting up a plugin to run can be a bit of a headache, but is ne&hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.2</td><td>3</td><td>1.416</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/39#issuecomment-2435140263\" target=\"_blank\" rel=\"noopener\">@ubiquityos can you offer a guide on how to set up a development&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.759</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/39#issuecomment-2435154957\" target=\"_blank\" rel=\"noopener\">It looks like there are some hallucinations. Do you think that a&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 74&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.993</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#pullrequestreview-2397507800\" target=\"_blank\" rel=\"noopener\">Thanks for your QA</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.171</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#issuecomment-2438776473\" target=\"_blank\" rel=\"noopener\">Yes @gentlementlegen please produce a clear guide for us to get &hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#issuecomment-2439681195\" target=\"_blank\" rel=\"noopener\">@gentlementlegen @whilefoo rfc</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.21</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#issuecomment-2439763001\" target=\"_blank\" rel=\"noopener\">Please file an urgent priority task in the kernel repo I presume&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.4</td><td>3</td><td>2.064</td></tr></tbody></table></details>"},"gentlementlegen":{"total":6.216,"userId":9807008,"comments":[{"id":2436464266,"content":"@ishowvel You should have it running on your organization or your repo to prove it works. Also, you can provide unit tests.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#issuecomment-2436464266","commentType":"PULL_COLLABORATOR","score":{"reward":4.2,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":68.77000000000002,"syllables":33,"sentences":2,"score":0.9122999999999998},"multiplier":1,"relevance":0.7}},{"id":2439961474,"content":"@ishowvel the public key is derived from the private key that you are using in the kernel.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#issuecomment-2439961474","commentType":"PULL_COLLABORATOR","score":{"reward":2.016,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":70.14470588235295,"syllables":24,"sentences":1,"score":0.8985529411764704},"multiplier":1,"relevance":0.4}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 6.216 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>2</td><td>6.216</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#issuecomment-2436464266\" target=\"_blank\" rel=\"noopener\">@ishowvel You should have it running on your organization or you&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.2</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#issuecomment-2439961474\" target=\"_blank\" rel=\"noopener\">@ishowvel the public key is derived from the private key that yo&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.4</td><td>3</td><td>2.016</td></tr></tbody></table></details>"},"Keyrxng":{"total":0.756,"userId":106303466,"comments":[{"id":2439700382,"content":"I just had pretty much the same error minus \"skipping plugin\" if it's anything like mine it's your `app_private_key`, mine was a cf worker log error and was due to me not replacing `\\n` for a separate plugin.\r\nLocal dev requires your private key be a single string using `\\n` which is how it's generated I'm certain. But for other places like github secrets and cloudflare secrets replace `\\n` with a literal line break and don't wrap it in quotes. afaik","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#issuecomment-2439700382","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.756,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":82,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":69.44457317073173,"syllables":113,"sentences":4,"score":0.9055542682926827},"multiplier":0.25,"relevance":0.3}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.756 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>0.756</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#issuecomment-2439700382\" target=\"_blank\" rel=\"noopener\">I just had pretty much the same error minus \"skipping plugin\" if&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 82&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.756</td></tr></tbody></table></details>"},"whilefoo":{"total":1.872,"userId":139262667,"comments":[{"id":2439722988,"content":"We should make a FAQ in the README for common errors, also we should implement an interactive setup of the kernel like `probot` has","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#issuecomment-2439722988","commentType":"PULL_COLLABORATOR","score":{"reward":1.872,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":62.10739130434784,"syllables":33,"sentences":1,"score":0.9789260869565216},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 1.872 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>1.872</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/49#issuecomment-2439722988\" target=\"_blank\" rel=\"noopener\">We should make a FAQ in the README for common errors, also we sh&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.872</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_69.json","json":{"gentlementlegen":{"userId":9807008,"total":52.79,"task":{"reward":50,"multiplier":1},"comments":[{"id":2430158278,"content":"The HTML output can be improved to not have many unnecessary white-spaces.\r\nRelated comment: https://github.com/ubiquibot/conversation-rewards/pull/58#discussion_r1691162076","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/69","commentType":"ISSUE_SPECIFICATION","score":{"reward":2.79,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":47.140000000000015,"syllables":43,"sentences":3,"score":0.8714000000000002},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 52.79 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>2.79</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/69\" target=\"_blank\" rel=\"noopener\">The HTML output can be improved to not have many unnecessary whi&hellip;</a></h6></td><td><details><summary>2.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>1</td><td>1</td><td>2.79</td></tr></tbody></table></details>"},"0x4007":{"total":1.03,"userId":4975670,"comments":[{"id":2373879713,"content":"It would be nice if we could have it function without a config but I don't see how its really possible aside from rendering a /help menu?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/69#issuecomment-2373879713","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.466,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":63.600714285714304,"syllables":38,"sentences":1,"score":0.963992857142857},"multiplier":1,"relevance":0.1}},{"id":2373920555,"content":"No I don't see any danger here. We have the evm key org/repo locked. We use the secrets inside the plugins for everything else.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/69#issuecomment-2373920555","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.212,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":87.40756410256414,"syllables":34,"sentences":3,"score":0.7259243589743586},"multiplier":1,"relevance":0.05}},{"id":1773067396,"content":"Looks much better!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/126#discussion_r1773067396","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.252,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":90.99000000000004,"syllables":4,"sentences":1,"score":0.6900999999999996},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2324790179,"effect":{"addition":4,"deletion":1},"reward":0.1,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/126"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 1.03 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.1</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>0.678</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.252</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/126\" target=\"_blank\" rel=\"noopener\">#126</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+4 -1</td><td>2</td><td>0.1</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/69#issuecomment-2373879713\" target=\"_blank\" rel=\"noopener\">It would be nice if we could have it function without a config b&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.466</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/69#issuecomment-2373920555\" target=\"_blank\" rel=\"noopener\">No I don't see any danger here. We have the evm key org/repo loc&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.05</td><td>2</td><td>0.212</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/126#discussion_r1773067396\" target=\"_blank\" rel=\"noopener\">Looks much better!</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.252</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_79.json","json":{"Keyrxng":{"userId":106303466,"total":150,"task":{"reward":150,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 150 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>150</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"rndquu":{"total":89.782,"userId":119500907,"comments":[{"id":2462689992,"content":"Pls share\r\nYes, as far as I understand @zugdev has already started looking into https://github.com/ubiquity-os/ubiquity-os-plugin-installer/issues (pls correct me if I'm wrong and `0x4007` assigned you some other tasks) \r\nAll current open PRs should be processed as usual. Only none-assigned and not-started issues will be reassessed.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2462689992","commentType":"ISSUE_AUTHOR","score":{"reward":9.03,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":46,"wordValue":0.1,"result":2.31},"readability":{"fleschKincaid":59.47761904761907,"syllables":85,"sentences":3,"score":0.9947761904761907},"multiplier":1,"relevance":0.7}},{"id":2463960870,"content":"@Keyrxng That's cool, DAO analytics fits with monetization.\r\nYou may:\r\n1. Move the analytics UI to https://github.com/orgs/ubiquity-os/repositories\r\n2. Create a readme with a short description and a screenshot/video of current UI\r\nLater, when we onboard a couple of partners, we could iterate on that UI to deduce actionable steps for partners to increase their org performance.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2463960870","commentType":"ISSUE_AUTHOR","score":{"reward":2.796,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1.2},"priority":3,"words":{"wordCount":55,"wordValue":0.1,"result":2.46},"readability":{"fleschKincaid":50.77123655913982,"syllables":99,"sentences":3,"score":0.9077123655913982},"multiplier":1,"relevance":0.2}},{"id":2463972502,"content":"If approves don't work in `uusd.ubq.fi` then it's a major business impact, if button is 50px lower than expected it's a low business impact. Anyway the https://github.com/ubiquity-os is configurable per repository, so for some of the repos (especially pure UI) it makes sense to allow starting any issues.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2463972502","commentType":"ISSUE_AUTHOR","score":{"reward":11.664,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":49,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":53.83166666666668,"syllables":86,"sentences":3,"score":0.9383166666666668},"multiplier":1,"relevance":0.9}},{"id":2465231201,"content":"@Keyrxng Help\r\nCheck [this](https://github.com/ubiquity/pay.ubq.fi/blob/0c899da8d30c1ad661a6460c1b2a74f1f8676126/.github/.ubiquity-os.config.yml#L352) config and [this](https://github.com/ubiquity/pay.ubq.fi/issues/292#issuecomment-2465222500) comment which assigned `rndquu3` successfully although the expected behavior was to reject assignment because there's only the `Priority 1 (Normal)` label.\r\nNot sure if it's this feature related or plugin config related issue.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2465231201","commentType":"ISSUE_AUTHOR","score":{"reward":12.696,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":2}},"result":2},"priority":3,"words":{"wordCount":38,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":53.97105263157897,"syllables":60,"sentences":2,"score":0.9397105263157897},"multiplier":1,"relevance":0.8}},{"id":2465749921,"content":"Thank you, it worked","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2465749921","commentType":"ISSUE_AUTHOR","score":{"reward":0.684,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.4}},{"id":2640672692,"content":"Right now our main goal is to show investors that the project is capable of generating a revenue. \r\nSo basically we need to concentrate on tasks related to:\r\n1. Partner onboarding (i.e. [UbiquityOS Marketplace GUI](https://github.com/ubiquity-os/ubiquity-os-plugin-installer))\r\n2. Charging fees\r\n3. Making the kernel stable\r\n4. Making core plugins stable\r\nWe have the following organizational issues right now:\r\n1. All core team members are doing everything with a lack of focus. \r\n2. There's too much PRs to review (from outside contributors) and none-important issues (that don't \"move the needle\") to discuss.\r\nFor example check these issues:\r\n- https://github.com/ubiquity-os/plugin-sdk/issues/34\r\n- https://github.com/ubiquity-os/ubiquity-os-kernel/issues/154\r\nAlthough both of the issues above have the \"Priority: 3 (High)\" label in reality their business value is 1 (on a scale from 1 to 4). **The \"Priority\" label must reflect a business priority, not a development one.**\r\nAs a part of this issue we should add a new property `requiredLabelsToStart` which accepts an array of labels required to call the `/start` command.\r\nExample config:\r\n```\r\n- plugin: http://localhost:4000 # or the URL where the plugin is hosted\r\n  name: start-stop\r\n  id: start-stop-command\r\n  command: \"\\/start|\\/stop\"\r\n  with:\r\n    requiredLabelsToStart: [\"Priority: 3 (High)\", \"Priority: 4 (Urgent)\", \"Priority: 5 (Emergency)\"]\r\n    # ...other props\r\n```\r\nIn the example above it will be possible to start an issue only if it has required business priority labels.\r\nWhen current issue is finished we'll:\r\n1. Review all github issues and update the \"Priority\" label to reflect a business value\r\n2. Set `requiredLabelsToStart: [\"Priority: 3 (High)\", \"Priority: 4 (Urgent)\", \"Priority: 5 (Emergency)\"]` for all of our organizations\r\nThis way we:\r\n1. Shift core team focus only on issues that have a business impact\r\n2. Reduce number of PRs to review and issues to discuss (because outside contributors will have to solve only high business priority issues)\r\n3. Save money and time only to what matters","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79","commentType":"ISSUE_SPECIFICATION","score":{"reward":7.21,"formatting":{"content":{"p":{"score":0,"elementCount":23},"ol":{"score":0,"elementCount":4},"li":{"score":0.1,"elementCount":13},"ul":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":3}},"result":4.3},"priority":1,"words":{"wordCount":235,"wordValue":0.1,"result":1.4},"readability":{"fleschKincaid":48.50402648532571,"syllables":405,"sentences":11,"score":0.8850402648532572},"multiplier":1,"relevance":1}},{"id":2462541913,"content":"@Keyrxng As far as I understand you don't have permissions to ask for a review. I couldn't find this option in github organization settings. Where is it located?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80#issuecomment-2462541913","commentType":"PULL_COLLABORATOR","score":{"reward":2.124,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":75.42500000000001,"syllables":43,"sentences":3,"score":0.8457499999999999},"multiplier":1,"relevance":0.3}},{"id":2462561814,"content":"@Keyrxng Could you update the logic?\r\n1. Set `requiredLabelsToStart` array empty by default (to make the plugin backwards compatible)\r\n2. If `requiredLabelsToStart` array is empty then allow `/start`\r\n3. If `requiredLabelsToStart` array is not empty then check that label from `requiredLabelsToStart` exists in github issue labels","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80#issuecomment-2462561814","commentType":"PULL_COLLABORATOR","score":{"reward":8.505,"formatting":{"content":{"p":{"score":0,"elementCount":4},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3}},"result":0.3},"priority":3,"words":{"wordCount":38,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":58.42368421052632,"syllables":58,"sentences":2,"score":0.9842368421052632},"multiplier":1,"relevance":0.9}},{"id":2462566316,"content":"@Keyrxng Also could you update the readme file with the `requiredLabelsToStart` option?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80#issuecomment-2462566316","commentType":"PULL_COLLABORATOR","score":{"reward":2.16,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":80.30636363636367,"syllables":15,"sentences":1,"score":0.7969363636363633},"multiplier":1,"relevance":0.6}},{"id":2462608537,"content":"@Keyrxng I've sent invite to the https://github.com/ubiquity-os-marketplace org, perhaps when you're a member you can ask for reviews","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80#issuecomment-2462608537","commentType":"PULL_COLLABORATOR","score":{"reward":3.648,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":75.70750000000002,"syllables":35,"sentences":2,"score":0.8429249999999997},"multiplier":1,"relevance":0.4}},{"id":2463948349,"content":"@Keyrxng Could you resolve the code conflicts? I suppose the PR is safe to merge afterwards.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80#issuecomment-2463948349","commentType":"PULL_COLLABORATOR","score":{"reward":3.255,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":87.67750000000001,"syllables":21,"sentences":2,"score":0.7232249999999999},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2421419934,"effect":{"addition":726,"deletion":141},"reward":26.01,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 89.782 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>26.01</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>7.21</td></tr><tr><td>Issue</td><td>Comment</td><td>5</td><td>36.87</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>19.692</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80\" target=\"_blank\" rel=\"noopener\">#80</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+726 -141</td><td>3</td><td>26.01</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79\" target=\"_blank\" rel=\"noopener\">Right now our main goal is to show investors that the project is&hellip;</a></h6></td><td><details><summary>5.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 23&#13;    ol:&#13;      score: 0&#13;      elementCount: 4&#13;    li:&#13;      score: 0.1&#13;      elementCount: 13&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 4.3&#13;regex:&#13;  wordCount: 235&#13;  wordValue: 0.1&#13;  result: 1.4&#13;</pre></details></td><td>1</td><td>1</td><td>7.21</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2462689992\" target=\"_blank\" rel=\"noopener\">Pls shareYes, as far as I understand @zugdev has already start&hellip;</a></h6></td><td><details><summary>3.31</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 46&#13;  wordValue: 0.1&#13;  result: 2.31&#13;</pre></details></td><td>0.7</td><td>3</td><td>9.03</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2463960870\" target=\"_blank\" rel=\"noopener\">@Keyrxng That's cool, DAO analytics fits with monetization.You&hellip;</a></h6></td><td><details><summary>3.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.2&#13;regex:&#13;  wordCount: 55&#13;  wordValue: 0.1&#13;  result: 2.46&#13;</pre></details></td><td>0.2</td><td>3</td><td>2.796</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2463972502\" target=\"_blank\" rel=\"noopener\">If approves don't work in &#96;uusd.ubq.fi&#96; then it's a majo&hellip;</a></h6></td><td><details><summary>3.37</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 49&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>0.9</td><td>3</td><td>11.664</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2465231201\" target=\"_blank\" rel=\"noopener\">@Keyrxng HelpCheck [this](https://github.com/ubiquity/pay.ubq.&hellip;</a></h6></td><td><details><summary>4.13</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 38&#13;  wordValue: 0.1&#13;  result: 2.13&#13;</pre></details></td><td>0.8</td><td>3</td><td>12.696</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2465749921\" target=\"_blank\" rel=\"noopener\">Thank you, it worked</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.4</td><td>3</td><td>0.684</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80#issuecomment-2462541913\" target=\"_blank\" rel=\"noopener\">@Keyrxng As far as I understand you don't have permissions to as&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.3</td><td>3</td><td>2.124</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80#issuecomment-2462561814\" target=\"_blank\" rel=\"noopener\">@Keyrxng Could you update the logic?1. Set &#96;requiredLabels&hellip;</a></h6></td><td><details><summary>2.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;  result: 0.3&#13;regex:&#13;  wordCount: 38&#13;  wordValue: 0.1&#13;  result: 2.13&#13;</pre></details></td><td>0.9</td><td>3</td><td>8.505</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80#issuecomment-2462566316\" target=\"_blank\" rel=\"noopener\">@Keyrxng Also could you update the readme file with the &#96;req&hellip;</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.6</td><td>3</td><td>2.16</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80#issuecomment-2462608537\" target=\"_blank\" rel=\"noopener\">@Keyrxng I've sent invite to the https://github.com/ubiquity-os-&hellip;</a></h6></td><td><details><summary>2.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.4</td><td>3</td><td>3.648</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80#issuecomment-2463948349\" target=\"_blank\" rel=\"noopener\">@Keyrxng Could you resolve the code conflicts? I suppose the PR &hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.255</td></tr></tbody></table></details>"},"zugdev":{"total":5.241,"userId":155616000,"comments":[{"id":2462944368,"content":"This is part of my scope, yes. I haven't yet started since I was focusing on:\r\n1. Continuously maintain devpool and pay\r\n2. On-ramp / Pool / Staking UIs\r\nAs of now, it's definitely a high priority, as in business priority, to get the plugins really easy to setup for partners. However, we currently have a lot of different types of plugins and I am yet unsure whether installing all of them is the same, I will dive into it. [This issue](https://github.com/ubiquity-os/ubiquity-os-kernel/issues/171) scopes a CLI tool to setup the kernel, I imagine onde day we could have an UI to do that.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2462944368","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":3.321,"formatting":{"content":{"p":{"score":0,"elementCount":4},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1.2},"priority":3,"words":{"wordCount":101,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":61.42605198019804,"syllables":143,"sentences":4,"score":0.9857394801980196},"multiplier":0.25,"relevance":0.9}},{"id":2463277212,"content":"One feedback on this issue: I believe external contribution comes in handy specially in non-critical issues. For instance in UI/UX we will always have some minor improvements, which are not business important, but are really easy to review. I guess these kind of issues get a bit misplaced given the new definition of priority, any ideas on it?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2463277212","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.92,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":60,"wordValue":0.1,"result":2.52},"readability":{"fleschKincaid":51.17500000000004,"syllables":96,"sentences":3,"score":0.9117500000000004},"multiplier":0.25,"relevance":0.8}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 5.241 XP ]</a>&nbsp;</h3><h6>@zugdev</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>2</td><td>5.241</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2462944368\" target=\"_blank\" rel=\"noopener\">This is part of my scope, yes. I haven't yet started since I was&hellip;</a></h6></td><td><details><summary>3.8</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.2&#13;regex:&#13;  wordCount: 101&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>0.9</td><td>3</td><td>3.321</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2463277212\" target=\"_blank\" rel=\"noopener\">One feedback on this issue: I believe external contribution come&hellip;</a></h6></td><td><details><summary>2.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 60&#13;  wordValue: 0.1&#13;  result: 2.52&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.92</td></tr></tbody></table></details>"},"0x4007":{"total":5.238,"userId":4975670,"comments":[{"id":2482276370,"content":"@gentlementlegen this comment should be clobbered with the results, this is a regression. e2e testing could be useful to reduce regressions.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2482276370","commentType":"ISSUE_COLLABORATOR","score":{"reward":5.238,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":51.1489285714286,"syllables":36,"sentences":2,"score":0.911489285714286},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 5.238 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>5.238</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2482276370\" target=\"_blank\" rel=\"noopener\">@gentlementlegen this comment should be clobbered with the resul&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.9</td><td>3</td><td>5.238</td></tr></tbody></table></details>"},"gentlementlegen":{"total":52.521,"userId":9807008,"comments":[{"id":2482659319,"content":"@0x4007 Aware of this, happens because now the logs come from the SDK which has not the capability to update comments. Related issue: https://github.com/ubiquity-os/plugin-sdk/issues/28","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2482659319","commentType":"ISSUE_COLLABORATOR","score":{"reward":8.016,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":66.46458333333337,"syllables":49,"sentences":3,"score":0.9353541666666664},"multiplier":1,"relevance":0.8}},{"id":2423024041,"content":"Please fix the merge conflict and review my comment, then good to go.\r\nMy QA after the fix I suggested: https://github.com/Meniole/command-start-stop/issues/47#issuecomment-2464065707","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80#pullrequestreview-2423024041","commentType":"PULL_COLLABORATOR","score":{"reward":5.58,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":76.26924731182795,"syllables":44,"sentences":3,"score":0.8373075268817205},"multiplier":1,"relevance":0.6}},{"id":1833905575,"content":"By doing so, no message is posted only a log is present (and the log also is actually broken because when the error is a simple error the logger doesn't display it).\r\n```suggestion\r\n    throw logger.error(\"This task does not reflect a business priority at the moment and cannot be started. This will be reassessed in the coming weeks.\");\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80#discussion_r1833905575","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -16,7 +16,14 @@ export async function start(\n   teammates: string[]\n ): Promise<Result> {\n   const { logger, config } = context;\n-  const { taskStaleTimeoutDuration } = config;\n+  const { taskStaleTimeoutDuration, requiredLabelsToStart } = config;\n+\n+  const issueLabels = issue.labels.map((label) => label.name);\n+\n+  if (requiredLabelsToStart.length && !requiredLabelsToStart.some((label) => issueLabels.includes(label))) {\n+    // The \"Priority\" label must reflect a business priority, not a development one.\n+    throw new Error(\"This task does not reflect a business priority at the moment and cannot be started. This will be reassessed in the coming weeks.\");","score":{"reward":6.885,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":55.41272727272728,"syllables":46,"sentences":1,"score":0.9541272727272728},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2423018074,"effect":{"addition":726,"deletion":141},"reward":26.01,"priority":3},{"reviewId":2424038694,"effect":{"addition":167,"deletion":34},"reward":6.03,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 52.521 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>32.04</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>8.016</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>12.465</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80\" target=\"_blank\" rel=\"noopener\">#80</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+726 -141</td><td>3</td><td>26.01</td></tr><tr><td>+167 -34</td><td>3</td><td>6.03</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/79#issuecomment-2482659319\" target=\"_blank\" rel=\"noopener\">@0x4007 Aware of this, happens because now the logs come from th&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.8</td><td>3</td><td>8.016</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80#pullrequestreview-2423024041\" target=\"_blank\" rel=\"noopener\">Please fix the merge conflict and review my comment, then good t&hellip;</a></h6></td><td><details><summary>2.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.6</td><td>3</td><td>5.58</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/80#discussion_r1833905575\" target=\"_blank\" rel=\"noopener\">By doing so, no message is posted only a log is present (and the&hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.9</td><td>3</td><td>6.885</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_76.json","json":{"gentlementlegen":{"userId":9807008,"total":55.06,"task":{"reward":50,"multiplier":1},"comments":[{"id":2257459742,"content":"The old code was totally broken when it came to formatting as well and would cut the results instead. This is an issue regarding the metadata part I think.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/76#issuecomment-2257459742","commentType":"ISSUE_AUTHOR","score":{"reward":1.88,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":69.59336206896553,"syllables":42,"sentences":2,"score":0.9040663793103447},"multiplier":1,"relevance":0.8}},{"id":2435256408,"content":"There seem to be some formatting issue in the pull-request:\r\nhttps://github.com/ubiquibot/command-start-stop/issues/4#issuecomment-2255759848\r\nThe comment should not be displayed in this case.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/76","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.18,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":65.56701612903228,"syllables":46,"sentences":2,"score":0.9443298387096771},"multiplier":1,"relevance":1}}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 55.06 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.18</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.88</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/76\" target=\"_blank\" rel=\"noopener\">There seem to be some formatting issue in the pull-request:htt&hellip;</a></h6></td><td><details><summary>2.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>1</td><td>1</td><td>3.18</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/76#issuecomment-2257459742\" target=\"_blank\" rel=\"noopener\">The old code was totally broken when it came to formatting as we&hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.8</td><td>1</td><td>1.88</td></tr></tbody></table></details>"},"0x4007":{"total":3.695,"userId":4975670,"comments":[{"id":2257394336,"content":"Why not study the old code closer to see why we don't have these problems?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/76#issuecomment-2257394336","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.232,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":90.13250000000001,"syllables":19,"sentences":1,"score":0.6986749999999999},"multiplier":1,"relevance":0.8}},{"id":2290308793,"content":"You should retroactively link your pull to this issue. Then we have a formal record for audits, and you receive your credit. \nHowever as you know, we generally require targeted pulls (only the relevant changes per one issue) but we can make an exception here.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/76#issuecomment-2290308793","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.77,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":63.770000000000024,"syllables":68,"sentences":3,"score":0.9622999999999997},"multiplier":1,"relevance":0.6}},{"id":2303379736,"content":"@gentlementlegen Please link the correct pull","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/76#issuecomment-2303379736","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.693,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":45.64500000000001,"syllables":11,"sentences":1,"score":0.8564500000000002},"multiplier":1,"relevance":0.9}}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 3.695 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>3</td><td>3.695</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/76#issuecomment-2257394336\" target=\"_blank\" rel=\"noopener\">Why not study the old code closer to see why we don't have these&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.8</td><td>1</td><td>1.232</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/76#issuecomment-2290308793\" target=\"_blank\" rel=\"noopener\">You should retroactively link your pull to this issue. Then we h&hellip;</a></h6></td><td><details><summary>2.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0.6</td><td>1</td><td>1.77</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/76#issuecomment-2303379736\" target=\"_blank\" rel=\"noopener\">@gentlementlegen Please link the correct pull</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.693</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_129.json","json":{"gentlementlegen":{"userId":9807008,"total":25.68,"task":{"reward":25,"multiplier":1},"comments":[{"id":2092875843,"content":"Resolves #129\r\nQA: https://github.com/Meniole/conversation-rewards/issues/17","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/130","commentType":"PULL_SPECIFICATION","score":{"reward":0.68,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":47.434318181818185,"syllables":20,"sentences":2,"score":0.8743431818181818},"multiplier":1,"relevance":0.4}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 25.68 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.68</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/130\" target=\"_blank\" rel=\"noopener\">Resolves #129QA: https://github.com/Meniole/conversation-rewar&hellip;</a></h6></td><td><details><summary>1.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.68</td></tr></tbody></table></details>"},"0x4007":{"total":2.373,"userId":4975670,"comments":[{"id":2549142296,"content":"Lets remove this message https://github.com/ubiquity/ubiquity-dollar/issues/939#issuecomment-2375386037 as it causes an unnecessary notification.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/129","commentType":"ISSUE_SPECIFICATION","score":{"reward":2.24,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":19.025000000000006,"syllables":42,"sentences":2,"score":0.59025},"multiplier":1,"relevance":1}},{"id":2331599240,"content":"Seems fine","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/130#pullrequestreview-2331599240","commentType":"PULL_COLLABORATOR","score":{"reward":0.033,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":120.20500000000001,"syllables":2,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}}],"reviewRewards":[{"reviews":[{"reviewId":2331599240,"effect":{"addition":4,"deletion":6},"reward":0.1,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/130"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 2.373 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.1</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>2.24</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.033</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/130\" target=\"_blank\" rel=\"noopener\">#130</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+4 -6</td><td>1</td><td>0.1</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/129\" target=\"_blank\" rel=\"noopener\">Lets remove this message https://github.com/ubiquity/ubiquity-do&hellip;</a></h6></td><td><details><summary>1.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>1</td><td>1</td><td>2.24</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/130#pullrequestreview-2331599240\" target=\"_blank\" rel=\"noopener\">Seems fine</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.033</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_175.json","json":{"ishowvel":{"userId":186167176,"total":402.304,"task":{"reward":400,"multiplier":1},"comments":[{"id":2442236130,"content":"Which plugin handles the final permit generation which combines all the rewards?\nI was thinking we can just find the priority label using the payload and just multiply the combined rewards by it","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236130","commentType":"ISSUE_ASSIGNEE","score":{"reward":2.304,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":56.77840909090912,"syllables":52,"sentences":2,"score":0.9677840909090912},"multiplier":0.25,"relevance":0.9}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 402.304 XP ]</a>&nbsp;</h3><h6>@ishowvel</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>400</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.304</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236130\" target=\"_blank\" rel=\"noopener\">Which plugin handles the final permit generation which combines &hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.9</td><td>4</td><td>2.304</td></tr></tbody></table></details>"},"0x4007":{"total":56.312,"userId":4975670,"comments":[{"id":2442236071,"content":"RFC @gentlementlegen \nI have a feeling that with our current infrastructure it doesn't directly support this plugin to affect the reward amount of others, such as conversation rewards. \nWe need to support outputting rewards from all plugins and aggregating them before sending the sum total to permit generation. https://github.com/ubiquibot/permit-generation/issues/3\nI suppose this proposal implies that we will need to support multiplication as well.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236071","commentType":"ISSUE_AUTHOR","score":{"reward":15.84,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":63,"wordValue":0.1,"result":2.55},"readability":{"fleschKincaid":39.875088028169046,"syllables":125,"sentences":4,"score":0.7987508802816905},"multiplier":1,"relevance":0.9}},{"id":2442236095,"content":"I see what you mean but logically seems more straightforward if a plugin has the ability to affect all the others' pricing either with addition or multiplication. \nThen we don't have to change every plugin, we only need to change this one and the permit generation one to support macro change outputs from any plugin \nI suppose it's simpler to implement if we change every plugin though, just not as elegant.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236095","commentType":"ISSUE_AUTHOR","score":{"reward":10.982,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":73,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":38.831335616438395,"syllables":113,"sentences":2,"score":0.7883133561643839},"multiplier":1,"relevance":0.85}},{"id":2442236107,"content":"If you could write a spec, that would be helpful because I don't have enough context on the problem","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236107","commentType":"ISSUE_AUTHOR","score":{"reward":4.392,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":80.78500000000003,"syllables":25,"sentences":1,"score":0.7921499999999998},"multiplier":1,"relevance":0.6}},{"id":2442236116,"content":"@gentlementlegen can you write the spec?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236116","commentType":"ISSUE_AUTHOR","score":{"reward":1.58,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":59.745000000000005,"syllables":10,"sentences":1,"score":0.9974500000000001},"multiplier":1,"relevance":0.5}},{"id":2442236159,"content":"Right now it's `text-conversation-rewards` \nHopefully soon we can upgrade the system to make \"permit requests\" and every plugin will have a standardized way to send a request to the permit generation module/plugin/endpoint.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236159","commentType":"ISSUE_AUTHOR","score":{"reward":6.916,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":35.47205882352944,"syllables":55,"sentences":1,"score":0.7547205882352944},"multiplier":1,"relevance":0.7}},{"id":2442236170,"content":"@gentlementlegen rfc","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236170","commentType":"ISSUE_AUTHOR","score":{"reward":0.4,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":-48.994999999999976,"syllables":6,"sentences":1,"score":0},"multiplier":1,"relevance":0.4}},{"id":2442236182,"content":"I don't understand","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236182","commentType":"ISSUE_AUTHOR","score":{"reward":0.44,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.2}},{"id":2481164497,"content":"Then there's a problem with this pull and how it calculates rewards.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2481164497","commentType":"ISSUE_AUTHOR","score":{"reward":5.13,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":83.0092307692308,"syllables":17,"sentences":1,"score":0.7699076923076921},"multiplier":1,"relevance":0.95}},{"id":2619097860,"content":"We should boost all the rewards proportionally if it's an urgent task. This will incentivize all contributors (not just the assignee) to focus on that task because everybody gets higher rewards for work like reviews.\nThe higher the priority level the higher the rewards multiplier is for everybody. \n### example \nI should've received a reward closer to $150 in [this task](https://github.com/ubiquity/ts-template/issues/54#issuecomment-2336807302), because the priority level was 3.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175","commentType":"ISSUE_SPECIFICATION","score":{"reward":5.82,"formatting":{"content":{"p":{"score":0,"elementCount":2},"h3":{"score":1,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":2},"priority":1,"words":{"wordCount":68,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":50.2388235294118,"syllables":112,"sentences":4,"score":0.902388235294118},"multiplier":1,"relevance":1}},{"id":2453455424,"content":"Just copy the priority level names? Our config is public you can see all of them .ubiquity-os repo","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2453455424","commentType":"PULL_COLLABORATOR","score":{"reward":2.896,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":71.28035087719297,"syllables":29,"sentences":3,"score":0.8871964912280703},"multiplier":1,"relevance":0.4}},{"id":2453468194,"content":"There's five priority levels","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2453468194","commentType":"PULL_COLLABORATOR","score":{"reward":0.816,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":66.40000000000003,"syllables":8,"sentences":1,"score":0.9359999999999996},"multiplier":1,"relevance":0.3}},{"id":2454946140,"content":"I guess 3x multiplier?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2454946140","commentType":"PULL_COLLABORATOR","score":{"reward":1.1,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 56.312 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.82</td></tr><tr><td>Issue</td><td>Comment</td><td>8</td><td>45.68</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>4.812</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175\" target=\"_blank\" rel=\"noopener\">We should boost all the rewards proportionally if it's an urgent&hellip;</a></h6></td><td><details><summary>4.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    h3:&#13;      score: 1&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 2&#13;regex:&#13;  wordCount: 68&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>1</td><td>1</td><td>5.82</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236071\" target=\"_blank\" rel=\"noopener\">RFC @gentlementlegen I have a feeling that with our current inf&hellip;</a></h6></td><td><details><summary>3.55</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 63&#13;  wordValue: 0.1&#13;  result: 2.55&#13;</pre></details></td><td>0.9</td><td>4</td><td>15.84</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236095\" target=\"_blank\" rel=\"noopener\">I see what you mean but logically seems more straightforward if &hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 73&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.85</td><td>4</td><td>10.982</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236107\" target=\"_blank\" rel=\"noopener\">If you could write a spec, that would be helpful because I don't&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.6</td><td>4</td><td>4.392</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236116\" target=\"_blank\" rel=\"noopener\">@gentlementlegen can you write the spec?</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.5</td><td>4</td><td>1.58</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236159\" target=\"_blank\" rel=\"noopener\">Right now it's &#96;text-conversation-rewards&#96; Hopefully so&hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.7</td><td>4</td><td>6.916</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236170\" target=\"_blank\" rel=\"noopener\">@gentlementlegen rfc</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.4</td><td>4</td><td>0.4</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236182\" target=\"_blank\" rel=\"noopener\">I don't understand</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.2</td><td>4</td><td>0.44</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2481164497\" target=\"_blank\" rel=\"noopener\">Then there's a problem with this pull and how it calculates rewa&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.95</td><td>4</td><td>5.13</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2453455424\" target=\"_blank\" rel=\"noopener\">Just copy the priority level names? Our config is public you can&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.4</td><td>4</td><td>2.896</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2453468194\" target=\"_blank\" rel=\"noopener\">There's five priority levels</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.3</td><td>4</td><td>0.816</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2454946140\" target=\"_blank\" rel=\"noopener\">I guess 3x multiplier?</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.5</td><td>4</td><td>1.1</td></tr></tbody></table></details>"},"gentlementlegen":{"total":245.156,"userId":9807008,"comments":[{"id":2442236080,"content":"Assisitive pricing aims the handle pricing labels and allowing users to modify these labels. There is not calculation on the final reward here. I think this should be handled in conversation rewards.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236080","commentType":"ISSUE_COLLABORATOR","score":{"reward":7,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":53.245833333333366,"syllables":54,"sentences":3,"score":0.9324583333333336},"multiplier":1,"relevance":0.7}},{"id":2442236103,"content":"Yes I do agree that we should be able to chain these results. It's just that this plugin never had the capability to actually attribute rewards to a user, this was the responsibility of `conversation-rewards`. We could think of splitting this and have the logic here later on.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236103","commentType":"ISSUE_COLLABORATOR","score":{"reward":9.664,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":48,"wordValue":0.1,"result":2.35},"readability":{"fleschKincaid":65.4575,"syllables":71,"sentences":3,"score":0.9454250000000001},"multiplier":1,"relevance":0.8}},{"id":2442236122,"content":"@0x4007 Done, let me know if this is clear enough.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236122","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.936,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":103.625,"syllables":11,"sentences":1,"score":1},"multiplier":1,"relevance":0.2}},{"id":2442236176,"content":"We can do that, you can also cross-reference issues from another repo, either works.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236176","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.628,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":61.890000000000015,"syllables":23,"sentences":1,"score":0.9810999999999999},"multiplier":1,"relevance":0.1}},{"id":2442236187,"content":"I meant doing the pull-request in `text-conversation-rewards` and mark it as `Resolves https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236187","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.096,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":103.37909090909093,"syllables":12,"sentences":1,"score":1},"multiplier":1,"relevance":0.4}},{"id":2443344165,"content":"@ishowvel You can either use a free endpoint, use mocks, or hardcode the evaluation for your testing.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2443344165","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.688,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":60.19176470588238,"syllables":26,"sentences":1,"score":0.9980823529411762},"multiplier":1,"relevance":0.1}},{"id":2451192586,"content":"@ishowvel You can check the tests where the evaluation is mocked. To test I usually use a free endpoint. You can also start a local mock of OpenAi, you can find a few a GitHub.\r\nNot sure for the configuration, you can print the detailed errors to find out.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2451192586","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.184,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":49,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":76.99716836734696,"syllables":68,"sentences":4,"score":0.8300283163265304},"multiplier":1,"relevance":0.1}},{"id":2481070690,"content":"@ishowvel I had to delete this because the bot seems to wrongly account for comment rewards. Let me fix this and I will regenerate the results. @0x4007 rfc","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2481070690","commentType":"ISSUE_COLLABORATOR","score":{"reward":7.232,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":76.50452380952383,"syllables":40,"sentences":3,"score":0.8349547619047617},"multiplier":1,"relevance":0.8}},{"id":2481188594,"content":"@0x4007 I figured out the issue, but unsure how to fix it. Long story short, the defaults take over the configuration, and the default multiplier for contributor pull request is `1` which is why rewards are not calculated properly.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2481188594","commentType":"ISSUE_COLLABORATOR","score":{"reward":9.828,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":38,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":53.97105263157897,"syllables":60,"sentences":2,"score":0.9397105263157897},"multiplier":1,"relevance":0.9}},{"id":2481289886,"content":"@0x4007 If you can have a look at OpenAI API key, thank you.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2481289886","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.524,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":96.02461538461542,"syllables":15,"sentences":1,"score":0.6397538461538459},"multiplier":1,"relevance":0.1}},{"id":1826519235,"content":"Please use `octokit` types.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#discussion_r1826519235","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -20,3 +20,47 @@ export function getSortedPrices(labels: GitHubIssue[\"labels\"] | undefined) {\n   }\n   return sortedPriceLabels;\n }\n+\n+export function parsePriorityLabel(\n+  labels:","score":{"reward":1.472,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":119.19000000000003,"syllables":3,"sentences":1,"score":1},"multiplier":1,"relevance":0.8}},{"id":1839428857,"content":"Why cutting to 3 decimals?\r\nI did make a comment about the floating point but the issue was the precision being lost not the amount of digits after the comma.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#discussion_r1839428857","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -119,11 +120,14 @@ export class ContentEvaluatorModule extends BaseModule {\n         currentRelevance = relevancesByAi[currentComment.id];\n       }\n \n-      const currentReward = this._getRewardForComment(currentComment, currentRelevance);\n+      const currentReward = this._getRewardForComment(currentComment, currentRelevance)\n+        .mul(currentComment.score?.priority ?? 1)\n+        .toDecimalPlaces(3);","score":{"reward":8.604,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":70.35000000000002,"syllables":43,"sentences":2,"score":0.8964999999999997},"multiplier":1,"relevance":0.9}},{"id":1842185501,"content":"Yes that is why we use DecimalJs so `0.1 + 0.2` will yield `0.3`. If any rounding happing it should be solely for display or at the end of the computations.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#discussion_r1842185501","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -119,11 +120,14 @@ export class ContentEvaluatorModule extends BaseModule {\n         currentRelevance = relevancesByAi[currentComment.id];\n       }\n \n-      const currentReward = this._getRewardForComment(currentComment, currentRelevance);\n+      const currentReward = this._getRewardForComment(currentComment, currentRelevance)\n+        .mul(currentComment.score?.priority ?? 1)\n+        .toDecimalPlaces(3);","score":{"reward":7.992,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":77.19916666666668,"syllables":37,"sentences":2,"score":0.8280083333333331},"multiplier":1,"relevance":0.9}},{"id":2453422904,"content":"@ishowvel You should add `Jest` tests to your pull-request.\r\nHere is my latest QA:\r\n![image](https://github.com/user-attachments/assets/5fff37e0-5764-4e8e-8e2f-73a6d9cdf39a)\r\nThe decimals should not look like this. Also, I am confused about the total here. Can you walk me through the calculations?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2453422904","commentType":"PULL_COLLABORATOR","score":{"reward":8.67,"formatting":{"content":{"p":{"score":0,"elementCount":4}},"result":0},"priority":4,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":82.55000000000003,"syllables":49,"sentences":4,"score":0.7744999999999997},"multiplier":1,"relevance":0.85}},{"id":2453734477,"content":"@ishowvel try with priority 3 as it is the most likely to give very long decimals if not properly handled. My comment was about the `0.3000000004` number in my screenshot.\r\nComing back to my calculation question, here is the detail:\r\n![image](https://github.com/user-attachments/assets/86441067-78c1-4410-90ae-2dfe15da071b)\r\nI can't seem to understand how we get `11.264`.\r\n`2 + 1.88 * 0.8 = 3.504` which would be the result on priority 1, like seen in the screenshot here\r\n![image](https://github.com/user-attachments/assets/56e2ad11-5438-455e-a975-305945ade9c1)\r\nSo how does priority 3 make it `11.264`? Is that the expected result @0x4007 ?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2453734477","commentType":"PULL_COLLABORATOR","score":{"reward":12.578,"formatting":{"content":{"p":{"score":0,"elementCount":7}},"result":0},"priority":4,"words":{"wordCount":75,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":72.04200000000002,"syllables":106,"sentences":5,"score":0.8795799999999998},"multiplier":1,"relevance":0.95}},{"id":2454987123,"content":"@0x4007 Sure but `3.504 * 3 = 10.512` so I don't understand where this result comes from.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2454987123","commentType":"PULL_COLLABORATOR","score":{"reward":4.522,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":89.51692307692309,"syllables":16,"sentences":1,"score":0.704830769230769},"multiplier":1,"relevance":0.85}},{"id":2456137580,"content":"Because every module can be disabled individually, the type can technically be undefined (not within this module I agree) so this has to be done for TypeScript not to complain. I'll do a new QA as well.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2456137580","commentType":"PULL_COLLABORATOR","score":{"reward":7.644,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":38,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":53.97105263157897,"syllables":60,"sentences":2,"score":0.9397105263157897},"multiplier":1,"relevance":0.7}},{"id":2456151647,"content":"New QA is ok: https://github.com/Meniole/text-conversation-rewards/issues/27#issuecomment-2456148025\r\nBefore merging, I would need that you add a `Jest` test with this feature thank you. Also, the tests are already failing: https://github.com/ubiquity-os-marketplace/text-conversation-rewards/actions/runs/11668599466","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2456151647","commentType":"PULL_COLLABORATOR","score":{"reward":16.32,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2},"priority":4,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":58.942499999999995,"syllables":77,"sentences":4,"score":0.989425},"multiplier":1,"relevance":0.85}},{"id":2463644415,"content":"@ishowvel Sorry I have been extremely busy yes, I'll try to have a look today. In the meantime please fix the conflicts.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2463644415","commentType":"PULL_COLLABORATOR","score":{"reward":3.248,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":73.77989130434786,"syllables":33,"sentences":2,"score":0.8622010869565214},"multiplier":1,"relevance":0.4}},{"id":2466569223,"content":"@ishowvel tests don't pass because the import types don't match, I think `@octokit/rest` is imported when it should be `@octokit/core` within the tests.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2466569223","commentType":"PULL_COLLABORATOR","score":{"reward":6.834,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":76.82043478260871,"syllables":29,"sentences":1,"score":0.8317956521739128},"multiplier":1,"relevance":0.85}},{"id":2466978599,"content":"@ishowvel merge the development branch into this one.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2466978599","commentType":"PULL_COLLABORATOR","score":{"reward":2.328,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":50.66500000000002,"syllables":14,"sentences":1,"score":0.9066500000000002},"multiplier":1,"relevance":0.6}},{"id":2480461157,"content":"@ishowvel I tried to run the plugin with your pull-request and this is what I got\r\nhttps://github.com/Meniole/text-conversation-rewards/actions/runs/11868228402/job/33077194863#step:2:173\r\nDoes it work on your side?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2480461157","commentType":"PULL_COLLABORATOR","score":{"reward":11.772,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":76.2342105263158,"syllables":50,"sentences":2,"score":0.8376578947368419},"multiplier":1,"relevance":0.9}},{"id":2481026149,"content":"@ishowvel Okay let me try to fix the test and build then.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2481026149","commentType":"PULL_COLLABORATOR","score":{"reward":2.52,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":88.905,"syllables":15,"sentences":1,"score":0.71095},"multiplier":1,"relevance":0.5}},{"id":2481065409,"content":"Seems to be ok in my latest QA: https://github.com/Meniole/text-conversation-rewards/issues/28","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2481065409","commentType":"PULL_COLLABORATOR","score":{"reward":6.272,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":68.81926470588238,"syllables":26,"sentences":2,"score":0.9118073529411762},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2411209657,"effect":{"addition":56,"deletion":2},"reward":2.32,"priority":4},{"reviewId":2431874518,"effect":{"addition":1314,"deletion":1171},"reward":99.4,"priority":4},{"reviewId":2440899658,"effect":{"addition":11,"deletion":11},"reward":0.88,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 245.156 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>102.6</td></tr><tr><td>Issue</td><td>Comment</td><td>10</td><td>41.78</td></tr><tr><td>Review</td><td>Comment</td><td>14</td><td>100.776</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176\" target=\"_blank\" rel=\"noopener\">#176</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+56 -2</td><td>4</td><td>2.32</td></tr><tr><td>+1314 -1171</td><td>4</td><td>99.4</td></tr><tr><td>+11 -11</td><td>4</td><td>0.88</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236080\" target=\"_blank\" rel=\"noopener\">Assisitive pricing aims the handle pricing labels and allowing u&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.7</td><td>4</td><td>7</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236103\" target=\"_blank\" rel=\"noopener\">Yes I do agree that we should be able to chain these results. It&hellip;</a></h6></td><td><details><summary>2.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 48&#13;  wordValue: 0.1&#13;  result: 2.35&#13;</pre></details></td><td>0.8</td><td>4</td><td>9.664</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236122\" target=\"_blank\" rel=\"noopener\">@0x4007 Done, let me know if this is clear enough.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.2</td><td>4</td><td>0.936</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236176\" target=\"_blank\" rel=\"noopener\">We can do that, you can also cross-reference issues from another&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.628</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2442236187\" target=\"_blank\" rel=\"noopener\">I meant doing the pull-request in &#96;text-conversation-rewards&hellip;</a></h6></td><td><details><summary>1.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.4</td><td>4</td><td>4.096</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2443344165\" target=\"_blank\" rel=\"noopener\">@ishowvel You can either use a free endpoint, use mocks, or hard&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.688</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2451192586\" target=\"_blank\" rel=\"noopener\">@ishowvel You can check the tests where the evaluation is mocked&hellip;</a></h6></td><td><details><summary>2.37</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 49&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>0.1</td><td>4</td><td>1.184</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2481070690\" target=\"_blank\" rel=\"noopener\">@ishowvel I had to delete this because the bot seems to wrongly &hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.8</td><td>4</td><td>7.232</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2481188594\" target=\"_blank\" rel=\"noopener\">@0x4007 I figured out the issue, but unsure how to fix it. Long &hellip;</a></h6></td><td><details><summary>2.13</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 38&#13;  wordValue: 0.1&#13;  result: 2.13&#13;</pre></details></td><td>0.9</td><td>4</td><td>9.828</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2481289886\" target=\"_blank\" rel=\"noopener\">@0x4007 If you can have a look at OpenAI API key, thank you.</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.524</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#discussion_r1826519235\" target=\"_blank\" rel=\"noopener\">Please use &#96;octokit&#96; types.</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.8</td><td>4</td><td>1.472</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#discussion_r1839428857\" target=\"_blank\" rel=\"noopener\">Why cutting to 3 decimals?I did make a comment about the float&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.9</td><td>4</td><td>8.604</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#discussion_r1842185501\" target=\"_blank\" rel=\"noopener\">Yes that is why we use DecimalJs so &#96;0.1 + 0.2&#96; will yie&hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.9</td><td>4</td><td>7.992</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2453422904\" target=\"_blank\" rel=\"noopener\">@ishowvel You should add &#96;Jest&#96; tests to your pull-reque&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.85</td><td>4</td><td>8.67</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2453734477\" target=\"_blank\" rel=\"noopener\">@ishowvel try with priority 3 as it is the most likely to give v&hellip;</a></h6></td><td><details><summary>2.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 7&#13;  result: 0&#13;regex:&#13;  wordCount: 75&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.95</td><td>4</td><td>12.578</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2454987123\" target=\"_blank\" rel=\"noopener\">@0x4007 Sure but &#96;3.504 * 3 = 10.512&#96; so I don't underst&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.85</td><td>4</td><td>4.522</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2456137580\" target=\"_blank\" rel=\"noopener\">Because every module can be disabled individually, the type can &hellip;</a></h6></td><td><details><summary>2.13</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 38&#13;  wordValue: 0.1&#13;  result: 2.13&#13;</pre></details></td><td>0.7</td><td>4</td><td>7.644</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2456151647\" target=\"_blank\" rel=\"noopener\">New QA is ok: https://github.com/Meniole/text-conversation-rewar&hellip;</a></h6></td><td><details><summary>3.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.85</td><td>4</td><td>16.32</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2463644415\" target=\"_blank\" rel=\"noopener\">@ishowvel Sorry I have been extremely busy yes, I'll try to have&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.4</td><td>4</td><td>3.248</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2466569223\" target=\"_blank\" rel=\"noopener\">@ishowvel tests don't pass because the import types don't match,&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.85</td><td>4</td><td>6.834</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2466978599\" target=\"_blank\" rel=\"noopener\">@ishowvel merge the development branch into this one.</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.6</td><td>4</td><td>2.328</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2480461157\" target=\"_blank\" rel=\"noopener\">@ishowvel I tried to run the plugin with your pull-request and t&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.9</td><td>4</td><td>11.772</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2481026149\" target=\"_blank\" rel=\"noopener\">@ishowvel Okay let me try to fix the test and build then.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.5</td><td>4</td><td>2.52</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/176#issuecomment-2481065409\" target=\"_blank\" rel=\"noopener\">Seems to be ok in my latest QA: https://github.com/Meniole/text-&hellip;</a></h6></td><td><details><summary>1.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.7</td><td>4</td><td>6.272</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_45.json","json":{"EresDev":{"userId":11886219,"total":150,"task":{"reward":150,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 150 XP ]</a>&nbsp;</h3><h6>@EresDev</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>150</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":91.182,"userId":4975670,"comments":[{"id":2246840969,"content":"You can handle this project after #55 is complete.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/45#issuecomment-2246840969","commentType":"ISSUE_AUTHOR","score":{"reward":1.575,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":75.50000000000003,"syllables":13,"sentences":1,"score":0.8449999999999998},"multiplier":1,"relevance":0.5}},{"id":2272289365,"content":"Using the open ai playground helped me rapidly iterate and improve the results by easily being able to adjust the prompt and test, so I highly recommend using that for prompt development. \nThe first attempt I think I might have spent at least a couple hours on the prompting alone.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/45#issuecomment-2272289365","commentType":"ISSUE_AUTHOR","score":{"reward":6.447,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":50,"wordValue":0.1,"result":2.38},"readability":{"fleschKincaid":56.252000000000024,"syllables":74,"sentences":2,"score":0.9625200000000003},"multiplier":1,"relevance":0.7}},{"id":2369697791,"content":"I realize that pull request review comments should be `relevance: 1` always. They definitely don't make sense out of the context of its associated code sample. \r\nEventually it would be great to score pull request review comment relevance in a different manner, where we can feed the code sample to ChatGPT and provide it a new prompt, such as, \"is this a valuable pull request reviewer comment for the following code snippet?\"\r\nhttps://github.com/ubiquity/ts-template/issues/50#issuecomment-2186008265","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/45","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.68,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":71,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":59.83644444444445,"syllables":125,"sentences":5,"score":0.9983644444444445},"multiplier":1,"relevance":1}},{"id":2296427364,"content":"It seems fine although to be honest sometimes it's a bit difficult to tell what's going on from our results table, especially from mobile.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#pullrequestreview-2296427364","commentType":"PULL_COLLABORATOR","score":{"reward":2.676,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":53.54500000000003,"syllables":39,"sentences":1,"score":0.9354500000000003},"multiplier":1,"relevance":0.4}},{"id":1720519410,"content":"That doesn't seem right.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1720519410","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,12 +110,59 @@ export class ContentEvaluatorModule implements Module {\n     return commentsWithScore;\n   }\n \n+  _splitCommentsByPrompt(commentsWithScore: Readonly<GithubCommentScore>[]): {\n+    commentsToEvaluate: CommentToEvaluate[];\n+    reviewCommentsToEvaluate: ReviewCommentToEvaluate[];\n+  } {\n+    // exclude comments that have fixed relevance multiplier. e.g. review comments = 1\n+    const commentsToEvaluate: CommentToEvaluate[] = [];\n+    const reviewCommentsToEvaluate: ReviewCommentToEvaluate[] = [];\n+    for (let i = 0; i < commentsWithScore.length; i++) {\n+      const currentComment = commentsWithScore[i];\n+      if (!this._fixedRelevances[currentComment.type]) {\n+        if (currentComment.type & CommentKind.PULL) {\n+          if (currentComment?.diff_hunk) {","score":{"reward":1.242,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.6}},{"id":1720521058,"content":"I think include the specification because as a human reviewer sometimes (but not always) I review the spec when looking at some of the changes. Maybe this is 1 out of 10 times but if I'm confused on why certain changes are made then I review the spec. I think it's a good idea to give the LLM the additional context if it's needed if it is cheap to do so.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1720521058","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -159,4 +204,15 @@ export class ContentEvaluatorModule implements Module {\n       comments.length\n     }.`;\n   }\n+\n+  _generatePromptForReviewComments(issue: string, comments: ReviewCommentToEvaluate[]) {\n+    if (!issue?.length) {\n+      throw new Error(\"Issue specification comment is missing or empty\");\n+    }\n+    return `I need to evaluate the value of a GitHub contributor's code review. Specifically, I'm interested in how much each code review comment helps to solve the GitHub issue and improve code quality. Please provide a float between 0 and 1 to represent the value of the code review comment. A score of 1 indicates that the comment is very valuable and significantly improves the submitted solution and code quality, whereas a score of 0 indicates a  negative or zero impact. A stringified JSON is given below that contains the specification of the GitHub issue, and code review comments by different contributors. The property \"diff_hunk\" presents the chunk of code being addressed for a possible change. \\n\\n\\`\\`\\`\\n${JSON.stringify(\n+      { specification: issue, comments: comments }","score":{"reward":7.92,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":74,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":72.046981981982,"syllables":96,"sentences":3,"score":0.87953018018018},"multiplier":1,"relevance":0.8}},{"id":1720912190,"content":"I'm not sure what the right answer is but I feel like maybe one more prompt could be the solution. We just need to provide the spec, full diff, the full pull conversation, and then ask if it's a useful comment I think.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1720912190","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,12 +110,59 @@ export class ContentEvaluatorModule implements Module {\n     return commentsWithScore;\n   }\n \n+  _splitCommentsByPrompt(commentsWithScore: Readonly<GithubCommentScore>[]): {\n+    commentsToEvaluate: CommentToEvaluate[];\n+    reviewCommentsToEvaluate: ReviewCommentToEvaluate[];\n+  } {\n+    // exclude comments that have fixed relevance multiplier. e.g. review comments = 1\n+    const commentsToEvaluate: CommentToEvaluate[] = [];\n+    const reviewCommentsToEvaluate: ReviewCommentToEvaluate[] = [];\n+    for (let i = 0; i < commentsWithScore.length; i++) {\n+      const currentComment = commentsWithScore[i];\n+      if (!this._fixedRelevances[currentComment.type]) {\n+        if (currentComment.type & CommentKind.PULL) {\n+          if (currentComment?.diff_hunk) {","score":{"reward":5.964,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":80.5975,"syllables":55,"sentences":2,"score":0.794025},"multiplier":1,"relevance":0.7}},{"id":1726643456,"content":"As a human manager I feel that I would take all of this into context to determine how useful somebody's comment is, that's why I suggested these elements.  \nLet's send empty diffHunk then.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1726643456","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,12 +110,59 @@ export class ContentEvaluatorModule implements Module {\n     return commentsWithScore;\n   }\n \n+  _splitCommentsByPrompt(commentsWithScore: Readonly<GithubCommentScore>[]): {\n+    commentsToEvaluate: CommentToEvaluate[];\n+    reviewCommentsToEvaluate: ReviewCommentToEvaluate[];\n+  } {\n+    // exclude comments that have fixed relevance multiplier. e.g. review comments = 1\n+    const commentsToEvaluate: CommentToEvaluate[] = [];\n+    const reviewCommentsToEvaluate: ReviewCommentToEvaluate[] = [];\n+    for (let i = 0; i < commentsWithScore.length; i++) {\n+      const currentComment = commentsWithScore[i];\n+      if (!this._fixedRelevances[currentComment.type]) {\n+        if (currentComment.type & CommentKind.PULL) {\n+          if (currentComment?.diff_hunk) {","score":{"reward":4.824,"formatting":{"content":{"p":{"score":0,"elementCount":1},"br":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":61.665000000000006,"syllables":54,"sentences":2,"score":0.98335},"multiplier":1,"relevance":0.6}},{"id":1759962376,"content":"I think the rule is pascal case and technically it's pascal case.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1759962376","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -133,14 +126,60 @@ export class ContentEvaluatorModule implements Module {\n     }, {});\n   }\n \n+  _splitCommentsByPrompt(commentsWithScore: Readonly<GithubCommentScore>[]): {\n+    commentsToEvaluate: CommentToEvaluate[];\n+    PrCommentsToEvaluate: PrCommentToEvaluate[];","score":{"reward":2.1,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":69.99384615384618,"syllables":19,"sentences":1,"score":0.9000615384615382},"multiplier":1,"relevance":0.5}},{"id":2342405301,"content":"Honestly it's a bit difficult to understand results in detail especially from mobile but if you think that it looks as expected we can merge. \nI'm a bit confused why many are scored zero","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2342405301","commentType":"PULL_COLLABORATOR","score":{"reward":2.403,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":64.015,"syllables":53,"sentences":2,"score":0.95985},"multiplier":1,"relevance":0.3}},{"id":2342453056,"content":"Interesting point. If relevance evaluation was skipped due to the config, then - makes sense. If it evaluated to 0 then we should write 0. Let's do this.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2342453056","commentType":"PULL_COLLABORATOR","score":{"reward":4.683,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":81.89428571428574,"syllables":39,"sentences":4,"score":0.7810571428571426},"multiplier":1,"relevance":0.7}},{"id":2343235590,"content":"@gentlementlegen change the package version to `*` to waste less time on housekeeping","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2343235590","commentType":"PULL_COLLABORATOR","score":{"reward":3.144,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":46.60500000000002,"syllables":21,"sentences":1,"score":0.8660500000000002},"multiplier":1,"relevance":0.8}},{"id":2356067907,"content":"@EresDev Solve merge conflict and you can merge","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2356067907","commentType":"PULL_COLLABORATOR","score":{"reward":2.538,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":82.39000000000001,"syllables":11,"sentences":1,"score":0.7760999999999999},"multiplier":1,"relevance":0.9}},{"id":2366288094,"content":"Looks like there's a ton of changes. Perhaps you should ensure it works by posting QA","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2366288094","commentType":"PULL_COLLABORATOR","score":{"reward":3.276,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":98.67808823529413,"syllables":20,"sentences":2,"score":0.6132191176470587},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2243849882,"effect":{"addition":128,"deletion":67},"reward":5.85,"priority":3},{"reviewId":2253906547,"effect":{"addition":13,"deletion":10},"reward":0.69,"priority":3},{"reviewId":2296427364,"effect":{"addition":621,"deletion":418},"reward":31.17,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 91.182 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>37.71</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.68</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>8.022</td></tr><tr><td>Review</td><td>Comment</td><td>11</td><td>40.77</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79\" target=\"_blank\" rel=\"noopener\">#79</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+128 -67</td><td>3</td><td>5.85</td></tr><tr><td>+13 -10</td><td>3</td><td>0.69</td></tr><tr><td>+621 -418</td><td>3</td><td>31.17</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/45\" target=\"_blank\" rel=\"noopener\">I realize that pull request review comments should be &#96;relev&hellip;</a></h6></td><td><details><summary>3.6</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 71&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>1</td><td>1</td><td>4.68</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/45#issuecomment-2246840969\" target=\"_blank\" rel=\"noopener\">You can handle this project after #55 is complete.</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.575</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/45#issuecomment-2272289365\" target=\"_blank\" rel=\"noopener\">Using the open ai playground helped me rapidly iterate and impro&hellip;</a></h6></td><td><details><summary>2.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 50&#13;  wordValue: 0.1&#13;  result: 2.38&#13;</pre></details></td><td>0.7</td><td>3</td><td>6.447</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#pullrequestreview-2296427364\" target=\"_blank\" rel=\"noopener\">It seems fine although to be honest sometimes it's a bit difficu&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.4</td><td>3</td><td>2.676</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1720519410\" target=\"_blank\" rel=\"noopener\">That doesn't seem right.</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.242</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1720521058\" target=\"_blank\" rel=\"noopener\">I think include the specification because as a human reviewer so&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 74&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.8</td><td>3</td><td>7.92</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1720912190\" target=\"_blank\" rel=\"noopener\">I'm not sure what the right answer is but I feel like maybe one &hellip;</a></h6></td><td><details><summary>2.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0.7</td><td>3</td><td>5.964</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1726643456\" target=\"_blank\" rel=\"noopener\">As a human manager I feel that I would take all of this into con&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    br:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.6</td><td>3</td><td>4.824</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1759962376\" target=\"_blank\" rel=\"noopener\">I think the rule is pascal case and technically it's pascal case.</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.5</td><td>3</td><td>2.1</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2342405301\" target=\"_blank\" rel=\"noopener\">Honestly it's a bit difficult to understand results in detail es&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.3</td><td>3</td><td>2.403</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2342453056\" target=\"_blank\" rel=\"noopener\">Interesting point. If relevance evaluation was skipped due to th&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.683</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2343235590\" target=\"_blank\" rel=\"noopener\">@gentlementlegen change the package version to &#96;*&#96; to wa&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.144</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2356067907\" target=\"_blank\" rel=\"noopener\">@EresDev Solve merge conflict and you can merge</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.538</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2366288094\" target=\"_blank\" rel=\"noopener\">Looks like there's a ton of changes. Perhaps you should ensure i&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.276</td></tr></tbody></table></details>"},"gentlementlegen":{"total":78.81,"userId":9807008,"comments":[{"id":1717948889,"content":"Why are these removed?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1717948889","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -16,22 +16,6 @@ export const contentEvaluatorConfigurationType = Type.Object({\n           select: [\"ISSUE_SPECIFICATION\"],\n           relevance: 1,\n         },\n-        {","score":{"reward":1.092,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":97.025,"syllables":5,"sentences":1,"score":0.6297499999999999},"multiplier":1,"relevance":0.7}},{"id":1717952090,"content":"Is it GitHub wrapping or is it weirdly formatted?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1717952090","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -159,4 +204,15 @@ export class ContentEvaluatorModule implements Module {\n       comments.length\n     }.`;\n   }\n+\n+  _generatePromptForReviewComments(issue: string, comments: ReviewCommentToEvaluate[]) {\n+    if (!issue?.length) {\n+      throw new Error(\"Issue specification comment is missing or empty\");\n+    }\n+    return `I need to evaluate the value of a GitHub contributor's code review. Specifically, I'm interested in how much each code review comment helps to solve the GitHub issue and improve code quality. Please provide a float between 0 and 1 to represent the value of the code review comment. A score of 1 indicates that the comment is very valuable and significantly improves the submitted solution and code quality, whereas a score of 0 indicates a  negative or zero impact. A stringified JSON is given below that contains the specification of the GitHub issue, and code review comments by different contributors. The property \"diff_hunk\" presents the chunk of code being addressed for a possible change. \\n\\n\\`\\`\\`\\n${JSON.stringify(\n+      { specification: issue, comments: comments }\n+    )}\\n\\`\\`\\`\\n\\n\\nTo what degree are each of the code review comments valuable? Please reply with ONLY a JSON where each key is the comment ID given in JSON above, and the value is a float number between 0 and 1 corresponding to the comment. The float number should represent the value of the code review comment for improving the issue solution and code quality. The total number of properties in your JSON response should equal exactly ${\n+      comments.length","score":{"reward":0.945,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":75.50000000000003,"syllables":13,"sentences":1,"score":0.8449999999999998},"multiplier":1,"relevance":0.3}},{"id":1717956202,"content":"I am not sure if that makes sense. The idea was the pull-request comments are related to the code itself, and not to the specification which is why we put the relevance to `1` in the first place, because these comments are unrelated.\r\n@0x4007 maybe the comments for the pull-request should be checked against the code block they are commenting, or something related to code anyway? I also usually like to specify in the pull-request what are the changes implied which also could be used instead of the specification.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1717956202","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -159,4 +204,15 @@ export class ContentEvaluatorModule implements Module {\n       comments.length\n     }.`;\n   }\n+\n+  _generatePromptForReviewComments(issue: string, comments: ReviewCommentToEvaluate[]) {\n+    if (!issue?.length) {\n+      throw new Error(\"Issue specification comment is missing or empty\");\n+    }\n+    return `I need to evaluate the value of a GitHub contributor's code review. Specifically, I'm interested in how much each code review comment helps to solve the GitHub issue and improve code quality. Please provide a float between 0 and 1 to represent the value of the code review comment. A score of 1 indicates that the comment is very valuable and significantly improves the submitted solution and code quality, whereas a score of 0 indicates a  negative or zero impact. A stringified JSON is given below that contains the specification of the GitHub issue, and code review comments by different contributors. The property \"diff_hunk\" presents the chunk of code being addressed for a possible change. \\n\\n\\`\\`\\`\\n${JSON.stringify(\n+      { specification: issue, comments: comments }","score":{"reward":9.153,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":91,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":63.816277472527474,"syllables":129,"sentences":4,"score":0.9618372252747253},"multiplier":1,"relevance":0.9}},{"id":1717957651,"content":"Is it okay to change? I think the mocks return `/comment-incentives/issues/22` API responses.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1717957651","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -23,7 +23,7 @@ import configuration from \"../src/configuration/config-reader\";\n import validConfiguration from \"./__mocks__/results/valid-configuration.json\";\n import \"../src/parser/command-line\";\n \n-const issueUrl = process.env.TEST_ISSUE_URL || \"https://github.com/ubiquibot/comment-incentives/issues/22\";\n+const issueUrl = process.env.TEST_ISSUE_URL || \"https://github.com/ubiquibot/conversation-rewards/issues/5\";","score":{"reward":2.232,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":94.995,"syllables":15,"sentences":2,"score":0.6500499999999999},"multiplier":1,"relevance":0.6}},{"id":1718147155,"content":"If they are added back to the configuration via the file, will they override anything? If these options are not available at all anymore, it would be great to remove them from the codebase too, otherwise ignore my comment.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1718147155","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -16,22 +16,6 @@ export const contentEvaluatorConfigurationType = Type.Object({\n           select: [\"ISSUE_SPECIFICATION\"],\n           relevance: 1,\n         },\n-        {","score":{"reward":6.624,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":54.71942307692311,"syllables":61,"sentences":2,"score":0.947194230769231},"multiplier":1,"relevance":0.8}},{"id":1759918776,"content":"Shouldn't this be spotted by `eslint`?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1759918776","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -133,14 +126,60 @@ export class ContentEvaluatorModule implements Module {\n     }, {});\n   }\n \n+  _splitCommentsByPrompt(commentsWithScore: Readonly<GithubCommentScore>[]): {\n+    commentsToEvaluate: CommentToEvaluate[];\n+    PrCommentsToEvaluate: PrCommentToEvaluate[];","score":{"reward":1.185,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":116.14500000000001,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.5}},{"id":1760432842,"content":"If that was the case then the linter would detect `commentsToEvaluate` as wrong. Either it accepts both, either there is no rule for this.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1760432842","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -133,14 +126,60 @@ export class ContentEvaluatorModule implements Module {\n     }, {});\n   }\n \n+  _splitCommentsByPrompt(commentsWithScore: Readonly<GithubCommentScore>[]): {\n+    commentsToEvaluate: CommentToEvaluate[];\n+    PrCommentsToEvaluate: PrCommentToEvaluate[];","score":{"reward":3.528,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":88.49293478260873,"syllables":29,"sentences":2,"score":0.7150706521739127},"multiplier":1,"relevance":0.6}},{"id":2338230328,"content":"@EresDev Could you resolve conflicts so we can get this in please?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2338230328","commentType":"PULL_COLLABORATOR","score":{"reward":1.536,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":81.85500000000002,"syllables":16,"sentences":1,"score":0.7814499999999999},"multiplier":1,"relevance":0.4}},{"id":2342447196,"content":"I'd be in favor to replace the `-` for relevances by `0` because to me it feels like no relevance was evaluated at all. I will test this on some previously closed tasks.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2342447196","commentType":"PULL_COLLABORATOR","score":{"reward":5.88,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":74.27000000000001,"syllables":44,"sentences":2,"score":0.8573},"multiplier":1,"relevance":0.8}},{"id":2342483319,"content":"@EresDev I gave it a try [here](https://github.com/ubiquibot/conversation-rewards/actions/runs/10803715813/job/29968013705#step:7:467) and got a relevance of 1 for all pull-request commands. Perhaps the configuration should be changed as well?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2342483319","commentType":"PULL_COLLABORATOR","score":{"reward":8.28,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":73.24769230769233,"syllables":37,"sentences":2,"score":0.8675230769230766},"multiplier":1,"relevance":0.8}},{"id":2345246649,"content":"Not sure how this is relevant to the problem, I just probably didn't merge / use latest commit properly when updating in my org.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2345246649","commentType":"PULL_COLLABORATOR","score":{"reward":0.645,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":59.10000000000004,"syllables":35,"sentences":1,"score":0.9910000000000003},"multiplier":1,"relevance":0.1}}],"reviewRewards":[{"reviews":[{"reviewId":2239706805,"effect":{"addition":137,"deletion":65},"reward":6.06,"priority":3},{"reviewId":2303122348,"effect":{"addition":625,"deletion":430},"reward":31.65,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 78.81 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>37.71</td></tr><tr><td>Review</td><td>Comment</td><td>11</td><td>41.1</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79\" target=\"_blank\" rel=\"noopener\">#79</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+137 -65</td><td>3</td><td>6.06</td></tr><tr><td>+625 -430</td><td>3</td><td>31.65</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1717948889\" target=\"_blank\" rel=\"noopener\">Why are these removed?</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.092</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1717952090\" target=\"_blank\" rel=\"noopener\">Is it GitHub wrapping or is it weirdly formatted?</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.945</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1717956202\" target=\"_blank\" rel=\"noopener\">I am not sure if that makes sense. The idea was the pull-request&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 91&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.9</td><td>3</td><td>9.153</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1717957651\" target=\"_blank\" rel=\"noopener\">Is it okay to change? I think the mocks return &#96;/comment-inc&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.6</td><td>3</td><td>2.232</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1718147155\" target=\"_blank\" rel=\"noopener\">If they are added back to the configuration via the file, will t&hellip;</a></h6></td><td><details><summary>2.15</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.15&#13;</pre></details></td><td>0.8</td><td>3</td><td>6.624</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1759918776\" target=\"_blank\" rel=\"noopener\">Shouldn't this be spotted by &#96;eslint&#96;?</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.185</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1760432842\" target=\"_blank\" rel=\"noopener\">If that was the case then the linter would detect &#96;commentsT&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.6</td><td>3</td><td>3.528</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2338230328\" target=\"_blank\" rel=\"noopener\">@EresDev Could you resolve conflicts so we can get this in pleas&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.536</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2342447196\" target=\"_blank\" rel=\"noopener\">I'd be in favor to replace the &#96;-&#96; for relevances by &#9&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.8</td><td>3</td><td>5.88</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2342483319\" target=\"_blank\" rel=\"noopener\">@EresDev I gave it a try [here](https://github.com/ubiquibot/con&hellip;</a></h6></td><td><details><summary>2.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.8</td><td>3</td><td>8.28</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#issuecomment-2345246649\" target=\"_blank\" rel=\"noopener\">Not sure how this is relevant to the problem, I just probably di&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.645</td></tr></tbody></table></details>"},"whilefoo":{"total":50.148,"userId":139262667,"comments":[{"id":1718696825,"content":"```suggestion\r\n              codeDiff: reviewComment?.pull_request_review_id ? reviewComment?.diff_hunk : undefined,\r\n```\r\nI think this way is more elegant","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1718696825","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -37,6 +49,7 @@ export class DataPurgeModule implements Module {\n               content: newContent,\n               url: comment.html_url,\n               type: comment.type,\n+              ...reviewCommentProps,","score":{"reward":1.992,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":90.95857142857145,"syllables":9,"sentences":1,"score":0.6904142857142855},"multiplier":1,"relevance":0.8}},{"id":1718698190,"content":"```suggestion\r\n      const promptForReviewComments = this._generatePromptForReviewComments(specification, reviewComments);\r\n```\r\nI think you called the wrong function here","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1718698190","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,12 +110,59 @@ export class ContentEvaluatorModule implements Module {\n     return commentsWithScore;\n   }\n \n+  _splitCommentsByPrompt(commentsWithScore: Readonly<GithubCommentScore>[]): {\n+    commentsToEvaluate: CommentToEvaluate[];\n+    reviewCommentsToEvaluate: ReviewCommentToEvaluate[];\n+  } {\n+    // exclude comments that have fixed relevance multiplier. e.g. review comments = 1\n+    const commentsToEvaluate: CommentToEvaluate[] = [];\n+    const reviewCommentsToEvaluate: ReviewCommentToEvaluate[] = [];\n+    for (let i = 0; i < commentsWithScore.length; i++) {\n+      const currentComment = commentsWithScore[i];\n+      if (!this._fixedRelevances[currentComment.type]) {\n+        if (currentComment.type & CommentKind.PULL) {\n+          if (currentComment?.diff_hunk) {\n+            //Eval PR comment with diff_hunk, all other PR comments get relevance:1 by default\n+\n+            reviewCommentsToEvaluate.push({\n+              id: currentComment.id,\n+              comment: currentComment.content,\n+              diff_hunk: currentComment.diff_hunk,\n+            });\n+          }\n+        } else {\n+          commentsToEvaluate.push({\n+            id: currentComment.id,\n+            comment: currentComment.content,\n+          });\n+        }\n+      }\n+    }\n+    return { commentsToEvaluate, reviewCommentsToEvaluate };\n+  }\n+\n   async _evaluateComments(\n     specification: string,\n-    comments: { id: number; comment: string }[]\n-  ): Promise<RelevancesByOpenAi> {\n-    const prompt = this._generatePrompt(specification, comments);\n+    comments: CommentToEvaluate[],\n+    reviewComments: ReviewCommentToEvaluate[]\n+  ): Promise<Relevances> {\n+    let combinedRelevances: Relevances = {};\n+\n+    if (comments.length) {\n+      const promptForComments = this._generatePromptForComments(specification, comments);\n+      combinedRelevances = await this._submitPrompt(promptForComments);\n+    }\n+\n+    if (reviewComments.length) {\n+      const promptForReviewComments = this._generatePromptForComments(specification, reviewComments);","score":{"reward":2.673,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":103.54,"syllables":9,"sentences":1,"score":1},"multiplier":1,"relevance":0.9}},{"id":1718703083,"content":"I think it's more readable if you have two separate variables for relevances without combined relevance and return`{ ...commentRelevances, ...reviewCommentRelevances }`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1718703083","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,12 +110,59 @@ export class ContentEvaluatorModule implements Module {\n     return commentsWithScore;\n   }\n \n+  _splitCommentsByPrompt(commentsWithScore: Readonly<GithubCommentScore>[]): {\n+    commentsToEvaluate: CommentToEvaluate[];\n+    reviewCommentsToEvaluate: ReviewCommentToEvaluate[];\n+  } {\n+    // exclude comments that have fixed relevance multiplier. e.g. review comments = 1\n+    const commentsToEvaluate: CommentToEvaluate[] = [];\n+    const reviewCommentsToEvaluate: ReviewCommentToEvaluate[] = [];\n+    for (let i = 0; i < commentsWithScore.length; i++) {\n+      const currentComment = commentsWithScore[i];\n+      if (!this._fixedRelevances[currentComment.type]) {\n+        if (currentComment.type & CommentKind.PULL) {\n+          if (currentComment?.diff_hunk) {\n+            //Eval PR comment with diff_hunk, all other PR comments get relevance:1 by default\n+\n+            reviewCommentsToEvaluate.push({\n+              id: currentComment.id,\n+              comment: currentComment.content,\n+              diff_hunk: currentComment.diff_hunk,\n+            });\n+          }\n+        } else {\n+          commentsToEvaluate.push({\n+            id: currentComment.id,\n+            comment: currentComment.content,\n+          });\n+        }\n+      }\n+    }\n+    return { commentsToEvaluate, reviewCommentsToEvaluate };\n+  }\n+\n   async _evaluateComments(\n     specification: string,\n-    comments: { id: number; comment: string }[]\n-  ): Promise<RelevancesByOpenAi> {\n-    const prompt = this._generatePrompt(specification, comments);\n+    comments: CommentToEvaluate[],\n+    reviewComments: ReviewCommentToEvaluate[]\n+  ): Promise<Relevances> {\n+    let combinedRelevances: Relevances = {};\n+\n+    if (comments.length) {\n+      const promptForComments = this._generatePromptForComments(specification, comments);\n+      combinedRelevances = await this._submitPrompt(promptForComments);\n+    }\n+\n+    if (reviewComments.length) {\n+      const promptForReviewComments = this._generatePromptForComments(specification, reviewComments);\n+      const relevances = await this._submitPrompt(promptForReviewComments);\n+      combinedRelevances = { ...combinedRelevances, ...relevances };","score":{"reward":3.759,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":45.06578947368425,"syllables":32,"sentences":1,"score":0.8506578947368425},"multiplier":1,"relevance":0.7}},{"id":1718743428,"content":"what happens with comments without code?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1718743428","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,12 +110,59 @@ export class ContentEvaluatorModule implements Module {\n     return commentsWithScore;\n   }\n \n+  _splitCommentsByPrompt(commentsWithScore: Readonly<GithubCommentScore>[]): {\n+    commentsToEvaluate: CommentToEvaluate[];\n+    reviewCommentsToEvaluate: ReviewCommentToEvaluate[];\n+  } {\n+    // exclude comments that have fixed relevance multiplier. e.g. review comments = 1\n+    const commentsToEvaluate: CommentToEvaluate[] = [];\n+    const reviewCommentsToEvaluate: ReviewCommentToEvaluate[] = [];\n+    for (let i = 0; i < commentsWithScore.length; i++) {\n+      const currentComment = commentsWithScore[i];\n+      if (!this._fixedRelevances[currentComment.type]) {\n+        if (currentComment.type & CommentKind.PULL) {\n+          if (currentComment?.diff_hunk) {","score":{"reward":1.386,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":73.84500000000001,"syllables":9,"sentences":1,"score":0.8615499999999998},"multiplier":1,"relevance":0.6}},{"id":1720984666,"content":"okay then at least make it camelCase","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1720984666","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -37,6 +49,7 @@ export class DataPurgeModule implements Module {\n               content: newContent,\n               url: comment.html_url,\n               type: comment.type,\n+              ...reviewCommentProps,","score":{"reward":1.29,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":78.87285714285717,"syllables":10,"sentences":1,"score":0.8112714285714283},"multiplier":1,"relevance":0.5}},{"id":1759728859,"content":"```suggestion\r\n    prCommentsToEvaluate: PrCommentToEvaluate[];\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1759728859","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -133,14 +126,60 @@ export class ContentEvaluatorModule implements Module {\n     }, {});\n   }\n \n+  _splitCommentsByPrompt(commentsWithScore: Readonly<GithubCommentScore>[]): {\n+    commentsToEvaluate: CommentToEvaluate[];\n+    PrCommentsToEvaluate: PrCommentToEvaluate[];","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.7}},{"id":1760042550,"content":"then the rule should be changed to camelCase","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1760042550","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -133,14 +126,60 @@ export class ContentEvaluatorModule implements Module {\n     }, {});\n   }\n \n+  _splitCommentsByPrompt(commentsWithScore: Readonly<GithubCommentScore>[]): {\n+    commentsToEvaluate: CommentToEvaluate[];\n+    PrCommentsToEvaluate: PrCommentToEvaluate[];","score":{"reward":1.128,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":82.39000000000001,"syllables":11,"sentences":1,"score":0.7760999999999999},"multiplier":1,"relevance":0.4}}],"reviewRewards":[{"reviews":[{"reviewId":2240853723,"effect":{"addition":137,"deletion":65},"reward":6.06,"priority":3},{"reviewId":2304438016,"effect":{"addition":625,"deletion":430},"reward":31.65,"priority":3},{"reviewId":2309913261,"effect":{"addition":3,"deletion":4},"reward":0.21,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 50.148 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>37.92</td></tr><tr><td>Review</td><td>Comment</td><td>7</td><td>12.228</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79\" target=\"_blank\" rel=\"noopener\">#79</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+137 -65</td><td>3</td><td>6.06</td></tr><tr><td>+625 -430</td><td>3</td><td>31.65</td></tr><tr><td>+3 -4</td><td>3</td><td>0.21</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1718696825\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestioncodeDiff: reviewComment&hellip;</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.992</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1718698190\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionconst promptForReviewComments =&hellip;</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.673</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1718703083\" target=\"_blank\" rel=\"noopener\">I think it's more readable if you have two separate variables fo&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.759</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1718743428\" target=\"_blank\" rel=\"noopener\">what happens with comments without code?</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.386</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1720984666\" target=\"_blank\" rel=\"noopener\">okay then at least make it camelCase</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.29</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1759728859\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionprCommentsToEvaluate: PrCommentTo&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/79#discussion_r1760042550\" target=\"_blank\" rel=\"noopener\">then the rule should be changed to camelCase</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.128</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_136.json","json":{"whilefoo":{"userId":139262667,"total":400,"task":{"reward":400,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 400 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>400</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":41.022,"userId":4975670,"comments":[{"id":2637877489,"content":"@whilefoo please set a time label.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2637877489","commentType":"ISSUE_AUTHOR","score":{"reward":0.308,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":73.84500000000001,"syllables":9,"sentences":1,"score":0.8615499999999998},"multiplier":1,"relevance":0.1}},{"id":2637905010,"content":"Also this error shouldn't occur on UI assignment. Only with /start command.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2637905010","commentType":"ISSUE_AUTHOR","score":{"reward":5.04,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":70.08365384615385,"syllables":20,"sentences":2,"score":0.8991634615384615},"multiplier":1,"relevance":0.9}},{"id":2638878710,"content":"Not a bad estimate I would have put <4 hours. Maybe we can start experimenting with an LLM to set time labels for estimates. \n@shiv810  check it out","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2638878710","commentType":"ISSUE_AUTHOR","score":{"reward":0.884,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":85.56880952380955,"syllables":37,"sentences":3,"score":0.7443119047619046},"multiplier":1,"relevance":0.1}},{"id":2639472916,"content":"Then lets make that sourcemap requirement optional if you can't figure it out.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2639472916","commentType":"ISSUE_AUTHOR","score":{"reward":4.228,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":59.68214285714288,"syllables":22,"sentences":1,"score":0.9968214285714287},"multiplier":1,"relevance":0.7}},{"id":2639706439,"content":"Okay you can file the spec","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2639706439","commentType":"ISSUE_AUTHOR","score":{"reward":0.888,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":87.94500000000002,"syllables":8,"sentences":1,"score":0.7205499999999998},"multiplier":1,"relevance":0.3}},{"id":2640852968,"content":"Also we need this @whilefoo","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2640852968","commentType":"ISSUE_AUTHOR","score":{"reward":1.632,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":66.40000000000003,"syllables":8,"sentences":1,"score":0.9359999999999996},"multiplier":1,"relevance":0.6}},{"id":2833818255,"content":"I also don’t understand why the function name is parsed as “async” that’s not actually possible in JavaScript I would imagine.\n- Fix the function name to be correct (requires changes in SDK)\n- make stack trace with source map\n- fix aggregate error message to show something\n- make sure it posts where it's supposed to (not on a wrong thread) \n- remove \"no labels are set\" error below. Or more specifically only throw that (as a warning, not a caution - I.e. a \"4xx class, user/client error\") when the slash command is used. Assignments from the GitHub ui should serve as an override and not throw any errors. \n---\n```HTML \n```\n_Originally posted by @ubiquity-os-beta in https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2637498786_","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136","commentType":"ISSUE_SPECIFICATION","score":{"reward":5.19,"formatting":{"content":{"p":{"score":0,"elementCount":2},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":5},"hr":{"score":0,"elementCount":1},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1.5},"priority":1,"words":{"wordCount":116,"wordValue":0.1,"result":2.52},"readability":{"fleschKincaid":63.034062500000005,"syllables":193,"sentences":8,"score":0.969659375},"multiplier":1,"relevance":1}},{"id":2598560557,"content":"https://github.com/ubiquibot-whilefoo-testing/testing/issues/18#issuecomment-2639718263","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/137#pullrequestreview-2598560557","commentType":"PULL_COLLABORATOR","score":{"reward":1.428,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":24.36159090909092,"syllables":23,"sentences":2,"score":0.6436159090909093},"multiplier":1,"relevance":0.3}},{"id":2640051096,"content":"One more nitpick but would be great if you can line break between sentences and also if you can monospace the label values to emphasize them. https://github.com/ubiquibot-whilefoo-testing/testing/issues/18#issuecomment-2640049428","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/137#issuecomment-2640051096","commentType":"PULL_COLLABORATOR","score":{"reward":9.968,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":59.413963963963965,"syllables":59,"sentences":3,"score":0.9941396396396397},"multiplier":1,"relevance":0.7}},{"id":2640708067,"content":"Missed opportunity for a 3xx level message whatever we agreed the syntax was. I think the purple one. @gentlementlegen \nI forget which status code is processing request it's either 2xx or 3xx","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/137#issuecomment-2640708067","commentType":"PULL_COLLABORATOR","score":{"reward":4.096,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":57.23363636363638,"syllables":54,"sentences":3,"score":0.9723363636363638},"multiplier":1,"relevance":0.4}},{"id":2640713305,"content":"needs changes in sdk?\nskip\nfixed\nskip\nNot sure if it only runs on slash command but I couldn't see it reviewing the code changes. \n@Whilefoo rfc","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/137#issuecomment-2640713305","commentType":"PULL_COLLABORATOR","score":{"reward":4.32,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":94.63309523809527,"syllables":34,"sentences":3,"score":0.6536690476190473},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2598560557,"effect":{"addition":30,"deletion":44},"reward":2.96,"priority":4},{"reviewId":2598736797,"effect":{"addition":1,"deletion":1},"reward":0.08,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/137"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 41.022 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>3.04</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.19</td></tr><tr><td>Issue</td><td>Comment</td><td>6</td><td>12.98</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>19.812</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/137\" target=\"_blank\" rel=\"noopener\">#137</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+30 -44</td><td>4</td><td>2.96</td></tr><tr><td>+1 -1</td><td>4</td><td>0.08</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136\" target=\"_blank\" rel=\"noopener\">I also don’t understand why the function name is parsed as “asyn&hellip;</a></h6></td><td><details><summary>4.02</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 5&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.5&#13;regex:&#13;  wordCount: 116&#13;  wordValue: 0.1&#13;  result: 2.52&#13;</pre></details></td><td>1</td><td>1</td><td>5.19</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2637877489\" target=\"_blank\" rel=\"noopener\">@whilefoo please set a time label.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.308</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2637905010\" target=\"_blank\" rel=\"noopener\">Also this error shouldn't occur on UI assignment. Only with /sta&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.9</td><td>4</td><td>5.04</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2638878710\" target=\"_blank\" rel=\"noopener\">Not a bad estimate I would have put &lt;4 hours. Maybe we can st&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.884</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2639472916\" target=\"_blank\" rel=\"noopener\">Then lets make that sourcemap requirement optional if you can't &hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.7</td><td>4</td><td>4.228</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2639706439\" target=\"_blank\" rel=\"noopener\">Okay you can file the spec</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.3</td><td>4</td><td>0.888</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2640852968\" target=\"_blank\" rel=\"noopener\">Also we need this @whilefoo</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.6</td><td>4</td><td>1.632</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/137#pullrequestreview-2598560557\" target=\"_blank\" rel=\"noopener\">https://github.com/ubiquibot-whilefoo-testing/testing/issues/18#&hellip;</a></h6></td><td><details><summary>1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.3</td><td>4</td><td>1.428</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/137#issuecomment-2640051096\" target=\"_blank\" rel=\"noopener\">One more nitpick but would be great if you can line break betwee&hellip;</a></h6></td><td><details><summary>2.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.7</td><td>4</td><td>9.968</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/137#issuecomment-2640708067\" target=\"_blank\" rel=\"noopener\">Missed opportunity for a 3xx level message whatever we agreed th&hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.4</td><td>4</td><td>4.096</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/137#issuecomment-2640713305\" target=\"_blank\" rel=\"noopener\">needs changes in sdk?skipfixedskipNot sure if it only runs o&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.5</td><td>4</td><td>4.32</td></tr></tbody></table></details>"},"gentlementlegen":{"total":18.704,"userId":9807008,"comments":[{"id":2638266064,"content":"The user deleted their comments, you can see from the metadata the instigator. You can also check the linked logs which show where the user commented, and what happened during the run.\nAbout the no price label, I believe this was not intended.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2638266064","commentType":"ISSUE_COLLABORATOR","score":{"reward":7.952,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":72.2727131782946,"syllables":61,"sentences":3,"score":0.8772728682170541},"multiplier":1,"relevance":0.7}},{"id":2639062311,"content":"Part of this issue was actually contained within another issue: https://github.com/ubiquity-os-marketplace/command-start-stop/issues/138\nI guess if everything is done here I'll close the other one.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2639062311","commentType":"ISSUE_COLLABORATOR","score":{"reward":10.752,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":55.21529411764709,"syllables":54,"sentences":2,"score":0.9521529411764709},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/137"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 18.704 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>2</td><td>18.704</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2638266064\" target=\"_blank\" rel=\"noopener\">The user deleted their comments, you can see from the metadata t&hellip;</a></h6></td><td><details><summary>2.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 43&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>0.7</td><td>4</td><td>7.952</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/136#issuecomment-2639062311\" target=\"_blank\" rel=\"noopener\">Part of this issue was actually contained within another issue: &hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.8</td><td>4</td><td>10.752</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-disqualifier_41.json","json":{"gentlementlegen":{"userId":9807008,"total":65.271,"task":{"reward":50,"multiplier":1},"comments":[{"id":2452840280,"content":"@0x4007 It still seems to be an issue when working across different organizations even if the app is installed, see\r\nhttps://github.com/orgs/community/discussions/24549\r\nI checked permissions and they all seem fine, so I will instead implement a fallback when the bot fails to comment on the pull-request.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/41#issuecomment-2452840280","commentType":"ISSUE_AUTHOR","score":{"reward":8.46,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":55.17192307692311,"syllables":77,"sentences":2,"score":0.951719230769231},"multiplier":1,"relevance":1}},{"id":2626351913,"content":"Check this run: https://github.com/ubiquity-os-marketplace/daemon-disqualifier/actions/runs/11608864378/job/32324978054\r\nThe bot tried to send a reminder but failed. Yet, it is installed in bot orgs and successfully posts reminders: the issue seems that it is trying to post within another org than the one it was triggered into.\r\nI am not sure if that is a matter of permissions or if it is actually not possible to do for security reasons. It should be investigated and eventually fixed or find a fallback solution.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/41","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.69,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":77,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":61.665000000000006,"syllables":135,"sentences":5,"score":0.98335},"multiplier":1,"relevance":1}},{"id":2159003073,"content":"Resolves #41\r\nQA: https://github.com/Meniole/daemon-disqualifier/issues/4\r\nhttps://github.com/Meniole/daemon-disqualifier/actions/runs/11640084743/job/32417047872#step:4:164","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/42","commentType":"PULL_SPECIFICATION","score":{"reward":2.121,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":56.24866666666668,"syllables":42,"sentences":3,"score":0.9624866666666668},"multiplier":1,"relevance":0.7}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 65.271 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.69</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>8.46</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>2.121</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/41\" target=\"_blank\" rel=\"noopener\">Check this run: https://github.com/ubiquity-os-marketplace/daemo&hellip;</a></h6></td><td><details><summary>3.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 77&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>1</td><td>1</td><td>4.69</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/41#issuecomment-2452840280\" target=\"_blank\" rel=\"noopener\">@0x4007 It still seems to be an issue when working across differ&hellip;</a></h6></td><td><details><summary>3.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>1</td><td>2</td><td>8.46</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/42\" target=\"_blank\" rel=\"noopener\">Resolves #41QA: https://github.com/Meniole/daemon-disqualifier&hellip;</a></h6></td><td><details><summary>2.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.7</td><td>1</td><td>2.121</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_131.json","json":{"whilefoo":{"userId":139262667,"total":76.44,"task":{"reward":75,"multiplier":1},"comments":[{"id":2621022508,"content":"This is the same problem that occurred in review incentives where the plugin assumes the PR is in the same repo","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/131#issuecomment-2621022508","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.44,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":68.69142857142859,"syllables":29,"sentences":1,"score":0.9130857142857142},"multiplier":0.25,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 76.44 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.44</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/131#issuecomment-2621022508\" target=\"_blank\" rel=\"noopener\">This is the same problem that occurred in review incentives wher&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>1</td><td>3</td><td>1.44</td></tr></tbody></table></details>"},"gentlementlegen":{"total":61.076,"userId":9807008,"comments":[{"id":2816978590,"content":"_Originally posted by @0x4007 in [#46](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/46#issuecomment-2620290902)_\n## What happened\nThe user got assigned to an issue with a similar `number` but on the wrong repository.\n## What was expected\nThe user should get assigned to the linked issue.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/131","commentType":"ISSUE_SPECIFICATION","score":{"reward":6.54,"formatting":{"content":{"p":{"score":0,"elementCount":3},"em":{"score":0,"elementCount":1},"h2":{"score":1,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":3},"priority":1,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":60.963928571428596,"syllables":53,"sentences":2,"score":0.990360714285714},"multiplier":1,"relevance":1}},{"id":1936702110,"content":"Nitpicking, but I think the imports are not in alphabetical order (and that creates more merge conflicts).","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134#discussion_r1936702110","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,11 +1,13 @@\n import { Repository } from \"@octokit/graphql-schema\";\n-import { Context, isIssueCommentEvent, Label } from \"../types\";\n+import { Context, isIssueCommentEvent } from \"../types\";\n import { QUERY_CLOSING_ISSUE_REFERENCES } from \"../utils/get-closing-issue-references\";\n import { closePullRequest, closePullRequestForAnIssue, getOwnerRepoFromHtmlUrl } from \"../utils/issue\";\n import { HttpStatusCode, Result } from \"./result-types\";\n import { getDeadline } from \"./shared/generate-assignment-comment\";\n import { start } from \"./shared/start\";\n import { stop } from \"./shared/stop\";\n+import { customOctokit } from \"@ubiquity-os/plugin-sdk/octokit\";\n+import { createAppAuth } from \"@octokit/auth-app\";","score":{"reward":3.612,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":60.19176470588238,"syllables":26,"sentences":1,"score":0.9980823529411762},"multiplier":1,"relevance":0.7}},{"id":1936755949,"content":"My IDE does it automatically (Webstorm). VSCode also has an option for that as far as I remember. Advantage of alphabetical sorting is that on merge import are much less likely to cause merge conflicts because they are always arranged in the same order.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134#discussion_r1936755949","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,11 +1,13 @@\n import { Repository } from \"@octokit/graphql-schema\";\n-import { Context, isIssueCommentEvent, Label } from \"../types\";\n+import { Context, isIssueCommentEvent } from \"../types\";\n import { QUERY_CLOSING_ISSUE_REFERENCES } from \"../utils/get-closing-issue-references\";\n import { closePullRequest, closePullRequestForAnIssue, getOwnerRepoFromHtmlUrl } from \"../utils/issue\";\n import { HttpStatusCode, Result } from \"./result-types\";\n import { getDeadline } from \"./shared/generate-assignment-comment\";\n import { start } from \"./shared/start\";\n import { stop } from \"./shared/stop\";\n+import { customOctokit } from \"@ubiquity-os/plugin-sdk/octokit\";\n+import { createAppAuth } from \"@octokit/auth-app\";","score":{"reward":5.31,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":44,"wordValue":0.1,"result":2.27},"readability":{"fleschKincaid":59.280151515151545,"syllables":69,"sentences":3,"score":0.9928015151515155},"multiplier":1,"relevance":0.6}},{"id":2623256965,"content":"What about creating a new Octokit instance with the proper credentials for the other organization from this plugin? It is possible because we have the APP_ID and the APP_PRIVATE_KEY, and this technique has been used in other plugins to solve authentication issue. Maybe it would be worth having this function exposed from the SDK.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134#issuecomment-2623256965","commentType":"PULL_COLLABORATOR","score":{"reward":8.37,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":54,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":50.69833333333335,"syllables":88,"sentences":3,"score":0.9069833333333335},"multiplier":1,"relevance":0.9}},{"id":2629177340,"content":"Tested it, not sure if I did something wrong but the issues doesn't appear to be fixed:\r\n- created a pull-request: https://github.com/Meniole/command-start-stop/pull/63\r\n- linked to another organization: https://github.com/mentlegen-2/project/issues/10\r\n- got assigned to the wrong issue: https://github.com/Meniole/command-start-stop/issues/10\r\nThe version I used is a deployed worker created from your PR changes.\r\nEdit: it works fine, the deployed code was not taken from the proper branch. @whilefoo Could you please fix the worker deployment script and change the checkout step to:\r\n```yml\r\n      - uses: actions/checkout@v4\r\n        with:\r\n          ref: ${{ github.event.workflow_run.head_branch || github.ref }}\r\n```\r\nso the proper code source is pulled during build?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134#issuecomment-2629177340","commentType":"PULL_COLLABORATOR","score":{"reward":21.404,"formatting":{"content":{"p":{"score":0,"elementCount":7},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"a":{"score":1,"elementCount":3}},"result":3.3},"priority":3,"words":{"wordCount":83,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":71.19766819571868,"syllables":151,"sentences":6,"score":0.8880233180428132},"multiplier":1,"relevance":0.95}}],"reviewRewards":[{"reviews":[{"reviewId":2585700389,"effect":{"addition":210,"deletion":35},"reward":7.35,"priority":3},{"reviewId":2588879378,"effect":{"addition":250,"deletion":33},"reward":8.49,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 61.076 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>15.84</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>6.54</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>38.696</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134\" target=\"_blank\" rel=\"noopener\">#134</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+210 -35</td><td>3</td><td>7.35</td></tr><tr><td>+250 -33</td><td>3</td><td>8.49</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/131\" target=\"_blank\" rel=\"noopener\">_Originally posted by @0x4007 in [#46](https://github.com/ubiqui&hellip;</a></h6></td><td><details><summary>5.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    h2:&#13;      score: 1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 3&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>1</td><td>1</td><td>6.54</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134#discussion_r1936702110\" target=\"_blank\" rel=\"noopener\">Nitpicking, but I think the imports are not in alphabetical orde&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.612</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134#discussion_r1936755949\" target=\"_blank\" rel=\"noopener\">My IDE does it automatically (Webstorm). VSCode also has an opti&hellip;</a></h6></td><td><details><summary>2.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 44&#13;  wordValue: 0.1&#13;  result: 2.27&#13;</pre></details></td><td>0.6</td><td>3</td><td>5.31</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134#issuecomment-2623256965\" target=\"_blank\" rel=\"noopener\">What about creating a new Octokit instance with the proper crede&hellip;</a></h6></td><td><details><summary>2.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 54&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>0.9</td><td>3</td><td>8.37</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134#issuecomment-2629177340\" target=\"_blank\" rel=\"noopener\">Tested it, not sure if I did something wrong but the issues does&hellip;</a></h6></td><td><details><summary>5.93</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 7&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 3.3&#13;regex:&#13;  wordCount: 83&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.95</td><td>3</td><td>21.404</td></tr></tbody></table></details>"},"0x4007":{"total":10.593,"userId":4975670,"comments":[{"id":1936750439,"content":"I have some vscode plugin for this. I'm not on computer so I don't know off hand but one of the popular typescript ones I'm guessing like typescript hero. \nAnyways I'm sure you can find some plugin to do this automatically for you.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134#discussion_r1936750439","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,11 +1,13 @@\n import { Repository } from \"@octokit/graphql-schema\";\n-import { Context, isIssueCommentEvent, Label } from \"../types\";\n+import { Context, isIssueCommentEvent } from \"../types\";\n import { QUERY_CLOSING_ISSUE_REFERENCES } from \"../utils/get-closing-issue-references\";\n import { closePullRequest, closePullRequestForAnIssue, getOwnerRepoFromHtmlUrl } from \"../utils/issue\";\n import { HttpStatusCode, Result } from \"./result-types\";\n import { getDeadline } from \"./shared/generate-assignment-comment\";\n import { start } from \"./shared/start\";\n import { stop } from \"./shared/stop\";\n+import { customOctokit } from \"@ubiquity-os/plugin-sdk/octokit\";\n+import { createAppAuth } from \"@octokit/auth-app\";","score":{"reward":1.764,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":47,"wordValue":0.1,"result":2.33},"readability":{"fleschKincaid":72.13333333333334,"syllables":66,"sentences":3,"score":0.8786666666666666},"multiplier":1,"relevance":0.2}},{"id":2626422947,"content":"QA isn't 100% clear to me I left a comment on QA PR","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134#issuecomment-2626422947","commentType":"PULL_COLLABORATOR","score":{"reward":1.359,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":101.98214285714286,"syllables":15,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2585778559,"effect":{"addition":210,"deletion":35},"reward":7.35,"priority":3},{"reviewId":2586144554,"effect":{"addition":2,"deletion":2},"reward":0.12,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 10.593 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>7.47</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>3.123</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134\" target=\"_blank\" rel=\"noopener\">#134</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+210 -35</td><td>3</td><td>7.35</td></tr><tr><td>+2 -2</td><td>3</td><td>0.12</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134#discussion_r1936750439\" target=\"_blank\" rel=\"noopener\">I have some vscode plugin for this. I'm not on computer so I don&hellip;</a></h6></td><td><details><summary>2.33</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 47&#13;  wordValue: 0.1&#13;  result: 2.33&#13;</pre></details></td><td>0.2</td><td>3</td><td>1.764</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/134#issuecomment-2626422947\" target=\"_blank\" rel=\"noopener\">QA isn't 100% clear to me I left a comment on QA PR</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.359</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_275.json","json":{"whilefoo":{"userId":139262667,"total":200,"task":{"reward":200,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 200 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>200</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":0.892,"userId":4975670,"comments":[{"id":2661234681,"content":"I'm confused about the wallet situation. I understand it's scoped locally per org but that doesn't make sense. Should be global and set one time.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/275#issuecomment-2661234681","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.892,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":82.54738095238096,"syllables":38,"sentences":3,"score":0.7745261904761904},"multiplier":1,"relevance":0.1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/282"},{"url":"https://github.com/ubiquity/onboard.ubq.fi/pull/37"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.892 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.892</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/275#issuecomment-2661234681\" target=\"_blank\" rel=\"noopener\">I'm confused about the wallet situation. I understand it's scope&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.892</td></tr></tbody></table></details>"},"gentlementlegen":{"total":45.808,"userId":9807008,"comments":[{"id":2661435601,"content":"The first case you mentioned, this could be replicated by creating a repo with no commit on the main branch and opening a pull-request?\nI checked and there doesn't seem to be any force push or anything that would affect the commit history there, nor any squash.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/275#issuecomment-2661435601","commentType":"ISSUE_AUTHOR","score":{"reward":9.6,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":49,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":71.46954081632654,"syllables":64,"sentences":2,"score":0.8853045918367346},"multiplier":1,"relevance":0.8}},{"id":2673156131,"content":"@while I got rewards for 10k lines which doesn't make sense. Is this something fixed by this PR?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/275#issuecomment-2673156131","commentType":"ISSUE_AUTHOR","score":{"reward":2.052,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":94.78197368421053,"syllables":23,"sentences":2,"score":0.6521802631578947},"multiplier":1,"relevance":0.3}},{"id":2855271690,"content":"_Originally posted by @ubiquity-os in [#29](https://github.com/ubiquity/onboard.ubq.fi/issues/29#issuecomment-2659719300)_\n## What happened\nThe review incentivizer failed to fetch the diff in a cross-repository scenario.\n## What was expected\nThe proper repository and base should be used the create the diff.    \n## How to reproduce\n- create an issue in repo A\n- create a PR in repo B that will close the issue of repo A\n- close repo B pull-request\n- notice that the rewards won't be able to generate","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/275","commentType":"ISSUE_SPECIFICATION","score":{"reward":8.98,"formatting":{"content":{"p":{"score":0,"elementCount":3},"em":{"score":0,"elementCount":1},"h2":{"score":1,"elementCount":3},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":4},"a":{"score":1,"elementCount":1}},"result":4.4},"priority":1,"words":{"wordCount":75,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":52.86800000000002,"syllables":114,"sentences":3,"score":0.9286800000000003},"multiplier":1,"relevance":1}},{"id":2665952885,"content":"Ran with my OpenAI key, looks ok\r\n![image](https://github.com/user-attachments/assets/9fb9c9f0-a91f-4789-bfaf-e1a344e37105)\r\nAnd does not work on the current `development` branch which proves that the changes fixes it.\r\nWe might want to add files to linguist on the other repository like `yarn.lock` before re-running the `text-conversation-reward`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/282#issuecomment-2665952885","commentType":"PULL_COLLABORATOR","score":{"reward":8.608,"formatting":{"content":{"p":{"score":0,"elementCount":4}},"result":0},"priority":4,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":76.4117307692308,"syllables":51,"sentences":2,"score":0.835882692307692},"multiplier":1,"relevance":0.8}},{"id":2623750723,"content":"Looks fine although I don't see `static/dist/` file path with any content so I am not sure why you added it, is it where the build happens? It doesn't seem to be committed","url":"https://github.com/ubiquity/onboard.ubq.fi/pull/37#pullrequestreview-2623750723","commentType":"PULL_COLLABORATOR","score":{"reward":5.808,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":92.53882352941179,"syllables":39,"sentences":2,"score":0.6746117647058821},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2623864107,"effect":{"addition":63,"deletion":203},"reward":10.64,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/282"},{"reviews":[{"reviewId":2623750723,"effect":{"addition":3,"deletion":0},"reward":0.12,"priority":4}],"url":"https://github.com/ubiquity/onboard.ubq.fi/pull/37"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 45.808 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>10.76</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>8.98</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>11.652</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>14.416</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/282\" target=\"_blank\" rel=\"noopener\">#282</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+63 -203</td><td>4</td><td>10.64</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity/onboard.ubq.fi/pull/37\" target=\"_blank\" rel=\"noopener\">#37</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+3 -0</td><td>4</td><td>0.12</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/275\" target=\"_blank\" rel=\"noopener\">_Originally posted by @ubiquity-os in [#29](https://github.com/u&hellip;</a></h6></td><td><details><summary>7.02</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    h2:&#13;      score: 1&#13;      elementCount: 3&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 4.4&#13;regex:&#13;  wordCount: 75&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>1</td><td>1</td><td>8.98</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/275#issuecomment-2661435601\" target=\"_blank\" rel=\"noopener\">The first case you mentioned, this could be replicated by creati&hellip;</a></h6></td><td><details><summary>2.37</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 49&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>0.8</td><td>4</td><td>9.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/275#issuecomment-2673156131\" target=\"_blank\" rel=\"noopener\">@while I got rewards for 10k lines which doesn't make sense. Is &hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.3</td><td>4</td><td>2.052</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/282#issuecomment-2665952885\" target=\"_blank\" rel=\"noopener\">Ran with my OpenAI key, looks ok![image](https://github.com/us&hellip;</a></h6></td><td><details><summary>2.15</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;  result: 0&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.15&#13;</pre></details></td><td>0.8</td><td>4</td><td>8.608</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/onboard.ubq.fi/pull/37#pullrequestreview-2623750723\" target=\"_blank\" rel=\"noopener\">Looks fine although I don't see &#96;static/dist/&#96; file path&hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.6</td><td>4</td><td>5.808</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_148.json","json":{"whilefoo":{"userId":139262667,"total":100,"task":{"reward":100,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 100 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":36.186,"userId":4975670,"comments":[{"id":2399050293,"content":"@whilefoo this could be a good one for you.\r\n@sshivaditya I wouldn't have expected such a high match. Can you tweak the algorithm? What is your theory for why such a high match? I figured this stack trace is sufficient detail enough for it to be quite different than #143","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/148#issuecomment-2399050293","commentType":"ISSUE_AUTHOR","score":{"reward":8.232,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":85.34082352941178,"syllables":67,"sentences":5,"score":0.7465917647058822},"multiplier":1,"relevance":0.7}},{"id":2403146766,"content":"Sadly this is difficult to do because it is in a different org.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/148#issuecomment-2403146766","commentType":"ISSUE_AUTHOR","score":{"reward":2.24,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":69.99384615384618,"syllables":19,"sentences":1,"score":0.9000615384615382},"multiplier":1,"relevance":0.4}},{"id":2572318451,"content":"_Originally posted by @0x4007 in https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/32#issuecomment-2399043677_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/148","commentType":"ISSUE_SPECIFICATION","score":{"reward":1.87,"formatting":{"content":{"p":{"score":0,"elementCount":1},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":33.98397058823531,"syllables":33,"sentences":2,"score":0.739839705882353},"multiplier":1,"relevance":1}},{"id":2403483931,"content":"Is there a way to QA and prove it works","url":"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2403483931","commentType":"PULL_COLLABORATOR","score":{"reward":3.276,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":112.08500000000001,"syllables":10,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":2404527639,"content":"Seems like the wrong approach to do anything special for endpoints because all endpoints are transient. The core logic should handle these problems on the fly.","url":"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2404527639","commentType":"PULL_COLLABORATOR","score":{"reward":7.008,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":73.24769230769233,"syllables":37,"sentences":2,"score":0.8675230769230766},"multiplier":1,"relevance":0.8}},{"id":2404529047,"content":"Decided to merge because 5 retries seems like it is 5x more likely to work","url":"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2404529047","commentType":"PULL_COLLABORATOR","score":{"reward":2.4,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":78.81000000000003,"syllables":20,"sentences":1,"score":0.8118999999999997},"multiplier":1,"relevance":0.4}},{"id":2404999712,"content":"We are not using the latest ethers because LLMs don't have it yet, and v6 APIs are so different.\r\nIt doesn't make any sense to me that every RPC provider decided to change their APIs suddenly, so I don't think our client software (ethers) is a relevant problem.","url":"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2404999712","commentType":"PULL_COLLABORATOR","score":{"reward":11.16,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":63.17602941176473,"syllables":71,"sentences":2,"score":0.9682397058823526},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os/permit-generation/pull/82"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 36.186 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Specification</td><td>1</td><td>1.87</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>10.472</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>23.844</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/148\" target=\"_blank\" rel=\"noopener\">_Originally posted by @0x4007 in https://github.com/ubiquity-os-&hellip;</a></h6></td><td><details><summary>1.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>1</td><td>1</td><td>1.87</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/148#issuecomment-2399050293\" target=\"_blank\" rel=\"noopener\">@whilefoo this could be a good one for you.@sshivaditya I woul&hellip;</a></h6></td><td><details><summary>2.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 51&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>0.7</td><td>4</td><td>8.232</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/148#issuecomment-2403146766\" target=\"_blank\" rel=\"noopener\">Sadly this is difficult to do because it is in a different org.</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.4</td><td>4</td><td>2.24</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2403483931\" target=\"_blank\" rel=\"noopener\">Is there a way to QA and prove it works</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.7</td><td>4</td><td>3.276</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2404527639\" target=\"_blank\" rel=\"noopener\">Seems like the wrong approach to do anything special for endpoin&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.8</td><td>4</td><td>7.008</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2404529047\" target=\"_blank\" rel=\"noopener\">Decided to merge because 5 retries seems like it is 5x more like&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.4</td><td>4</td><td>2.4</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2404999712\" target=\"_blank\" rel=\"noopener\">We are not using the latest ethers because LLMs don't have it ye&hellip;</a></h6></td><td><details><summary>2.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 51&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>0.9</td><td>4</td><td>11.16</td></tr></tbody></table></details>"},"gentlementlegen":{"total":68.928,"userId":9807008,"comments":[{"id":2404354214,"content":"Maybe we could have a hardcoded test with the `gnosis` endpoint that is often failing so we are sure it doesn't happen again.","url":"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2404354214","commentType":"PULL_COLLABORATOR","score":{"reward":4.824,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":76.82043478260871,"syllables":29,"sentences":1,"score":0.8317956521739128},"multiplier":1,"relevance":0.6}},{"id":2404582606,"content":"After the fix, it seems the error is still there and now it introduced many other crashes:\r\n- https://github.com/ubiquity-os-marketplace/text-conversation-rewards/actions/runs/11271244840/job/31343679214?pr=144#step:4:445\r\n- https://github.com/ubiquity-os-marketplace/text-conversation-rewards/actions/runs/11271244840/job/31343679214?pr=144#step:4:1536\r\n@whilefoo Am I misusing it?","url":"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2404582606","commentType":"PULL_COLLABORATOR","score":{"reward":11.392,"formatting":{"content":{"p":{"score":0,"elementCount":4},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1.2},"priority":4,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":64.935,"syllables":92,"sentences":5,"score":0.95065},"multiplier":1,"relevance":0.8}},{"id":2404687959,"content":"@whilefoo Yes I supposedly deployed and I am using the [latest version](https://www.npmjs.com/package/@ubiquity-os/permit-generation). I added some debug logs and I had the following details:\r\n```\r\n    Error: Failed to get token decimals for token: 0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d, Error: missing revert data in call exception; Transaction reverted without a reason string [ See: https://links.ethers.org/v5-errors-CALL_EXCEPTION ] (data=\"0x\", transaction={\"to\":\"0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d\",\"data\":\"0x313ce567\",\"accessList\":null}, error={\"reason\":\"bad response\",\"code\":\"SERVER_ERROR\",\"status\":400,\"headers\":{\"date\":\"Thu, 10 Oct 2024 10:15:07 GMT\",\"content-type\":\"application/json\",\"transfer-encoding\":\"chunked\",\"connection\":\"close\",\"access-control-allow-origin\":\"*\",\"vary\":\"Accept-Encoding\",\"x-drpc-owner-tier\":\"free\",\"x-drpc-trace-id\":\"bcdca784fd99e7ec0138ef5a91ffb9dd\",\"strict-transport-security\":\"max-age=15724800; includeSubDomains\",\"access-control-allow-credentials\":\"true\",\"access-control-allow-methods\":\"GET, PUT, POST, DELETE, PATCH, OPTIONS\",\"access-control-allow-headers\":\"DNT,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization\",\"access-control-max-age\":\"1728000\",\"cf-cache-status\":\"DYNAMIC\",\"server\":\"cloudflare\",\"cf-ray\":\"8d05d8f048398b5c-ICN\"},\"body\":\"{\\\"id\\\":43,\\\"jsonrpc\\\":\\\"2.0\\\",\\\"error\\\":{\\\"message\\\":\\\"Can't route your request to suitable provider, if you specified certain providers revise the list\\\",\\\"code\\\":12}}\",\"requestBody\":\"{\\\"method\\\":\\\"eth_call\\\",\\\"params\\\":[{\\\"to\\\":\\\"0xe91d153e0b41518a2ce8dd3d7944fa863463a97d\\\",\\\"data\\\":\\\"0x313ce567\\\"},\\\"latest\\\"],\\\"id\\\":43,\\\"jsonrpc\\\":\\\"2.0\\\"}\",\"requestMethod\":\"POST\",\"url\":\"https://gnosis.drpc.org\"}, code=CALL_EXCEPTION, version=providers/5.7.2)\r\n```\r\nalso\r\n```\r\n    Error: Failed to get token decimals for token: 0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d, Error: could not detect network (event=\"noNetwork\", code=NETWORK_ERROR, version=providers/5.7.2)\r\n```\r\nEven with 5 retries, I had 3 errors\r\n```\r\nFailed to reach endpoint https://xdai-archive.blockscout.com. Request failed with status code 404\r\nFailed to reach endpoint https://web3endpoints.com/gnosischain-mainnet. timeout\r\n```\r\nand succeeded sometimes on 5th try, with networks like https://gnosis.blockpi.network/v1/rpc/public that successfully handled the request. It seems very unreliable somehow. Throwing this here but would `v6` improve this?\r\nEdit: this problem also seems to affect `pay.ubq.fi` where I only get errors:\r\n![image](https://github.com/user-attachments/assets/f1ac41f8-8edc-40a3-bbcb-328cf2892665)","url":"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2404687959","commentType":"PULL_COLLABORATOR","score":{"reward":21.348,"formatting":{"content":{"p":{"score":0,"elementCount":6},"a":{"score":1,"elementCount":2}},"result":2},"priority":4,"words":{"wordCount":70,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":63.82584415584418,"syllables":120,"sentences":7,"score":0.9617415584415582},"multiplier":1,"relevance":0.9}},{"id":2404923172,"content":"Maybe we should have some whitelist / blacklist for RPCs but all of a sudden it seems much more frequent, which is why I wondered if any changes was made either to our packages or to the endpoints themselves. The version we are using is already 2 years old and not maintained which is why I suggested that could have been a reason.\r\nhttps://github.com/ethers-io/ethers.js/releases/tag/v5.7.2","url":"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2404923172","commentType":"PULL_COLLABORATOR","score":{"reward":12.068,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":62,"wordValue":0.1,"result":2.54},"readability":{"fleschKincaid":87.49689189189192,"syllables":95,"sentences":7,"score":0.7250310810810808},"multiplier":1,"relevance":0.7}},{"id":2405015701,"content":"Most of the failures seem to be on invalid answers from the RPC that cannot be understood by `ether` which then throws, hence my guess. I understand the LLM problem but if less and less RPCs can be used it's gonna be a problem sooner or later.","url":"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2405015701","commentType":"PULL_COLLABORATOR","score":{"reward":7.056,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":47,"wordValue":0.1,"result":2.33},"readability":{"fleschKincaid":73.18250000000002,"syllables":61,"sentences":2,"score":0.8681749999999998},"multiplier":1,"relevance":0.6}},{"id":2406274765,"content":"@whilefoo After investigating a lot I noticed that it actually fails in the tests due to the presence of `mswjs` intercepting network calls. It was never an issue before so I don't know what changed. But basically whenever I start the server listener the `rpc-handler` seems incapable to reach properly most endpoints.","url":"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2406274765","commentType":"PULL_COLLABORATOR","score":{"reward":12.24,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":51.897647058823566,"syllables":83,"sentences":3,"score":0.9189764705882356},"multiplier":1,"relevance":1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os/permit-generation/pull/82"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 68.928 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>6</td><td>68.928</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2404354214\" target=\"_blank\" rel=\"noopener\">Maybe we could have a hardcoded test with the &#96;gnosis&#96; e&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.6</td><td>4</td><td>4.824</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2404582606\" target=\"_blank\" rel=\"noopener\">After the fix, it seems the error is still there and now it intr&hellip;</a></h6></td><td><details><summary>2.77</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.2&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.8</td><td>4</td><td>11.392</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2404687959\" target=\"_blank\" rel=\"noopener\">@whilefoo Yes I supposedly deployed and I am using the [latest v&hellip;</a></h6></td><td><details><summary>4.6</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 70&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>0.9</td><td>4</td><td>21.348</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2404923172\" target=\"_blank\" rel=\"noopener\">Maybe we should have some whitelist / blacklist for RPCs but all&hellip;</a></h6></td><td><details><summary>3.54</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 62&#13;  wordValue: 0.1&#13;  result: 2.54&#13;</pre></details></td><td>0.7</td><td>4</td><td>12.068</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2405015701\" target=\"_blank\" rel=\"noopener\">Most of the failures seem to be on invalid answers from the RPC &hellip;</a></h6></td><td><details><summary>2.33</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 47&#13;  wordValue: 0.1&#13;  result: 2.33&#13;</pre></details></td><td>0.6</td><td>4</td><td>7.056</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os/permit-generation/pull/82#issuecomment-2406274765\" target=\"_blank\" rel=\"noopener\">@whilefoo After investigating a lot I noticed that it actually f&hellip;</a></h6></td><td><details><summary>2.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 51&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>1</td><td>4</td><td>12.24</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_70.json","json":{"gentlementlegen":{"userId":9807008,"total":104.45,"task":{"reward":100,"multiplier":1},"comments":[{"id":2617421522,"content":"It is still weird to me that the user privacy affects a search because the profile is public. Can we consider using GQL with issues search instead of the search API? Something like\r\n```gql\r\nquery($organization: String!, $author: String!) {\r\n  organization(login: $organization) {\r\n    repositories(first: 100) {\r\n      nodes {\r\n        issues(first: 100, states: OPEN, filterBy: {createdBy: $author}) {\r\n          nodes {\r\n            title\r\n            url\r\n            createdAt\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\nwith\r\n```json\r\n{\r\n  \"organization\": \"ubiquity\",\r\n  \"author\": \"sshivaditya2019\"\r\n}\r\n```\r\nwould achieve the same result. I don't know if that would resolve the issue but it's worth a try.\r\n_Originally posted by @gentlementlegen in https://github.com/ubiquity/work.ubq.fi/issues/119#issuecomment-2440640493_","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/70","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.45,"formatting":{"content":{"p":{"score":0,"elementCount":4},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":60,"wordValue":0.1,"result":2.52},"readability":{"fleschKincaid":71.52264964788733,"syllables":106,"sentences":8,"score":0.8847735035211266},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 104.45 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.45</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/70\" target=\"_blank\" rel=\"noopener\">It is still weird to me that the user privacy affects a search b&hellip;</a></h6></td><td><details><summary>3.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 60&#13;  wordValue: 0.1&#13;  result: 2.52&#13;</pre></details></td><td>1</td><td>1</td><td>4.45</td></tr></tbody></table></details>"},"0x4007":{"total":9.56,"userId":4975670,"comments":[{"id":2441683190,"content":"Somebody should test and see if this works before we fund it.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/70#issuecomment-2441683190","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.304,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":81.85500000000002,"syllables":16,"sentences":1,"score":0.7814499999999999},"multiplier":1,"relevance":0.9}},{"id":2444126805,"content":"Seamless fallback seems like a reasonable solution.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/70#issuecomment-2444126805","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.176,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":30.53000000000003,"syllables":14,"sentences":1,"score":0.7053000000000003},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2403324751,"effect":{"addition":287,"deletion":17},"reward":6.08,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/71"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 9.56 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>6.08</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>3.48</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/71\" target=\"_blank\" rel=\"noopener\">#71</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+287 -17</td><td>2</td><td>6.08</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/70#issuecomment-2441683190\" target=\"_blank\" rel=\"noopener\">Somebody should test and see if this works before we fund it.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.9</td><td>2</td><td>2.304</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/70#issuecomment-2444126805\" target=\"_blank\" rel=\"noopener\">Seamless fallback seems like a reasonable solution.</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.176</td></tr></tbody></table></details>"},"Keyrxng":{"total":0.424,"userId":106303466,"comments":[{"id":2445725004,"content":"I recently added logic to comment any [`status !== 200`](https://github.com/ubiquity-os-marketplace/ubiquity-os-kernel-telegram/blob/103bd38bc676e76d540f566cbe37503cfac79d79/src/handlers/workflow-proxy.ts#L33) for workflows during debugging it's handy but needs tweaked for sure. \r\nFor `close` we should do nothing. For `reopen`, should we create one or do nothing or detect a merged PR and only open if there isn't one?\r\nSome little behaviours need refined and tweaked","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/70#issuecomment-2445725004","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.424,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":52,"wordValue":0.1,"result":2.41},"readability":{"fleschKincaid":78.12846153846156,"syllables":71,"sentences":4,"score":0.8187153846153844},"multiplier":0.25,"relevance":0.2}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/71"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.424 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.424</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/70#issuecomment-2445725004\" target=\"_blank\" rel=\"noopener\">I recently added logic to comment any [&#96;status !== 200&#96;]&hellip;</a></h6></td><td><details><summary>3.41</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 52&#13;  wordValue: 0.1&#13;  result: 2.41&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.424</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_4.json","json":{"Keyrxng":{"userId":106303466,"total":25,"task":{"reward":25,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 25 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":20.838,"userId":4975670,"comments":[{"id":2188320521,"content":"Interesting that this problem persisted in both versions. I assumed this logic was rewritten from scratch","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/4#issuecomment-2188320521","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.155,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":61.24000000000001,"syllables":26,"sentences":2,"score":0.9875999999999999},"multiplier":1,"relevance":0.7}},{"id":2290316185,"content":"@gentlementlegen  the assignee should not be eligible for review rewards. I assume our config supports this already. Can you make the necessary adjustments for both organizations and link the commits here?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/4#issuecomment-2290316185","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":40.791827956989266,"syllables":57,"sentences":3,"score":0.8079182795698927},"multiplier":1,"relevance":0}},{"id":2290937032,"content":"Okay let's see how relevance scoring works. Perhaps I am biased but I am expecting something closer to v1 scoring, just because I fine tuned its config over some months to get what I think kind of makes sense. \r\nLet's run this again once that capability is merged in.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/4#issuecomment-2290937032","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":73.46235294117649,"syllables":70,"sentences":3,"score":0.8653764705882351},"multiplier":1,"relevance":0}},{"id":1689100762,"content":"I always open up my pull body with \"Resolves #0\". Are we sure that GitHub correctly links the pull if \"Resolves\" is located elsewhere? \r\n`^Resolves\\s#\\d+?\\D`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1689100762","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -169,3 +194,38 @@ async function getOpenedPullRequests(context: Context, username: string): Promis\n   const prs = await getAllPullRequests(context, \"open\");\n   return prs.filter((pr) => !pr.draft && (pr.user?.login === username || !username));\n }\n+\n+/**\n+ * Extracts the task id from the PR body. The format is:\n+ * `Resolves #123`\n+ * `Requires https://www.github.com/.../issue/123`\n+ * `Fixes https://github.com/.../issues/123`\n+ * `Closes #123`\n+ * `Depends on #123`\n+ * `Related to #123`\n+ */\n+export function issueLinkedViaPrBody(prBody: string | null, issueNumber: number): boolean {\n+  const regex = // eslint-disable-next-line no-useless-escape\n+    /(?:Resolves|Fixes|Closes|Depends on|Related to) #(\\d+)|https:\\/\\/(?:www\\.)?github.com\\/([^\\/]+)\\/([^\\/]+)\\/(issue|issues)\\/(\\d+)|#(\\d+)/gi;\n+  const matches = prBody?.match(regex);","score":{"reward":1.68,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":71.28000000000002,"syllables":35,"sentences":2,"score":0.8871999999999999},"multiplier":1,"relevance":0.8}},{"id":1694070255,"content":"Seems unusual that you added this directive. I suppose it doesn't automatically pick up mjs files?\r\nAlso why mjs? We don't normally use this format according to the template.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694070255","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,126 @@\n+// @ts-check","score":{"reward":1.729,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":65.24616935483871,"syllables":49,"sentences":4,"score":0.9475383064516129},"multiplier":1,"relevance":0.7}},{"id":1694070797,"content":"This enabled stuff should be removed.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694070797","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,8 +10,8 @@ export async function userStartStop(context: Context): Promise<{ output: string\n   const { isEnabled } = config;","score":{"reward":0.666,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":87.94500000000002,"syllables":8,"sentences":1,"score":0.7205499999999998},"multiplier":1,"relevance":0.9}},{"id":1694567552,"content":"Can you demonstrate how the config would look if you wanted to disable it on a repo?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694567552","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,8 +10,8 @@ export async function userStartStop(context: Context): Promise<{ output: string\n   const { isEnabled } = config;","score":{"reward":0.996,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":75.12117647058825,"syllables":23,"sentences":1,"score":0.8487882352941175},"multiplier":1,"relevance":0.6}},{"id":1694920035,"content":"This doesn't seem right. Configuration merging should be at the resolution of the plugin ID level. And I would have expected that in order to disable this we would have something like \r\n```yml\r\nplugins:\r\n   issues_comment.created:\r\n      - id: ubiquibot/command-start-stop\r\n        with: \r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694920035","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,8 +10,8 @@ export async function userStartStop(context: Context): Promise<{ output: string\n   const { isEnabled } = config;","score":{"reward":2.259,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":70.0518181818182,"syllables":49,"sentences":3,"score":0.8994818181818179},"multiplier":1,"relevance":0.9}},{"id":1696228019,"content":"The bot has access to private repositories. Using the bot authentication, you should be able to access the organization config. \r\nI understand now. Although I think it makes more sense to consolidate the plugin url into the ID. But ultimately I want to follow GitHub Actions syntax as closely as possible.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1696228019","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,8 +10,8 @@ export async function userStartStop(context: Context): Promise<{ output: string\n   const { isEnabled } = config;","score":{"reward":2.432,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":48.84670588235295,"syllables":89,"sentences":5,"score":0.8884670588235295},"multiplier":1,"relevance":0.8}},{"id":2229641347,"content":"Ideally we should have support for all the above scenarios. Cross org indeed is rare. If its too complicated then perhaps we can make a new task for it (if needed in the future.)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#issuecomment-2229641347","commentType":"PULL_COLLABORATOR","score":{"reward":1.715,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":86.23691176470591,"syllables":45,"sentences":4,"score":0.7376308823529409},"multiplier":1,"relevance":0.7}},{"id":2254348781,"content":"After my comments are addressed I'm okay to merge.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#issuecomment-2254348781","commentType":"PULL_COLLABORATOR","score":{"reward":0.336,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":78.24500000000002,"syllables":14,"sentences":1,"score":0.8175499999999998},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2195610497,"effect":{"addition":290,"deletion":90},"reward":3.8,"priority":1},{"reviewId":2203387036,"effect":{"addition":307,"deletion":100},"reward":4.07,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 20.838 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>7.87</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>1.155</td></tr><tr><td>Review</td><td>Comment</td><td>8</td><td>11.813</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10\" target=\"_blank\" rel=\"noopener\">#10</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+290 -90</td><td>1</td><td>3.8</td></tr><tr><td>+307 -100</td><td>1</td><td>4.07</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/4#issuecomment-2188320521\" target=\"_blank\" rel=\"noopener\">Interesting that this problem persisted in both versions. I assu&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.155</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/4#issuecomment-2290316185\" target=\"_blank\" rel=\"noopener\">@gentlementlegen  the assignee should not be eligible for review&hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/4#issuecomment-2290937032\" target=\"_blank\" rel=\"noopener\">Okay let's see how relevance scoring works. Perhaps I am biased &hellip;</a></h6></td><td><details><summary>2.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 51&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>0</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1689100762\" target=\"_blank\" rel=\"noopener\">I always open up my pull body with \"Resolves #0\". Are we sure th&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.8</td><td>1</td><td>1.68</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694070255\" target=\"_blank\" rel=\"noopener\">Seems unusual that you added this directive. I suppose it doesn'&hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.729</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694070797\" target=\"_blank\" rel=\"noopener\">This enabled stuff should be removed.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.666</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694567552\" target=\"_blank\" rel=\"noopener\">Can you demonstrate how the config would look if you wanted to d&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.996</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694920035\" target=\"_blank\" rel=\"noopener\">This doesn't seem right. Configuration merging should be at the &hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.9</td><td>1</td><td>2.259</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1696228019\" target=\"_blank\" rel=\"noopener\">The bot has access to private repositories. Using the bot authen&hellip;</a></h6></td><td><details><summary>2.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 51&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.432</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#issuecomment-2229641347\" target=\"_blank\" rel=\"noopener\">Ideally we should have support for all the above scenarios. Cros&hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.715</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#issuecomment-2254348781\" target=\"_blank\" rel=\"noopener\">After my comments are addressed I'm okay to merge.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.336</td></tr></tbody></table></details>"},"gentlementlegen":{"total":25,"userId":9807008,"comments":[{"id":2255768948,"content":"Seems to be a little formatting issue, will open a ticket about it.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/4#issuecomment-2255768948","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.284,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":63.486153846153854,"syllables":20,"sentences":1,"score":0.9651384615384615},"multiplier":1,"relevance":0.2}},{"id":2290647501,"content":"@0x4007 So you mean that Keyrxng here should have had `0` for `Review comments` correct?\r\n---\r\nChanged [here](https://github.com/ubiquity/ubiquibot-config/commit/52e4225d77312a367e23c36485d12ae345c0c46c) and [here](https://github.com/ubiquibot/ubiquibot-config/commit/1370b5213c207fe6fe4bb543342fd4e383b94796).","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/4#issuecomment-2290647501","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.425,"formatting":{"content":{"p":{"score":0,"elementCount":2},"hr":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":108.82750000000001,"syllables":17,"sentences":2,"score":1},"multiplier":1,"relevance":0.1}},{"id":2290926160,"content":"@0x4007 Is that what you intended?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/4#issuecomment-2290926160","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.079,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":102.045,"syllables":7,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}},{"id":1687252178,"content":"Why are these ignored?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687252178","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -3,10 +3,10 @@ import type { KnipConfig } from \"knip\";\n const config: KnipConfig = {\n   entry: [\"build/index.ts\"],\n   project: [\"src/**/*.ts\"],\n-  ignore: [\"src/types/config.ts\", \"**/__mocks__/**\", \"**/__fixtures__/**\", \"src/worker.ts\"],\n+  ignore: [\"src/types/config.ts\", \"**/__mocks__/**\", \"**/__fixtures__/**\", \"src/worker.ts\", \"src/types/plugin-input.ts\", \"src/main.ts\", \"src/plugin.ts\"],","score":{"reward":0.364,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":97.025,"syllables":5,"sentences":1,"score":0.6297499999999999},"multiplier":1,"relevance":0.7}},{"id":1687253855,"content":"```suggestion\r\n  const userToUnassign = assignees.find((assignee) => assignee?.login.toLowerCase() === sender.login.toLowerCase());\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687253855","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -7,23 +7,17 @@ export async function stop(context: Context, issue: Context[\"payload\"][\"issue\"],\n \n   // is there an assignee?\n   const assignees = issue.assignees ?? [];\n-  if (assignees.length == 0) {\n-    logger.error(\"No assignees found for issue\", { issueNumber });\n-    await addCommentToIssue(context, \"````diff\\n! You are not assigned to this task.\\n````\");\n-    return { output: \"No assignees found for this task\" };\n-  }\n-\n   // should unassign?\n-  const shouldUnassign = assignees[0]?.login.toLowerCase() == sender.login.toLowerCase();\n+  const whoToUnassign = assignees.find((assignee) => assignee?.login.toLowerCase() === sender.login.toLowerCase());","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":1,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1687255722,"content":"The problem I noticed with this, is that in our issue template we have a comment that contains `Resolves #1234`. This matches the regex as well because comments are not filtered out, which I believe is also the case here.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687255722","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -169,3 +194,38 @@ async function getOpenedPullRequests(context: Context, username: string): Promis\n   const prs = await getAllPullRequests(context, \"open\");\n   return prs.filter((pr) => !pr.draft && (pr.user?.login === username || !username));\n }\n+\n+/**\n+ * Extracts the task id from the PR body. The format is:\n+ * `Resolves #123`\n+ * `Requires https://www.github.com/.../issue/123`\n+ * `Fixes https://github.com/.../issues/123`\n+ * `Closes #123`\n+ * `Depends on #123`\n+ * `Related to #123`\n+ */\n+export function issueLinkedViaPrBody(prBody: string | null, issueNumber: number): boolean {\n+  const regex = // eslint-disable-next-line no-useless-escape\n+    /(?:Resolves|Fixes|Closes|Depends on|Related to) #(\\d+)|https:\\/\\/(?:www\\.)?github.com\\/([^\\/]+)\\/([^\\/]+)\\/(issue|issues)\\/(\\d+)|#(\\d+)/gi;\n+  const matches = prBody?.match(regex);","score":{"reward":2.403,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":38,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":76.2342105263158,"syllables":50,"sentences":2,"score":0.8376578947368419},"multiplier":1,"relevance":0.9}},{"id":1687258019,"content":"```suggestion\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687258019","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -196,6 +240,7 @@ describe(\"User start/stop\", () => {\n   });\n \n   test(\"User can't start another issue if they have reached the max limit\", async () => {\n+    // getAvailableOpenedPullRequests()","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":1,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.2}},{"id":1687263958,"content":"You are correct I put plural by accident, singular makes sense.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687263958","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -7,23 +7,17 @@ export async function stop(context: Context, issue: Context[\"payload\"][\"issue\"],\n \n   // is there an assignee?\n   const assignees = issue.assignees ?? [];\n-  if (assignees.length == 0) {\n-    logger.error(\"No assignees found for issue\", { issueNumber });\n-    await addCommentToIssue(context, \"````diff\\n! You are not assigned to this task.\\n````\");\n-    return { output: \"No assignees found for this task\" };\n-  }\n-\n   // should unassign?\n-  const shouldUnassign = assignees[0]?.login.toLowerCase() == sender.login.toLowerCase();\n+  const whoToUnassign = assignees.find((assignee) => assignee?.login.toLowerCase() === sender.login.toLowerCase());","score":{"reward":0.625,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":64.9245454545455,"syllables":17,"sentences":1,"score":0.9507545454545451},"multiplier":1,"relevance":0.5}},{"id":1687272960,"content":"I meant that the `prBody` would be like:\r\n```\r\nResolves #12\r\n```\r\nSecond one is a comment and should be ignored.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687272960","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -169,3 +194,38 @@ async function getOpenedPullRequests(context: Context, username: string): Promis\n   const prs = await getAllPullRequests(context, \"open\");\n   return prs.filter((pr) => !pr.draft && (pr.user?.login === username || !username));\n }\n+\n+/**\n+ * Extracts the task id from the PR body. The format is:\n+ * `Resolves #123`\n+ * `Requires https://www.github.com/.../issue/123`\n+ * `Fixes https://github.com/.../issues/123`\n+ * `Closes #123`\n+ * `Depends on #123`\n+ * `Related to #123`\n+ */\n+export function issueLinkedViaPrBody(prBody: string | null, issueNumber: number): boolean {\n+  const regex = // eslint-disable-next-line no-useless-escape\n+    /(?:Resolves|Fixes|Closes|Depends on|Related to) #(\\d+)|https:\\/\\/(?:www\\.)?github.com\\/([^\\/]+)\\/([^\\/]+)\\/(issue|issues)\\/(\\d+)|#(\\d+)/gi;\n+  const matches = prBody?.match(regex);","score":{"reward":1.078,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":90.13250000000001,"syllables":19,"sentences":1,"score":0.6986749999999999},"multiplier":1,"relevance":0.7}},{"id":1687273632,"content":"Are these actually used?\r\nIs knip actually running on this branch during the tests? I suspect it runs on the `development` branch to post this.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687273632","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -3,10 +3,10 @@ import type { KnipConfig } from \"knip\";\n const config: KnipConfig = {\n   entry: [\"build/index.ts\"],\n   project: [\"src/**/*.ts\"],\n-  ignore: [\"src/types/config.ts\", \"**/__mocks__/**\", \"**/__fixtures__/**\", \"src/worker.ts\"],\n+  ignore: [\"src/types/config.ts\", \"**/__mocks__/**\", \"**/__fixtures__/**\", \"src/worker.ts\", \"src/types/plugin-input.ts\", \"src/main.ts\", \"src/plugin.ts\"],","score":{"reward":1.608,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":89.44,"syllables":31,"sentences":3,"score":0.7056},"multiplier":1,"relevance":0.8}},{"id":1687287576,"content":"This issue also exists in other repos sadly.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687287576","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -169,3 +194,38 @@ async function getOpenedPullRequests(context: Context, username: string): Promis\n   const prs = await getAllPullRequests(context, \"open\");\n   return prs.filter((pr) => !pr.draft && (pr.user?.login === username || !username));\n }\n+\n+/**\n+ * Extracts the task id from the PR body. The format is:\n+ * `Resolves #123`\n+ * `Requires https://www.github.com/.../issue/123`\n+ * `Fixes https://github.com/.../issues/123`\n+ * `Closes #123`\n+ * `Depends on #123`\n+ * `Related to #123`\n+ */\n+export function issueLinkedViaPrBody(prBody: string | null, issueNumber: number): boolean {\n+  const regex = // eslint-disable-next-line no-useless-escape\n+    /(?:Resolves|Fixes|Closes|Depends on|Related to) #(\\d+)|https:\\/\\/(?:www\\.)?github.com\\/([^\\/]+)\\/([^\\/]+)\\/(issue|issues)\\/(\\d+)|#(\\d+)/gi;\n+  const matches = prBody?.match(regex);","score":{"reward":0.485,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":50.66500000000002,"syllables":14,"sentences":1,"score":0.9066500000000002},"multiplier":1,"relevance":0.5}},{"id":1688398642,"content":"Isn't the logger supposed to also generate the diff?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1688398642","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -7,23 +7,17 @@ export async function stop(context: Context, issue: Context[\"payload\"][\"issue\"],\n \n   // is there an assignee?\n   const assignees = issue.assignees ?? [];\n-  if (assignees.length == 0) {\n-    logger.error(\"No assignees found for issue\", { issueNumber });\n-    await addCommentToIssue(context, \"````diff\\n! You are not assigned to this task.\\n````\");\n-    return { output: \"No assignees found for this task\" };\n-  }\n-\n   // should unassign?\n-  const shouldUnassign = assignees[0]?.login.toLowerCase() == sender.login.toLowerCase();\n+  const userToUnassign = assignees.find((assignee) => assignee?.login.toLowerCase() === sender.login.toLowerCase());\n \n-  if (!shouldUnassign) {\n+  if (!whoToUnassign) {\n     logger.error(\"You are not assigned to this task\", { issueNumber, user: sender.login });\n+    await addCommentToIssue(context, \"```diff\\n! You are not assigned to this task.\\n```\");","score":{"reward":0.912,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":69.78500000000001,"syllables":15,"sentences":1,"score":0.9021499999999999},"multiplier":1,"relevance":0.8}},{"id":1689063529,"content":"If the `main` is not recognized possibly some files will be considered as unused because they are reference through the main. But in other projects we never needed to ignore these files.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1689063529","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -3,10 +3,10 @@ import type { KnipConfig } from \"knip\";\n const config: KnipConfig = {\n   entry: [\"build/index.ts\"],\n   project: [\"src/**/*.ts\"],\n-  ignore: [\"src/types/config.ts\", \"**/__mocks__/**\", \"**/__fixtures__/**\", \"src/worker.ts\"],\n+  ignore: [\"src/types/config.ts\", \"**/__mocks__/**\", \"**/__fixtures__/**\", \"src/worker.ts\", \"src/types/plugin-input.ts\", \"src/main.ts\", \"src/plugin.ts\"],","score":{"reward":1.736,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":62.837983870967776,"syllables":47,"sentences":2,"score":0.9716201612903222},"multiplier":1,"relevance":0.7}},{"id":1689064144,"content":"I think a quick fix that would be reliable is to remove comment, by using a substring with a regex, so comments are ignored, then your logic should be good.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1689064144","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -169,3 +194,38 @@ async function getOpenedPullRequests(context: Context, username: string): Promis\n   const prs = await getAllPullRequests(context, \"open\");\n   return prs.filter((pr) => !pr.draft && (pr.user?.login === username || !username));\n }\n+\n+/**\n+ * Extracts the task id from the PR body. The format is:\n+ * `Resolves #123`\n+ * `Requires https://www.github.com/.../issue/123`\n+ * `Fixes https://github.com/.../issues/123`\n+ * `Closes #123`\n+ * `Depends on #123`\n+ * `Related to #123`\n+ */\n+export function issueLinkedViaPrBody(prBody: string | null, issueNumber: number): boolean {\n+  const regex = // eslint-disable-next-line no-useless-escape\n+    /(?:Resolves|Fixes|Closes|Depends on|Related to) #(\\d+)|https:\\/\\/(?:www\\.)?github.com\\/([^\\/]+)\\/([^\\/]+)\\/(issue|issues)\\/(\\d+)|#(\\d+)/gi;\n+  const matches = prBody?.match(regex);","score":{"reward":2.178,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":63.585000000000036,"syllables":40,"sentences":1,"score":0.9641499999999996},"multiplier":1,"relevance":0.9}},{"id":1689121092,"content":"It does resolve it properly wherever it is located, except HTML comments that are also properly ignored.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1689121092","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -169,3 +194,38 @@ async function getOpenedPullRequests(context: Context, username: string): Promis\n   const prs = await getAllPullRequests(context, \"open\");\n   return prs.filter((pr) => !pr.draft && (pr.user?.login === username || !username));\n }\n+\n+/**\n+ * Extracts the task id from the PR body. The format is:\n+ * `Resolves #123`\n+ * `Requires https://www.github.com/.../issue/123`\n+ * `Fixes https://github.com/.../issues/123`\n+ * `Closes #123`\n+ * `Depends on #123`\n+ * `Related to #123`\n+ */\n+export function issueLinkedViaPrBody(prBody: string | null, issueNumber: number): boolean {\n+  const regex = // eslint-disable-next-line no-useless-escape\n+    /(?:Resolves|Fixes|Closes|Depends on|Related to) #(\\d+)|https:\\/\\/(?:www\\.)?github.com\\/([^\\/]+)\\/([^\\/]+)\\/(issue|issues)\\/(\\d+)|#(\\d+)/gi;\n+  const matches = prBody?.match(regex);","score":{"reward":0.83,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":45.26235294117649,"syllables":29,"sentences":1,"score":0.8526235294117649},"multiplier":1,"relevance":0.5}},{"id":1692782551,"content":"@Keyrxng So in the end are these needed?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1692782551","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -6,7 +6,7 @@ const config: KnipConfig = {\n   ignore: [\"src/types/config.ts\", \"**/__mocks__/**\", \"**/__fixtures__/**\", \"src/worker.ts\"],\n   ignoreExportsUsedInFile: true,\n   // eslint can also be safely ignored as per the docs: https://knip.dev/guides/handling-issues#eslint--jest\n-  ignoreDependencies: [\"eslint-config-prettier\", \"eslint-plugin-prettier\", \"@types/jest\"],\n+  ignoreDependencies: [\"eslint-config-prettier\", \"eslint-plugin-prettier\", \"@types/jest\", \"@actions/core\", \"@actions/github\"],","score":{"reward":0.693,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":114.11500000000001,"syllables":8,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":1693709052,"content":"@Keyrxng Yes but these dependencies are actually never imported anywhere in the codebase from what I see, so Knip message makes sense, they can be removed from `package.json`.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1693709052","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -6,7 +6,7 @@ const config: KnipConfig = {\n   ignore: [\"src/types/config.ts\", \"**/__mocks__/**\", \"**/__fixtures__/**\", \"src/worker.ts\"],\n   ignoreExportsUsedInFile: true,\n   // eslint can also be safely ignored as per the docs: https://knip.dev/guides/handling-issues#eslint--jest\n-  ignoreDependencies: [\"eslint-config-prettier\", \"eslint-plugin-prettier\", \"@types/jest\"],\n+  ignoreDependencies: [\"eslint-config-prettier\", \"eslint-plugin-prettier\", \"@types/jest\", \"@actions/core\", \"@actions/github\"],","score":{"reward":2.052,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":54.09666666666669,"syllables":40,"sentences":1,"score":0.940966666666667},"multiplier":1,"relevance":0.9}},{"id":1694073055,"content":"This is the recommended format from [the docs](https://typescript-eslint.io/getting-started/#step-2-configuration). And indeed the `ts-check` enforces the same checks as the other files (would not by default since it is `js`).\r\nThis is now used everywhere when `eslint` was updated to the latest version, as it became the standard.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694073055","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,126 @@\n+// @ts-check","score":{"reward":3.256,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":76.20759689922484,"syllables":59,"sentences":3,"score":0.8379240310077516},"multiplier":1,"relevance":0.8}},{"id":1694094078,"content":"I guess this was to mimic the v1 that actually had a field to disable the start stop command, which I don't think is needed for v2.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694094078","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,8 +10,8 @@ export async function userStartStop(context: Context): Promise<{ output: string\n   const { isEnabled } = config;","score":{"reward":1.362,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":75.6864285714286,"syllables":34,"sentences":1,"score":0.8431357142857139},"multiplier":1,"relevance":0.6}},{"id":1694217749,"content":"Currently, the repo configuration will override the organization repo. There is an issue on that topic [here](https://github.com/ubiquity/ubiquibot-kernel/issues/54).\r\nI would say that if in the target repository configuration, the plugin is not mentioned, it won't run (or be disabled if you will). If it is present, the target repo configuration will be used.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694217749","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,8 +10,8 @@ export async function userStartStop(context: Context): Promise<{ output: string\n   const { isEnabled } = config;","score":{"reward":3.073,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":53,"wordValue":0.1,"result":2.43},"readability":{"fleschKincaid":52.918325471698125,"syllables":88,"sentences":4,"score":0.9291832547169813},"multiplier":1,"relevance":0.7}},{"id":1694221964,"content":"No. If it is enabled organization level, it will be enabled in every repo. I a repo defines a configuration with `command-start-stop` in it, it will override totally the organization configuration. If a repo defines a configuration without `command-start-stop` then it will never run on that repo.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694221964","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,8 +10,8 @@ export async function userStartStop(context: Context): Promise<{ output: string\n   const { isEnabled } = config;","score":{"reward":2.28,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":41.25625000000002,"syllables":82,"sentences":4,"score":0.8125625000000002},"multiplier":1,"relevance":0.8}},{"id":1694229369,"content":"Yes, implemented [here for example](https://github.com/ubiquibot/conversation-rewards/pull/75#issuecomment-2253656887).","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694229369","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,8 +10,8 @@ export async function userStartStop(context: Context): Promise<{ output: string\n   const { isEnabled } = config;","score":{"reward":1.164,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":49.48000000000002,"syllables":9,"sentences":1,"score":0.8948000000000002},"multiplier":1,"relevance":0.6}},{"id":1694572780,"content":"```yml\r\nplugins:\r\n    # any plugin you want except command-start-stop\r\n```\r\nI still have to think on the configuration merging because we changed the whole shape of the configuration file.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694572780","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,8 +10,8 @@ export async function userStartStop(context: Context): Promise<{ output: string\n   const { isEnabled } = config;","score":{"reward":1.267,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":49.518421052631595,"syllables":31,"sentences":1,"score":0.8951842105263159},"multiplier":1,"relevance":0.7}},{"id":1695035846,"content":"The thing is the id is arbitrary, and not even required. Plus, each plugin can pack a plugin chain where execution is chained with a list of plugins so they pass down their data to the next one.\r\n```yml\r\nplugins:\r\n    - id: plugin-1\r\n      name: First plugin chain\r\n      with:\r\n        - uses: ubiquibot/conversation-rewards\r\n        - uses: ubiquibot/autoamted-merging\r\n    - id: plugin-2\r\n      name: Second plugin chain\r\n      with:\r\n        - uses: https://ubiquit-assistive-pricing.workers.dev\r\n        - uses: ubiquibot/conversation-rewards\r\n```\r\nI think merging by `id` would simplify a lot the problem, however you cannot guess what id was used by the Org configuration if you cannot see the configuration file.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1695035846","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,8 +10,8 @@ export async function userStartStop(context: Context): Promise<{ output: string\n   const { isEnabled } = config;","score":{"reward":2.331,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":67,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":62.9487562189055,"syllables":96,"sentences":3,"score":0.970512437810945},"multiplier":1,"relevance":0.7}},{"id":2255750147,"content":"@Keyrxng Yes, the merge issue is unrelated to this and will be addressed within the kernel. I am fine with this pull-request.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#issuecomment-2255750147","commentType":"PULL_COLLABORATOR","score":{"reward":1.182,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":84.8146739130435,"syllables":30,"sentences":2,"score":0.7518532608695649},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2192721228,"effect":{"addition":290,"deletion":90},"reward":3.8,"priority":1},{"reviewId":2194541795,"effect":{"addition":1,"deletion":2},"reward":0.03,"priority":1},{"reviewId":2195539005,"effect":{"addition":0,"deletion":0},"reward":0,"priority":1},{"reviewId":2201369897,"effect":{"addition":308,"deletion":99},"reward":4.07,"priority":1},{"reviewId":2203084843,"effect":{"addition":1,"deletion":3},"reward":0.04,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 25 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>⚠️ Your rewards have been limited to the task price of 25 XP.</h6><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>5</td><td>7.94</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>0.788</td></tr><tr><td>Review</td><td>Comment</td><td>22</td><td>30.879</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10\" target=\"_blank\" rel=\"noopener\">#10</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+290 -90</td><td>1</td><td>3.8</td></tr><tr><td>+1 -2</td><td>1</td><td>0.03</td></tr><tr><td>+0 -0</td><td>1</td><td>0</td></tr><tr><td>+308 -99</td><td>1</td><td>4.07</td></tr><tr><td>+1 -3</td><td>1</td><td>0.04</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/4#issuecomment-2255768948\" target=\"_blank\" rel=\"noopener\">Seems to be a little formatting issue, will open a ticket about &hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.284</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/4#issuecomment-2290647501\" target=\"_blank\" rel=\"noopener\">@0x4007 So you mean that Keyrxng here should have had &#96;0&#96&hellip;</a></h6></td><td><details><summary>3.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.425</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/4#issuecomment-2290926160\" target=\"_blank\" rel=\"noopener\">@0x4007 Is that what you intended?</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.079</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687252178\" target=\"_blank\" rel=\"noopener\">Why are these ignored?</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.364</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687253855\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionconst userToUnassign = assignees.fi&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687255722\" target=\"_blank\" rel=\"noopener\">The problem I noticed with this, is that in our issue template w&hellip;</a></h6></td><td><details><summary>2.13</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 38&#13;  wordValue: 0.1&#13;  result: 2.13&#13;</pre></details></td><td>0.9</td><td>1</td><td>2.403</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687258019\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion&#96;&#96;&#96;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.2</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687263958\" target=\"_blank\" rel=\"noopener\">You are correct I put plural by accident, singular makes sense.</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.625</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687272960\" target=\"_blank\" rel=\"noopener\">I meant that the &#96;prBody&#96; would be like:&#96;&#96;&#96&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.078</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687273632\" target=\"_blank\" rel=\"noopener\">Are these actually used?Is knip actually running on this branc&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.8</td><td>1</td><td>1.608</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1687287576\" target=\"_blank\" rel=\"noopener\">This issue also exists in other repos sadly.</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.485</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1688398642\" target=\"_blank\" rel=\"noopener\">Isn't the logger supposed to also generate the diff?</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.912</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1689063529\" target=\"_blank\" rel=\"noopener\">If the &#96;main&#96; is not recognized possibly some files will&hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.736</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1689064144\" target=\"_blank\" rel=\"noopener\">I think a quick fix that would be reliable is to remove comment,&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.9</td><td>1</td><td>2.178</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1689121092\" target=\"_blank\" rel=\"noopener\">It does resolve it properly wherever it is located, except HTML &hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.83</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1692782551\" target=\"_blank\" rel=\"noopener\">@Keyrxng So in the end are these needed?</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.693</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1693709052\" target=\"_blank\" rel=\"noopener\">@Keyrxng Yes but these dependencies are actually never imported &hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.9</td><td>1</td><td>2.052</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694073055\" target=\"_blank\" rel=\"noopener\">This is the recommended format from [the docs](https://typescrip&hellip;</a></h6></td><td><details><summary>3.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 43&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>0.8</td><td>1</td><td>3.256</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694094078\" target=\"_blank\" rel=\"noopener\">I guess this was to mimic the v1 that actually had a field to di&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.6</td><td>1</td><td>1.362</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694217749\" target=\"_blank\" rel=\"noopener\">Currently, the repo configuration will override the organization&hellip;</a></h6></td><td><details><summary>3.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 53&#13;  wordValue: 0.1&#13;  result: 2.43&#13;</pre></details></td><td>0.7</td><td>1</td><td>3.073</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694221964\" target=\"_blank\" rel=\"noopener\">No. If it is enabled organization level, it will be enabled in e&hellip;</a></h6></td><td><details><summary>2.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.28</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694229369\" target=\"_blank\" rel=\"noopener\">Yes, implemented [here for example](https://github.com/ubiquibot&hellip;</a></h6></td><td><details><summary>1.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.6</td><td>1</td><td>1.164</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1694572780\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;ymlplugins:# any plugin you want except c&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.267</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#discussion_r1695035846\" target=\"_blank\" rel=\"noopener\">The thing is the id is arbitrary, and not even required. Plus, e&hellip;</a></h6></td><td><details><summary>2.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 67&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>0.7</td><td>1</td><td>2.331</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10#issuecomment-2255750147\" target=\"_blank\" rel=\"noopener\">@Keyrxng Yes, the merge issue is unrelated to this and will be a&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.6</td><td>1</td><td>1.182</td></tr></tbody></table></details>"},"rndquu":{"total":5.66,"userId":119500907,"comments":[{"id":2371788156,"content":"Depends on https://github.com/ubiquibot/command-start-stop/pull/1\r\nCheck [this](https://github.com/rndquu-org/test-repo/issues/55#issuecomment-2188079534) `/stop` command. The bot (i.e. `ubiquibot/command-start-stop` plugin) closed the issue but also [tried](https://github.com/rndquu-org/test-repo/issues/55#issuecomment-2188079603) to close a linked PR although this PR is from a different repo with different assignee.\r\nWhat should be done:\r\n- make sure the plugin closes the correct linked PRs\r\n- write a regression test","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/4","commentType":"ISSUE_SPECIFICATION","score":{"reward":5.66,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2.2},"priority":1,"words":{"wordCount":49,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":80.33367816091955,"syllables":80,"sentences":6,"score":0.7966632183908046},"multiplier":1,"relevance":1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/10"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 5.66 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.66</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/4\" target=\"_blank\" rel=\"noopener\">Depends on https://github.com/ubiquibot/command-start-stop/pull/&hellip;</a></h6></td><td><details><summary>4.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2.2&#13;regex:&#13;  wordCount: 49&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>1</td><td>1</td><td>5.66</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-disqualifier_32.json","json":{"gentlementlegen":{"userId":9807008,"total":60.36,"task":{"reward":50,"multiplier":1},"comments":[{"id":2409580842,"content":"@0x4007 Not sure if that should be founded since it is supposed to work. See the runs that are always failing: https://github.com/ubiquity-os-marketplace/daemon-disqualifier/actions/runs/11319089020/job/31474614733","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/32#issuecomment-2409580842","commentType":"ISSUE_AUTHOR","score":{"reward":5.688,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":75.89637254901962,"syllables":48,"sentences":3,"score":0.8410362745098038},"multiplier":1,"relevance":0.9}},{"id":2409693322,"content":"I'll also add the plugin build step to make this spec worth.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/32#issuecomment-2409693322","commentType":"ISSUE_AUTHOR","score":{"reward":1.572,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":96.02461538461542,"syllables":15,"sentences":1,"score":0.6397538461538459},"multiplier":1,"relevance":0.6}},{"id":2584135924,"content":"When left blank, the configuration complains about missing `eventWhitelist`. When giving values, it seems to decode them improperly, cf run : https://github.com/ubiquity-os-marketplace/daemon-disqualifier/actions/runs/11316394599/job/31468631289#step:5:93","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/32","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.1,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":52.381904761904764,"syllables":59,"sentences":3,"score":0.9238190476190477},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 60.36 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.1</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>7.26</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/32\" target=\"_blank\" rel=\"noopener\">When left blank, the configuration complains about missing &#96;&hellip;</a></h6></td><td><details><summary>2.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>1</td><td>1</td><td>3.1</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/32#issuecomment-2409580842\" target=\"_blank\" rel=\"noopener\">@0x4007 Not sure if that should be founded since it is supposed &hellip;</a></h6></td><td><details><summary>2.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.9</td><td>2</td><td>5.688</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/32#issuecomment-2409693322\" target=\"_blank\" rel=\"noopener\">I'll also add the plugin build step to make this spec worth.</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.6</td><td>2</td><td>1.572</td></tr></tbody></table></details>"},"0x4007":{"total":24.152,"userId":4975670,"comments":[{"id":2409089003,"content":"You set priority I have no idea of the context of this problem","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/32#issuecomment-2409089003","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.656,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":76.50153846153849,"syllables":18,"sentences":1,"score":0.8349846153846151},"multiplier":1,"relevance":0.6}},{"id":2366527099,"content":"Code looks fine.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/33#pullrequestreview-2366527099","commentType":"PULL_COLLABORATOR","score":{"reward":0.092,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":119.19000000000003,"syllables":3,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}},{"id":1798924004,"content":"Kebab case syntax? Is that right?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/33#discussion_r1798924004","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,59 +1,17 @@\n-name: \"Update Configuration\"\n+name: \"Update Configuration and Build\"\n \n on:\n   workflow_dispatch:\n   push:\n \n jobs:\n   update:\n-    name: \"Update Configuration in manifest.json\"\n+    name: \"Update Configuration & Build\"\n     runs-on: ubuntu-latest\n     permissions: write-all\n \n     steps:\n-      - uses: actions/checkout@v4\n-\n-      - name: Setup node\n-        uses: actions/setup-node@v4\n-        with:\n-          node-version: \"20.10.0\"\n-\n-      - name: Install deps and run configuration update\n-        run: |\n-          yarn install --immutable --immutable-cache --check-cache\n-          yarn tsc --noCheck --project tsconfig.json\n-\n-      - name: Update manifest configuration using GitHub Script\n-        uses: actions/github-script@v7\n-        with:\n-          script: |\n-            (async () => {\n-              const fs = await import('fs/promises');\n-              const path = await import('path');\n-\n-              const { pluginSettingsSchema } = await import(\"${{ github.workspace }}/src/types/plugin-inputs.js\");\n-\n-              const manifestPath = path.resolve(\"${{ github.workspace }}\", './manifest.json');\n-              const manifest = JSON.parse(await fs.readFile(manifestPath, 'utf8'));\n-\n-              const configuration = JSON.stringify(pluginSettingsSchema);\n-              manifest[\"configuration\"] = JSON.parse(configuration);\n-\n-              const updatedManifest = JSON.stringify(manifest, null, 2);\n-              console.log('Updated manifest:', updatedManifest);\n-              await fs.writeFile(manifestPath, updatedManifest);\n-            })();\n-\n-      - name: Commit and Push generated types\n-        run: |\n-          git config --global user.name 'ubiquity-os[bot]'\n-          git config --global user.email 'ubiquity-os[bot]@users.noreply.github.com'\n-          git add ./manifest.json\n-          if [ -n \"$(git diff-index --cached --name-only HEAD)\" ]; then\n-            git commit -m \"chore: updated generated configuration\" || echo \"Lint-staged check failed\"\n-            git push origin HEAD:${{ github.ref_name }}\n-          else\n-            echo \"No changes to commit\"\n-          fi\n+      - uses: ubiquity-os/action-deploy-plugin@main\n         env:\n-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n+          app-id: ${{ secrets.APP_ID }}\n+          app-private-key: ${{ secrets.APP_PRIVATE_KEY }}","score":{"reward":0.592,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":90.99000000000004,"syllables":8,"sentences":2,"score":0.6900999999999996},"multiplier":1,"relevance":0.4}},{"id":1798924909,"content":"This could be more specific","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/33#discussion_r1798924909","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,16 +1,22 @@\n name: \"Watch Activity\"\n description: \"Watch user's activity.\"\n+inputs:\n+  stateId:\n+    description: \"State Id\"\n+  eventName:\n+    description: \"Event Name\"\n+  eventPayload:\n+    description: \"Event Payload\"\n+  settings:\n+    description: \"Settings\"\n+  authToken:\n+    description: \"Auth Token\"\n+  ref:\n+    description: \"Ref\"","score":{"reward":0.78,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":83.32000000000004,"syllables":7,"sentences":1,"score":0.7667999999999996},"multiplier":1,"relevance":0.6}},{"id":1799435379,"content":"Yeah I would consider these secret names to be standardized to `APP_ID` and `APP_PRIVATE_KEY` at this point","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/33#discussion_r1799435379","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,59 +1,17 @@\n-name: \"Update Configuration\"\n+name: \"Update Configuration and Build\"\n \n on:\n   workflow_dispatch:\n   push:\n \n jobs:\n   update:\n-    name: \"Update Configuration in manifest.json\"\n+    name: \"Update Configuration & Build\"\n     runs-on: ubuntu-latest\n     permissions: write-all\n \n     steps:\n-      - uses: actions/checkout@v4\n-\n-      - name: Setup node\n-        uses: actions/setup-node@v4\n-        with:\n-          node-version: \"20.10.0\"\n-\n-      - name: Install deps and run configuration update\n-        run: |\n-          yarn install --immutable --immutable-cache --check-cache\n-          yarn tsc --noCheck --project tsconfig.json\n-\n-      - name: Update manifest configuration using GitHub Script\n-        uses: actions/github-script@v7\n-        with:\n-          script: |\n-            (async () => {\n-              const fs = await import('fs/promises');\n-              const path = await import('path');\n-\n-              const { pluginSettingsSchema } = await import(\"${{ github.workspace }}/src/types/plugin-inputs.js\");\n-\n-              const manifestPath = path.resolve(\"${{ github.workspace }}\", './manifest.json');\n-              const manifest = JSON.parse(await fs.readFile(manifestPath, 'utf8'));\n-\n-              const configuration = JSON.stringify(pluginSettingsSchema);\n-              manifest[\"configuration\"] = JSON.parse(configuration);\n-\n-              const updatedManifest = JSON.stringify(manifest, null, 2);\n-              console.log('Updated manifest:', updatedManifest);\n-              await fs.writeFile(manifestPath, updatedManifest);\n-            })();\n-\n-      - name: Commit and Push generated types\n-        run: |\n-          git config --global user.name 'ubiquity-os[bot]'\n-          git config --global user.email 'ubiquity-os[bot]@users.noreply.github.com'\n-          git add ./manifest.json\n-          if [ -n \"$(git diff-index --cached --name-only HEAD)\" ]; then\n-            git commit -m \"chore: updated generated configuration\" || echo \"Lint-staged check failed\"\n-            git push origin HEAD:${{ github.ref_name }}\n-          else\n-            echo \"No changes to commit\"\n-          fi\n+      - uses: ubiquity-os/action-deploy-plugin@main\n         env:\n-          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n+          app-id: ${{ secrets.APP_ID }}\n+          app-private-key: ${{ secrets.APP_PRIVATE_KEY }}","score":{"reward":2.4,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":78.81000000000003,"syllables":20,"sentences":1,"score":0.8118999999999997},"multiplier":1,"relevance":0.8}},{"id":1799436566,"content":"This seems unusual","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/33#discussion_r1799436566","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.09,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":62.79000000000002,"syllables":5,"sentences":1,"score":0.9720999999999997},"multiplier":1,"relevance":0.1}},{"id":1799438533,"content":"I think we should change the API to be something more like \r\n```typescript\r\nnew Logger({ level: \"debug\" });\r\n```\r\nAs I presume that is what this means.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/33#discussion_r1799438533","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -12,8 +12,9 @@ export async function run(inputs: PluginInputs) {\n     payload: inputs.eventPayload,\n     config: inputs.settings,\n     octokit,\n-    logger: new Logs(\"verbose\"),\n+    logger: new Logs(\"debug\"),","score":{"reward":3.222,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":89.24500000000003,"syllables":23,"sentences":1,"score":0.7075499999999997},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2365661494,"effect":{"addition":579,"deletion":171},"reward":15,"priority":2},{"reviewId":2366521054,"effect":{"addition":8,"deletion":8},"reward":0.32,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/33"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 24.152 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>15.32</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.656</td></tr><tr><td>Review</td><td>Comment</td><td>6</td><td>7.176</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/33\" target=\"_blank\" rel=\"noopener\">#33</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+579 -171</td><td>2</td><td>15</td></tr><tr><td>+8 -8</td><td>2</td><td>0.32</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/32#issuecomment-2409089003\" target=\"_blank\" rel=\"noopener\">You set priority I have no idea of the context of this problem</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.6</td><td>2</td><td>1.656</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/33#pullrequestreview-2366527099\" target=\"_blank\" rel=\"noopener\">Code looks fine.</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.092</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/33#discussion_r1798924004\" target=\"_blank\" rel=\"noopener\">Kebab case syntax? Is that right?</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.4</td><td>2</td><td>0.592</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/33#discussion_r1798924909\" target=\"_blank\" rel=\"noopener\">This could be more specific</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.6</td><td>2</td><td>0.78</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/33#discussion_r1799435379\" target=\"_blank\" rel=\"noopener\">Yeah I would consider these secret names to be standardized to &&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.4</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/33#discussion_r1799436566\" target=\"_blank\" rel=\"noopener\">This seems unusual</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.09</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/33#discussion_r1799438533\" target=\"_blank\" rel=\"noopener\">I think we should change the API to be something more like &#9&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.9</td><td>2</td><td>3.222</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_96.json","json":{"gentlementlegen":{"userId":9807008,"total":110.31,"task":{"reward":100,"multiplier":1},"comments":[{"id":2920993577,"content":"_Originally posted by @ubiquity-os-beta in [#23](https://github.com/ubiquity-os-marketplace/daemon-pull-review/issues/23#issuecomment-2724274650)_\n## What happened\nAn error was displayed when only one label was set. I should not be shown, and be a warning most likely. \n## What was expected\nNo error should be shown.\n## How to reproduce\n- create an issue\n- add only one label\n- observe the error being posted\n# Required changes\nThe plugin should be able to recognize a pattern in the priority labels, and check them accordingly.  Example:\n- \"(Low) p0\"\n- \"(Medium) p1\"\n- \"(High) p2\"\nCould be checked because they all respect the pattern \"p{number}\". In our organization, they could all be recognized by \"Priority: {number}'.  From there, the order can also be deduced (lowest to highest or opposite).\nThis in turn would easily allow us to check for pricing attempts with outdated tags, like when we remove priorities for example.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/96","commentType":"ISSUE_SPECIFICATION","score":{"reward":10.31,"formatting":{"content":{"p":{"score":0,"elementCount":4},"em":{"score":0,"elementCount":1},"h2":{"score":1,"elementCount":3},"ul":{"score":0,"elementCount":2},"li":{"score":0.1,"elementCount":6},"h1":{"score":1,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":5.6},"priority":1,"words":{"wordCount":137,"wordValue":0.1,"result":2.35},"readability":{"fleschKincaid":61.00932937956205,"syllables":208,"sentences":8,"score":0.9899067062043795},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 110.31 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>10.31</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/96\" target=\"_blank\" rel=\"noopener\">_Originally posted by @ubiquity-os-beta in [#23](https://github.&hellip;</a></h6></td><td><details><summary>7.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    h2:&#13;      score: 1&#13;      elementCount: 3&#13;    ul:&#13;      score: 0&#13;      elementCount: 2&#13;    li:&#13;      score: 0.1&#13;      elementCount: 6&#13;    h1:&#13;      score: 1&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 5.6&#13;regex:&#13;  wordCount: 137&#13;  wordValue: 0.1&#13;  result: 2.35&#13;</pre></details></td><td>1</td><td>1</td><td>10.31</td></tr></tbody></table></details>"},"0x4007":{"total":24.338,"userId":4975670,"comments":[{"id":2738498803,"content":"It's not so complex. \n- Time is formalized. \n- Priority needs a number at least. \n- Price is formalized. \nMaybe we can make an algo to predict their priority system based on a couple of inputs. \nWhat I've seen in the wild is stuff like \"p0\" and \"p4\"\nPriority always seems to have a number. It's just the direction needs to be set like does p0 mean the most important?  \nWe can have two inputs\nLowest priority level: p4\nHighest priority level: p0\nAnd interpolate kind of like how google sheets does it when you extend some columns and it figures out the pattern between the numbers.  \n---\nI realize that we can safely enforce our time and price labels. \nBut they should be dynamic, meaning even if a time label doesn't exist in the config, the system should be able to work with any input. \nThe config should only exist for prepopulating the labels for convenience.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/96#issuecomment-2738498803","commentType":"ISSUE_COLLABORATOR","score":{"reward":5.598,"formatting":{"content":{"p":{"score":0,"elementCount":2},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"br":{"score":0,"elementCount":1},"hr":{"score":0,"elementCount":1}},"result":0.3},"priority":2,"words":{"wordCount":157,"wordValue":0.1,"result":2.16},"readability":{"fleschKincaid":71.64499710480604,"syllables":224,"sentences":11,"score":0.8835500289519396},"multiplier":1,"relevance":0.9}},{"id":2739837927,"content":"Okay\nTime: <duration> which should be parsed by ms library. I've never seen teams use \"time\" labels in the wild so we can safely assume we're the only ones doing it, and can expect that its exactly in the format we know. \nhttps://github.com/OriginProtocol/origin-dollar/labels","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/96#issuecomment-2739837927","commentType":"ISSUE_COLLABORATOR","score":{"reward":6.672,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":44,"wordValue":0.1,"result":2.27},"readability":{"fleschKincaid":67.8231617647059,"syllables":76,"sentences":4,"score":0.921768382352941},"multiplier":1,"relevance":0.8}},{"id":2743447082,"content":"Highest priority level: p0\nThe algorithm more or less:\nConst Lowest: number = First < second ? First : second","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/96#issuecomment-2743447082","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.31,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":61.24000000000001,"syllables":26,"sentences":2,"score":0.9875999999999999},"multiplier":1,"relevance":0.7}},{"id":2743994522,"content":"I guess it's a safe assumption but with a little math we can make it bullet proof","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/96#issuecomment-2743994522","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.69,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":85.16499999999999,"syllables":22,"sentences":1,"score":0.7483500000000001},"multiplier":1,"relevance":0.5}},{"id":2753222909,"content":"Time for deno deploy","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/96#issuecomment-2753222909","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.22,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.2}},{"id":2012160048,"content":"```suggestion\r\n    throw new Error(\"Some tags seem to not have any number value, please check your configuration.\");\r\n```","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/99#discussion_r2012160048","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,68 @@\n+import { AssistivePricingSettings } from \"../types/plugin-input\";\n+\n+type Labels = AssistivePricingSettings[\"labels\"][\"priority\" | \"time\"];\n+\n+function extractCommonPattern(labels: Labels): string {\n+  const labelParts = labels.map((label) => {\n+    const numberMatch = RegExp(/(\\D*)(\\d*\\.?\\d+)(\\D*)/).exec(label.name);\n+    if (!numberMatch) {\n+      throw new Error(\"Labels do not seem to contain any number value, please check your configuration.\");\n+    }\n+    return {\n+      prefix: numberMatch[1],\n+      number: numberMatch[2],\n+      suffix: numberMatch[3],\n+    };\n+  });\n+\n+  const prefixes = labelParts.map((p) => p.prefix);\n+  const suffixes = labelParts.map((p) => p.suffix);\n+\n+  const commonPrefixes = prefixes.reduce<string>((acc, curr) => (acc === curr ? acc : \"\"), prefixes[0]);\n+  const commonSuffixes = suffixes.reduce<string>((acc, curr) => (acc === curr ? acc : \"\"), suffixes[0]);\n+\n+  if (!commonPrefixes && !commonSuffixes) {\n+    throw new Error(\"No common prefixes or suffixes have been found for the label list, please check your configuration.\");\n+  }\n+\n+  return `${commonPrefixes.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\")}(\\\\d*\\\\.?\\\\d+)${commonSuffixes.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\")}`;\n+}\n+\n+function extractNumbers(labels: Labels) {\n+  return labels.map((tag) => {\n+    const match = RegExp(/\\d*\\.?\\d+/).exec(tag.name);\n+    return match ? parseInt(match[0], 10) : null;\n+  });\n+}\n+\n+function extractLabelPattern(labels: Labels) {\n+  const priorities = extractNumbers(labels);\n+\n+  if (priorities.some((p) => p === null)) {\n+    throw new Error(\"Some tags seem to not have any decimal value, please check your configuration.\");","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.7}},{"id":2012165138,"content":"Can you explain the logic of where exactly it determines the number order and if its higher priority or lower?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/99#discussion_r2012165138","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":3.008,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":51.17500000000004,"syllables":32,"sentences":1,"score":0.9117500000000004},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2713860092,"effect":{"addition":193,"deletion":47},"reward":4.8,"priority":2},{"reviewId":2715863458,"effect":{"addition":1,"deletion":1},"reward":0.04,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/99"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 24.338 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>4.84</td></tr><tr><td>Issue</td><td>Comment</td><td>5</td><td>16.49</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>3.008</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/99\" target=\"_blank\" rel=\"noopener\">#99</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+193 -47</td><td>2</td><td>4.8</td></tr><tr><td>+1 -1</td><td>2</td><td>0.04</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/96#issuecomment-2738498803\" target=\"_blank\" rel=\"noopener\">It's not so complex. - Time is formalized. - Priority needs a &hellip;</a></h6></td><td><details><summary>2.46</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    br:&#13;      score: 0&#13;      elementCount: 1&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0.3&#13;regex:&#13;  wordCount: 157&#13;  wordValue: 0.1&#13;  result: 2.16&#13;</pre></details></td><td>0.9</td><td>2</td><td>5.598</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/96#issuecomment-2739837927\" target=\"_blank\" rel=\"noopener\">OkayTime: &lt;duration&gt; which should be parsed by ms library&hellip;</a></h6></td><td><details><summary>3.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 44&#13;  wordValue: 0.1&#13;  result: 2.27&#13;</pre></details></td><td>0.8</td><td>2</td><td>6.672</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/96#issuecomment-2743447082\" target=\"_blank\" rel=\"noopener\">Highest priority level: p0The algorithm more or less:Const Low&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.31</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/96#issuecomment-2743994522\" target=\"_blank\" rel=\"noopener\">I guess it's a safe assumption but with a little math we can mak&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.5</td><td>2</td><td>1.69</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/96#issuecomment-2753222909\" target=\"_blank\" rel=\"noopener\">Time for deno deploy</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.22</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/99#discussion_r2012160048\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionthrow new Error(\"Some tags seem t&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/99#discussion_r2012165138\" target=\"_blank\" rel=\"noopener\">Can you explain the logic of where exactly it determines the num&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.8</td><td>2</td><td>3.008</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_57.json","json":{"gentlementlegen":{"userId":9807008,"total":52.824,"task":{"reward":50,"multiplier":1},"comments":[{"id":2228453659,"content":"@rndquu Will you keep the `total` as well? The sum currently takes all the `rewards` within the data and puts them inside of `total`\r\nhttps://github.com/ubiquibot/conversation-rewards/blob/development/src/parser/processor.ts#L78\r\nso keep this in mind when you name the elements. Otherwise good with the idea.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/57#issuecomment-2228453659","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.746,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":70.85126530612246,"syllables":73,"sentences":5,"score":0.8914873469387754},"multiplier":0.25,"relevance":0.9}},{"id":2408395855,"content":"@rndquu I suppose only `fee` should be required? If it is just a percentage the before and after should be easy to figure out. And maybe we should rename it `feePercentage` for clarity?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/57#issuecomment-2408395855","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.96,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":78.99827956989247,"syllables":43,"sentences":3,"score":0.8100172043010753},"multiplier":0.25,"relevance":0.8}},{"id":2408406275,"content":"I checked the configuration and the max assigned tasks is 2. I am assigned to three, but opened a PR against two of them, shouldn't I be allowed to start? @0x4007","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/57#issuecomment-2408406275","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.118,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":87.61458333333336,"syllables":41,"sentences":3,"score":0.7238541666666665},"multiplier":0.25,"relevance":0.1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 52.824 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>2.824</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/57#issuecomment-2228453659\" target=\"_blank\" rel=\"noopener\">@rndquu Will you keep the &#96;total&#96; as well? The sum curre&hellip;</a></h6></td><td><details><summary>3.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.9</td><td>2</td><td>1.746</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/57#issuecomment-2408395855\" target=\"_blank\" rel=\"noopener\">@rndquu I suppose only &#96;fee&#96; should be required? If it i&hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.8</td><td>2</td><td>0.96</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/57#issuecomment-2408406275\" target=\"_blank\" rel=\"noopener\">I checked the configuration and the max assigned tasks is 2. I a&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.118</td></tr></tbody></table></details>"},"rndquu":{"total":9.97,"userId":119500907,"comments":[{"id":2228439482,"content":"@whilefoo @gentlementlegen \r\nSo this issue implies refactoring the result [data structure](https://github.com/ubiquibot/conversation-rewards?tab=readme-ov-file#data-structure) to be (example):\r\n```\r\n{\r\n  \"userName\": {\r\n    \"fee\": 10, # percentage\r\n    \"totalBeforeFee\": 1000,\r\n    \"totalAfterFee\": 900,\r\n    ...other properties\r\n```\r\nSounds good?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/57#issuecomment-2228439482","commentType":"ISSUE_AUTHOR","score":{"reward":5.38,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":21.39500000000001,"syllables":32,"sentences":1,"score":0.6139500000000001},"multiplier":1,"relevance":1}},{"id":2407000431,"content":"this looks good but I have another idea: \r\nhow about we add another variable `fee` (percentage) and `totalAfterFee`/`totalBeforeFee` and we leave other values unmodified? this way we can display a comment which includes information about the total reward, how much was the fee and total reward after the fee.\r\nThis would increase transparency so the user can clearly see how much the comments/task was worth and sees how much was the fee\r\n_Originally posted by @whilefoo in https://github.com/ubiquibot/conversation-rewards/pull/43#pullrequestreview-2176251004_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/57","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.59,"formatting":{"content":{"p":{"score":0,"elementCount":4},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":76,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":49.259011627907,"syllables":138,"sentences":4,"score":0.89259011627907},"multiplier":1,"relevance":1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 9.97 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.59</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>5.38</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/57\" target=\"_blank\" rel=\"noopener\">this looks good but I have another idea: how about we add anot&hellip;</a></h6></td><td><details><summary>3.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 76&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>1</td><td>1</td><td>4.59</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/57#issuecomment-2228439482\" target=\"_blank\" rel=\"noopener\">@whilefoo @gentlementlegen So this issue implies refactoring t&hellip;</a></h6></td><td><details><summary>2.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>1</td><td>2</td><td>5.38</td></tr></tbody></table></details>"},"0x4007":{"total":36.4,"userId":4975670,"comments":[{"id":2408445121,"content":"There's an issue Whilefoo filed that outlines what we are still missing from the original implementation. \nBasically after a 24 hour reviewer timeout you get an extra task\nAfter any pull is approved by one reviewer you get an extra task\nI think there was another condition but I'm forgetting at the moment. \n---\nMy start attempts were also being rejected and I did a graphql call to see my five assigned issues. \nThree were in the sandbox \nOne was in an archived repository from four years ago \nSo basically we need to only search from what tasks are inside of the DevPool directory, as that would have solved this problem.  I believe I filed an issue for that as well.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/57#issuecomment-2408445121","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.9,"formatting":{"content":{"h2":{"score":1,"elementCount":1},"p":{"score":0,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":122,"wordValue":0.1,"result":2.47},"readability":{"fleschKincaid":58.63621311475411,"syllables":178,"sentences":5,"score":0.9863621311475411},"multiplier":1,"relevance":0.1}},{"id":2371183172,"content":"Cspell changes don't make sense to me","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#pullrequestreview-2371183172","commentType":"PULL_COLLABORATOR","score":{"reward":0.594,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":114.11500000000001,"syllables":8,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}},{"id":1799518308,"content":"```suggestion\r\n          APP_ID: ${{ secrets.APP_ID }}\r\n          APP_PRIVATE_KEY: ${{ secrets.APP_PRIVATE_KEY }}\r\n```\r\nMakes more sense to me","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#discussion_r1799518308","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -13,4 +13,5 @@ jobs:\n     steps:\n       - uses: ubiquity-os/action-deploy-plugin@main\n         env:\n-          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n+          app-id: ${{ secrets.APP_ID }}\n+          app-private-key: ${{ secrets.APP_PRIVATE_KEY }}","score":{"reward":1.104,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.8}},{"id":1799519243,"content":"This is interesting. Unsure if this is the most presentable way. \r\n###### ⚠️ 50% fee rate has been applied. Consider using the [Ubiquity Dollar](https://dao.ubq.fi/dollar) for no fees.\r\nWe will eventually need to make a landing page that sells the benefits of \"Banking with Ubiquity\"","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#discussion_r1799519243","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -279,6 +279,7 @@ export class GithubCommentModule implements Module {\n           </h6>\n         </b>\n       </summary>\n+      ${result.feeRate !== undefined ? `<h6>⚠️ ${new Decimal(result.feeRate).mul(100)}% fee rate has been applied.</h6>` : null}","score":{"reward":9.828,"formatting":{"content":{"p":{"score":0,"elementCount":2},"h6":{"score":1,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":2},"priority":2,"words":{"wordCount":42,"wordValue":0.1,"result":2.23},"readability":{"fleschKincaid":63.35185714285714,"syllables":67,"sentences":5,"score":0.9664814285714286},"multiplier":1,"relevance":0.9}},{"id":1799524522,"content":"```suggestion\r\nimport logger from \"../helpers/logger\";\r\n```\r\nI think its redundant to include Ubiquity as a variable identifier in these modules?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#discussion_r1799524522","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -26,6 +26,7 @@ import envConfigSchema, { EnvConfigType, envValidator } from \"../types/env-type\"\n import program from \"./command-line\";\n import { Module, Result } from \"./processor\";\n import { RestEndpointMethodTypes } from \"@octokit/rest\";\n+import ubiquityLogger from \"../helpers/logger\";","score":{"reward":1.96,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":29.467857142857156,"syllables":27,"sentences":1,"score":0.6946785714285716},"multiplier":1,"relevance":0.7}},{"id":1799796843,"content":"I think it makes sense to keep the references to the same values consistently named. `APP_ID` always means the same thing everywhere.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#discussion_r1799796843","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -13,4 +13,5 @@ jobs:\n     steps:\n       - uses: ubiquity-os/action-deploy-plugin@main\n         env:\n-          GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}\n+          app-id: ${{ secrets.APP_ID }}\n+          app-private-key: ${{ secrets.APP_PRIVATE_KEY }}","score":{"reward":3.072,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":71.29178571428572,"syllables":31,"sentences":2,"score":0.8870821428571428},"multiplier":1,"relevance":0.8}},{"id":1802343856,"content":"Why did you change this logic?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#discussion_r1802343856","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.948,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":102.045,"syllables":7,"sentences":1,"score":1},"multiplier":1,"relevance":0.6}},{"id":1802344188,"content":"Renaming doesn't seem right","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#discussion_r1802344188","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,7 +1,16 @@\n {","score":{"reward":0.39,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":83.32000000000004,"syllables":7,"sentences":1,"score":0.7667999999999996},"multiplier":1,"relevance":0.3}},{"id":2415724852,"content":"Thanks for the QA\nAs part of a separate task, I think we should consider adding a new column to the table that displays the fee per line item transparently","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#issuecomment-2415724852","commentType":"PULL_COLLABORATOR","score":{"reward":4.374,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":57.945000000000036,"syllables":42,"sentences":1,"score":0.9794500000000004},"multiplier":1,"relevance":0.9}},{"id":2415745995,"content":"Just noticed the committed compiled js. I'm assuming this is necessary for faster cold start","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#issuecomment-2415745995","commentType":"PULL_COLLABORATOR","score":{"reward":1.63,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":66.5275,"syllables":25,"sentences":2,"score":0.9347249999999999},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2366659841,"effect":{"addition":26,"deletion":16},"reward":0.84,"priority":2},{"reviewId":2371183172,"effect":{"addition":422,"deletion":114},"reward":10.72,"priority":2},{"reviewId":2371209829,"effect":{"addition":1,"deletion":1},"reward":0.04,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 36.4 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>11.6</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.9</td></tr><tr><td>Review</td><td>Comment</td><td>9</td><td>23.9</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159\" target=\"_blank\" rel=\"noopener\">#159</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+26 -16</td><td>2</td><td>0.84</td></tr><tr><td>+422 -114</td><td>2</td><td>10.72</td></tr><tr><td>+1 -1</td><td>2</td><td>0.04</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/57#issuecomment-2408445121\" target=\"_blank\" rel=\"noopener\">There's an issue Whilefoo filed that outlines what we are still &hellip;</a></h6></td><td><details><summary>3.47</summary><pre>content:&#13;  content:&#13;    h2:&#13;      score: 1&#13;      elementCount: 1&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 122&#13;  wordValue: 0.1&#13;  result: 2.47&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.9</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#pullrequestreview-2371183172\" target=\"_blank\" rel=\"noopener\">Cspell changes don't make sense to me</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.594</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#discussion_r1799518308\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionAPP_ID: ${{ secrets.APP_ID &hellip;</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.104</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#discussion_r1799519243\" target=\"_blank\" rel=\"noopener\">This is interesting. Unsure if this is the most presentable way.&hellip;</a></h6></td><td><details><summary>4.23</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    h6:&#13;      score: 1&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 2&#13;regex:&#13;  wordCount: 42&#13;  wordValue: 0.1&#13;  result: 2.23&#13;</pre></details></td><td>0.9</td><td>2</td><td>9.828</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#discussion_r1799524522\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionimport logger from \"../helpers/logger&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.96</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#discussion_r1799796843\" target=\"_blank\" rel=\"noopener\">I think it makes sense to keep the references to the same values&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.8</td><td>2</td><td>3.072</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#discussion_r1802343856\" target=\"_blank\" rel=\"noopener\">Why did you change this logic?</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.6</td><td>2</td><td>0.948</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#discussion_r1802344188\" target=\"_blank\" rel=\"noopener\">Renaming doesn't seem right</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.39</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#issuecomment-2415724852\" target=\"_blank\" rel=\"noopener\">Thanks for the QAAs part of a separate task, I think we should &hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.9</td><td>2</td><td>4.374</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/159#issuecomment-2415745995\" target=\"_blank\" rel=\"noopener\">Just noticed the committed compiled js. I'm assuming this is nec&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.5</td><td>2</td><td>1.63</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_145.json","json":{"jaykayudo":{"userId":58009744,"total":12,"task":{"reward":12,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 12 XP ]</a>&nbsp;</h3><h6>@jaykayudo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>12</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"gentlementlegen":{"total":12,"userId":9807008,"comments":[{"id":2423382084,"content":"@jaykayudo We are having trouble with RPCs at the moment, and are actively working on fixing them, sorry about that.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/145#issuecomment-2423382084","commentType":"ISSUE_AUTHOR","score":{"reward":2.244,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":46.94500000000005,"syllables":33,"sentences":1,"score":0.8694500000000005},"multiplier":1,"relevance":0.6}},{"id":2568622473,"content":"Sure but I'm saying add a filter at the very end for edge cases like this.\r\n_Originally posted by @0x4007 in https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/72#issuecomment-2395410882_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/145","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.34,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":59.633333333333354,"syllables":56,"sentences":3,"score":0.9963333333333335},"multiplier":1,"relevance":1}},{"id":2359398660,"content":"This is not properly formatted. Also, I would be cautious about removing the whole result, we probably just want it to be removed from the GitHub comment posting only. And we would need unit tests with this change.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150#pullrequestreview-2359398660","commentType":"PULL_COLLABORATOR","score":{"reward":4.352,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":38,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":67.07833333333336,"syllables":57,"sentences":3,"score":0.9292166666666664},"multiplier":1,"relevance":0.8}},{"id":2374818663,"content":"I tested and indeed the result did not contain the users with `0` as a reward, but the returned JSON did contain them. Let me give this a run in the org within the issue that was having this problem and I'll merge.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150#pullrequestreview-2374818663","commentType":"PULL_COLLABORATOR","score":{"reward":3.92,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":78.77063953488374,"syllables":54,"sentences":2,"score":0.8122936046511626},"multiplier":1,"relevance":0.7}},{"id":1797638877,"content":"Remove the comments","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150#discussion_r1797638877","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,146 @@\n+import { drop } from \"@mswjs/data\";\n+import \"../src/parser/command-line\";\n+import { db } from \"./__mocks__/db\";\n+import dbSeed from \"./__mocks__/db-seed.json\";\n+import { server } from \"./__mocks__/node\";\n+import * as Validator from \"../src/helpers/validator\";\n+\n+const issueUrl = \"https://github.com/ubiquity/work.ubq.fi/issues/69\";\n+\n+jest.mock(\"@actions/github\", () => ({\n+  context: {\n+    runId: \"1\",\n+    payload: {\n+      repository: {\n+        html_url: \"https://github.com/ubiquibot/conversation-rewards\",\n+      },\n+    },\n+  },\n+}));\n+\n+jest.mock(\"@octokit/plugin-paginate-graphql\", () => ({\n+  paginateGraphQL() {\n+    return {\n+      graphql: {\n+        paginate() {\n+          return {\n+            repository: {\n+              issue: {\n+                closedByPullRequestsReferences: {\n+                  edges: [\n+                    {\n+                      node: {\n+                        id: \"PR_kwDOKzVPS85zXUok\",\n+                        title: \"fix: add state to sorting manager for bottom and top 2\",\n+                        number: 71,\n+                        url: \"https://github.com/ubiquity/work.ubq.fi/pull/71\",\n+                        state: \"MERGED\",\n+                        author: {\n+                          login: \"0x4007\",\n+                          id: 4975670,\n+                        },\n+                        repository: {\n+                          owner: {\n+                            login: \"ubiquity\",\n+                          },\n+                          name: \"work.ubq.fi\",\n+                        },\n+                      },\n+                    },\n+                  ],\n+                },\n+              },\n+            },\n+          };\n+        },\n+      },\n+    };\n+  },\n+}));\n+\n+jest.mock(\"../src/parser/command-line\", () => {\n+  // eslint-disable-next-line @typescript-eslint/no-var-requires\n+  const cfg = require(\"./__mocks__/results/valid-configuration.json\");\n+  // eslint-disable-next-line @typescript-eslint/no-var-requires\n+  const dotenv = require(\"dotenv\");\n+  dotenv.config();\n+  return {\n+    stateId: 1,\n+    eventName: \"issues.closed\",\n+    authToken: process.env.GITHUB_TOKEN,\n+    ref: \"\",\n+    eventPayload: {\n+      issue: {\n+        html_url: issueUrl,\n+        number: 1,\n+        state_reason: \"completed\",\n+      },\n+      repository: {\n+        name: \"conversation-rewards\",\n+        owner: {\n+          login: \"ubiquibot\",\n+          id: 76412717,\n+        },\n+      },\n+    },\n+    settings: JSON.stringify({\n+      ...cfg,\n+      incentives: {\n+        ...cfg.incentives,\n+        requirePriceLabel: false,\n+      },\n+    }),\n+  };\n+});\n+\n+beforeAll(() => server.listen());\n+afterEach(() => server.resetHandlers());\n+afterAll(() => server.close());\n+\n+describe(\"Result filter tests\", () => {\n+  beforeEach(async () => {\n+    drop(db);\n+    for (const table of Object.keys(dbSeed)) {\n+      const tableName = table as keyof typeof dbSeed;\n+      for (const row of dbSeed[tableName]) {\n+        db[tableName].create(row);\n+      }\n+    }\n+  });\n+\n+  it(\"Should remove result item with 0 total\", async () => {\n+    // const patchMock = jest.fn(() => HttpResponse.json({}));\n+    // server.use(http.patch(\"https://api.github.com/repos/ubiquity/work.ubq.fi/issues/69\", patchMock, { once: true }));","score":{"reward":0.18,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":62.79000000000002,"syllables":5,"sentences":1,"score":0.9720999999999997},"multiplier":1,"relevance":0.2}},{"id":2408469032,"content":"@jaykayudo Thank you for the test. However I think the logic should be different:\r\n- the user that got 0 reward should not be removed from the result\r\n- however, the posted comment on GitHub should not display that user, see [this file](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/blob/1a2c3e26ac364a888dcac70e5a1b0dcaa44bd5a6/src/parser/github-comment-module.ts)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150#issuecomment-2408469032","commentType":"PULL_COLLABORATOR","score":{"reward":7.92,"formatting":{"content":{"p":{"score":0,"elementCount":3},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1.2},"priority":2,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":62.22262195121952,"syllables":60,"sentences":2,"score":0.9777737804878047},"multiplier":1,"relevance":0.9}},{"id":2408808308,"content":"@jaykayudo You have a few options:\r\n- you can put the GitHub API result in a `json` file and use it, like in the tests\r\n- you can directly call the function with a fake result and see if the call from the `POST` to GitHub is correct\r\nThe second one should be the easier.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150#issuecomment-2408808308","commentType":"PULL_COLLABORATOR","score":{"reward":5.232,"formatting":{"content":{"p":{"score":0,"elementCount":4},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":2,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":45.58764705882355,"syllables":66,"sentences":1,"score":0.8558764705882355},"multiplier":1,"relevance":0.8}},{"id":2415791179,"content":"@jaykayudo We are having some trouble with RPCs at the moment so you did not introduced these problems, no worries. Please resolve the file conflicts.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150#issuecomment-2415791179","commentType":"PULL_COLLABORATOR","score":{"reward":1.744,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":65.55550000000002,"syllables":38,"sentences":2,"score":0.9444449999999998},"multiplier":1,"relevance":0.4}}],"reviewRewards":[{"reviews":[{"reviewId":2359398660,"effect":{"addition":7,"deletion":1},"reward":0.16,"priority":2},{"reviewId":2363836445,"effect":{"addition":162,"deletion":7},"reward":3.38,"priority":2},{"reviewId":2374818663,"effect":{"addition":1773,"deletion":1377},"reward":63,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 12 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>⚠️ Your rewards have been limited to the task price of 12 XP.</h6><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>66.54</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.34</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.244</td></tr><tr><td>Review</td><td>Comment</td><td>6</td><td>23.348</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150\" target=\"_blank\" rel=\"noopener\">#150</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+7 -1</td><td>2</td><td>0.16</td></tr><tr><td>+162 -7</td><td>2</td><td>3.38</td></tr><tr><td>+1773 -1377</td><td>2</td><td>63</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/145\" target=\"_blank\" rel=\"noopener\">Sure but I'm saying add a filter at the very end for edge cases &hellip;</a></h6></td><td><details><summary>2.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>1</td><td>1</td><td>3.34</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/145#issuecomment-2423382084\" target=\"_blank\" rel=\"noopener\">@jaykayudo We are having trouble with RPCs at the moment, and ar&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.6</td><td>2</td><td>2.244</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150#pullrequestreview-2359398660\" target=\"_blank\" rel=\"noopener\">This is not properly formatted. Also, I would be cautious about &hellip;</a></h6></td><td><details><summary>2.13</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 38&#13;  wordValue: 0.1&#13;  result: 2.13&#13;</pre></details></td><td>0.8</td><td>2</td><td>4.352</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150#pullrequestreview-2374818663\" target=\"_blank\" rel=\"noopener\">I tested and indeed the result did not contain the users with &#&hellip;</a></h6></td><td><details><summary>2.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 43&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>0.7</td><td>2</td><td>3.92</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150#discussion_r1797638877\" target=\"_blank\" rel=\"noopener\">Remove the comments</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.18</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150#issuecomment-2408469032\" target=\"_blank\" rel=\"noopener\">@jaykayudo Thank you for the test. However I think the logic sho&hellip;</a></h6></td><td><details><summary>3.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.2&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.9</td><td>2</td><td>7.92</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150#issuecomment-2408808308\" target=\"_blank\" rel=\"noopener\">@jaykayudo You have a few options:- you can put the GitHub API&hellip;</a></h6></td><td><details><summary>2.6</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 51&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>0.8</td><td>2</td><td>5.232</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150#issuecomment-2415791179\" target=\"_blank\" rel=\"noopener\">@jaykayudo We are having some trouble with RPCs at the moment so&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.4</td><td>2</td><td>1.744</td></tr></tbody></table></details>"},"0x4007":{"total":3.736,"userId":4975670,"comments":[{"id":1797640069,"content":"What is this logic use new variables?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150#discussion_r1797640069","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -33,6 +33,8 @@ export async function run() {\n     const processor = new Processor();\n     await processor.run(activity);\n     let result = processor.dump();\n+    const zeroFilterResult = resultFilter(result);\n+    result = zeroFilterResult;","score":{"reward":0.516,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":78.87285714285717,"syllables":10,"sentences":1,"score":0.8112714285714283},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2363837570,"effect":{"addition":161,"deletion":0},"reward":3.22,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 3.736 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>3.22</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.516</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150\" target=\"_blank\" rel=\"noopener\">#150</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+161 -0</td><td>2</td><td>3.22</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/150#discussion_r1797640069\" target=\"_blank\" rel=\"noopener\">What is this logic use new variables?</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.516</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_292.json","json":{"hhio618":{"userId":1272158,"total":12,"task":{"reward":12,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 12 XP ]</a>&nbsp;</h3><h6>@hhio618</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>12</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":3.872,"userId":4975670,"comments":[{"id":2698840882,"content":"The only time toFixed should be used is at the very end to display the results. Internally we should never be rounding. It doesn't make any sense to me to do that.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/292#issuecomment-2698840882","commentType":"ISSUE_COLLABORATOR","score":{"reward":3.872,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":85.4336363636364,"syllables":43,"sentences":3,"score":0.7456636363636361},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/293"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 3.872 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>3.872</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/292#issuecomment-2698840882\" target=\"_blank\" rel=\"noopener\">The only time toFixed should be used is at the very end to displ&hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.8</td><td>2</td><td>3.872</td></tr></tbody></table></details>"},"gentlementlegen":{"total":12,"userId":9807008,"comments":[{"id":2699564073,"content":"It is fine to use rounding in this code because this only has display purposes, however the root of the problem is not the rounding itself but JS having problems with floating points operations, because the current code:\n`result: Object.values(formatting).reduce((acc, curr) => acc + curr.score * curr.elementCount, 0)`\nShould never yield results with infinite decimal points like we've seen. A proposer fix is to use the Decimal library like we do in the rest of the codebase.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/292#issuecomment-2699564073","commentType":"ISSUE_AUTHOR","score":{"reward":6.52,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":68,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":47.91323529411767,"syllables":100,"sentences":2,"score":0.8791323529411766},"multiplier":1,"relevance":1}},{"id":2886272406,"content":"## What happened\nIn some cases, the decimals displayed for `formatting score` display too many decimals when they should only display up to 3, like seen here: https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2687656756\n## What was expected\n0 to 3 decimals should be displayed for floating point numbers.\n## How to reproduce\n- run the server locally for `text-conversation-rewards`\n- run it through the UI targeting `ubiquity-os-marketplace`, `daemon-disqualifier`, `51`\n- notice the improper number display for formatting score under user `@gentlementlegen`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/292","commentType":"ISSUE_SPECIFICATION","score":{"reward":8.58,"formatting":{"content":{"h2":{"score":1,"elementCount":3},"p":{"score":0,"elementCount":2},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":4.3},"priority":1,"words":{"wordCount":62,"wordValue":0.1,"result":2.54},"readability":{"fleschKincaid":44.60914414414415,"syllables":120,"sentences":3,"score":0.8460914414414415},"multiplier":1,"relevance":1}},{"id":2698331341,"content":"Could you please add a test or at least a QA with the problematic issue?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/293#issuecomment-2698331341","commentType":"PULL_COLLABORATOR","score":{"reward":2.368,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":84.45000000000003,"syllables":19,"sentences":1,"score":0.7554999999999997},"multiplier":1,"relevance":0.8}},{"id":2709887735,"content":"Tested with the changes, results display properly:\r\n<img width=\"728\" alt=\"image\" src=\"https://github.com/user-attachments/assets/44e42c3e-2296-43d6-ae3f-5faaa15ae6df\" />","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/293#issuecomment-2709887735","commentType":"PULL_COLLABORATOR","score":{"reward":3.752,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":67.75500000000001,"syllables":36,"sentences":2,"score":0.9224499999999999},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2670242211,"effect":{"addition":47,"deletion":2},"reward":0.98,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/293"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 12 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>⚠️ Your rewards have been limited to the task price of 12 XP.</h6><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.98</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>8.58</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>6.52</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>6.12</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/293\" target=\"_blank\" rel=\"noopener\">#293</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+47 -2</td><td>2</td><td>0.98</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/292\" target=\"_blank\" rel=\"noopener\">## What happenedIn some cases, the decimals displayed for &#96;&hellip;</a></h6></td><td><details><summary>6.84</summary><pre>content:&#13;  content:&#13;    h2:&#13;      score: 1&#13;      elementCount: 3&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 4.3&#13;regex:&#13;  wordCount: 62&#13;  wordValue: 0.1&#13;  result: 2.54&#13;</pre></details></td><td>1</td><td>1</td><td>8.58</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/292#issuecomment-2699564073\" target=\"_blank\" rel=\"noopener\">It is fine to use rounding in this code because this only has di&hellip;</a></h6></td><td><details><summary>2.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 68&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>1</td><td>2</td><td>6.52</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/293#issuecomment-2698331341\" target=\"_blank\" rel=\"noopener\">Could you please add a test or at least a QA with the problemati&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.368</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/293#issuecomment-2709887735\" target=\"_blank\" rel=\"noopener\">Tested with the changes, results display properly:&lt;img widt&hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.7</td><td>2</td><td>3.752</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_5.json","json":{"gentlementlegen":{"userId":9807008,"total":515.199,"task":{"reward":400,"multiplier":1},"comments":[{"id":2033404518,"content":"This needs https://github.com/ubiquibot/conversation-rewards/pull/7 to be merged first. Also probably needs https://github.com/ubiquibot/permit-generation/pull/2 to be able to generate the permits properly.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2033404518","commentType":"ISSUE_AUTHOR","score":{"reward":11.788,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":2}},"result":2},"priority":4,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":49.77034090909092,"syllables":58,"sentences":4,"score":0.8977034090909092},"multiplier":1,"relevance":0.7}},{"id":2036174312,"content":"To me 1 is the most straightforward to do for few reasons:\r\n- the comment reward plugin has all the needed data already\r\n- it can import the https://github.com/ubiquibot/permit-generation to generate permits itself\r\n- if it is done this way it can be used as a complete standalone without the kernel\r\n3 might make more sense in terms of architecture however. In such case the kernel should pass down results. It is more of an architecture question. Although, if we ever have other plugins in the flow that have influence on the total incentives, it would make sense to go through the kernel to aggregate the total result.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036174312","commentType":"ISSUE_AUTHOR","score":{"reward":18.18,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1.3},"priority":4,"words":{"wordCount":104,"wordValue":0.1,"result":2.59},"readability":{"fleschKincaid":60.68136363636364,"syllables":161,"sentences":5,"score":0.9931863636363636},"multiplier":1,"relevance":0.9}},{"id":2036367126,"content":"I think each plugin should output JSON not html as it is not reliable to parse nor manipulate and requires `window` instance to be instantiated which is annoying on `node` based projects. \r\nHaving a plugin handling commenting seems quite weird as commenting is done by calling Octokit and the REST api which is already a library by itself, so no need to encapsulate it within another one to do the same thing.\r\nMy view on this, is to finalize https://github.com/ubiquibot/permit-generation/issues/5 to import it withing the `conversation-reward` that will post the comment itself as well, otherwise the architecture will be quite convoluted doing ping pong with everything.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036367126","commentType":"ISSUE_AUTHOR","score":{"reward":14.56,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":102,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":48.17704545454549,"syllables":170,"sentences":4,"score":0.8817704545454549},"multiplier":1,"relevance":0.8}},{"id":2036385985,"content":"If you want to manipulate and convey data, HTML really is not made for this. If you want something formatted similarly but made for data we can use XML format.\r\nThe new comment reward actually does instantiate a DOM through [JSDOM](https://github.com/ubiquibot/conversation-rewards/blob/ba434761281446a23566cd02c68bd3b0e79d4eb1/src/parser/formatting-evaluator-module.ts#L80) to make things way simpler instead of using Regex everywhere which is highly unreliable. But there it makes sense because we are parsing comments from an HTML page content.\r\nBiggest advantage from this is to have the comment reward fully standalone, while easy to integrate with the kernel.\r\nIf we do something that handles the comment it means each and every module has to send it there and that module should understand every different content / format we send which would be way easier if the module itself handled its own comments, formatting wise.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036385985","commentType":"ISSUE_AUTHOR","score":{"reward":12.124,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":134,"wordValue":0.1,"result":2.38},"readability":{"fleschKincaid":53.47860696517415,"syllables":207,"sentences":6,"score":0.9347860696517415},"multiplier":1,"relevance":0.7}},{"id":2036411811,"content":"But then how do we consider the formatting of that output?\r\nPractical case: we want to post a comment when a user queries a wallet. That comment is 'user name': 'wallet 0x0'\r\nKernel calls the comment plugin, saying that it wants a comment to be posted. Should the Kernel send the rendering it wants, should the comment plugin transform the data to HTML?\r\nThen, comment-reward wants to post the results. Should ask the Kernel to call the comment plugin, but then formatting is different. Should the Kernel notify the comment plugin that it wants a different output formatting? Should the Kernel compute beforehand the HTML and send it to the comment plugin?\r\nMight be something I don't grasp there. Because I do understand your use case but it seems to be very deterministic on what is the purpose of the plugins which kinda defeats the purpose of having plugins, looks more like a monolithic approach to me","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036411811","commentType":"ISSUE_AUTHOR","score":{"reward":8.768,"formatting":{"content":{"p":{"score":0,"elementCount":5}},"result":0},"priority":4,"words":{"wordCount":159,"wordValue":0.1,"result":2.14},"readability":{"fleschKincaid":66.72291509433965,"syllables":233,"sentences":10,"score":0.9327708490566035},"multiplier":1,"relevance":0.8}},{"id":2036458775,"content":"This can work, but we skyrocket coupling and to me defeat purpose of plugins that should be unaware of each other. If any plugin has to understand the result of a previous plugin, it means these plugins have necessarily to co-exist so basically they become a single plugin with no purpose to split them.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036458775","commentType":"ISSUE_AUTHOR","score":{"reward":8.736,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":55,"wordValue":0.1,"result":2.46},"readability":{"fleschKincaid":49.715227272727276,"syllables":84,"sentences":2,"score":0.8971522727272727},"multiplier":1,"relevance":0.7}},{"id":2036535332,"content":"@pavlovcik To mitigate that that's why inside the comment reward itself I also integrated that `Module` principle so code is not coupled tightly and easy to build on. There is as usual pros and cons to both approaches (splitting or not) but biggest pro is that comments get evaluated once in the same spot, so we save calls to OpenAPI and speed up the process. Also makes it only one configuration file in one location. We need to think about our best options there.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036535332","commentType":"ISSUE_AUTHOR","score":{"reward":10.88,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":84,"wordValue":0.1,"result":2.64},"readability":{"fleschKincaid":63.65571428571431,"syllables":121,"sentences":4,"score":0.9634428571428569},"multiplier":1,"relevance":0.8}},{"id":2051094255,"content":"I realized that to carry this task properly we need to handle flags for comment more delicately as they only indicate if the comment is `ISSUE | REVIEW` with the level `MEMBER | CONTRIBUTOR` etc. but doesn't specify if it is from a task, a specification and so on. Tags should be added to the config properly as well.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2051094255","commentType":"ISSUE_AUTHOR","score":{"reward":11.268,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":54,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":66.36500000000001,"syllables":78,"sentences":3,"score":0.9363499999999999},"multiplier":1,"relevance":0.9}},{"id":2054424028,"content":"Agreed, I think currently there are 3 possible things to annotate on the comments:\r\n- `SPECIFICATION` for the issue itself, `TASK` for the related PR fixing it, or simply `COMMENT`\r\n- `MEMBER` or `CONTRIBUTOR` for the status of the member\r\n- `REVIEW` or `ISSUE` for where the comment was added\r\nI think this shall cover all cases.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2054424028","commentType":"ISSUE_AUTHOR","score":{"reward":13.16,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3}},"result":0.3},"priority":4,"words":{"wordCount":47,"wordValue":0.1,"result":2.33},"readability":{"fleschKincaid":43.93000000000001,"syllables":64,"sentences":1,"score":0.8393},"multiplier":1,"relevance":1}},{"id":2218638141,"content":"In the v1 of the Ubiquibot, when a result gets evaluated, a recap is posted to the related issue with a summary and details of the rewards as well as the link to the rewards themselves Example: https://github.com/ubiquity/cloudflare-deploy-action/issues/9#issuecomment-2028623754\r\nThe same logic should be applied in the v2 version by creating a new Module responsible to post that comment. This module will receive a similar input than the one mentioned [here](https://github.com/ubiquity/cloudflare-deploy-action/issues/9#issuecomment-2028623754)\r\nThe module should be:\r\n- possible to enable / disable\r\n- eventually configurable (what data to show / hide)\r\n- coming with tests","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.82,"formatting":{"content":{"p":{"score":0,"elementCount":6},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1.3},"priority":1,"words":{"wordCount":87,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":35.555884353741504,"syllables":160,"sentences":3,"score":0.7555588435374151},"multiplier":1,"relevance":1}},{"id":1822452078,"content":"Resolves #5 \r\nDepends on #8 \r\nReviews looks gigantic but it's only due to the API snapshots I promise.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12","commentType":"PULL_SPECIFICATION","score":{"reward":0.915,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":1,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":67.32894736842107,"syllables":27,"sentences":1,"score":0.9267105263157893},"multiplier":1,"relevance":0.5}},{"id":2056635516,"content":"Example of successful comment posting with results:\r\nhttps://github.com/Meniole/test/issues/1#issuecomment-2056572986","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#issuecomment-2056635516","commentType":"PULL_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":7,"wordValue":0,"result":0},"readability":{"fleschKincaid":40.09,"syllables":30,"sentences":2,"score":0.8009000000000001},"multiplier":0,"relevance":0.7}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 515.199 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>400</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.82</td></tr><tr><td>Issue</td><td>Comment</td><td>9</td><td>109.464</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>0.915</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5\" target=\"_blank\" rel=\"noopener\">In the v1 of the Ubiquibot, when a result gets evaluated, a reca&hellip;</a></h6></td><td><details><summary>3.93</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.3&#13;regex:&#13;  wordCount: 87&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>1</td><td>1</td><td>4.82</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2033404518\" target=\"_blank\" rel=\"noopener\">This needs https://github.com/ubiquibot/conversation-rewards/pul&hellip;</a></h6></td><td><details><summary>3.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.7</td><td>4</td><td>11.788</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036174312\" target=\"_blank\" rel=\"noopener\">To me 1 is the most straightforward to do for few reasons:- th&hellip;</a></h6></td><td><details><summary>3.89</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.3&#13;regex:&#13;  wordCount: 104&#13;  wordValue: 0.1&#13;  result: 2.59&#13;</pre></details></td><td>0.9</td><td>4</td><td>18.18</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036367126\" target=\"_blank\" rel=\"noopener\">I think each plugin should output JSON not html as it is not rel&hellip;</a></h6></td><td><details><summary>3.6</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 102&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>0.8</td><td>4</td><td>14.56</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036385985\" target=\"_blank\" rel=\"noopener\">If you want to manipulate and convey data, HTML really is not ma&hellip;</a></h6></td><td><details><summary>3.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 134&#13;  wordValue: 0.1&#13;  result: 2.38&#13;</pre></details></td><td>0.7</td><td>4</td><td>12.124</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036411811\" target=\"_blank\" rel=\"noopener\">But then how do we consider the formatting of that output?Prac&hellip;</a></h6></td><td><details><summary>2.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;  result: 0&#13;regex:&#13;  wordCount: 159&#13;  wordValue: 0.1&#13;  result: 2.14&#13;</pre></details></td><td>0.8</td><td>4</td><td>8.768</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036458775\" target=\"_blank\" rel=\"noopener\">This can work, but we skyrocket coupling and to me defeat purpos&hellip;</a></h6></td><td><details><summary>2.46</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 55&#13;  wordValue: 0.1&#13;  result: 2.46&#13;</pre></details></td><td>0.7</td><td>4</td><td>8.736</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036535332\" target=\"_blank\" rel=\"noopener\">@pavlovcik To mitigate that that's why inside the comment reward&hellip;</a></h6></td><td><details><summary>2.64</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 84&#13;  wordValue: 0.1&#13;  result: 2.64&#13;</pre></details></td><td>0.8</td><td>4</td><td>10.88</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2051094255\" target=\"_blank\" rel=\"noopener\">I realized that to carry this task properly we need to handle fl&hellip;</a></h6></td><td><details><summary>2.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 54&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>0.9</td><td>4</td><td>11.268</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2054424028\" target=\"_blank\" rel=\"noopener\">Agreed, I think currently there are 3 possible things to annotat&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;  result: 0.3&#13;regex:&#13;  wordCount: 47&#13;  wordValue: 0.1&#13;  result: 2.33&#13;</pre></details></td><td>1</td><td>4</td><td>13.16</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12\" target=\"_blank\" rel=\"noopener\">Resolves #5 Depends on #8 Reviews looks gigantic but it's on&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.915</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#issuecomment-2056635516\" target=\"_blank\" rel=\"noopener\">Example of successful comment posting with results:https://git&hellip;</a></h6></td><td><details><summary>1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>4</td><td>0</td></tr></tbody></table></details>"},"0x4007":{"total":243.682,"userId":4975670,"comments":[{"id":2030164289,"content":"@whilefoo rfc on how we can deal with comment outputs. Perhaps we can have a standard recognized property on the output interface? Then the kernel can decide whether to pass it around or something. \r\n```ts\r\ninterface PluginOutput {\r\n  comment: string; // html comment\r\n  rewards: Rewards; // { \"whilefoo\": \"500\", \"token\": \"0x0\" } etc\r\n}\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2030164289","commentType":"ISSUE_COLLABORATOR","score":{"reward":9.324,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":63.455196078431385,"syllables":53,"sentences":3,"score":0.9654480392156861},"multiplier":1,"relevance":0.9}},{"id":2033488255,"content":"I think you should fork from and overtake that second pull due to us being behind schedule","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2033488255","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.992,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":75.12117647058825,"syllables":23,"sentences":1,"score":0.8487882352941175},"multiplier":1,"relevance":0.3}},{"id":2036355445,"content":"I think the most pure architecture would be that plugins can NOT inherit (write) authentication (only read if possible) of the kernel. As a consequence, no plugin should be able to post directly any issue. Ideally it should only be the kernel with a direct interface to issues. Plugins should just output comment HTML and the kernel can post it all in a single comment at the end of the webhook event invocation chain.\r\nCould be interesting to have a dedicated plugin to handle commenting, but because this seems like such an essential capability, I would more carefully consider the pros/cons of including this within the kernel. \r\n- On one hand, I really like the idea of making the kernel as pure and lean as possible\r\n- On the other hand there are practical considerations that if every plugin standard output interface includes `comment:` and then we don't have the `comment` capability available (the comment plugin is not included in the config) then why is this a standard output property required on every plugin?\r\nI'm not concerned about latency now. Besides we can port any plugin to Cloudflare Workers (or combine several inside a single Worker) when we are ready to fix latency issues. To be honest though, except for setting labels, I have no problem with latency (like with permit generation) so there's no need to overengineer yet. I also love the GitHub Actions logs being available for easy debugging, and the fact that they are super generous with the compute. \r\nGiven the entire conversation and all the considerations, I definitely think we should do option 3. \r\nThis separates concerns the best, which will allow our plugin ecosystem to grow the fastest.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036355445","commentType":"ISSUE_COLLABORATOR","score":{"reward":5.776,"formatting":{"content":{"p":{"score":0,"elementCount":7},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":4,"words":{"wordCount":283,"wordValue":0.1,"result":1.01},"readability":{"fleschKincaid":46.282368963486476,"syllables":457,"sentences":12,"score":0.8628236896348648},"multiplier":1,"relevance":0.95}},{"id":2036370459,"content":"I know JSON makes things more complicated than it needs to be with serialization/transport. Then we have problems like this https://github.com/ubiquibot/conversation-rewards/issues/18. If the comment property is ONLY meant to be used for GitHub comments, then transporting HTML only is the most sensible. Besides, there's no other metadata thats necessary within the `comment` property, which is the main point of sending a JSON object (it has multiple properties.) \r\nAs a somewhat side note: there should also not be any variables inside of the HTML. We could look it as like server-side-rendering (or in this case, plugin-side-rendering) handle producing the final HTML output and then output it as a single string of html entities. \r\nWe are currently using `mdast` in `@ubiquibot/comment-incentives` to generate virtual DOMs. No `window` needed.\r\nIf we agree that this is considered as technical debt, and that we are accruing this so that we can get back on schedule, ok.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036370459","commentType":"ISSUE_COLLABORATOR","score":{"reward":14.904,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":152,"wordValue":0.1,"result":2.21},"readability":{"fleschKincaid":63.69500000000001,"syllables":240,"sentences":10,"score":0.96305},"multiplier":1,"relevance":0.9}},{"id":2036393020,"content":"Going back to my \"plugin-side-rendering\" mention, the data manipulation happens inside of the logic of the plugin. Then when the plugin is finally done with all of its compute, it emits a single string in the `comment` output property. This string is the final, rendered HTML. \r\nThe `comment` output is not intended to be consumed by other plugins. In most cases, the kernel will concatenate all the `comment` outputs from every plugin and post a single comment at the end. Plugins will consume the `metadata` property output which will include raw values to work with. I forget where I originally proposed this, but imagine something like:\r\n```typescript\r\ntype HtmlString = string;\r\ntype RequestedPermits = { username: string; amount: string; token: string; }[]\r\ninterface PluginOutput {\r\n   metadata: Record<string, any>;\r\n   comment: HtmlString;\r\n   rewards: RequestedPermits;\r\n}\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036393020","commentType":"ISSUE_COLLABORATOR","score":{"reward":12.06,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":104,"wordValue":0.1,"result":2.59},"readability":{"fleschKincaid":61.601153846153835,"syllables":160,"sentences":7,"score":0.9839884615384616},"multiplier":1,"relevance":0.9}},{"id":2036433646,"content":"The proposed `comment` output is intended for ease of composability for MOST situations, basically that the output from one plugin would just be appended to the final rendered comment. For simple plugin configurations (plugins not modifying the output results of others) this seems like straightforward architecture. \r\nHowever, as we know, there will be situations where a subsequent plugin will consider the results of a previous plugin, which means it would need to change the comment that is rendered. \r\nIn this situation the subsequent plugin should clobber the output of the previous plugin. It is now clear to be that this will be a new challenge to express to the kernel that it should ignore the comment output of a previous plugin. I suppose it would be straightforward in the metadata using the plugin ID i.e. `{ \"silences\": [\"ubiquibot/conversation-rewards\"] }`.\r\nI think that comments should be handled from within the kernel. There should not be a separate comment plugin. Read my explanation [here](https://github.com/ubiquibot/conversation-rewards/issues/5#issuecomment-2036355445). \r\n### Inputs\r\nFor completeness of my [previous comment](https://github.com/ubiquibot/conversation-rewards/issues/5#issuecomment-2036393020):\r\n```typescript\r\ntype PluginId = string; // i.e. `ubiquibot/conversation-rewards` `ubiquibot/assistive-pricing`\r\ninterface PluginInput {\r\n   metadata: Record<PluginId, any>;\r\n   context: GitHubEventContext;\r\n}\r\n```\r\nNotice that we should not pass in the HTML of other plugins. Instead, just the metadata (\"computed\") values from the previous plugins.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036433646","commentType":"ISSUE_COLLABORATOR","score":{"reward":18.962,"formatting":{"content":{"p":{"score":0,"elementCount":6},"h3":{"score":1,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":2},"priority":4,"words":{"wordCount":187,"wordValue":0.1,"result":1.86},"readability":{"fleschKincaid":58.01043003565064,"syllables":294,"sentences":12,"score":0.9801043003565064},"multiplier":1,"relevance":0.95}},{"id":2036516869,"content":"I understand your concern and I would need to put more thought into composability. Maybe the `comment` proposal is bad after all due to your point. It's only useful with simple plugins, but for more complex ones your point is valid. \r\nI need help to think through how any partner in the future can create new plugins that modify \r\n1. permit reward amounts \r\n2. XP reward amounts\r\nI don't like the idea of having a single monolithic rewards generation plugin that wraps all the ways possible to compute rewards (i.e. time estimation, comment rewards, review rewards etc)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036516869","commentType":"ISSUE_COLLABORATOR","score":{"reward":13.14,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":4,"words":{"wordCount":97,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":61.34542096219934,"syllables":148,"sentences":6,"score":0.9865457903780066},"multiplier":1,"relevance":0.9}},{"id":2053332029,"content":"I see, so you're suggesting that we must annotate each comment as well in order to properly handle the scoring at the end?\nOff hand I think there's:\n1. Specification \n2. Issue comment\n3. Pull request comment (a normal comment on a pull request, not related to posting a \"review\"\n4. Pull request review comment (associated with a \"review state\" I.e. approved, left comments, requested changes)\nI suppose we need a better naming convention for the pull related ones. They are considered as separate entities according to the GitHub api. They require different methods to obtain both types.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2053332029","commentType":"ISSUE_COLLABORATOR","score":{"reward":12.544,"formatting":{"content":{"p":{"score":0,"elementCount":1},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":4}},"result":0.4},"priority":4,"words":{"wordCount":97,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":59.60109106529211,"syllables":150,"sentences":6,"score":0.9960109106529211},"multiplier":1,"relevance":0.8}},{"id":2055783331,"content":"Consider calling it \"contributor\" and \"collaborator\" as that is how it is presented on the GitHub APIs as I recall. \nAlso I think you forgot about the \"review comments\"","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2055783331","commentType":"ISSUE_COLLABORATOR","score":{"reward":6.608,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":52.08991379310348,"syllables":48,"sentences":2,"score":0.9208991379310347},"multiplier":1,"relevance":0.7}},{"id":2007841578,"content":"Nice code quality per usual","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#pullrequestreview-2007841578","commentType":"PULL_COLLABORATOR","score":{"reward":0.544,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":66.40000000000003,"syllables":8,"sentences":1,"score":0.9359999999999996},"multiplier":1,"relevance":0.2}},{"id":1569964797,"content":"\"Comment\" implication isn't clear to me","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1569964797","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -27,29 +27,39 @@ formattingEvaluator:\n     td: 1\n     hr: 0\n   multipliers:\n-    - type: [ISSUE, ISSUER]:\n+    - type: [ISSUE, ISSUER, TASK]:\n+      formattingMultiplier: 1\n+      wordValue: 0.1\n+    - type: [ISSUE, ISSUER, COMMENT]:\n       formattingMultiplier: 1\n       wordValue: 0.2\n-    - type: [ISSUE, ASSIGNEE]:\n+    - type: [ISSUE, ASSIGNEE, COMMENT]:","score":{"reward":2.464,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":66.7871428571429,"syllables":11,"sentences":1,"score":0.9321285714285711},"multiplier":1,"relevance":0.7}},{"id":1569970517,"content":"I've always been anti empty string for variable declarations. It's led to too many problems with other less experienced developers. I wish for a linter rule to flag these as a consequence. \nConsider initializing an empty array as a buffer and then joining it at the end.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1569970517","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,212 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import { stringify } from \"yaml\";\n+import configuration from \"../configuration/config-reader\";\n+import githubCommentConfig, { GithubCommentConfiguration } from \"../configuration/github-comment-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { CommentType, IssueActivity } from \"../issue-activity\";\n+import { parseGitHubUrl } from \"../start\";\n+import { getPayoutConfigByNetworkId } from \"../types/payout\";\n+import program from \"./command-line\";\n+import { GithubCommentScore, Module, Result } from \"./processor\";\n+\n+/**\n+ * Posts a GitHub comment according to the given results.\n+ */\n+export class GithubCommentModule implements Module {\n+  private readonly _configuration: GithubCommentConfiguration = configuration.githubComment;\n+  private readonly _debugFilePath = \"./output.html\";\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    let body = \"\";","score":{"reward":9.824,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":49,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":58.00533163265308,"syllables":79,"sentences":4,"score":0.9800533163265308},"multiplier":1,"relevance":0.8}},{"id":1569971792,"content":"Our RPCs don't work anymore","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1569971792","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,22 @@\n+// available tokens for payouts\n+export const PAYMENT_TOKEN_PER_NETWORK: Record<string, { rpc: string; token: string; symbol: string }> = {\n+  \"1\": {\n+    rpc: \"https://rpc-bot.ubq.fi/v1/mainnet\",","score":{"reward":2.664,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":87.94500000000002,"syllables":8,"sentences":1,"score":0.7205499999999998},"multiplier":1,"relevance":0.9}},{"id":1570133378,"content":"Yes consider changing them to verbs \n`ISSUER`\n`COMMENTED`\nI'm not 100% the best way to name all of them I have to look at the full list","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1570133378","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -27,29 +27,39 @@ formattingEvaluator:\n     td: 1\n     hr: 0\n   multipliers:\n-    - type: [ISSUE, ISSUER]:\n+    - type: [ISSUE, ISSUER, TASK]:\n+      formattingMultiplier: 1\n+      wordValue: 0.1\n+    - type: [ISSUE, ISSUER, COMMENT]:\n       formattingMultiplier: 1\n       wordValue: 0.2\n-    - type: [ISSUE, ASSIGNEE]:\n+    - type: [ISSUE, ASSIGNEE, COMMENT]:","score":{"reward":6.816,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":86.08346153846156,"syllables":29,"sentences":1,"score":0.7391653846153844},"multiplier":1,"relevance":0.8}},{"id":1570159594,"content":"`[].join(\"\");` yields an empty string as well if there's nothing in the array.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1570159594","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,212 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import { stringify } from \"yaml\";\n+import configuration from \"../configuration/config-reader\";\n+import githubCommentConfig, { GithubCommentConfiguration } from \"../configuration/github-comment-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { CommentType, IssueActivity } from \"../issue-activity\";\n+import { parseGitHubUrl } from \"../start\";\n+import { getPayoutConfigByNetworkId } from \"../types/payout\";\n+import program from \"./command-line\";\n+import { GithubCommentScore, Module, Result } from \"./processor\";\n+\n+/**\n+ * Posts a GitHub comment according to the given results.\n+ */\n+export class GithubCommentModule implements Module {\n+  private readonly _configuration: GithubCommentConfiguration = configuration.githubComment;\n+  private readonly _debugFilePath = \"./output.html\";\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    let body = \"\";","score":{"reward":3.192,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":89.51692307692309,"syllables":16,"sentences":1,"score":0.704830769230769},"multiplier":1,"relevance":0.6}},{"id":1570588757,"content":"Perhaps it will make the config more expressive if you add other properties?\nFor example \n```yml\nobserve:\n   views:\n      - ISSUE\n      - PULL\n   actors:\n      - ISSUER \n      - COLLABORATOR \n   actions: \n      - COMMENTED\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1570588757","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -27,29 +27,39 @@ formattingEvaluator:\n     td: 1\n     hr: 0\n   multipliers:\n-    - type: [ISSUE, ISSUER]:\n+    - type: [ISSUE, ISSUER, TASK]:\n+      formattingMultiplier: 1\n+      wordValue: 0.1\n+    - type: [ISSUE, ISSUER, COMMENTED]:\n       formattingMultiplier: 1\n       wordValue: 0.2\n-    - type: [ISSUE, ASSIGNEE]:\n+    - type: [ISSUE, ASSIGNEE, COMMENTED]:\n       formattingMultiplier: 0\n       wordValue: 0\n-    - type: [ISSUE, COLLABORATOR]:\n+    - type: [ISSUE, COLLABORATOR, COMMENTED]:","score":{"reward":5.616,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":63.86250000000001,"syllables":24,"sentences":2,"score":0.9613749999999999},"multiplier":1,"relevance":0.9}},{"id":1570589892,"content":"What is this @link syntax","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1570589892","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -19,12 +19,42 @@ import {\n } from \"./start\";\n \n export enum CommentType {\n+  /**\n+   * Review related item\n+   */\n   REVIEW = 0b1,\n+  /**\n+   * Issue related item\n+   */\n   ISSUE = 0b10,\n+  /**\n+   * User assigned to the {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n   ASSIGNEE = 0b100,\n+  /**\n+   * The author of the {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n   ISSUER = 0b1000,\n+  /**\n+   * A user that is part of the organization or owner of the repo\n+   */\n   COLLABORATOR = 0b10000,\n+  /**\n+   * A user that is NOT part of the organization nor owner of the repo\n+   */\n   CONTRIBUTOR = 0b100000,\n+  /**\n+   * A user comment action on a {@link CommentType.ISSUE} or {@link CommentType.REVIEW}","score":{"reward":1.932,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":100.24000000000002,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":1570591425,"content":"Just noticed the bit wise operators 1337 code","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1570591425","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -73,12 +103,17 @@ export class IssueActivity {\n     self: GitHubPullRequest | GitHubIssue | null\n   ) {\n     let ret = 0;\n-    ret |= \"pull_request_review_id\" in comment ? CommentType.REVIEW : CommentType.ISSUE;\n+    ret |= \"pull_request_review_id\" in comment || \"draft\" in comment ? CommentType.REVIEW : CommentType.ISSUE;","score":{"reward":3.072,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":71.81500000000001,"syllables":12,"sentences":1,"score":0.8818499999999999},"multiplier":1,"relevance":0.8}},{"id":1570596007,"content":"It might seem convoluted but I think that it condenses the logic to coerce everything into a string as expected. This is a suggestion to be proactive when we set up the empty string linter one day. \nFor example if you `push` any element into the array (compared to `+=`) when you join they should render as expected.  \n```js \n[ null, null ].join(\"\"); // \"\"\nnull += null; // 0 I think?\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1570596007","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,212 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import { stringify } from \"yaml\";\n+import configuration from \"../configuration/config-reader\";\n+import githubCommentConfig, { GithubCommentConfiguration } from \"../configuration/github-comment-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { CommentType, IssueActivity } from \"../issue-activity\";\n+import { parseGitHubUrl } from \"../start\";\n+import { getPayoutConfigByNetworkId } from \"../types/payout\";\n+import program from \"./command-line\";\n+import { GithubCommentScore, Module, Result } from \"./processor\";\n+\n+/**\n+ * Posts a GitHub comment according to the given results.\n+ */\n+export class GithubCommentModule implements Module {\n+  private readonly _configuration: GithubCommentConfiguration = configuration.githubComment;\n+  private readonly _debugFilePath = \"./output.html\";\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    let body = \"\";","score":{"reward":8.82,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":56,"wordValue":0.1,"result":2.47},"readability":{"fleschKincaid":68.54190476190477,"syllables":79,"sentences":3,"score":0.9145809523809523},"multiplier":1,"relevance":0.7}},{"id":1573720820,"content":"I am aware of its purpose. I am proposing to make the config more expressive so that its more intuitive to work with.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1573720820","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -27,29 +27,39 @@ formattingEvaluator:\n     td: 1\n     hr: 0\n   multipliers:\n-    - type: [ISSUE, ISSUER]:\n+    - type: [ISSUE, ISSUER, TASK]:\n+      formattingMultiplier: 1\n+      wordValue: 0.1\n+    - type: [ISSUE, ISSUER, COMMENTED]:\n       formattingMultiplier: 1\n       wordValue: 0.2\n-    - type: [ISSUE, ASSIGNEE]:\n+    - type: [ISSUE, ASSIGNEE, COMMENTED]:\n       formattingMultiplier: 0\n       wordValue: 0\n-    - type: [ISSUE, COLLABORATOR]:\n+    - type: [ISSUE, COLLABORATOR, COMMENTED]:","score":{"reward":4.824,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":77.45815217391308,"syllables":32,"sentences":2,"score":0.8254184782608692},"multiplier":1,"relevance":0.6}},{"id":1573722731,"content":"Will you use array syntax?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1573722731","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,212 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import { stringify } from \"yaml\";\n+import configuration from \"../configuration/config-reader\";\n+import githubCommentConfig, { GithubCommentConfiguration } from \"../configuration/github-comment-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { CommentType, IssueActivity } from \"../issue-activity\";\n+import { parseGitHubUrl } from \"../start\";\n+import { getPayoutConfigByNetworkId } from \"../types/payout\";\n+import program from \"./command-line\";\n+import { GithubCommentScore, Module, Result } from \"./processor\";\n+\n+/**\n+ * Posts a GitHub comment according to the given results.\n+ */\n+export class GithubCommentModule implements Module {\n+  private readonly _configuration: GithubCommentConfiguration = configuration.githubComment;\n+  private readonly _debugFilePath = \"./output.html\";\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    let body = \"\";","score":{"reward":1.3,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":83.32000000000004,"syllables":7,"sentences":1,"score":0.7667999999999996},"multiplier":1,"relevance":0.5}},{"id":1573723262,"content":"This regex appears to convert repeating spaces i.e. `\"   \"` to a single space `\" \"` what is the purpose of this?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1573723262","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,216 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import { stringify } from \"yaml\";\n+import configuration from \"../configuration/config-reader\";\n+import githubCommentConfig, { GithubCommentConfiguration } from \"../configuration/github-comment-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { CommentType, IssueActivity } from \"../issue-activity\";\n+import { parseGitHubUrl } from \"../start\";\n+import { getPayoutConfigByNetworkId } from \"../types/payout\";\n+import program from \"./command-line\";\n+import { GithubCommentScore, Module, Result } from \"./processor\";\n+\n+/**\n+ * Posts a GitHub comment according to the given results.\n+ */\n+export class GithubCommentModule implements Module {\n+  private readonly _configuration: GithubCommentConfiguration = configuration.githubComment;\n+  private readonly _debugFilePath = \"./output.html\";\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    let body = \"\";\n+\n+    for (const [key, value] of Object.entries(result)) {\n+      result[key].evaluationCommentHtml = this._generateHtml(key, value);\n+      body += result[key].evaluationCommentHtml;\n+    }\n+    if (this._configuration.debug) {\n+      fs.writeFileSync(this._debugFilePath, body);\n+    }\n+    if (this._configuration.post) {\n+      try {\n+        const octokit = getOctokitInstance();\n+        const { owner, repo, issue_number } = parseGitHubUrl(program.opts().issue);\n+\n+        await octokit.issues.createComment({\n+          body,\n+          repo,\n+          owner,\n+          issue_number,\n+        });\n+      } catch (e) {\n+        console.error(`Could not post GitHub comment: ${e}`);\n+      }\n+    }\n+    return Promise.resolve(result);\n+  }\n+\n+  get enabled(): boolean {\n+    if (!Value.Check(githubCommentConfig, this._configuration)) {\n+      console.warn(\"Invalid configuration detected for GithubContentModule, disabling.\");\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  _generateHtml(username: string, result: Result[0]) {\n+    const sorted = result.comments?.reduce<{\n+      issues: { task: GithubCommentScore | null; comments: GithubCommentScore[] };\n+      reviews: GithubCommentScore[];\n+    }>(\n+      (acc, curr) => {\n+        if (curr.type & CommentType.ISSUE) {\n+          if (curr.type & CommentType.TASK) {\n+            acc.issues.task = curr;\n+          } else {\n+            acc.issues.comments.push(curr);\n+          }\n+        } else if (curr.type & CommentType.REVIEW) {\n+          acc.reviews.push(curr);\n+        }\n+        return acc;\n+      },\n+      { issues: { task: null, comments: [] }, reviews: [] }\n+    );\n+\n+    function createContributionRows() {\n+      const content: string[] = [];\n+\n+      if (!sorted) {\n+        return content.join(\"\");\n+      }\n+\n+      function generateContributionRow(\n+        view: string,\n+        contribution: string,\n+        count: number,\n+        reward: number | Decimal | undefined\n+      ) {\n+        return `\n+          <tr>\n+            <td>${view}</td>\n+            <td>${contribution}</td>\n+            <td>${count}</td>\n+            <td>${reward || \"-\"}</td>\n+          </tr>`;\n+      }\n+\n+      if (result.task?.reward) {\n+        content.push(generateContributionRow(\"Issue\", \"Task\", 1, result.task.reward));\n+      }\n+      if (sorted.issues.task) {\n+        content.push(generateContributionRow(\"Issue\", \"Specification\", 1, sorted.issues.task.score?.reward));\n+      }\n+      if (sorted.issues.comments.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Issue\",\n+            \"Comment\",\n+            sorted.issues.comments.length,\n+            sorted.issues.comments.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))\n+          )\n+        );\n+      }\n+      if (sorted.reviews.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Review\",\n+            \"Comment\",\n+            sorted.reviews.length,\n+            sorted.reviews.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))\n+          )\n+        );\n+      }\n+      return content.join(\"\");\n+    }\n+\n+    function createIncentiveRows() {\n+      const content: string[] = [];\n+\n+      if (!sorted) {\n+        return content.join(\"\");\n+      }\n+\n+      function buildIncentiveRow(commentScore: GithubCommentScore) {\n+        // Properly escape carriage returns for HTML rendering\n+        const formatting = stringify(commentScore.score?.formatting?.content).replace(/[\\n\\r]/g, \"&#13;\");\n+        return `\n+          <tr>\n+            <td>\n+              <h6>\n+                <a href=\"${commentScore.url}\" target=\"_blank\" rel=\"noopener\">${commentScore.content.replace(/(.{64})..+/, \"$1…\")}</a>\n+              </h6>\n+            </td>\n+            <td>\n+            <details>\n+              <summary>\n+                ${Object.values(commentScore.score?.formatting?.content || {}).reduce((acc, curr) => {\n+                  return acc.add(curr.score * curr.count);\n+                }, new Decimal(0))}\n+              </summary>\n+              <pre>${formatting}</pre>\n+             </details>\n+            </td>\n+            <td>${commentScore.score?.relevance || \"-\"}</td>\n+            <td>${commentScore.score?.reward || \"-\"}</td>\n+          </tr>`;\n+      }\n+\n+      for (const issueComment of sorted.issues.comments) {\n+        content.push(buildIncentiveRow(issueComment));\n+      }\n+      for (const reviewComment of sorted.reviews) {\n+        content.push(buildIncentiveRow(reviewComment));\n+      }\n+      return content.join(\"\");\n+    }\n+\n+    return `\n+    <details>\n+      <summary>\n+        <b>\n+          <h3>\n+            <a href=\"${result.permitUrl}\" target=\"_blank\" rel=\"noopener\">\n+              [ ${result.total} ${getPayoutConfigByNetworkId(program.opts().evmNetworkId).symbol} ]\n+            </a>\n+          </h3>\n+          <h6>\n+            @${username}\n+          </h6>\n+        </b>\n+      </summary>\n+      <h6>Contributions Overview</h6>\n+      <table>\n+        <thead>\n+          <tr>\n+            <th>View</th>\n+            <th>Contribution</th>\n+            <th>Count</th>\n+            <th>Reward</th>\n+          </tr>\n+        </thead>\n+        <tbody>\n+          ${createContributionRows()}\n+        </tbody>\n+      </table>\n+      <h6>Conversation Incentives</h6>\n+      <table>\n+        <thead>\n+          <tr>\n+            <th>Comment</th>\n+            <th>Formatting</th>\n+            <th>Relevance</th>\n+            <th>Reward</th>\n+          </tr>\n+        </thead>\n+        <tbody>\n+          ${createIncentiveRows()}\n+        </tbody>\n+      </table>\n+    </details>\n+    `\n+      .replace(/\\s+/g, \" \")","score":{"reward":5.6,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":84.63824561403509,"syllables":26,"sentences":3,"score":0.7536175438596492},"multiplier":1,"relevance":0.8}},{"id":1573723774,"content":"This doesn't seem right. Network ID 1 is mainnet. The RPC clearly is for gnosis chain. Perhaps try and find a nice mainnet RPC?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1573723774","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,22 @@\n+// available tokens for payouts\n+export const PAYMENT_TOKEN_PER_NETWORK: Record<string, { rpc: string; token: string; symbol: string }> = {\n+  \"1\": {\n+    rpc: \"https://rpc.gnosischain.com\",\n+    token: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n+    symbol: \"DAI\",\n+  },","score":{"reward":7.308,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":95.58725000000001,"syllables":31,"sentences":4,"score":0.6441274999999999},"multiplier":1,"relevance":0.9}},{"id":1573724498,"content":"Seems like not a very useful mock.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1573724498","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":1.032,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":78.87285714285717,"syllables":10,"sentences":1,"score":0.8112714285714283},"multiplier":1,"relevance":0.3}},{"id":1573724853,"content":"Same here","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1573724853","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.264,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":120.20500000000001,"syllables":2,"sentences":1,"score":1},"multiplier":1,"relevance":0.2}},{"id":1574086028,"content":"The token address indeed represents DAI on mainnet.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574086028","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,22 @@\n+// available tokens for payouts\n+export const PAYMENT_TOKEN_PER_NETWORK: Record<string, { rpc: string; token: string; symbol: string }> = {\n+  \"1\": {\n+    rpc: \"https://rpc.gnosischain.com\",\n+    token: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n+    symbol: \"DAI\",\n+  },","score":{"reward":1.94,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":50.66500000000002,"syllables":14,"sentences":1,"score":0.9066500000000002},"multiplier":1,"relevance":0.5}},{"id":1574086293,"content":"@gentlementlegen rfc","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574086293","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,216 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import { stringify } from \"yaml\";\n+import configuration from \"../configuration/config-reader\";\n+import githubCommentConfig, { GithubCommentConfiguration } from \"../configuration/github-comment-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { CommentType, IssueActivity } from \"../issue-activity\";\n+import { parseGitHubUrl } from \"../start\";\n+import { getPayoutConfigByNetworkId } from \"../types/payout\";\n+import program from \"./command-line\";\n+import { GithubCommentScore, Module, Result } from \"./processor\";\n+\n+/**\n+ * Posts a GitHub comment according to the given results.\n+ */\n+export class GithubCommentModule implements Module {\n+  private readonly _configuration: GithubCommentConfiguration = configuration.githubComment;\n+  private readonly _debugFilePath = \"./output.html\";\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    let body = \"\";\n+\n+    for (const [key, value] of Object.entries(result)) {\n+      result[key].evaluationCommentHtml = this._generateHtml(key, value);\n+      body += result[key].evaluationCommentHtml;\n+    }\n+    if (this._configuration.debug) {\n+      fs.writeFileSync(this._debugFilePath, body);\n+    }\n+    if (this._configuration.post) {\n+      try {\n+        const octokit = getOctokitInstance();\n+        const { owner, repo, issue_number } = parseGitHubUrl(program.opts().issue);\n+\n+        await octokit.issues.createComment({\n+          body,\n+          repo,\n+          owner,\n+          issue_number,\n+        });\n+      } catch (e) {\n+        console.error(`Could not post GitHub comment: ${e}`);\n+      }\n+    }\n+    return Promise.resolve(result);\n+  }\n+\n+  get enabled(): boolean {\n+    if (!Value.Check(githubCommentConfig, this._configuration)) {\n+      console.warn(\"Invalid configuration detected for GithubContentModule, disabling.\");\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  _generateHtml(username: string, result: Result[0]) {\n+    const sorted = result.comments?.reduce<{\n+      issues: { task: GithubCommentScore | null; comments: GithubCommentScore[] };\n+      reviews: GithubCommentScore[];\n+    }>(\n+      (acc, curr) => {\n+        if (curr.type & CommentType.ISSUE) {\n+          if (curr.type & CommentType.TASK) {\n+            acc.issues.task = curr;\n+          } else {\n+            acc.issues.comments.push(curr);\n+          }\n+        } else if (curr.type & CommentType.REVIEW) {\n+          acc.reviews.push(curr);\n+        }\n+        return acc;\n+      },\n+      { issues: { task: null, comments: [] }, reviews: [] }\n+    );\n+\n+    function createContributionRows() {\n+      const content: string[] = [];\n+\n+      if (!sorted) {\n+        return content.join(\"\");\n+      }\n+\n+      function generateContributionRow(\n+        view: string,\n+        contribution: string,\n+        count: number,\n+        reward: number | Decimal | undefined\n+      ) {\n+        return `\n+          <tr>\n+            <td>${view}</td>\n+            <td>${contribution}</td>\n+            <td>${count}</td>\n+            <td>${reward || \"-\"}</td>\n+          </tr>`;\n+      }\n+\n+      if (result.task?.reward) {\n+        content.push(generateContributionRow(\"Issue\", \"Task\", 1, result.task.reward));\n+      }\n+      if (sorted.issues.task) {\n+        content.push(generateContributionRow(\"Issue\", \"Specification\", 1, sorted.issues.task.score?.reward));\n+      }\n+      if (sorted.issues.comments.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Issue\",\n+            \"Comment\",\n+            sorted.issues.comments.length,\n+            sorted.issues.comments.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))\n+          )\n+        );\n+      }\n+      if (sorted.reviews.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Review\",\n+            \"Comment\",\n+            sorted.reviews.length,\n+            sorted.reviews.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))\n+          )\n+        );\n+      }\n+      return content.join(\"\");\n+    }\n+\n+    function createIncentiveRows() {\n+      const content: string[] = [];\n+\n+      if (!sorted) {\n+        return content.join(\"\");\n+      }\n+\n+      function buildIncentiveRow(commentScore: GithubCommentScore) {\n+        // Properly escape carriage returns for HTML rendering\n+        const formatting = stringify(commentScore.score?.formatting?.content).replace(/[\\n\\r]/g, \"&#13;\");\n+        return `\n+          <tr>\n+            <td>\n+              <h6>\n+                <a href=\"${commentScore.url}\" target=\"_blank\" rel=\"noopener\">${commentScore.content.replace(/(.{64})..+/, \"$1…\")}</a>\n+              </h6>\n+            </td>\n+            <td>\n+            <details>\n+              <summary>\n+                ${Object.values(commentScore.score?.formatting?.content || {}).reduce((acc, curr) => {\n+                  return acc.add(curr.score * curr.count);\n+                }, new Decimal(0))}\n+              </summary>\n+              <pre>${formatting}</pre>\n+             </details>\n+            </td>\n+            <td>${commentScore.score?.relevance || \"-\"}</td>\n+            <td>${commentScore.score?.reward || \"-\"}</td>\n+          </tr>`;\n+      }\n+\n+      for (const issueComment of sorted.issues.comments) {\n+        content.push(buildIncentiveRow(issueComment));\n+      }\n+      for (const reviewComment of sorted.reviews) {\n+        content.push(buildIncentiveRow(reviewComment));\n+      }\n+      return content.join(\"\");\n+    }\n+\n+    return `\n+    <details>\n+      <summary>\n+        <b>\n+          <h3>\n+            <a href=\"${result.permitUrl}\" target=\"_blank\" rel=\"noopener\">\n+              [ ${result.total} ${getPayoutConfigByNetworkId(program.opts().evmNetworkId).symbol} ]\n+            </a>\n+          </h3>\n+          <h6>\n+            @${username}\n+          </h6>\n+        </b>\n+      </summary>\n+      <h6>Contributions Overview</h6>\n+      <table>\n+        <thead>\n+          <tr>\n+            <th>View</th>\n+            <th>Contribution</th>\n+            <th>Count</th>\n+            <th>Reward</th>\n+          </tr>\n+        </thead>\n+        <tbody>\n+          ${createContributionRows()}\n+        </tbody>\n+      </table>\n+      <h6>Conversation Incentives</h6>\n+      <table>\n+        <thead>\n+          <tr>\n+            <th>Comment</th>\n+            <th>Formatting</th>\n+            <th>Relevance</th>\n+            <th>Reward</th>\n+          </tr>\n+        </thead>\n+        <tbody>\n+          ${createIncentiveRows()}\n+        </tbody>\n+      </table>\n+    </details>\n+    `\n+      .replace(/\\s+/g, \" \")","score":{"reward":0.4,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":-48.994999999999976,"syllables":6,"sentences":1,"score":0},"multiplier":1,"relevance":0.4}},{"id":1575555444,"content":"Why not do it in the industry standard way? All values are denominated in `1e18` without floating point. \nAt the end, for rendering, we just need to divide by `1e18`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1575555444","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,217 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import { stringify } from \"yaml\";\n+import configuration from \"../configuration/config-reader\";\n+import githubCommentConfig, { GithubCommentConfiguration } from \"../configuration/github-comment-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { CommentType, IssueActivity } from \"../issue-activity\";\n+import { parseGitHubUrl } from \"../start\";\n+import { getPayoutConfigByNetworkId } from \"../types/payout\";\n+import program from \"./command-line\";\n+import { GithubCommentScore, Module, Result } from \"./processor\";\n+\n+/**\n+ * Posts a GitHub comment according to the given results.\n+ */\n+export class GithubCommentModule implements Module {\n+  private readonly _configuration: GithubCommentConfiguration = configuration.githubComment;\n+  private readonly _debugFilePath = \"./output.html\";\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    const bodyArray: (string | undefined)[] = [];\n+\n+    for (const [key, value] of Object.entries(result)) {\n+      result[key].evaluationCommentHtml = this._generateHtml(key, value);\n+      bodyArray.push(result[key].evaluationCommentHtml);\n+    }\n+    const body = bodyArray.join(\"\");\n+    if (this._configuration.debug) {\n+      fs.writeFileSync(this._debugFilePath, body);\n+    }\n+    if (this._configuration.post) {\n+      try {\n+        const octokit = getOctokitInstance();\n+        const { owner, repo, issue_number } = parseGitHubUrl(program.opts().issue);\n+\n+        await octokit.issues.createComment({\n+          body,\n+          repo,\n+          owner,\n+          issue_number,\n+        });\n+      } catch (e) {\n+        console.error(`Could not post GitHub comment: ${e}`);\n+      }\n+    }\n+    return Promise.resolve(result);\n+  }\n+\n+  get enabled(): boolean {\n+    if (!Value.Check(githubCommentConfig, this._configuration)) {\n+      console.warn(\"Invalid configuration detected for GithubContentModule, disabling.\");\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  _generateHtml(username: string, result: Result[0]) {\n+    const sorted = result.comments?.reduce<{\n+      issues: { task: GithubCommentScore | null; comments: GithubCommentScore[] };\n+      reviews: GithubCommentScore[];\n+    }>(\n+      (acc, curr) => {\n+        if (curr.type & CommentType.ISSUE) {\n+          if (curr.type & CommentType.TASK) {\n+            acc.issues.task = curr;\n+          } else {\n+            acc.issues.comments.push(curr);\n+          }\n+        } else if (curr.type & CommentType.REVIEW) {\n+          acc.reviews.push(curr);\n+        }\n+        return acc;\n+      },\n+      { issues: { task: null, comments: [] }, reviews: [] }\n+    );\n+\n+    function createContributionRows() {\n+      const content: string[] = [];\n+\n+      if (!sorted) {\n+        return content.join(\"\");\n+      }\n+\n+      function generateContributionRow(\n+        view: string,\n+        contribution: string,\n+        count: number,\n+        reward: number | Decimal | undefined\n+      ) {\n+        return `\n+          <tr>\n+            <td>${view}</td>\n+            <td>${contribution}</td>\n+            <td>${count}</td>\n+            <td>${reward || \"-\"}</td>\n+          </tr>`;\n+      }\n+\n+      if (result.task?.reward) {\n+        content.push(generateContributionRow(\"Issue\", \"Task\", 1, result.task.reward));\n+      }\n+      if (sorted.issues.task) {\n+        content.push(generateContributionRow(\"Issue\", \"Specification\", 1, sorted.issues.task.score?.reward));\n+      }\n+      if (sorted.issues.comments.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Issue\",\n+            \"Comment\",\n+            sorted.issues.comments.length,\n+            sorted.issues.comments.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))\n+          )\n+        );\n+      }\n+      if (sorted.reviews.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Review\",\n+            \"Comment\",\n+            sorted.reviews.length,\n+            sorted.reviews.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))","score":{"reward":7.232,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":76.50452380952383,"syllables":40,"sentences":3,"score":0.8349547619047617},"multiplier":1,"relevance":0.8}},{"id":1575556553,"content":"I'm not sure if I understand but task reward is if you completed the task (if you are an assignee when the issue is completed) and specification reward is if you write the specification (you are the original issue author)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1575556553","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -19,12 +19,42 @@ import {\n } from \"./start\";\n \n export enum CommentType {\n+  /**\n+   * Review related item\n+   */\n   REVIEW = 0b1,\n+  /**\n+   * Issue related item\n+   */\n   ISSUE = 0b10,\n+  /**\n+   * User assigned to the {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n   ASSIGNEE = 0b100,\n+  /**\n+   * The author of the {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n   ISSUER = 0b1000,\n+  /**\n+   * A user that is part of the organization or owner of the repo\n+   */\n   COLLABORATOR = 0b10000,\n+  /**\n+   * A user that is NOT part of the organization nor owner of the repo\n+   */\n   CONTRIBUTOR = 0b100000,\n+  /**\n+   * A user comment action on a {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n+  COMMENTED = 0b1000000,\n+  /**\n+   * Pull request opening item\n+   */\n+  TASK = 0b10000000,","score":{"reward":7.56,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":35.22487804878051,"syllables":63,"sentences":1,"score":0.7522487804878051},"multiplier":1,"relevance":0.7}},{"id":1576666170,"content":"Spoke a bit on this in dms. @whilefoo my intent with referring to GitHub Issues as \"tasks\" was to emphasize that its a funded, and recognized \"real project\" so I want to refer to them as \"tasks\" instead of just \"issues.\"\r\nSince we are dealing so heavily with the GitHub API, I figured that there is benefit to being specific about what words we are using. Sure we can load in all the GitHub issues on a repository, but not all of them will be funded and recognized. \r\nWe are only primarily concerned with working with \"tasks\" aka funded GitHub issues.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1576666170","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -19,12 +19,42 @@ import {\n } from \"./start\";\n \n export enum CommentType {\n+  /**\n+   * Review related item\n+   */\n   REVIEW = 0b1,\n+  /**\n+   * Issue related item\n+   */\n   ISSUE = 0b10,\n+  /**\n+   * User assigned to the {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n   ASSIGNEE = 0b100,\n+  /**\n+   * The author of the {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n   ISSUER = 0b1000,\n+  /**\n+   * A user that is part of the organization or owner of the repo\n+   */\n   COLLABORATOR = 0b10000,\n+  /**\n+   * A user that is NOT part of the organization nor owner of the repo\n+   */\n   CONTRIBUTOR = 0b100000,\n+  /**\n+   * A user comment action on a {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n+  COMMENTED = 0b1000000,\n+  /**\n+   * Pull request opening item\n+   */\n+  TASK = 0b10000000,","score":{"reward":9.324,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":4,"words":{"wordCount":101,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":66.55180198019805,"syllables":143,"sentences":5,"score":0.9344819801980195},"multiplier":1,"relevance":0.7}},{"id":1577225638,"content":"Possibly. I personally haven't had that issue but either way my suggestion is to keep everything internally without a decimal and then only convert it upon rendering.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1577225638","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,217 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import { stringify } from \"yaml\";\n+import configuration from \"../configuration/config-reader\";\n+import githubCommentConfig, { GithubCommentConfiguration } from \"../configuration/github-comment-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { CommentType, IssueActivity } from \"../issue-activity\";\n+import { parseGitHubUrl } from \"../start\";\n+import { getPayoutConfigByNetworkId } from \"../types/payout\";\n+import program from \"./command-line\";\n+import { GithubCommentScore, Module, Result } from \"./processor\";\n+\n+/**\n+ * Posts a GitHub comment according to the given results.\n+ */\n+export class GithubCommentModule implements Module {\n+  private readonly _configuration: GithubCommentConfiguration = configuration.githubComment;\n+  private readonly _debugFilePath = \"./output.html\";\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    const bodyArray: (string | undefined)[] = [];\n+\n+    for (const [key, value] of Object.entries(result)) {\n+      result[key].evaluationCommentHtml = this._generateHtml(key, value);\n+      bodyArray.push(result[key].evaluationCommentHtml);\n+    }\n+    const body = bodyArray.join(\"\");\n+    if (this._configuration.debug) {\n+      fs.writeFileSync(this._debugFilePath, body);\n+    }\n+    if (this._configuration.post) {\n+      try {\n+        const octokit = getOctokitInstance();\n+        const { owner, repo, issue_number } = parseGitHubUrl(program.opts().issue);\n+\n+        await octokit.issues.createComment({\n+          body,\n+          repo,\n+          owner,\n+          issue_number,\n+        });\n+      } catch (e) {\n+        console.error(`Could not post GitHub comment: ${e}`);\n+      }\n+    }\n+    return Promise.resolve(result);\n+  }\n+\n+  get enabled(): boolean {\n+    if (!Value.Check(githubCommentConfig, this._configuration)) {\n+      console.warn(\"Invalid configuration detected for GithubContentModule, disabling.\");\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  _generateHtml(username: string, result: Result[0]) {\n+    const sorted = result.comments?.reduce<{\n+      issues: { task: GithubCommentScore | null; comments: GithubCommentScore[] };\n+      reviews: GithubCommentScore[];\n+    }>(\n+      (acc, curr) => {\n+        if (curr.type & CommentType.ISSUE) {\n+          if (curr.type & CommentType.TASK) {\n+            acc.issues.task = curr;\n+          } else {\n+            acc.issues.comments.push(curr);\n+          }\n+        } else if (curr.type & CommentType.REVIEW) {\n+          acc.reviews.push(curr);\n+        }\n+        return acc;\n+      },\n+      { issues: { task: null, comments: [] }, reviews: [] }\n+    );\n+\n+    function createContributionRows() {\n+      const content: string[] = [];\n+\n+      if (!sorted) {\n+        return content.join(\"\");\n+      }\n+\n+      function generateContributionRow(\n+        view: string,\n+        contribution: string,\n+        count: number,\n+        reward: number | Decimal | undefined\n+      ) {\n+        return `\n+          <tr>\n+            <td>${view}</td>\n+            <td>${contribution}</td>\n+            <td>${count}</td>\n+            <td>${reward || \"-\"}</td>\n+          </tr>`;\n+      }\n+\n+      if (result.task?.reward) {\n+        content.push(generateContributionRow(\"Issue\", \"Task\", 1, result.task.reward));\n+      }\n+      if (sorted.issues.task) {\n+        content.push(generateContributionRow(\"Issue\", \"Specification\", 1, sorted.issues.task.score?.reward));\n+      }\n+      if (sorted.issues.comments.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Issue\",\n+            \"Comment\",\n+            sorted.issues.comments.length,\n+            sorted.issues.comments.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))\n+          )\n+        );\n+      }\n+      if (sorted.reviews.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Review\",\n+            \"Comment\",\n+            sorted.reviews.length,\n+            sorted.reviews.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))","score":{"reward":5.328,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":35.5107142857143,"syllables":52,"sentences":2,"score":0.755107142857143},"multiplier":1,"relevance":0.6}},{"id":2063712447,"content":"I think it's fine. I generally scrutinize test code less than normal program code anyways.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#issuecomment-2063712447","commentType":"PULL_COLLABORATOR","score":{"reward":1.956,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":66.5275,"syllables":25,"sentences":2,"score":0.9347249999999999},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2007841578,"effect":{"addition":407,"deletion":74},"reward":19.24,"priority":4},{"reviewId":2008041757,"effect":{"addition":44,"deletion":7},"reward":2.04,"priority":4},{"reviewId":2008690769,"effect":{"addition":74,"deletion":35},"reward":4.36,"priority":4},{"reviewId":2013381647,"effect":{"addition":0,"deletion":0},"reward":0,"priority":4},{"reviewId":2013381967,"effect":{"addition":117,"deletion":41},"reward":6.32,"priority":4},{"reviewId":2013708154,"effect":{"addition":3,"deletion":2},"reward":0.2,"priority":4},{"reviewId":2016111656,"effect":{"addition":109,"deletion":107},"reward":8.64,"priority":4},{"reviewId":2017922720,"effect":{"addition":0,"deletion":0},"reward":0,"priority":4},{"reviewId":2018784615,"effect":{"addition":108,"deletion":106},"reward":8.56,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 243.682 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>9</td><td>49.36</td></tr><tr><td>Issue</td><td>Comment</td><td>9</td><td>95.31</td></tr><tr><td>Review</td><td>Comment</td><td>23</td><td>99.012</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12\" target=\"_blank\" rel=\"noopener\">#12</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+407 -74</td><td>4</td><td>19.24</td></tr><tr><td>+44 -7</td><td>4</td><td>2.04</td></tr><tr><td>+74 -35</td><td>4</td><td>4.36</td></tr><tr><td>+0 -0</td><td>4</td><td>0</td></tr><tr><td>+117 -41</td><td>4</td><td>6.32</td></tr><tr><td>+3 -2</td><td>4</td><td>0.2</td></tr><tr><td>+109 -107</td><td>4</td><td>8.64</td></tr><tr><td>+0 -0</td><td>4</td><td>0</td></tr><tr><td>+108 -106</td><td>4</td><td>8.56</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2030164289\" target=\"_blank\" rel=\"noopener\">@whilefoo rfc on how we can deal with comment outputs. Perhaps w&hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.9</td><td>4</td><td>9.324</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2033488255\" target=\"_blank\" rel=\"noopener\">I think you should fork from and overtake that second pull due t&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.3</td><td>4</td><td>1.992</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036355445\" target=\"_blank\" rel=\"noopener\">I think the most pure architecture would be that plugins can NOT&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 7&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 283&#13;  wordValue: 0.1&#13;  result: 1.01&#13;</pre></details></td><td>0.95</td><td>4</td><td>5.776</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036370459\" target=\"_blank\" rel=\"noopener\">I know JSON makes things more complicated than it needs to be wi&hellip;</a></h6></td><td><details><summary>3.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 152&#13;  wordValue: 0.1&#13;  result: 2.21&#13;</pre></details></td><td>0.9</td><td>4</td><td>14.904</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036393020\" target=\"_blank\" rel=\"noopener\">Going back to my \"plugin-side-rendering\" mention, the data manip&hellip;</a></h6></td><td><details><summary>2.59</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 104&#13;  wordValue: 0.1&#13;  result: 2.59&#13;</pre></details></td><td>0.9</td><td>4</td><td>12.06</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036433646\" target=\"_blank\" rel=\"noopener\">The proposed &#96;comment&#96; output is intended for ease of co&hellip;</a></h6></td><td><details><summary>3.86</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    h3:&#13;      score: 1&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 2&#13;regex:&#13;  wordCount: 187&#13;  wordValue: 0.1&#13;  result: 1.86&#13;</pre></details></td><td>0.95</td><td>4</td><td>18.962</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2036516869\" target=\"_blank\" rel=\"noopener\">I understand your concern and I would need to put more thought i&hellip;</a></h6></td><td><details><summary>2.82</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 97&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.9</td><td>4</td><td>13.14</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2053332029\" target=\"_blank\" rel=\"noopener\">I see, so you're suggesting that we must annotate each comment a&hellip;</a></h6></td><td><details><summary>3.02</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 4&#13;  result: 0.4&#13;regex:&#13;  wordCount: 97&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.8</td><td>4</td><td>12.544</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2055783331\" target=\"_blank\" rel=\"noopener\">Consider calling it \"contributor\" and \"collaborator\" as that is &hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.7</td><td>4</td><td>6.608</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#pullrequestreview-2007841578\" target=\"_blank\" rel=\"noopener\">Nice code quality per usual</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.2</td><td>4</td><td>0.544</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1569964797\" target=\"_blank\" rel=\"noopener\">\"Comment\" implication isn't clear to me</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>4</td><td>2.464</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1569970517\" target=\"_blank\" rel=\"noopener\">I've always been anti empty string for variable declarations. It&hellip;</a></h6></td><td><details><summary>2.37</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 49&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>0.8</td><td>4</td><td>9.824</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1569971792\" target=\"_blank\" rel=\"noopener\">Our RPCs don't work anymore</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.9</td><td>4</td><td>2.664</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1570133378\" target=\"_blank\" rel=\"noopener\">Yes consider changing them to verbs &#96;ISSUER&#96;&#96;COMME&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.8</td><td>4</td><td>6.816</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1570159594\" target=\"_blank\" rel=\"noopener\">&#96;[].join(\"\");&#96; yields an empty string as well if there's&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.6</td><td>4</td><td>3.192</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1570588757\" target=\"_blank\" rel=\"noopener\">Perhaps it will make the config more expressive if you add other&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.9</td><td>4</td><td>5.616</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1570589892\" target=\"_blank\" rel=\"noopener\">What is this @link syntax</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>4</td><td>1.932</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1570591425\" target=\"_blank\" rel=\"noopener\">Just noticed the bit wise operators 1337 code</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.8</td><td>4</td><td>3.072</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1570596007\" target=\"_blank\" rel=\"noopener\">It might seem convoluted but I think that it condenses the logic&hellip;</a></h6></td><td><details><summary>2.47</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 56&#13;  wordValue: 0.1&#13;  result: 2.47&#13;</pre></details></td><td>0.7</td><td>4</td><td>8.82</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1573720820\" target=\"_blank\" rel=\"noopener\">I am aware of its purpose. I am proposing to make the config mor&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.6</td><td>4</td><td>4.824</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1573722731\" target=\"_blank\" rel=\"noopener\">Will you use array syntax?</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.5</td><td>4</td><td>1.3</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1573723262\" target=\"_blank\" rel=\"noopener\">This regex appears to convert repeating spaces i.e. &#96;\"   \"&#&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.8</td><td>4</td><td>5.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1573723774\" target=\"_blank\" rel=\"noopener\">This doesn't seem right. Network ID 1 is mainnet. The RPC clearl&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.9</td><td>4</td><td>7.308</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1573724498\" target=\"_blank\" rel=\"noopener\">Seems like not a very useful mock.</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.3</td><td>4</td><td>1.032</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1573724853\" target=\"_blank\" rel=\"noopener\">Same here</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.2</td><td>4</td><td>0.264</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574086028\" target=\"_blank\" rel=\"noopener\">The token address indeed represents DAI on mainnet.</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.5</td><td>4</td><td>1.94</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574086293\" target=\"_blank\" rel=\"noopener\">@gentlementlegen rfc</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.4</td><td>4</td><td>0.4</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1575555444\" target=\"_blank\" rel=\"noopener\">Why not do it in the industry standard way? All values are denom&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.8</td><td>4</td><td>7.232</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1575556553\" target=\"_blank\" rel=\"noopener\">I'm not sure if I understand but task reward is if you completed&hellip;</a></h6></td><td><details><summary>2.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.7</td><td>4</td><td>7.56</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1576666170\" target=\"_blank\" rel=\"noopener\">Spoke a bit on this in dms. @whilefoo my intent with referring t&hellip;</a></h6></td><td><details><summary>2.6</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 101&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>0.7</td><td>4</td><td>9.324</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1577225638\" target=\"_blank\" rel=\"noopener\">Possibly. I personally haven't had that issue but either way my &hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.6</td><td>4</td><td>5.328</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#issuecomment-2063712447\" target=\"_blank\" rel=\"noopener\">I think it's fine. I generally scrutinize test code less than no&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.3</td><td>4</td><td>1.956</td></tr></tbody></table></details>"},"whilefoo":{"total":113.428,"userId":139262667,"comments":[{"id":2035427134,"content":"there are a couple of options:\r\n1. we let the conversation-rewards plugin generate and post the comment\r\n2. we put comment as output and then another module is responsible for posting it or let conversation-rewards generate rewards and permit-generation generate permits and a third module that uses output from previous plugins to make a comment and post it\r\n3. we let the conversation-rewards plugin generate the comment and pass it as a standard property like you suggested.\r\nIn theory 2. option sounds good to separate concerns but it's another plugin which means another call to github actions thus more latency, so for the sake of speed it'd go with option 1 or 3, but going with these 2 options would mean there will 1 comment for rewards summary and 1 comment for permits.\r\nI'm not sure if option 3 is any better than option 1 because the plugin already has a token that has permissions to post comments so passing it to the kernel doesn't make much difference.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2035427134","commentType":"ISSUE_COLLABORATOR","score":{"reward":10.116,"formatting":{"content":{"p":{"score":0,"elementCount":6},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3}},"result":0.3},"priority":4,"words":{"wordCount":173,"wordValue":0.1,"result":2},"readability":{"fleschKincaid":34.32468930635841,"syllables":263,"sentences":4,"score":0.743246893063584},"multiplier":1,"relevance":0.9}},{"id":1574427305,"content":"```suggestion\r\n    return result;\r\n```\r\nresolve is unnecessary here and some other places I saw it too","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574427305","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,217 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import { stringify } from \"yaml\";\n+import configuration from \"../configuration/config-reader\";\n+import githubCommentConfig, { GithubCommentConfiguration } from \"../configuration/github-comment-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { CommentType, IssueActivity } from \"../issue-activity\";\n+import { parseGitHubUrl } from \"../start\";\n+import { getPayoutConfigByNetworkId } from \"../types/payout\";\n+import program from \"./command-line\";\n+import { GithubCommentScore, Module, Result } from \"./processor\";\n+\n+/**\n+ * Posts a GitHub comment according to the given results.\n+ */\n+export class GithubCommentModule implements Module {\n+  private readonly _configuration: GithubCommentConfiguration = configuration.githubComment;\n+  private readonly _debugFilePath = \"./output.html\";\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    const bodyArray: (string | undefined)[] = [];\n+\n+    for (const [key, value] of Object.entries(result)) {\n+      result[key].evaluationCommentHtml = this._generateHtml(key, value);\n+      bodyArray.push(result[key].evaluationCommentHtml);\n+    }\n+    const body = bodyArray.join(\"\");\n+    if (this._configuration.debug) {\n+      fs.writeFileSync(this._debugFilePath, body);\n+    }\n+    if (this._configuration.post) {\n+      try {\n+        const octokit = getOctokitInstance();\n+        const { owner, repo, issue_number } = parseGitHubUrl(program.opts().issue);\n+\n+        await octokit.issues.createComment({\n+          body,\n+          repo,\n+          owner,\n+          issue_number,\n+        });\n+      } catch (e) {\n+        console.error(`Could not post GitHub comment: ${e}`);\n+      }\n+    }\n+    return Promise.resolve(result);","score":{"reward":4.788,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":67.75500000000001,"syllables":18,"sentences":1,"score":0.9224499999999999},"multiplier":1,"relevance":0.9}},{"id":1574441918,"content":"I'm not sure if it's a good idea to rely on logs for testing, is not possible to use output from the processor?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574441918","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,41 @@\n+import { parseGitHubUrl } from \"../src/start\";\n+import { IssueActivity } from \"../src/issue-activity\";\n+import { Processor } from \"../src/parser/processor\";\n+import { UserExtractorModule } from \"../src/parser/user-extractor-module\";\n+import { server } from \"./__mocks__/node\";\n+import { DataPurgeModule } from \"../src/parser/data-purge-module\";\n+import userCommentResults from \"./__mocks__/results/user-comment-results.json\";\n+import dataPurgeResults from \"./__mocks__/results/data-purge-result.json\";\n+\n+const issueUrl = process.env.TEST_ISSUE_URL || \"https://github.com/ubiquibot/comment-incentives/issues/22\";\n+\n+beforeAll(() => server.listen());\n+afterEach(() => server.resetHandlers());\n+afterAll(() => server.close());\n+\n+describe(\"Modules tests\", () => {\n+  const issue = parseGitHubUrl(issueUrl);\n+  const activity = new IssueActivity(issue);\n+\n+  beforeAll(async () => {\n+    await activity.init();\n+  });\n+\n+  it(\"Should extract users from comments\", async () => {\n+    const logSpy = jest.spyOn(console, \"log\");\n+    const processor = new Processor();\n+    processor[\"_transformers\"] = [new UserExtractorModule()];\n+    await processor.run(activity);\n+    processor.dump();\n+    expect(logSpy).toHaveBeenCalledWith(JSON.stringify(userCommentResults, undefined, 2));","score":{"reward":6.912,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":69.78800000000001,"syllables":33,"sentences":1,"score":0.9021199999999999},"multiplier":1,"relevance":0.8}},{"id":1574458540,"content":"why so many nested functions? it becomes hard to read","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574458540","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,217 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import { stringify } from \"yaml\";\n+import configuration from \"../configuration/config-reader\";\n+import githubCommentConfig, { GithubCommentConfiguration } from \"../configuration/github-comment-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { CommentType, IssueActivity } from \"../issue-activity\";\n+import { parseGitHubUrl } from \"../start\";\n+import { getPayoutConfigByNetworkId } from \"../types/payout\";\n+import program from \"./command-line\";\n+import { GithubCommentScore, Module, Result } from \"./processor\";\n+\n+/**\n+ * Posts a GitHub comment according to the given results.\n+ */\n+export class GithubCommentModule implements Module {\n+  private readonly _configuration: GithubCommentConfiguration = configuration.githubComment;\n+  private readonly _debugFilePath = \"./output.html\";\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    const bodyArray: (string | undefined)[] = [];\n+\n+    for (const [key, value] of Object.entries(result)) {\n+      result[key].evaluationCommentHtml = this._generateHtml(key, value);\n+      bodyArray.push(result[key].evaluationCommentHtml);\n+    }\n+    const body = bodyArray.join(\"\");\n+    if (this._configuration.debug) {\n+      fs.writeFileSync(this._debugFilePath, body);\n+    }\n+    if (this._configuration.post) {\n+      try {\n+        const octokit = getOctokitInstance();\n+        const { owner, repo, issue_number } = parseGitHubUrl(program.opts().issue);\n+\n+        await octokit.issues.createComment({\n+          body,\n+          repo,\n+          owner,\n+          issue_number,\n+        });\n+      } catch (e) {\n+        console.error(`Could not post GitHub comment: ${e}`);\n+      }\n+    }\n+    return Promise.resolve(result);\n+  }\n+\n+  get enabled(): boolean {\n+    if (!Value.Check(githubCommentConfig, this._configuration)) {\n+      console.warn(\"Invalid configuration detected for GithubContentModule, disabling.\");\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  _generateHtml(username: string, result: Result[0]) {\n+    const sorted = result.comments?.reduce<{\n+      issues: { task: GithubCommentScore | null; comments: GithubCommentScore[] };\n+      reviews: GithubCommentScore[];\n+    }>(\n+      (acc, curr) => {\n+        if (curr.type & CommentType.ISSUE) {\n+          if (curr.type & CommentType.TASK) {\n+            acc.issues.task = curr;\n+          } else {\n+            acc.issues.comments.push(curr);\n+          }\n+        } else if (curr.type & CommentType.REVIEW) {\n+          acc.reviews.push(curr);\n+        }\n+        return acc;\n+      },\n+      { issues: { task: null, comments: [] }, reviews: [] }\n+    );\n+\n+    function createContributionRows() {\n+      const content: string[] = [];\n+\n+      if (!sorted) {\n+        return content.join(\"\");\n+      }\n+\n+      function generateContributionRow(","score":{"reward":3.024,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":91.78000000000003,"syllables":13,"sentences":2,"score":0.6821999999999997},"multiplier":1,"relevance":0.7}},{"id":1574460099,"content":"is there a reason we are using Decimal.js instead of native BigInt?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574460099","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,217 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import { stringify } from \"yaml\";\n+import configuration from \"../configuration/config-reader\";\n+import githubCommentConfig, { GithubCommentConfiguration } from \"../configuration/github-comment-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { CommentType, IssueActivity } from \"../issue-activity\";\n+import { parseGitHubUrl } from \"../start\";\n+import { getPayoutConfigByNetworkId } from \"../types/payout\";\n+import program from \"./command-line\";\n+import { GithubCommentScore, Module, Result } from \"./processor\";\n+\n+/**\n+ * Posts a GitHub comment according to the given results.\n+ */\n+export class GithubCommentModule implements Module {\n+  private readonly _configuration: GithubCommentConfiguration = configuration.githubComment;\n+  private readonly _debugFilePath = \"./output.html\";\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    const bodyArray: (string | undefined)[] = [];\n+\n+    for (const [key, value] of Object.entries(result)) {\n+      result[key].evaluationCommentHtml = this._generateHtml(key, value);\n+      bodyArray.push(result[key].evaluationCommentHtml);\n+    }\n+    const body = bodyArray.join(\"\");\n+    if (this._configuration.debug) {\n+      fs.writeFileSync(this._debugFilePath, body);\n+    }\n+    if (this._configuration.post) {\n+      try {\n+        const octokit = getOctokitInstance();\n+        const { owner, repo, issue_number } = parseGitHubUrl(program.opts().issue);\n+\n+        await octokit.issues.createComment({\n+          body,\n+          repo,\n+          owner,\n+          issue_number,\n+        });\n+      } catch (e) {\n+        console.error(`Could not post GitHub comment: ${e}`);\n+      }\n+    }\n+    return Promise.resolve(result);\n+  }\n+\n+  get enabled(): boolean {\n+    if (!Value.Check(githubCommentConfig, this._configuration)) {\n+      console.warn(\"Invalid configuration detected for GithubContentModule, disabling.\");\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  _generateHtml(username: string, result: Result[0]) {\n+    const sorted = result.comments?.reduce<{\n+      issues: { task: GithubCommentScore | null; comments: GithubCommentScore[] };\n+      reviews: GithubCommentScore[];\n+    }>(\n+      (acc, curr) => {\n+        if (curr.type & CommentType.ISSUE) {\n+          if (curr.type & CommentType.TASK) {\n+            acc.issues.task = curr;\n+          } else {\n+            acc.issues.comments.push(curr);\n+          }\n+        } else if (curr.type & CommentType.REVIEW) {\n+          acc.reviews.push(curr);\n+        }\n+        return acc;\n+      },\n+      { issues: { task: null, comments: [] }, reviews: [] }\n+    );\n+\n+    function createContributionRows() {\n+      const content: string[] = [];\n+\n+      if (!sorted) {\n+        return content.join(\"\");\n+      }\n+\n+      function generateContributionRow(\n+        view: string,\n+        contribution: string,\n+        count: number,\n+        reward: number | Decimal | undefined\n+      ) {\n+        return `\n+          <tr>\n+            <td>${view}</td>\n+            <td>${contribution}</td>\n+            <td>${count}</td>\n+            <td>${reward || \"-\"}</td>\n+          </tr>`;\n+      }\n+\n+      if (result.task?.reward) {\n+        content.push(generateContributionRow(\"Issue\", \"Task\", 1, result.task.reward));\n+      }\n+      if (sorted.issues.task) {\n+        content.push(generateContributionRow(\"Issue\", \"Specification\", 1, sorted.issues.task.score?.reward));\n+      }\n+      if (sorted.issues.comments.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Issue\",\n+            \"Comment\",\n+            sorted.issues.comments.length,\n+            sorted.issues.comments.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))\n+          )\n+        );\n+      }\n+      if (sorted.reviews.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Review\",\n+            \"Comment\",\n+            sorted.reviews.length,\n+            sorted.reviews.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))","score":{"reward":4.48,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":70.08365384615385,"syllables":20,"sentences":2,"score":0.8991634615384615},"multiplier":1,"relevance":0.8}},{"id":1574487172,"content":"Shouldn't task be issue opening item and specification is pull request opening item? At least that's how I understand from the code.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574487172","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -19,12 +19,42 @@ import {\n } from \"./start\";\n \n export enum CommentType {\n+  /**\n+   * Review related item\n+   */\n   REVIEW = 0b1,\n+  /**\n+   * Issue related item\n+   */\n   ISSUE = 0b10,\n+  /**\n+   * User assigned to the {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n   ASSIGNEE = 0b100,\n+  /**\n+   * The author of the {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n   ISSUER = 0b1000,\n+  /**\n+   * A user that is part of the organization or owner of the repo\n+   */\n   COLLABORATOR = 0b10000,\n+  /**\n+   * A user that is NOT part of the organization nor owner of the repo\n+   */\n   CONTRIBUTOR = 0b100000,\n+  /**\n+   * A user comment action on a {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n+  COMMENTED = 0b1000000,\n+  /**\n+   * Pull request opening item\n+   */\n+  TASK = 0b10000000,","score":{"reward":7.74,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":60.70500000000001,"syllables":38,"sentences":2,"score":0.9929499999999999},"multiplier":1,"relevance":0.9}},{"id":1574492061,"content":"I assume this is a permit for task assignee, but where are other permits or is that not done yet?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574492061","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,217 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import { stringify } from \"yaml\";\n+import configuration from \"../configuration/config-reader\";\n+import githubCommentConfig, { GithubCommentConfiguration } from \"../configuration/github-comment-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { CommentType, IssueActivity } from \"../issue-activity\";\n+import { parseGitHubUrl } from \"../start\";\n+import { getPayoutConfigByNetworkId } from \"../types/payout\";\n+import program from \"./command-line\";\n+import { GithubCommentScore, Module, Result } from \"./processor\";\n+\n+/**\n+ * Posts a GitHub comment according to the given results.\n+ */\n+export class GithubCommentModule implements Module {\n+  private readonly _configuration: GithubCommentConfiguration = configuration.githubComment;\n+  private readonly _debugFilePath = \"./output.html\";\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    const bodyArray: (string | undefined)[] = [];\n+\n+    for (const [key, value] of Object.entries(result)) {\n+      result[key].evaluationCommentHtml = this._generateHtml(key, value);\n+      bodyArray.push(result[key].evaluationCommentHtml);\n+    }\n+    const body = bodyArray.join(\"\");\n+    if (this._configuration.debug) {\n+      fs.writeFileSync(this._debugFilePath, body);\n+    }\n+    if (this._configuration.post) {\n+      try {\n+        const octokit = getOctokitInstance();\n+        const { owner, repo, issue_number } = parseGitHubUrl(program.opts().issue);\n+\n+        await octokit.issues.createComment({\n+          body,\n+          repo,\n+          owner,\n+          issue_number,\n+        });\n+      } catch (e) {\n+        console.error(`Could not post GitHub comment: ${e}`);\n+      }\n+    }\n+    return Promise.resolve(result);\n+  }\n+\n+  get enabled(): boolean {\n+    if (!Value.Check(githubCommentConfig, this._configuration)) {\n+      console.warn(\"Invalid configuration detected for GithubContentModule, disabling.\");\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  _generateHtml(username: string, result: Result[0]) {\n+    const sorted = result.comments?.reduce<{\n+      issues: { task: GithubCommentScore | null; comments: GithubCommentScore[] };\n+      reviews: GithubCommentScore[];\n+    }>(\n+      (acc, curr) => {\n+        if (curr.type & CommentType.ISSUE) {\n+          if (curr.type & CommentType.TASK) {\n+            acc.issues.task = curr;\n+          } else {\n+            acc.issues.comments.push(curr);\n+          }\n+        } else if (curr.type & CommentType.REVIEW) {\n+          acc.reviews.push(curr);\n+        }\n+        return acc;\n+      },\n+      { issues: { task: null, comments: [] }, reviews: [] }\n+    );\n+\n+    function createContributionRows() {\n+      const content: string[] = [];\n+\n+      if (!sorted) {\n+        return content.join(\"\");\n+      }\n+\n+      function generateContributionRow(\n+        view: string,\n+        contribution: string,\n+        count: number,\n+        reward: number | Decimal | undefined\n+      ) {\n+        return `\n+          <tr>\n+            <td>${view}</td>\n+            <td>${contribution}</td>\n+            <td>${count}</td>\n+            <td>${reward || \"-\"}</td>\n+          </tr>`;\n+      }\n+\n+      if (result.task?.reward) {\n+        content.push(generateContributionRow(\"Issue\", \"Task\", 1, result.task.reward));\n+      }\n+      if (sorted.issues.task) {\n+        content.push(generateContributionRow(\"Issue\", \"Specification\", 1, sorted.issues.task.score?.reward));\n+      }\n+      if (sorted.issues.comments.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Issue\",\n+            \"Comment\",\n+            sorted.issues.comments.length,\n+            sorted.issues.comments.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))\n+          )\n+        );\n+      }\n+      if (sorted.reviews.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Review\",\n+            \"Comment\",\n+            sorted.reviews.length,\n+            sorted.reviews.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))\n+          )\n+        );\n+      }\n+      return content.join(\"\");\n+    }\n+\n+    function createIncentiveRows() {\n+      const content: string[] = [];\n+\n+      if (!sorted) {\n+        return content.join(\"\");\n+      }\n+\n+      function buildIncentiveRow(commentScore: GithubCommentScore) {\n+        // Properly escape carriage returns for HTML rendering\n+        const formatting = stringify(commentScore.score?.formatting?.content).replace(/[\\n\\r]/g, \"&#13;\");\n+        return `\n+          <tr>\n+            <td>\n+              <h6>\n+                <a href=\"${commentScore.url}\" target=\"_blank\" rel=\"noopener\">${commentScore.content.replace(/(.{64})..+/, \"$1…\")}</a>\n+              </h6>\n+            </td>\n+            <td>\n+            <details>\n+              <summary>\n+                ${Object.values(commentScore.score?.formatting?.content || {}).reduce((acc, curr) => {\n+                  return acc.add(curr.score * curr.count);\n+                }, new Decimal(0))}\n+              </summary>\n+              <pre>${formatting}</pre>\n+             </details>\n+            </td>\n+            <td>${commentScore.score?.relevance || \"-\"}</td>\n+            <td>${commentScore.score?.reward || \"-\"}</td>\n+          </tr>`;\n+      }\n+\n+      for (const issueComment of sorted.issues.comments) {\n+        content.push(buildIncentiveRow(issueComment));\n+      }\n+      for (const reviewComment of sorted.reviews) {\n+        content.push(buildIncentiveRow(reviewComment));\n+      }\n+      return content.join(\"\");\n+    }\n+\n+    return `\n+    <details>\n+      <summary>\n+        <b>\n+          <h3>\n+            <a href=\"${result.permitUrl}\" target=\"_blank\" rel=\"noopener\">","score":{"reward":5.18,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":76.55500000000004,"syllables":26,"sentences":1,"score":0.8344499999999997},"multiplier":1,"relevance":0.7}},{"id":1575851470,"content":"gotcha, I thought this html is for all users","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1575851470","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,217 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import { stringify } from \"yaml\";\n+import configuration from \"../configuration/config-reader\";\n+import githubCommentConfig, { GithubCommentConfiguration } from \"../configuration/github-comment-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { CommentType, IssueActivity } from \"../issue-activity\";\n+import { parseGitHubUrl } from \"../start\";\n+import { getPayoutConfigByNetworkId } from \"../types/payout\";\n+import program from \"./command-line\";\n+import { GithubCommentScore, Module, Result } from \"./processor\";\n+\n+/**\n+ * Posts a GitHub comment according to the given results.\n+ */\n+export class GithubCommentModule implements Module {\n+  private readonly _configuration: GithubCommentConfiguration = configuration.githubComment;\n+  private readonly _debugFilePath = \"./output.html\";\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    const bodyArray: (string | undefined)[] = [];\n+\n+    for (const [key, value] of Object.entries(result)) {\n+      result[key].evaluationCommentHtml = this._generateHtml(key, value);\n+      bodyArray.push(result[key].evaluationCommentHtml);\n+    }\n+    const body = bodyArray.join(\"\");\n+    if (this._configuration.debug) {\n+      fs.writeFileSync(this._debugFilePath, body);\n+    }\n+    if (this._configuration.post) {\n+      try {\n+        const octokit = getOctokitInstance();\n+        const { owner, repo, issue_number } = parseGitHubUrl(program.opts().issue);\n+\n+        await octokit.issues.createComment({\n+          body,\n+          repo,\n+          owner,\n+          issue_number,\n+        });\n+      } catch (e) {\n+        console.error(`Could not post GitHub comment: ${e}`);\n+      }\n+    }\n+    return Promise.resolve(result);\n+  }\n+\n+  get enabled(): boolean {\n+    if (!Value.Check(githubCommentConfig, this._configuration)) {\n+      console.warn(\"Invalid configuration detected for GithubContentModule, disabling.\");\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  _generateHtml(username: string, result: Result[0]) {\n+    const sorted = result.comments?.reduce<{\n+      issues: { task: GithubCommentScore | null; comments: GithubCommentScore[] };\n+      reviews: GithubCommentScore[];\n+    }>(\n+      (acc, curr) => {\n+        if (curr.type & CommentType.ISSUE) {\n+          if (curr.type & CommentType.TASK) {\n+            acc.issues.task = curr;\n+          } else {\n+            acc.issues.comments.push(curr);\n+          }\n+        } else if (curr.type & CommentType.REVIEW) {\n+          acc.reviews.push(curr);\n+        }\n+        return acc;\n+      },\n+      { issues: { task: null, comments: [] }, reviews: [] }\n+    );\n+\n+    function createContributionRows() {\n+      const content: string[] = [];\n+\n+      if (!sorted) {\n+        return content.join(\"\");\n+      }\n+\n+      function generateContributionRow(\n+        view: string,\n+        contribution: string,\n+        count: number,\n+        reward: number | Decimal | undefined\n+      ) {\n+        return `\n+          <tr>\n+            <td>${view}</td>\n+            <td>${contribution}</td>\n+            <td>${count}</td>\n+            <td>${reward || \"-\"}</td>\n+          </tr>`;\n+      }\n+\n+      if (result.task?.reward) {\n+        content.push(generateContributionRow(\"Issue\", \"Task\", 1, result.task.reward));\n+      }\n+      if (sorted.issues.task) {\n+        content.push(generateContributionRow(\"Issue\", \"Specification\", 1, sorted.issues.task.score?.reward));\n+      }\n+      if (sorted.issues.comments.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Issue\",\n+            \"Comment\",\n+            sorted.issues.comments.length,\n+            sorted.issues.comments.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))\n+          )\n+        );\n+      }\n+      if (sorted.reviews.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Review\",\n+            \"Comment\",\n+            sorted.reviews.length,\n+            sorted.reviews.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))\n+          )\n+        );\n+      }\n+      return content.join(\"\");\n+    }\n+\n+    function createIncentiveRows() {\n+      const content: string[] = [];\n+\n+      if (!sorted) {\n+        return content.join(\"\");\n+      }\n+\n+      function buildIncentiveRow(commentScore: GithubCommentScore) {\n+        // Properly escape carriage returns for HTML rendering\n+        const formatting = stringify(commentScore.score?.formatting?.content).replace(/[\\n\\r]/g, \"&#13;\");\n+        return `\n+          <tr>\n+            <td>\n+              <h6>\n+                <a href=\"${commentScore.url}\" target=\"_blank\" rel=\"noopener\">${commentScore.content.replace(/(.{64})..+/, \"$1…\")}</a>\n+              </h6>\n+            </td>\n+            <td>\n+            <details>\n+              <summary>\n+                ${Object.values(commentScore.score?.formatting?.content || {}).reduce((acc, curr) => {\n+                  return acc.add(curr.score * curr.count);\n+                }, new Decimal(0))}\n+              </summary>\n+              <pre>${formatting}</pre>\n+             </details>\n+            </td>\n+            <td>${commentScore.score?.relevance || \"-\"}</td>\n+            <td>${commentScore.score?.reward || \"-\"}</td>\n+          </tr>`;\n+      }\n+\n+      for (const issueComment of sorted.issues.comments) {\n+        content.push(buildIncentiveRow(issueComment));\n+      }\n+      for (const reviewComment of sorted.reviews) {\n+        content.push(buildIncentiveRow(reviewComment));\n+      }\n+      return content.join(\"\");\n+    }\n+\n+    return `\n+    <details>\n+      <summary>\n+        <b>\n+          <h3>\n+            <a href=\"${result.permitUrl}\" target=\"_blank\" rel=\"noopener\">","score":{"reward":1.616,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":94.30000000000001,"syllables":11,"sentences":1,"score":0.6569999999999999},"multiplier":1,"relevance":0.4}},{"id":1576482609,"content":"I can see from the example that it works correctly but when reading the code I get confused\r\nhttps://github.com/ubiquibot/conversation-rewards/pull/12/files#diff-03f6b1f98f9f1df2651b65c46241c43e65d9544f7ea1de71e94255e757b3f2f0R108\r\nas I understand the if statement will be true if the comment is the first/opening comment of the issue or pull request so then it checks if it's issue then it will be TASK otherwise (if it's PR) it will be SPECIFICATION?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1576482609","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -19,12 +19,42 @@ import {\n } from \"./start\";\n \n export enum CommentType {\n+  /**\n+   * Review related item\n+   */\n   REVIEW = 0b1,\n+  /**\n+   * Issue related item\n+   */\n   ISSUE = 0b10,\n+  /**\n+   * User assigned to the {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n   ASSIGNEE = 0b100,\n+  /**\n+   * The author of the {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n   ISSUER = 0b1000,\n+  /**\n+   * A user that is part of the organization or owner of the repo\n+   */\n   COLLABORATOR = 0b10000,\n+  /**\n+   * A user that is NOT part of the organization nor owner of the repo\n+   */\n   CONTRIBUTOR = 0b100000,\n+  /**\n+   * A user comment action on a {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n+  COMMENTED = 0b1000000,\n+  /**\n+   * Pull request opening item\n+   */\n+  TASK = 0b10000000,","score":{"reward":15.984,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":63,"wordValue":0.1,"result":2.55},"readability":{"fleschKincaid":43.52324324324326,"syllables":110,"sentences":2,"score":0.8352324324324326},"multiplier":1,"relevance":0.9}},{"id":1578040543,"content":"Ok so we need it for precise floating point calculations, in that case BigInt is not applicable.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1578040543","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,217 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import { stringify } from \"yaml\";\n+import configuration from \"../configuration/config-reader\";\n+import githubCommentConfig, { GithubCommentConfiguration } from \"../configuration/github-comment-config\";\n+import { getOctokitInstance } from \"../get-authentication-token\";\n+import { CommentType, IssueActivity } from \"../issue-activity\";\n+import { parseGitHubUrl } from \"../start\";\n+import { getPayoutConfigByNetworkId } from \"../types/payout\";\n+import program from \"./command-line\";\n+import { GithubCommentScore, Module, Result } from \"./processor\";\n+\n+/**\n+ * Posts a GitHub comment according to the given results.\n+ */\n+export class GithubCommentModule implements Module {\n+  private readonly _configuration: GithubCommentConfiguration = configuration.githubComment;\n+  private readonly _debugFilePath = \"./output.html\";\n+\n+  async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    const bodyArray: (string | undefined)[] = [];\n+\n+    for (const [key, value] of Object.entries(result)) {\n+      result[key].evaluationCommentHtml = this._generateHtml(key, value);\n+      bodyArray.push(result[key].evaluationCommentHtml);\n+    }\n+    const body = bodyArray.join(\"\");\n+    if (this._configuration.debug) {\n+      fs.writeFileSync(this._debugFilePath, body);\n+    }\n+    if (this._configuration.post) {\n+      try {\n+        const octokit = getOctokitInstance();\n+        const { owner, repo, issue_number } = parseGitHubUrl(program.opts().issue);\n+\n+        await octokit.issues.createComment({\n+          body,\n+          repo,\n+          owner,\n+          issue_number,\n+        });\n+      } catch (e) {\n+        console.error(`Could not post GitHub comment: ${e}`);\n+      }\n+    }\n+    return Promise.resolve(result);\n+  }\n+\n+  get enabled(): boolean {\n+    if (!Value.Check(githubCommentConfig, this._configuration)) {\n+      console.warn(\"Invalid configuration detected for GithubContentModule, disabling.\");\n+      return false;\n+    }\n+    return true;\n+  }\n+\n+  _generateHtml(username: string, result: Result[0]) {\n+    const sorted = result.comments?.reduce<{\n+      issues: { task: GithubCommentScore | null; comments: GithubCommentScore[] };\n+      reviews: GithubCommentScore[];\n+    }>(\n+      (acc, curr) => {\n+        if (curr.type & CommentType.ISSUE) {\n+          if (curr.type & CommentType.TASK) {\n+            acc.issues.task = curr;\n+          } else {\n+            acc.issues.comments.push(curr);\n+          }\n+        } else if (curr.type & CommentType.REVIEW) {\n+          acc.reviews.push(curr);\n+        }\n+        return acc;\n+      },\n+      { issues: { task: null, comments: [] }, reviews: [] }\n+    );\n+\n+    function createContributionRows() {\n+      const content: string[] = [];\n+\n+      if (!sorted) {\n+        return content.join(\"\");\n+      }\n+\n+      function generateContributionRow(\n+        view: string,\n+        contribution: string,\n+        count: number,\n+        reward: number | Decimal | undefined\n+      ) {\n+        return `\n+          <tr>\n+            <td>${view}</td>\n+            <td>${contribution}</td>\n+            <td>${count}</td>\n+            <td>${reward || \"-\"}</td>\n+          </tr>`;\n+      }\n+\n+      if (result.task?.reward) {\n+        content.push(generateContributionRow(\"Issue\", \"Task\", 1, result.task.reward));\n+      }\n+      if (sorted.issues.task) {\n+        content.push(generateContributionRow(\"Issue\", \"Specification\", 1, sorted.issues.task.score?.reward));\n+      }\n+      if (sorted.issues.comments.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Issue\",\n+            \"Comment\",\n+            sorted.issues.comments.length,\n+            sorted.issues.comments.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))\n+          )\n+        );\n+      }\n+      if (sorted.reviews.length) {\n+        content.push(\n+          generateContributionRow(\n+            \"Review\",\n+            \"Comment\",\n+            sorted.reviews.length,\n+            sorted.reviews.reduce((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0))","score":{"reward":4.128,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":60.19176470588238,"syllables":26,"sentences":1,"score":0.9980823529411762},"multiplier":1,"relevance":0.6}},{"id":1578050965,"content":"why is it `ISSUER` which is meant for author of issue/review. wouldn't it make more sense to use `ASIGNEE`?\r\nisn't specification the first comment of the issue so how is it inside PR?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1578050965","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -19,12 +19,42 @@ import {\n } from \"./start\";\n \n export enum CommentType {\n+  /**\n+   * Review related item\n+   */\n   REVIEW = 0b1,\n+  /**\n+   * Issue related item\n+   */\n   ISSUE = 0b10,\n+  /**\n+   * User assigned to the {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n   ASSIGNEE = 0b100,\n+  /**\n+   * The author of the {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n   ISSUER = 0b1000,\n+  /**\n+   * A user that is part of the organization or owner of the repo\n+   */\n   COLLABORATOR = 0b10000,\n+  /**\n+   * A user that is NOT part of the organization nor owner of the repo\n+   */\n   CONTRIBUTOR = 0b100000,\n+  /**\n+   * A user comment action on a {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n+  COMMENTED = 0b1000000,\n+  /**\n+   * Pull request opening item\n+   */\n+  TASK = 0b10000000,","score":{"reward":8.856,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":85.8493137254902,"syllables":44,"sentences":3,"score":0.7415068627450979},"multiplier":1,"relevance":0.9}},{"id":1579556333,"content":"this makes more sense!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1579556333","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -19,12 +19,42 @@ import {\n } from \"./start\";\n \n export enum CommentType {\n+  /**\n+   * Review related item\n+   */\n   REVIEW = 0b1,\n+  /**\n+   * Issue related item\n+   */\n   ISSUE = 0b10,\n+  /**\n+   * User assigned to the {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n   ASSIGNEE = 0b100,\n+  /**\n+   * The author of the {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n   ISSUER = 0b1000,\n+  /**\n+   * A user that is part of the organization or owner of the repo\n+   */\n   COLLABORATOR = 0b10000,\n+  /**\n+   * A user that is NOT part of the organization nor owner of the repo\n+   */\n   CONTRIBUTOR = 0b100000,\n+  /**\n+   * A user comment action on a {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n+   */\n+  COMMENTED = 0b1000000,\n+  /**\n+   * Pull request opening item\n+   */\n+  TASK = 0b10000000,","score":{"reward":0.684,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2014236289,"effect":{"addition":490,"deletion":80},"reward":22.8,"priority":4},{"reviewId":2017635547,"effect":{"addition":108,"deletion":106},"reward":8.56,"priority":4},{"reviewId":2020125850,"effect":{"addition":0,"deletion":0},"reward":0,"priority":4},{"reviewId":2020144465,"effect":{"addition":108,"deletion":106},"reward":8.56,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 113.428 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>4</td><td>39.92</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>10.116</td></tr><tr><td>Review</td><td>Comment</td><td>11</td><td>63.392</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12\" target=\"_blank\" rel=\"noopener\">#12</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+490 -80</td><td>4</td><td>22.8</td></tr><tr><td>+108 -106</td><td>4</td><td>8.56</td></tr><tr><td>+0 -0</td><td>4</td><td>0</td></tr><tr><td>+108 -106</td><td>4</td><td>8.56</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5#issuecomment-2035427134\" target=\"_blank\" rel=\"noopener\">there are a couple of options:1. we let the conversation-rewar&hellip;</a></h6></td><td><details><summary>2.3</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;  result: 0.3&#13;regex:&#13;  wordCount: 173&#13;  wordValue: 0.1&#13;  result: 2&#13;</pre></details></td><td>0.9</td><td>4</td><td>10.116</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574427305\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionreturn result;&#96;&#96;&#96;&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.9</td><td>4</td><td>4.788</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574441918\" target=\"_blank\" rel=\"noopener\">I'm not sure if it's a good idea to rely on logs for testing, is&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.8</td><td>4</td><td>6.912</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574458540\" target=\"_blank\" rel=\"noopener\">why so many nested functions? it becomes hard to read</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.7</td><td>4</td><td>3.024</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574460099\" target=\"_blank\" rel=\"noopener\">is there a reason we are using Decimal.js instead of native BigI&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.8</td><td>4</td><td>4.48</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574487172\" target=\"_blank\" rel=\"noopener\">Shouldn't task be issue opening item and specification is pull r&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.9</td><td>4</td><td>7.74</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1574492061\" target=\"_blank\" rel=\"noopener\">I assume this is a permit for task assignee, but where are other&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.7</td><td>4</td><td>5.18</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1575851470\" target=\"_blank\" rel=\"noopener\">gotcha, I thought this html is for all users</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.4</td><td>4</td><td>1.616</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1576482609\" target=\"_blank\" rel=\"noopener\">I can see from the example that it works correctly but when read&hellip;</a></h6></td><td><details><summary>3.55</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 63&#13;  wordValue: 0.1&#13;  result: 2.55&#13;</pre></details></td><td>0.9</td><td>4</td><td>15.984</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1578040543\" target=\"_blank\" rel=\"noopener\">Ok so we need it for precise floating point calculations, in tha&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.6</td><td>4</td><td>4.128</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1578050965\" target=\"_blank\" rel=\"noopener\">why is it &#96;ISSUER&#96; which is meant for author of issue/re&hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.9</td><td>4</td><td>8.856</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/12#discussion_r1579556333\" target=\"_blank\" rel=\"noopener\">this makes more sense!</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.3</td><td>4</td><td>0.684</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_236.json","json":{"whilefoo":{"userId":139262667,"total":150,"task":{"reward":150,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 150 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>150</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"gentlementlegen":{"total":74.97,"userId":9807008,"comments":[{"id":2774447057,"content":"I would like to do that, but the endpoint is changeable so if another API is used (I know that shiv recommended others) the return code of the API can differ (and actually the return code of OpenAPI doesn't indicate that the comment is too long as far as I remember, just a failure) and parsing the error message feels unreliable.\r\nSee error code 429: https://platform.openai.com/docs/guides/error-codes\r\n_Originally posted by @gentlementlegen in https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1903285110_\r\n## Description\r\nCurrently if the LLM fails, we throw and abort the run completely, which cancels all the rewards and results, and needs a new run to be triggered afterwards. While some errors are not recoverable, the ones like us sending too many tokens to be handled can be avoided by splitting the prompt and retrying with a smaller prompt until it fits with the given model.\r\n## Needed changes\r\nWe should implement:\r\n- a retry mechanism which, on errors that are not fatal, would give another try with the LLM\r\n- covering cases like the token amount sent being too large, responses having truncated JSON content, network failures\r\n- post a message saying the results are being retried\r\n- set a failure limit\r\n- throw in the end if every try is unsecessfull\r\n- add related tests","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/236","commentType":"ISSUE_SPECIFICATION","score":{"reward":7.96,"formatting":{"content":{"p":{"score":0,"elementCount":11},"em":{"score":0,"elementCount":1},"h2":{"score":1,"elementCount":2},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":6},"a":{"score":1,"elementCount":2}},"result":4.6},"priority":1,"words":{"wordCount":201,"wordValue":0.1,"result":1.72},"readability":{"fleschKincaid":46.55018099547516,"syllables":335,"sentences":7,"score":0.8655018099547516},"multiplier":1,"relevance":1}},{"id":2593468607,"content":"When you say \"already retry requests\", in which case, network failure? The idea was to cover problems like token size being too big, or the response from the LLM being truncated (sometimes the JSON is malformed for example). Will test in a bit.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2593468607","commentType":"PULL_COLLABORATOR","score":{"reward":6.792,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":74.24015503875972,"syllables":60,"sentences":3,"score":0.8575984496124027},"multiplier":1,"relevance":0.8}},{"id":2593520460,"content":"Very sorry if that wasn't clear enough, I will update the spec.\r\nAdded the following:","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2593520460","commentType":"PULL_COLLABORATOR","score":{"reward":1.884,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":82.39000000000001,"syllables":22,"sentences":2,"score":0.7760999999999999},"multiplier":1,"relevance":0.4}},{"id":2593596191,"content":"@whilefoo how do you determine the size? There is no API for this (afaik) and for the same model you can have different limits according to the plan (or tier) you are using. Not sure if there is a better way to handle it.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2593596191","commentType":"PULL_COLLABORATOR","score":{"reward":7.166,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":44,"wordValue":0.1,"result":2.27},"readability":{"fleschKincaid":80.43015151515155,"syllables":58,"sentences":3,"score":0.7956984848484845},"multiplier":1,"relevance":0.85}},{"id":2594327766,"content":"Maybe I don't understand but `js-tiktoken` can count tokens, but it cannot tell you that the model `gpt-4o` is limited to 128000 can it? I know that at first we were limited to half of this and asked OpenAI to increase the token limit, which is now upgraded to 128000, that's why I mention this.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2594327766","commentType":"PULL_COLLABORATOR","score":{"reward":6.975,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":55,"wordValue":0.1,"result":2.46},"readability":{"fleschKincaid":72.78795454545455,"syllables":69,"sentences":2,"score":0.8721204545454545},"multiplier":1,"relevance":0.75}},{"id":2595288637,"content":"I believe you are correct, would this be handled by the built-in retry or should we add delay between API calss?\r\nI think the biggest issue the retry can cover is the malformed JSON, there are plenty of times we just had to restart the whole comments evaluation because one output was incorrect and breaks the whole evaluation.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2595288637","commentType":"PULL_COLLABORATOR","score":{"reward":8.748,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":59,"wordValue":0.1,"result":2.51},"readability":{"fleschKincaid":56.445042372881375,"syllables":84,"sentences":2,"score":0.9644504237288137},"multiplier":1,"relevance":0.9}},{"id":2629180406,"content":"@0x4007 existing issue for what you mentioned: https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/57","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2629180406","commentType":"PULL_COLLABORATOR","score":{"reward":3.135,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":38.960441176470624,"syllables":32,"sentences":2,"score":0.7896044117647062},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2578272515,"effect":{"addition":956,"deletion":121},"reward":32.31,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 74.97 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>32.31</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>7.96</td></tr><tr><td>Review</td><td>Comment</td><td>6</td><td>34.7</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240\" target=\"_blank\" rel=\"noopener\">#240</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+956 -121</td><td>3</td><td>32.31</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/236\" target=\"_blank\" rel=\"noopener\">I would like to do that, but the endpoint is changeable so if an&hellip;</a></h6></td><td><details><summary>6.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 11&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    h2:&#13;      score: 1&#13;      elementCount: 2&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 6&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 4.6&#13;regex:&#13;  wordCount: 201&#13;  wordValue: 0.1&#13;  result: 1.72&#13;</pre></details></td><td>1</td><td>1</td><td>7.96</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2593468607\" target=\"_blank\" rel=\"noopener\">When you say \"already retry requests\", in which case, network fa&hellip;</a></h6></td><td><details><summary>2.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 43&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>0.8</td><td>3</td><td>6.792</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2593520460\" target=\"_blank\" rel=\"noopener\">Very sorry if that wasn't clear enough, I will update the spec.&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.884</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2593596191\" target=\"_blank\" rel=\"noopener\">@whilefoo how do you determine the size? There is no API for thi&hellip;</a></h6></td><td><details><summary>2.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 44&#13;  wordValue: 0.1&#13;  result: 2.27&#13;</pre></details></td><td>0.85</td><td>3</td><td>7.166</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2594327766\" target=\"_blank\" rel=\"noopener\">Maybe I don't understand but &#96;js-tiktoken&#96; can count tok&hellip;</a></h6></td><td><details><summary>2.46</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 55&#13;  wordValue: 0.1&#13;  result: 2.46&#13;</pre></details></td><td>0.75</td><td>3</td><td>6.975</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2595288637\" target=\"_blank\" rel=\"noopener\">I believe you are correct, would this be handled by the built-in&hellip;</a></h6></td><td><details><summary>2.51</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 59&#13;  wordValue: 0.1&#13;  result: 2.51&#13;</pre></details></td><td>0.9</td><td>3</td><td>8.748</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2629180406\" target=\"_blank\" rel=\"noopener\">@0x4007 existing issue for what you mentioned: https://github.co&hellip;</a></h6></td><td><details><summary>1.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.5</td><td>3</td><td>3.135</td></tr></tbody></table></details>"},"0x4007":{"total":3.246,"userId":4975670,"comments":[{"id":2614875431,"content":"I suppose showing the logs along with the comment link could be enough for QA?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2614875431","commentType":"PULL_COLLABORATOR","score":{"reward":1.35,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":78.81000000000003,"syllables":20,"sentences":1,"score":0.8118999999999997},"multiplier":1,"relevance":0.3}},{"id":2629098983,"content":"@whilefoo @gentlementlegen Auto merging should occur on approval. \nDisqualification should not be possible on approval.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2629098983","commentType":"PULL_COLLABORATOR","score":{"reward":0.816,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":1.822499999999991,"syllables":35,"sentences":2,"score":0.4182249999999999},"multiplier":1,"relevance":0.2}},{"id":2629099330,"content":"I can't merge due to conflicts","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2629099330","commentType":"PULL_COLLABORATOR","score":{"reward":1.08,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":103.04428571428575,"syllables":8,"sentences":1,"score":1},"multiplier":1,"relevance":0.4}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 3.246 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>3</td><td>3.246</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2614875431\" target=\"_blank\" rel=\"noopener\">I suppose showing the logs along with the comment link could be &hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.35</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2629098983\" target=\"_blank\" rel=\"noopener\">@whilefoo @gentlementlegen Auto merging should occur on approval&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.816</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/240#issuecomment-2629099330\" target=\"_blank\" rel=\"noopener\">I can't merge due to conflicts</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.08</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_26.json","json":{"gentlementlegen":{"userId":9807008,"total":407.554,"task":{"reward":300,"multiplier":0.5},"comments":[{"id":2324594264,"content":"We should keep comparing the old bot results with the new one, to make sure they behave similarly.\r\nIssues spotted:\r\n- specification should have a relevance of `1` (c.f. https://github.com/ubiquibot/conversation-rewards/issues/45)\r\n- all the items should be listed (case of missing `h5`)\r\n- details of the applied multiplier should be displayed (supposedly already implemented, but not showing up, probably not the latest deployment)\r\n- review comments should be considered\r\n- relevance should be set at 1 in case of bug during ChatGpt evaluation\r\n- specification doesn't seem to be taken into account\r\n- comments are ignored https://github.com/ubiquibot/conversation-rewards/issues/26\r\n- should properly display all the comments: https://github.com/ubiquibot/conversation-rewards/issues/66#issuecomment-2255243916\r\nOld bot configuration: https://github.com/ubiquity/ubiquibot-config/blob/development/.github/ubiquibot-config.yml\r\nRelated results:\r\n- https://github.com/ubiquity/pay.ubq.fi/issues/229#issuecomment-2136721623\r\n- https://github.com/ubiquity/pay.ubq.fi/issues/195#issuecomment-2143325849\r\n- https://github.com/ubiquibot/plugins-wishlist/issues/10#issuecomment-2148782131\r\n- https://github.com/ubiquibot/plugins-wishlist/issues/13#issuecomment-2156239752\r\n- https://github.com/ubiquity/rpc-handler/issues/21#issuecomment-2211766470\r\n- https://github.com/ubiquity/ubiquibot-logger/issues/19#issuecomment-2208243211\r\n- https://github.com/ubiquibot/conversation-rewards/issues/29#issuecomment-2222259192\r\n- https://github.com/ubiquity/ubiquibot-kernel/issues/58#issuecomment-2232128838","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/26","commentType":"ISSUE_SPECIFICATION","score":{"reward":20.02,"formatting":{"content":{"p":{"score":0,"elementCount":20},"ul":{"score":0,"elementCount":2},"li":{"score":0.1,"elementCount":16},"a":{"score":1,"elementCount":12}},"result":13.6},"priority":1,"words":{"wordCount":98,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":38.44332777314429,"syllables":408,"sentences":22,"score":0.7844332777314429},"multiplier":1,"relevance":1}},{"id":1692783847,"content":"Maybe these are not needed anymore.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1692783847","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,12 +1,13 @@\n # `@ubiquibot/conversation-rewards`\n \n-This is intended to be the proper implementation of comment incentives, based on our learnings from the first go-around. \n+This is intended to be the proper implementation of comment incentives, based on our learnings from the first go-around.","score":{"reward":0.444,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":87.94500000000002,"syllables":8,"sentences":1,"score":0.7205499999999998},"multiplier":1,"relevance":0.2}},{"id":1692789562,"content":"Wouldn't this be redundant in the configuration?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1692789562","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -48,34 +49,73 @@ export class ContentEvaluatorModule implements Module {\n \n   async _processComment(comments: Readonly<GithubCommentScore>[], specificationBody: string) {\n     const commentsWithScore: GithubCommentScore[] = [...comments];\n-    const commentsBody = commentsWithScore.map((comment) => comment.content);\n-    const relevance = await this._evaluateComments(specificationBody, commentsBody);\n \n-    if (relevance.length !== commentsWithScore.length) {\n-      console.error(\"Relevance / Comment length mismatch! Skipping.\");\n-      return [];\n+    const fixedRelevances: { [k: string]: number } = this._relevancesForCommentTypes();","score":{"reward":1.746,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":50.66500000000002,"syllables":14,"sentences":1,"score":0.9066500000000002},"multiplier":1,"relevance":0.6}},{"id":1697852395,"content":"Maybe remove logs or use the logger","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1697852395","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -134,12 +134,16 @@ export class ContentEvaluatorModule implements Module {\n     });\n \n     const rawResponse = String(response.choices[0].message.content);\n+    console.log(\"OpenAI raw response:\", rawResponse);","score":{"reward":1.743,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":90.95857142857145,"syllables":9,"sentences":1,"score":0.6904142857142855},"multiplier":1,"relevance":0.7}},{"id":2245068730,"content":"From my understanding, any comment within the pull request should have its relevance set to `1` because comments in the PR don't related to the specification itself, so doesn't make sense to evaluate them against the spec. Probably this should be configurable though the configuration file.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2245068730","commentType":"PULL_COLLABORATOR","score":{"reward":7.008,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":47,"wordValue":0.1,"result":2.33},"readability":{"fleschKincaid":44.38250000000002,"syllables":77,"sentences":2,"score":0.8438250000000003},"multiplier":1,"relevance":0.8}},{"id":2257522387,"content":"@EresDev Could you please fix the conflicts? This Pr is quite critical and we would need this to be merged soon.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2257522387","commentType":"PULL_COLLABORATOR","score":{"reward":2.745,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":91.43464285714288,"syllables":26,"sentences":2,"score":0.6856535714285712},"multiplier":1,"relevance":0.5}},{"id":2257766947,"content":"Also I am trying to get this PR in, that youwill probably need to merge because of the configuration changes: https://github.com/ubiquibot/conversation-rewards/pull/68","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2257766947","commentType":"PULL_COLLABORATOR","score":{"reward":3.84,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":56.66071428571428,"syllables":45,"sentences":2,"score":0.9666071428571428},"multiplier":1,"relevance":0.4}},{"id":2259584021,"content":"I meant that maybe it would be better to have this one merged first because there might be conflicts with the configuration file again.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2259584021","commentType":"PULL_COLLABORATOR","score":{"reward":1.917,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":66.15000000000003,"syllables":33,"sentences":1,"score":0.9384999999999997},"multiplier":1,"relevance":0.3}},{"id":2260213803,"content":"@EresDev I'll run lots of tests and come back to you.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2260213803","commentType":"PULL_COLLABORATOR","score":{"reward":0.744,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":95.955,"syllables":14,"sentences":1,"score":0.64045},"multiplier":1,"relevance":0.2}},{"id":2266721057,"content":"@EresDev I just ran it against https://github.com/ubiquity/pay.ubq.fi/issues/195 and it seems some comments are not picked up still. And the specification comment doesn't seem to be displayed properly as well, can you confirm?\r\nOn https://github.com/ubiquibot/conversation-rewards/issues/29 it doesn't seem to properly pick up all the review comments.\r\n---\r\nSince this is urgently needed I opened a PR against your repo here: https://github.com/EresDevOrg/conversation-rewards/pull/1\r\nIt will contain fixes for what I mentioned above.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2266721057","commentType":"PULL_COLLABORATOR","score":{"reward":19.197,"formatting":{"content":{"p":{"score":0,"elementCount":4},"hr":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":3}},"result":3},"priority":3,"words":{"wordCount":67,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":68.63987922705314,"syllables":139,"sentences":9,"score":0.9136012077294686},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2201372012,"effect":{"addition":691,"deletion":118},"reward":24.27,"priority":3},{"reviewId":2209090093,"effect":{"addition":399,"deletion":331},"reward":21.9,"priority":3},{"reviewId":2226618465,"effect":{"addition":28,"deletion":14},"reward":1.26,"priority":3},{"reviewId":2237212644,"effect":{"addition":15,"deletion":9},"reward":0.72,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 407.554 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>0.5</td><td>300</td></tr><tr><td>Review</td><td>Code Review</td><td>4</td><td>48.15</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>20.02</td></tr><tr><td>Review</td><td>Comment</td><td>9</td><td>39.384</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55\" target=\"_blank\" rel=\"noopener\">#55</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+691 -118</td><td>3</td><td>24.27</td></tr><tr><td>+399 -331</td><td>3</td><td>21.9</td></tr><tr><td>+28 -14</td><td>3</td><td>1.26</td></tr><tr><td>+15 -9</td><td>3</td><td>0.72</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/26\" target=\"_blank\" rel=\"noopener\">We should keep comparing the old bot results with the new one, t&hellip;</a></h6></td><td><details><summary>16.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 20&#13;    ul:&#13;      score: 0&#13;      elementCount: 2&#13;    li:&#13;      score: 0.1&#13;      elementCount: 16&#13;    a:&#13;      score: 1&#13;      elementCount: 12&#13;  result: 13.6&#13;regex:&#13;  wordCount: 98&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>1</td><td>1</td><td>20.02</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1692783847\" target=\"_blank\" rel=\"noopener\">Maybe these are not needed anymore.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.444</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1692789562\" target=\"_blank\" rel=\"noopener\">Wouldn't this be redundant in the configuration?</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.746</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1697852395\" target=\"_blank\" rel=\"noopener\">Maybe remove logs or use the logger</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.743</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2245068730\" target=\"_blank\" rel=\"noopener\">From my understanding, any comment within the pull request shoul&hellip;</a></h6></td><td><details><summary>2.33</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 47&#13;  wordValue: 0.1&#13;  result: 2.33&#13;</pre></details></td><td>0.8</td><td>3</td><td>7.008</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2257522387\" target=\"_blank\" rel=\"noopener\">@EresDev Could you please fix the conflicts? This Pr is quite cr&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.5</td><td>3</td><td>2.745</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2257766947\" target=\"_blank\" rel=\"noopener\">Also I am trying to get this PR in, that youwill probably need t&hellip;</a></h6></td><td><details><summary>2.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.4</td><td>3</td><td>3.84</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2259584021\" target=\"_blank\" rel=\"noopener\">I meant that maybe it would be better to have this one merged fi&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.917</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2260213803\" target=\"_blank\" rel=\"noopener\">@EresDev I'll run lots of tests and come back to you.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.744</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2266721057\" target=\"_blank\" rel=\"noopener\">@EresDev I just ran it against https://github.com/ubiquity/pay.u&hellip;</a></h6></td><td><details><summary>5.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 3&#13;regex:&#13;  wordCount: 67&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>0.9</td><td>3</td><td>19.197</td></tr></tbody></table></details>"},"EresDev":{"userId":11886219,"total":300,"task":{"reward":300,"multiplier":0.5},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 300 XP ]</a>&nbsp;</h3><h6>@EresDev</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>0.5</td><td>300</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":97.323,"userId":4975670,"comments":[{"id":2286789588,"content":"@gentlementlegen @EresDev what do you guys think about the rewards comparing old to new? Old suggests you guys put in similar work, and new suggests that eres put in almost double. I'm under the impression that eres did put in about double the work (or more technically speaking, provided more value towards the completion of this project) but curious to hear your opinions. \r\nI think we should start gently adjusting levers to align as accurately as possible for this.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/26#issuecomment-2286789588","commentType":"ISSUE_COLLABORATOR","score":{"reward":8.088,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":80,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":53.29000000000005,"syllables":126,"sentences":4,"score":0.9329000000000005},"multiplier":1,"relevance":0.8}},{"id":2290190729,"content":"Curious to hear if you guys have any proposals to solve for this scenario.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/26#issuecomment-2290190729","commentType":"ISSUE_COLLABORATOR","score":{"reward":3.087,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":71.76785714285715,"syllables":20,"sentences":1,"score":0.8823214285714285},"multiplier":1,"relevance":0.7}},{"id":2292810993,"content":"Not all lines of code are equal so I think this is tough to solve for. We could consider compiling the diff from every code contributor and then ask ChatGPT how impactful the sum total of their changes are in order to try and be more nuanced with the task reward.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/26#issuecomment-2292810993","commentType":"ISSUE_COLLABORATOR","score":{"reward":8.208,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":71.47014705882354,"syllables":66,"sentences":2,"score":0.8852985294117646},"multiplier":1,"relevance":0.9}},{"id":2293275829,"content":"Just take the new permit then","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/26#issuecomment-2293275829","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.948,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":102.045,"syllables":7,"sentences":1,"score":1},"multiplier":1,"relevance":0.4}},{"id":2293276789,"content":"Unlikely. The new context lengths are crazy large","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/26#issuecomment-2293276789","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.47,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":65.30000000000001,"syllables":13,"sentences":2,"score":0.9469999999999998},"multiplier":1,"relevance":0.5}},{"id":1674641724,"content":"I think there's an official way to tell the API to return a JSON response with some type of property in the API call. \nThis feature did not exist when the original code was authored","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1674641724","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -106,7 +123,8 @@ export class ContentEvaluatorModule implements Module {\n       .map((comment) => comment)\n       .join(\n         \"\\n\"\n-      )}\\n\\`\\`\\`\\n\\n\\nTo what degree are each of the comments in the conversation relevant and valuable to further defining the issue specification? Please reply with ONLY an array of float numbers between 0 and 1, corresponding to each comment in the order they appear. Each float should represent the degree of relevance and added value of the comment to the issue. The total length of the array in your response should equal exactly ${comments.length\n-      } elements.`;\n+      )}\\n\\`\\`\\`\\n\\n\\nTo what degree are each of the comments in the conversation relevant and valuable to further defining the issue specification? Please reply with ONLY an array of float numbers between 0 and 1, corresponding to each comment in the order they appear. Each float should represent the degree of relevance and added value of the comment to the issue. The total length of the array in your response should equal exactly ${","score":{"reward":4.662,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":75.76500000000001,"syllables":48,"sentences":2,"score":0.8423499999999998},"multiplier":1,"relevance":0.6}},{"id":1678515477,"content":"Reference docs https://community.openai.com/t/how-do-i-use-the-new-json-mode/475890","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1678515477","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -106,7 +123,8 @@ export class ContentEvaluatorModule implements Module {\n       .map((comment) => comment)\n       .join(\n         \"\\n\"\n-      )}\\n\\`\\`\\`\\n\\n\\nTo what degree are each of the comments in the conversation relevant and valuable to further defining the issue specification? Please reply with ONLY an array of float numbers between 0 and 1, corresponding to each comment in the order they appear. Each float should represent the degree of relevance and added value of the comment to the issue. The total length of the array in your response should equal exactly ${comments.length\n-      } elements.`;\n+      )}\\n\\`\\`\\`\\n\\n\\nTo what degree are each of the comments in the conversation relevant and valuable to further defining the issue specification? Please reply with ONLY an array of float numbers between 0 and 1, corresponding to each comment in the order they appear. Each float should represent the degree of relevance and added value of the comment to the issue. The total length of the array in your response should equal exactly ${","score":{"reward":3.255,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":79.80916666666668,"syllables":23,"sentences":3,"score":0.8019083333333331},"multiplier":1,"relevance":0.7}},{"id":1696218603,"content":"I would imagine that relevance scoring should be a number.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1696218603","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -48,34 +49,73 @@ export class ContentEvaluatorModule implements Module {\n \n   async _processComment(comments: Readonly<GithubCommentScore>[], specificationBody: string) {\n     const commentsWithScore: GithubCommentScore[] = [...comments];\n-    const commentsBody = commentsWithScore.map((comment) => comment.content);\n-    const relevance = await this._evaluateComments(specificationBody, commentsBody);\n \n-    if (relevance.length !== commentsWithScore.length) {\n-      console.error(\"Relevance / Comment length mismatch! Skipping.\");\n-      return [];\n+    const fixedRelevances: { [k: string]: number } = this._relevancesForCommentTypes();\n+\n+    // exclude comments that have fixed relevance multiplier. e.g. review comments = 1\n+    const commentsToEvaluate: { id: number; comment: string }[] = [];\n+    for (let i = 0; i < commentsWithScore.length; i++) {\n+      const currentComment = commentsWithScore[i];\n+      if (!fixedRelevances[currentComment.type]) {\n+        commentsToEvaluate.push({\n+          id: currentComment.id,\n+          comment: currentComment.content,\n+        });\n+      }\n     }\n \n-    for (let i = 0; i < relevance.length; i++) {\n+    const relevancesByAI = await this._evaluateComments(specificationBody, commentsToEvaluate);\n+\n+    if (Object.keys(relevancesByAI).length !== commentsToEvaluate.length) {\n+      console.error(\"Relevance / Comment length mismatch! \\nWill use 1 as relevance for missing comments.\");\n+    }\n+\n+    for (let i = 0; i < commentsWithScore.length; i++) {\n       const currentComment = commentsWithScore[i];\n-      const currentRelevance = relevance[i];\n+      let currentRelevance = 1; // For comments not in fixed relevance types or missed by OpenAI evaluation\n+\n+      if (fixedRelevances[currentComment.type]) {\n+        currentRelevance = fixedRelevances[currentComment.type];\n+      } else if (!isNaN(relevancesByAI[currentComment.id])) {\n+        currentRelevance = relevancesByAI[currentComment.id];\n+      }\n+\n       const currentReward = new Decimal(currentComment.score?.reward || 0);\n       currentComment.score = {\n         ...(currentComment.score || {}),\n-        relevance: currentRelevance.toNumber(),\n+        relevance: new Decimal(currentRelevance).toNumber(),\n         reward: currentReward.mul(currentRelevance).toNumber(),\n       };\n     }\n \n     return commentsWithScore;\n   }\n \n-  async _evaluateComments(specification: string, comments: string[]): Promise<Decimal[]> {\n+  _relevancesForCommentTypes(): { [k: string]: number } {\n+    const relevances: { [k: string]: number } = {};\n+    this._configuration.multipliers.forEach((multiplier) => {\n+      let commentType = 0;\n+      multiplier.targets.forEach((target) => {\n+        commentType |= CommentType[target as keyof typeof CommentType];\n+      });\n+\n+      if (multiplier.relevance !== undefined) {\n+        relevances[commentType as unknown as string] = multiplier.relevance;","score":{"reward":2.808,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":61.32500000000002,"syllables":16,"sentences":1,"score":0.9867499999999998},"multiplier":1,"relevance":0.8}},{"id":1696218913,"content":"Can you provide an example of what types of mistakes typebox can help avoid?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1696218913","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -90,23 +130,21 @@ export class ContentEvaluatorModule implements Module {\n       });\n \n       const rawResponse = String(response.choices[0].message.content);\n-      const parsedResponse = JSON.parse(rawResponse) as number[];\n-      return parsedResponse.map((o) => new Decimal(o));\n+      return JSON.parse(rawResponse) as { [k: string]: number };","score":{"reward":2.235,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":65.72500000000001,"syllables":21,"sentences":1,"score":0.9427499999999999},"multiplier":1,"relevance":0.5}},{"id":1715681864,"content":"Sets these to relevance 1? This is not clear to me.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1715681864","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -48,70 +48,80 @@ Reward formula: `((count * wordValue) * (score * formattingMultiplier) * n) * re\n \n Here is a possible valid configuration to enable this plugin. See [these files](./src/configuration) for more details.\n \n-\n ```yaml\n plugin: ubiquibot/conversation-rewards\n with:\n-    evmNetworkId: 100\n-    evmPrivateEncrypted: \"encrypted-key\"\n-    erc20RewardToken: \"0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d\"\n-    dataCollection:\n-      maxAttempts: 10\n-      delayMs: 10000\n-    incentives:\n-      requirePriceLabel: true\n-      contentEvaluator:\n-      userExtractor:\n-        redeemTask: true\n-      dataPurge:\n-      formattingEvaluator:\n-        scores:\n-          br: 0\n-          code: 1\n-          p: 1\n-          em: 0\n-          img: 0\n-          strong: 0\n-          blockquote: 0\n-          h1: 1\n-          h2: 1\n-          h3: 1\n-          h4: 1\n-          h5: 1\n-          h6: 1\n-          a: 1\n-          li: 1\n-          td: 1\n-          hr: 0\n+  evmNetworkId: 100\n+  evmPrivateEncrypted: \"encrypted-key\"\n+  erc20RewardToken: \"0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d\"\n+  dataCollection:\n+    maxAttempts: 10\n+    delayMs: 10000\n+  incentives:\n+    requirePriceLabel: true\n+    contentEvaluator:\n+      multipliers:\n+        - select: [ISSUE_SPECIFICATION]\n+          relevance: 1\n+        - select: [PULL_AUTHOR]\n+          relevance: 1\n+        - select: [PULL_ASSIGNEE]\n+          relevance: 1\n+        - select: [PULL_COLLABORATOR]\n+          relevance: 1\n+        - select: [PULL_CONTRIBUTOR]\n+          relevance: 1","score":{"reward":2.646,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":101.27068181818181,"syllables":13,"sentences":2,"score":1},"multiplier":1,"relevance":0.7}},{"id":1715682680,"content":"What is this? We should just make it a single property without nesting probably.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1715682680","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -48,70 +48,80 @@ Reward formula: `((count * wordValue) * (score * formattingMultiplier) * n) * re\n \n Here is a possible valid configuration to enable this plugin. See [these files](./src/configuration) for more details.\n \n-\n ```yaml\n plugin: ubiquibot/conversation-rewards\n with:\n-    evmNetworkId: 100\n-    evmPrivateEncrypted: \"encrypted-key\"\n-    erc20RewardToken: \"0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d\"\n-    dataCollection:\n-      maxAttempts: 10\n-      delayMs: 10000\n-    incentives:\n-      requirePriceLabel: true\n-      contentEvaluator:\n-      userExtractor:\n-        redeemTask: true\n-      dataPurge:\n-      formattingEvaluator:\n-        scores:\n-          br: 0\n-          code: 1\n-          p: 1\n-          em: 0\n-          img: 0\n-          strong: 0\n-          blockquote: 0\n-          h1: 1\n-          h2: 1\n-          h3: 1\n-          h4: 1\n-          h5: 1\n-          h6: 1\n-          a: 1\n-          li: 1\n-          td: 1\n-          hr: 0\n+  evmNetworkId: 100\n+  evmPrivateEncrypted: \"encrypted-key\"\n+  erc20RewardToken: \"0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d\"\n+  dataCollection:\n+    maxAttempts: 10\n+    delayMs: 10000\n+  incentives:\n+    requirePriceLabel: true\n+    contentEvaluator:\n+      multipliers:\n+        - select: [ISSUE_SPECIFICATION]\n+          relevance: 1\n+        - select: [PULL_AUTHOR]\n+          relevance: 1\n+        - select: [PULL_ASSIGNEE]\n+          relevance: 1\n+        - select: [PULL_COLLABORATOR]\n+          relevance: 1\n+        - select: [PULL_CONTRIBUTOR]\n+          relevance: 1\n+    userExtractor:\n+      redeemTask: true","score":{"reward":3.504,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":72.83000000000003,"syllables":21,"sentences":2,"score":0.8716999999999997},"multiplier":1,"relevance":0.8}},{"id":1715687045,"content":"I'm surprised that empty comments have been found in testing. I didn't know that is possible.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1715687045","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -22,10 +22,10 @@ export class UserExtractorModule implements Module {\n   }\n \n   /**\n-   * Checks if the comment is made by a human user, and not empty.\n+   * Checks if the comment is made by a human user, not empty, and not a command.\n    */\n   _checkEntryValidity(comment: (typeof IssueActivity.prototype.allComments)[0]) {\n-    return comment.body && comment.user?.type === \"User\";\n+    return comment.body && comment.user?.type === \"User\" && comment.body.trim()[0] !== \"/\";","score":{"reward":3.042,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":84.90000000000003,"syllables":24,"sentences":2,"score":0.7509999999999997},"multiplier":1,"relevance":0.6}},{"id":2229654724,"content":"Defaults should be set to `0` value.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2229654724","commentType":"PULL_COLLABORATOR","score":{"reward":1.776,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":87.94500000000002,"syllables":8,"sentences":1,"score":0.7205499999999998},"multiplier":1,"relevance":0.8}},{"id":2246840353,"content":"Good catch on this task. Why don't you address that in a new pull? Also provide a time estimate. Consider that the main work will probably be to adjust the prompt.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2246840353","commentType":"PULL_COLLABORATOR","score":{"reward":2.844,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":87.67750000000001,"syllables":42,"sentences":4,"score":0.7232249999999999},"multiplier":1,"relevance":0.4}}],"reviewRewards":[{"reviews":[{"reviewId":2172954237,"effect":{"addition":24,"deletion":6},"reward":0.9,"priority":3},{"reviewId":2206552225,"effect":{"addition":688,"deletion":133},"reward":24.63,"priority":3},{"reviewId":2236178887,"effect":{"addition":431,"deletion":343},"reward":23.22,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 97.323 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>48.75</td></tr><tr><td>Issue</td><td>Comment</td><td>5</td><td>21.801</td></tr><tr><td>Review</td><td>Comment</td><td>9</td><td>26.772</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55\" target=\"_blank\" rel=\"noopener\">#55</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+24 -6</td><td>3</td><td>0.9</td></tr><tr><td>+688 -133</td><td>3</td><td>24.63</td></tr><tr><td>+431 -343</td><td>3</td><td>23.22</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/26#issuecomment-2286789588\" target=\"_blank\" rel=\"noopener\">@gentlementlegen @EresDev what do you guys think about the rewar&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 80&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.8</td><td>3</td><td>8.088</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/26#issuecomment-2290190729\" target=\"_blank\" rel=\"noopener\">Curious to hear if you guys have any proposals to solve for this&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.087</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/26#issuecomment-2292810993\" target=\"_blank\" rel=\"noopener\">Not all lines of code are equal so I think this is tough to solv&hellip;</a></h6></td><td><details><summary>2.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 51&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>0.9</td><td>3</td><td>8.208</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/26#issuecomment-2293275829\" target=\"_blank\" rel=\"noopener\">Just take the new permit then</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.4</td><td>3</td><td>0.948</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/26#issuecomment-2293276789\" target=\"_blank\" rel=\"noopener\">Unlikely. The new context lengths are crazy large</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.47</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1674641724\" target=\"_blank\" rel=\"noopener\">I think there's an official way to tell the API to return a JSON&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.6</td><td>3</td><td>4.662</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1678515477\" target=\"_blank\" rel=\"noopener\">Reference docs https://community.openai.com/t/how-do-i-use-the-n&hellip;</a></h6></td><td><details><summary>1.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.255</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1696218603\" target=\"_blank\" rel=\"noopener\">I would imagine that relevance scoring should be a number.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.8</td><td>3</td><td>2.808</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1696218913\" target=\"_blank\" rel=\"noopener\">Can you provide an example of what types of mistakes typebox can&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.5</td><td>3</td><td>2.235</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1715681864\" target=\"_blank\" rel=\"noopener\">Sets these to relevance 1? This is not clear to me.</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.646</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1715682680\" target=\"_blank\" rel=\"noopener\">What is this? We should just make it a single property without n&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.504</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1715687045\" target=\"_blank\" rel=\"noopener\">I'm surprised that empty comments have been found in testing. I &hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.6</td><td>3</td><td>3.042</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2229654724\" target=\"_blank\" rel=\"noopener\">Defaults should be set to &#96;0&#96; value.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.776</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2246840353\" target=\"_blank\" rel=\"noopener\">Good catch on this task. Why don't you address that in a new pul&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.4</td><td>3</td><td>2.844</td></tr></tbody></table></details>"},"whilefoo":{"total":79.89,"userId":139262667,"comments":[{"id":2205320951,"content":"it'd be a good idea to merge latest changes because there were some changes to `CommentType`\r\nalso consider adding a test case which tests fixed relevances","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#pullrequestreview-2205320951","commentType":"PULL_COLLABORATOR","score":{"reward":5.352,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":66.56038461538463,"syllables":35,"sentences":1,"score":0.9343961538461536},"multiplier":1,"relevance":0.8}},{"id":1695450152,"content":"```suggestion\r\nconst commentType = Type.Union([...Object.keys(CommentType).map((key) => Type.Literal(key as keyof typeof CommentType))]);\r\n```\r\nit'd be nice to have a clear name","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1695450152","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,10 +1,50 @@\n import { Static, Type } from \"@sinclair/typebox\";\n+import { CommentType } from \"./comment-types\";\n+\n+const type = Type.Union([...Object.keys(CommentType).map((key) => Type.Literal(key as keyof typeof CommentType))]);","score":{"reward":2.289,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":113.10000000000002,"syllables":9,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":1695684838,"content":"Why is casting to string needed?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1695684838","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -48,34 +49,73 @@ export class ContentEvaluatorModule implements Module {\n \n   async _processComment(comments: Readonly<GithubCommentScore>[], specificationBody: string) {\n     const commentsWithScore: GithubCommentScore[] = [...comments];\n-    const commentsBody = commentsWithScore.map((comment) => comment.content);\n-    const relevance = await this._evaluateComments(specificationBody, commentsBody);\n \n-    if (relevance.length !== commentsWithScore.length) {\n-      console.error(\"Relevance / Comment length mismatch! Skipping.\");\n-      return [];\n+    const fixedRelevances: { [k: string]: number } = this._relevancesForCommentTypes();\n+\n+    // exclude comments that have fixed relevance multiplier. e.g. review comments = 1\n+    const commentsToEvaluate: { id: number; comment: string }[] = [];\n+    for (let i = 0; i < commentsWithScore.length; i++) {\n+      const currentComment = commentsWithScore[i];\n+      if (!fixedRelevances[currentComment.type]) {\n+        commentsToEvaluate.push({\n+          id: currentComment.id,\n+          comment: currentComment.content,\n+        });\n+      }\n     }\n \n-    for (let i = 0; i < relevance.length; i++) {\n+    const relevancesByAI = await this._evaluateComments(specificationBody, commentsToEvaluate);\n+\n+    if (Object.keys(relevancesByAI).length !== commentsToEvaluate.length) {\n+      console.error(\"Relevance / Comment length mismatch! \\nWill use 1 as relevance for missing comments.\");\n+    }\n+\n+    for (let i = 0; i < commentsWithScore.length; i++) {\n       const currentComment = commentsWithScore[i];\n-      const currentRelevance = relevance[i];\n+      let currentRelevance = 1; // For comments not in fixed relevance types or missed by OpenAI evaluation\n+\n+      if (fixedRelevances[currentComment.type]) {\n+        currentRelevance = fixedRelevances[currentComment.type];\n+      } else if (!isNaN(relevancesByAI[currentComment.id])) {\n+        currentRelevance = relevancesByAI[currentComment.id];\n+      }\n+\n       const currentReward = new Decimal(currentComment.score?.reward || 0);\n       currentComment.score = {\n         ...(currentComment.score || {}),\n-        relevance: currentRelevance.toNumber(),\n+        relevance: new Decimal(currentRelevance).toNumber(),\n         reward: currentReward.mul(currentRelevance).toNumber(),\n       };\n     }\n \n     return commentsWithScore;\n   }\n \n-  async _evaluateComments(specification: string, comments: string[]): Promise<Decimal[]> {\n+  _relevancesForCommentTypes(): { [k: string]: number } {\n+    const relevances: { [k: string]: number } = {};\n+    this._configuration.multipliers.forEach((multiplier) => {\n+      let commentType = 0;\n+      multiplier.targets.forEach((target) => {\n+        commentType |= CommentType[target as keyof typeof CommentType];\n+      });\n+\n+      if (multiplier.relevance !== undefined) {\n+        relevances[commentType as unknown as string] = multiplier.relevance;","score":{"reward":1.422,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":102.045,"syllables":7,"sentences":1,"score":1},"multiplier":1,"relevance":0.6}},{"id":1695687390,"content":"seems weird to return `{}`, if AI evaluation failed we should probably stop execution","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1695687390","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -90,23 +130,21 @@ export class ContentEvaluatorModule implements Module {\n       });\n \n       const rawResponse = String(response.choices[0].message.content);\n-      const parsedResponse = JSON.parse(rawResponse) as number[];\n-      return parsedResponse.map((o) => new Decimal(o));\n+      return JSON.parse(rawResponse) as { [k: string]: number };\n     } catch (error) {\n       console.error(`Failed to evaluate comment`, error);\n-      return [];\n+      return {};","score":{"reward":3.78,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":50.470769230769264,"syllables":22,"sentences":1,"score":0.9047076923076927},"multiplier":1,"relevance":0.9}},{"id":1695688658,"content":"it might be a good idea to validate the response with typebox in order to avoid AI mistakes","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1695688658","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -90,23 +130,21 @@ export class ContentEvaluatorModule implements Module {\n       });\n \n       const rawResponse = String(response.choices[0].message.content);\n-      const parsedResponse = JSON.parse(rawResponse) as number[];\n-      return parsedResponse.map((o) => new Decimal(o));\n+      return JSON.parse(rawResponse) as { [k: string]: number };","score":{"reward":4.833,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":61.665000000000006,"syllables":27,"sentences":1,"score":0.98335},"multiplier":1,"relevance":0.9}},{"id":1696629687,"content":"For example one time I made a prompt that instructed it to output an object with value which is a number but the output was a number in string `\"1\"` instead of just a number, or it could for some reason put a number that is higher than 1. \r\nI know this is rare but I still like to validate any external input to avoid bugs later in the code.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1696629687","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -90,23 +130,21 @@ export class ContentEvaluatorModule implements Module {\n       });\n \n       const rawResponse = String(response.choices[0].message.content);\n-      const parsedResponse = JSON.parse(rawResponse) as number[];\n-      return parsedResponse.map((o) => new Decimal(o));\n+      return JSON.parse(rawResponse) as { [k: string]: number };","score":{"reward":8.064,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":69,"wordValue":0.1,"result":2.59},"readability":{"fleschKincaid":61.46967391304348,"syllables":90,"sentences":2,"score":0.9853032608695652},"multiplier":1,"relevance":0.8}},{"id":1712680299,"content":"usually typebox schemas are in types folder","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1712680299","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -91,49 +112,41 @@ export class ContentEvaluatorModule implements Module {\n     return commentsWithScore;\n   }\n \n-  _relevancesForCommentTypes(): { [k: string]: number } {\n-    const relevances: { [k: string]: number } = {};\n-    this._configuration.multipliers.forEach((multiplier) => {\n-      let commentType = 0;\n-      multiplier.targets.forEach((target) => {\n-        commentType |= CommentType[target as keyof typeof CommentType];\n-      });\n-\n-      if (multiplier.relevance !== undefined) {\n-        relevances[commentType as unknown as string] = multiplier.relevance;\n-      }\n-    });\n-    return relevances;\n-  }\n-\n   async _evaluateComments(\n     specification: string,\n     comments: { id: number; comment: string }[]\n   ): Promise<{ [k: string]: number }> {\n     const prompt = this._generatePrompt(specification, comments);\n \n-    try {\n-      const response: OpenAI.Chat.ChatCompletion = await this._openAi.chat.completions.create({\n-        model: \"gpt-4o\",\n-        response_format: { type: \"json_object\" },\n-        messages: [\n-          {\n-            role: \"system\",\n-            content: prompt,\n-          },\n-        ],\n-        temperature: 1,\n-        max_tokens: 128,\n-        top_p: 1,\n-        frequency_penalty: 0,\n-        presence_penalty: 0,\n-      });\n-\n-      const rawResponse = String(response.choices[0].message.content);\n-      return JSON.parse(rawResponse) as { [k: string]: number };\n-    } catch (error) {\n-      console.error(`Failed to evaluate comment`, error);\n-      return {};\n+    const response: OpenAI.Chat.ChatCompletion = await this._openAi.chat.completions.create({\n+      model: \"gpt-4o\",\n+      response_format: { type: \"json_object\" },\n+      messages: [\n+        {\n+          role: \"system\",\n+          content: prompt,\n+        },\n+      ],\n+      temperature: 1,\n+      max_tokens: 128,\n+      top_p: 1,\n+      frequency_penalty: 0,\n+      presence_penalty: 0,\n+    });\n+\n+    const rawResponse = String(response.choices[0].message.content);\n+    logger.info(`OpenAI raw response: ${rawResponse}`);\n+\n+    const jsonResponse = JSON.parse(rawResponse);\n+\n+    const responseType = Type.Record(Type.String(), Type.Number({ minimum: 0, maximum: 1 }));","score":{"reward":1.806,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":42.61571428571432,"syllables":13,"sentences":1,"score":0.8261571428571431},"multiplier":1,"relevance":0.7}},{"id":1712680455,"content":"Consider using `Value.Decode` because it checks the value, decodes it if necessary and returns it as correct type","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1712680455","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -91,49 +112,41 @@ export class ContentEvaluatorModule implements Module {\n     return commentsWithScore;\n   }\n \n-  _relevancesForCommentTypes(): { [k: string]: number } {\n-    const relevances: { [k: string]: number } = {};\n-    this._configuration.multipliers.forEach((multiplier) => {\n-      let commentType = 0;\n-      multiplier.targets.forEach((target) => {\n-        commentType |= CommentType[target as keyof typeof CommentType];\n-      });\n-\n-      if (multiplier.relevance !== undefined) {\n-        relevances[commentType as unknown as string] = multiplier.relevance;\n-      }\n-    });\n-    return relevances;\n-  }\n-\n   async _evaluateComments(\n     specification: string,\n     comments: { id: number; comment: string }[]\n   ): Promise<{ [k: string]: number }> {\n     const prompt = this._generatePrompt(specification, comments);\n \n-    try {\n-      const response: OpenAI.Chat.ChatCompletion = await this._openAi.chat.completions.create({\n-        model: \"gpt-4o\",\n-        response_format: { type: \"json_object\" },\n-        messages: [\n-          {\n-            role: \"system\",\n-            content: prompt,\n-          },\n-        ],\n-        temperature: 1,\n-        max_tokens: 128,\n-        top_p: 1,\n-        frequency_penalty: 0,\n-        presence_penalty: 0,\n-      });\n-\n-      const rawResponse = String(response.choices[0].message.content);\n-      return JSON.parse(rawResponse) as { [k: string]: number };\n-    } catch (error) {\n-      console.error(`Failed to evaluate comment`, error);\n-      return {};\n+    const response: OpenAI.Chat.ChatCompletion = await this._openAi.chat.completions.create({\n+      model: \"gpt-4o\",\n+      response_format: { type: \"json_object\" },\n+      messages: [\n+        {\n+          role: \"system\",\n+          content: prompt,\n+        },\n+      ],\n+      temperature: 1,\n+      max_tokens: 128,\n+      top_p: 1,\n+      frequency_penalty: 0,\n+      presence_penalty: 0,\n+    });\n+\n+    const rawResponse = String(response.choices[0].message.content);\n+    logger.info(`OpenAI raw response: ${rawResponse}`);\n+\n+    const jsonResponse = JSON.parse(rawResponse);\n+\n+    const responseType = Type.Record(Type.String(), Type.Number({ minimum: 0, maximum: 1 }));\n+\n+    if (Value.Check(responseType, jsonResponse)) {\n+      const relevances = Value.Convert(responseType, jsonResponse) as { [k: string]: number };","score":{"reward":4.032,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":50.2388235294118,"syllables":28,"sentences":1,"score":0.902388235294118},"multiplier":1,"relevance":0.8}},{"id":2258235548,"content":"Then it's fine","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2258235548","commentType":"PULL_COLLABORATOR","score":{"reward":0.342,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.2}}],"reviewRewards":[{"reviews":[{"reviewId":2205320951,"effect":{"addition":691,"deletion":118},"reward":24.27,"priority":3},{"reviewId":2231484153,"effect":{"addition":424,"deletion":342},"reward":22.98,"priority":3},{"reviewId":2234139406,"effect":{"addition":15,"deletion":9},"reward":0.72,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 79.89 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>47.97</td></tr><tr><td>Review</td><td>Comment</td><td>9</td><td>31.92</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55\" target=\"_blank\" rel=\"noopener\">#55</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+691 -118</td><td>3</td><td>24.27</td></tr><tr><td>+424 -342</td><td>3</td><td>22.98</td></tr><tr><td>+15 -9</td><td>3</td><td>0.72</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#pullrequestreview-2205320951\" target=\"_blank\" rel=\"noopener\">it'd be a good idea to merge latest changes because there were s&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.8</td><td>3</td><td>5.352</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1695450152\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionconst commentType = Type.Union([...Ob&hellip;</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.289</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1695684838\" target=\"_blank\" rel=\"noopener\">Why is casting to string needed?</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.422</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1695687390\" target=\"_blank\" rel=\"noopener\">seems weird to return &#96;{}&#96;, if AI evaluation failed we s&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.9</td><td>3</td><td>3.78</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1695688658\" target=\"_blank\" rel=\"noopener\">it might be a good idea to validate the response with typebox in&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.9</td><td>3</td><td>4.833</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1696629687\" target=\"_blank\" rel=\"noopener\">For example one time I made a prompt that instructed it to outpu&hellip;</a></h6></td><td><details><summary>2.59</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 69&#13;  wordValue: 0.1&#13;  result: 2.59&#13;</pre></details></td><td>0.8</td><td>3</td><td>8.064</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1712680299\" target=\"_blank\" rel=\"noopener\">usually typebox schemas are in types folder</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.806</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#discussion_r1712680455\" target=\"_blank\" rel=\"noopener\">Consider using &#96;Value.Decode&#96; because it checks the valu&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.032</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#issuecomment-2258235548\" target=\"_blank\" rel=\"noopener\">Then it's fine</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.342</td></tr></tbody></table></details>"},"Abuchtela":{"total":37.107,"userId":84213452,"comments":[{"id":2328133220,"content":"Fix set specs as 1","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#pullrequestreview-2328133220","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.357,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":0.25,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2328133220,"effect":{"addition":943,"deletion":282},"reward":36.75,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 37.107 XP ]</a>&nbsp;</h3><h6>@Abuchtela</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>36.75</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.357</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55\" target=\"_blank\" rel=\"noopener\">#55</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+943 -282</td><td>3</td><td>36.75</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/55#pullrequestreview-2328133220\" target=\"_blank\" rel=\"noopener\">Fix set specs as 1</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>3</td><td>0.357</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_270.json","json":{"ishowvel":{"userId":186167176,"total":150.372,"task":{"reward":150,"multiplier":1},"comments":[{"id":2673751200,"content":"@0x4007 can I be assigned to this?\nissue's like this shouldnt be gated to core team members or administrators or atleast exceptions be made for the creators of the moduke/plugin","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/270#issuecomment-2673751200","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.372,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":71.62625000000001,"syllables":45,"sentences":2,"score":0.8837374999999998},"multiplier":0.25,"relevance":0.2}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 150.372 XP ]</a>&nbsp;</h3><h6>@ishowvel</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>150</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.372</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/270#issuecomment-2673751200\" target=\"_blank\" rel=\"noopener\">@0x4007 can I be assigned to this?issue's like this shouldnt be&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.372</td></tr></tbody></table></details>"},"0x4007":{"total":30.606,"userId":4975670,"comments":[{"id":2676697976,"content":"Okay, because you have been summoned","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/270#issuecomment-2676697976","commentType":"ISSUE_AUTHOR","score":{"reward":0.693,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":73.84500000000001,"syllables":9,"sentences":1,"score":0.8615499999999998},"multiplier":1,"relevance":0.3}},{"id":2847124507,"content":"Count the amount of removed lines for deleted files and subtract from the total lines changed count. \nThe reason for this is because when reviewing it takes little/no cognitive overhead on the files view to skim over \"file deleted\" \n---\nThis would yield $0.40 which isn't bad. \nThe problem is that not every line changed takes the same cognitive overhead to process. \nObviously most of the 17k removed was cypress code which can be easily reviewed just by reading \"file deleted\"\nPerhaps we can reduce credit based on the deleted files removed line count. \nThis will also solve for renames in case git doesn't catch it! \n_Originally posted by @0x4007 in https://github.com/ubiquity/onboard.ubq.fi/issues/34#issuecomment-2652609330_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/270","commentType":"ISSUE_SPECIFICATION","score":{"reward":5.76,"formatting":{"content":{"h2":{"score":1,"elementCount":1},"p":{"score":0,"elementCount":1},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":2},"priority":1,"words":{"wordCount":114,"wordValue":0.1,"result":2.53},"readability":{"fleschKincaid":69.61630000000002,"syllables":184,"sentences":10,"score":0.9038369999999998},"multiplier":1,"relevance":1}},{"id":2652340025,"content":"QA seems fine","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#pullrequestreview-2652340025","commentType":"PULL_COLLABORATOR","score":{"reward":0.414,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":119.19000000000003,"syllables":3,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}},{"id":2685472092,"content":"If you can show QA that will allow us to approve this easily.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2685472092","commentType":"PULL_COLLABORATOR","score":{"reward":2.025,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":83.0092307692308,"syllables":17,"sentences":1,"score":0.7699076923076921},"multiplier":1,"relevance":0.5}},{"id":2685474790,"content":"It seems like if you passed in the entire file as context (not just the diff) it would be able to understand the full picture and possibly let this pass.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2685474790","commentType":"PULL_COLLABORATOR","score":{"reward":5.784,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":66.40500000000003,"syllables":39,"sentences":1,"score":0.9359499999999997},"multiplier":1,"relevance":0.8}},{"id":2686572809,"content":"I agree but I'm not sure how else to solve for this. Maybe it can request to see more of the file after internal reasoning step. Chain of thought @shiv810 rfc","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2686572809","commentType":"PULL_COLLABORATOR","score":{"reward":4.248,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":90.25833333333335,"syllables":40,"sentences":3,"score":0.6974166666666665},"multiplier":1,"relevance":0.6}},{"id":2687065324,"content":"I really hope that we can use an existing open source setup instead of reinventing the wheel.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2687065324","commentType":"PULL_COLLABORATOR","score":{"reward":2.04,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":65.16823529411766,"syllables":25,"sentences":1,"score":0.9483176470588234},"multiplier":1,"relevance":0.4}},{"id":2689750288,"content":"You'll need to self unassign before you get disqualified.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2689750288","commentType":"PULL_COLLABORATOR","score":{"reward":2.457,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":61.32500000000002,"syllables":16,"sentences":1,"score":0.9867499999999998},"multiplier":1,"relevance":0.7}},{"id":2692044711,"content":"I just realized but the precheck said thumbs up and requested changes. It needs to clear its previous state after running again.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2692044711","commentType":"PULL_COLLABORATOR","score":{"reward":5.265,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":80.30636363636367,"syllables":30,"sentences":2,"score":0.7969363636363633},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2652340025,"effect":{"addition":59,"deletion":5},"reward":1.92,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 30.606 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>1.92</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.76</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.693</td></tr><tr><td>Review</td><td>Comment</td><td>7</td><td>22.233</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291\" target=\"_blank\" rel=\"noopener\">#291</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+59 -5</td><td>3</td><td>1.92</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/270\" target=\"_blank\" rel=\"noopener\">Count the amount of removed lines for deleted files and subtract&hellip;</a></h6></td><td><details><summary>4.53</summary><pre>content:&#13;  content:&#13;    h2:&#13;      score: 1&#13;      elementCount: 1&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 2&#13;regex:&#13;  wordCount: 114&#13;  wordValue: 0.1&#13;  result: 2.53&#13;</pre></details></td><td>1</td><td>1</td><td>5.76</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/270#issuecomment-2676697976\" target=\"_blank\" rel=\"noopener\">Okay, because you have been summoned</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.693</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#pullrequestreview-2652340025\" target=\"_blank\" rel=\"noopener\">QA seems fine</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.414</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2685472092\" target=\"_blank\" rel=\"noopener\">If you can show QA that will allow us to approve this easily.</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.5</td><td>3</td><td>2.025</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2685474790\" target=\"_blank\" rel=\"noopener\">It seems like if you passed in the entire file as context (not j&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.8</td><td>3</td><td>5.784</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2686572809\" target=\"_blank\" rel=\"noopener\">I agree but I'm not sure how else to solve for this. Maybe it ca&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.6</td><td>3</td><td>4.248</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2687065324\" target=\"_blank\" rel=\"noopener\">I really hope that we can use an existing open source setup inst&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.4</td><td>3</td><td>2.04</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2689750288\" target=\"_blank\" rel=\"noopener\">You'll need to self unassign before you get disqualified.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.457</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2692044711\" target=\"_blank\" rel=\"noopener\">I just realized but the precheck said thumbs up and requested ch&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.9</td><td>3</td><td>5.265</td></tr></tbody></table></details>"},"gentlementlegen":{"total":11.067,"userId":9807008,"comments":[{"id":2652356601,"content":"Changes seem fine.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#pullrequestreview-2652356601","commentType":"PULL_COLLABORATOR","score":{"reward":0.414,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":119.19000000000003,"syllables":3,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}},{"id":2685617993,"content":"Also, I would like some unit tests with this pull-request.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2685617993","commentType":"PULL_COLLABORATOR","score":{"reward":2.832,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":87.99727272727276,"syllables":14,"sentences":1,"score":0.7200272727272724},"multiplier":1,"relevance":0.8}},{"id":2691940799,"content":"The top ups are based on the time since you started the task so it is intentional.\r\nI don't think tests files are referenced as en entry point for knip which is probably why it considers that this file is not used.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2691940799","commentType":"PULL_COLLABORATOR","score":{"reward":5.901,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":76.80319767441863,"syllables":55,"sentences":2,"score":0.8319680232558138},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2652356601,"effect":{"addition":59,"deletion":5},"reward":1.92,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 11.067 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>1.92</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>9.147</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291\" target=\"_blank\" rel=\"noopener\">#291</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+59 -5</td><td>3</td><td>1.92</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#pullrequestreview-2652356601\" target=\"_blank\" rel=\"noopener\">Changes seem fine.</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.414</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2685617993\" target=\"_blank\" rel=\"noopener\">Also, I would like some unit tests with this pull-request.</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.8</td><td>3</td><td>2.832</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2691940799\" target=\"_blank\" rel=\"noopener\">The top ups are based on the time since you started the task so &hellip;</a></h6></td><td><details><summary>2.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 43&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>0.7</td><td>3</td><td>5.901</td></tr></tbody></table></details>"},"shiv810":{"total":1.701,"userId":53160903,"comments":[{"id":2687057625,"content":"We could create a rolling code viewer, like the one used in `swe-agent`  for code parsing. This would let us adjust the prompt step by step (CoT) as we go through the code. Another simpler option might be to look at one file(with diff) at a time, especially if the file is large. We could load as many relevant pages(file with diffs) as needed, remove unused pages, and replace them with new ones as we progress.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2687057625","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.701,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":77,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":79.62352272727276,"syllables":98,"sentences":4,"score":0.8037647727272724},"multiplier":0.25,"relevance":0.7}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 1.701 XP ]</a>&nbsp;</h3><h6>@shiv810</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>1.701</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2687057625\" target=\"_blank\" rel=\"noopener\">We could create a rolling code viewer, like the one used in &#96&hellip;</a></h6></td><td><details><summary>2.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 77&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.701</td></tr></tbody></table></details>"},"Keyrxng":{"total":1.044,"userId":106303466,"comments":[{"id":2687127286,"content":"https://github.com/ubiquity-os-marketplace/daemon-pull-review/pull/15 - Let's start here?\r\nI've suggested `LangChain` before and was told no, although they have _a lot_ of those types of tools that we could use very easily","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2687127286","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.044,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":78.67076923076925,"syllables":53,"sentences":3,"score":0.8132923076923074},"multiplier":0.25,"relevance":0.4}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 1.044 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>1.044</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/291#issuecomment-2687127286\" target=\"_blank\" rel=\"noopener\">https://github.com/ubiquity-os-marketplace/daemon-pull-review/pu&hellip;</a></h6></td><td><details><summary>2.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.044</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_48.json","json":{"gentlementlegen":{"userId":9807008,"total":100,"task":{"reward":100,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 100 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":11.364,"userId":4975670,"comments":[{"id":2186805564,"content":"Not sure on time estimate. Let me know if that seems right.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/48#issuecomment-2186805564","commentType":"ISSUE_AUTHOR","score":{"reward":1.62,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":102.045,"syllables":14,"sentences":2,"score":1},"multiplier":1,"relevance":0.6}},{"id":2370492406,"content":"_Originally posted by @0x4007 in https://github.com/ubiquity/work.ubq.fi/issues/69#issuecomment-2186802545_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/48","commentType":"ISSUE_SPECIFICATION","score":{"reward":1.96,"formatting":{"content":{"p":{"score":0,"elementCount":1},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":54.72500000000002,"syllables":28,"sentences":4,"score":0.9472500000000003},"multiplier":1,"relevance":1}},{"id":1668004181,"content":"Should we use a math library? Dealing with floats seems risky.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/50#discussion_r1668004181","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -42,19 +42,31 @@ export class UserExtractorModule implements Module {\n     return sortedPriceLabels[0];\n   }\n \n+  _getAssigneeCount(issue: GitHubIssue) {\n+    return 1 / (issue.assignees?.length || 1);","score":{"reward":1.904,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":85.88886363636365,"syllables":15,"sentences":2,"score":0.7411113636363634},"multiplier":1,"relevance":0.8}},{"id":1668004657,"content":"Appropriate example","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/50#discussion_r1668004657","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,128 @@\n+{\n+  \"0x4007\": {\n+    \"total\": 34.12,\n+    \"task\": {\n+      \"reward\": 25,\n+      \"multiplier\": 0.5\n+    },\n+    \"userId\": 4975670,\n+    \"comments\": [\n+      {\n+        \"content\": \"Okay both bots are broken @gentlementlegen  We should have split the assignee reward\",","score":{"reward":0.3,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":-48.994999999999976,"syllables":6,"sentences":1,"score":0},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2162282746,"effect":{"addition":243,"deletion":36},"reward":5.58,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/50"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 11.364 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>5.58</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>1.96</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.62</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>2.204</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/50\" target=\"_blank\" rel=\"noopener\">#50</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+243 -36</td><td>2</td><td>5.58</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/48\" target=\"_blank\" rel=\"noopener\">_Originally posted by @0x4007 in https://github.com/ubiquity/wor&hellip;</a></h6></td><td><details><summary>1.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>1</td><td>1</td><td>1.96</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/48#issuecomment-2186805564\" target=\"_blank\" rel=\"noopener\">Not sure on time estimate. Let me know if that seems right.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.6</td><td>2</td><td>1.62</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/50#discussion_r1668004181\" target=\"_blank\" rel=\"noopener\">Should we use a math library? Dealing with floats seems risky.</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.904</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/50#discussion_r1668004657\" target=\"_blank\" rel=\"noopener\">Appropriate example</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.6</td><td>2</td><td>0.3</td></tr></tbody></table></details>"},"rndquu":{"total":7.692,"userId":119500907,"comments":[{"id":1670118102,"content":"@gentlementlegen Could you also update data structure example in the readme file?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/50#discussion_r1670118102","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -100,6 +100,7 @@ export interface Result {\n     total: number;\n     task?: {\n       reward: number;\n+      multiplier: number;","score":{"reward":2.032,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":32.504999999999995,"syllables":23,"sentences":1,"score":0.72505},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2165655354,"effect":{"addition":244,"deletion":36},"reward":5.6,"priority":2},{"reviewId":2166341536,"effect":{"addition":2,"deletion":1},"reward":0.06,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/50"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 7.692 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>5.66</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>2.032</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/50\" target=\"_blank\" rel=\"noopener\">#50</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+244 -36</td><td>2</td><td>5.6</td></tr><tr><td>+2 -1</td><td>2</td><td>0.06</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/50#discussion_r1670118102\" target=\"_blank\" rel=\"noopener\">@gentlementlegen Could you also update data structure example in&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.032</td></tr></tbody></table></details>"},"whilefoo":{"total":7.55,"userId":139262667,"comments":[{"id":1670921215,"content":"```suggestion\r\n  _getTaskMultiplier(issue: GitHubIssue) {\r\n```\r\nCount doesn't really reflect what this function returns","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/50#discussion_r1670921215","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -42,19 +43,31 @@ export class UserExtractorModule implements Module {\n     return sortedPriceLabels[0];\n   }\n \n+  _getAssigneeCount(issue: GitHubIssue) {","score":{"reward":1.89,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":75.50000000000003,"syllables":13,"sentences":1,"score":0.8449999999999998},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2166972663,"effect":{"addition":246,"deletion":37},"reward":5.66,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/50"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 7.55 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>5.66</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>1.89</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/50\" target=\"_blank\" rel=\"noopener\">#50</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+246 -37</td><td>2</td><td>5.66</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/50#discussion_r1670921215\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion_getTaskMultiplier(issue: GitHubIss&hellip;</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.9</td><td>2</td><td>1.89</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_148.json","json":{"gentlementlegen":{"userId":9807008,"total":13.58,"task":{"reward":12,"multiplier":1},"comments":[{"id":2716868002,"content":"Yes, the `/stop` is meant to allow for `/start` again already, I can re-test this again but I remember implementing a while ago. I'll change the Caution to a Warning in the meantime.\nIf the user can not do `/start` again, it means it was either disqualified by the bot or manually un-assigned through the UI.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/148#issuecomment-2716868002","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.58,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":56,"wordValue":0.1,"result":2.47},"readability":{"fleschKincaid":68.54190476190477,"syllables":79,"sentences":3,"score":0.9145809523809523},"multiplier":0.25,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 13.58 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>12</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.58</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/148#issuecomment-2716868002\" target=\"_blank\" rel=\"noopener\">Yes, the &#96;/stop&#96; is meant to allow for &#96;/start&#96; &hellip;</a></h6></td><td><details><summary>2.47</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 56&#13;  wordValue: 0.1&#13;  result: 2.47&#13;</pre></details></td><td>1</td><td>2</td><td>1.58</td></tr></tbody></table></details>"},"Keyrxng":{"total":1.53,"userId":106303466,"comments":[{"id":2703005580,"content":"The linked task shows that shiv was kicked two weeks ago so the `/stop` that occurred recently likely wouldn't have had an effect.\nIs the expectation that if the user has called `/stop` after having been reassigned then they should be allow to start again? Essentially if they've been reassigned we forget any evictions or `/stop` usage before then? \nI don't think it's as simple as just \"let /stop self-assign again\" because afaik, that's already implemented under normal circumstances they would be allowed to `/start` again.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/148#issuecomment-2703005580","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.53,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":88,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":62.41181818181819,"syllables":127,"sentences":4,"score":0.9758818181818181},"multiplier":0.25,"relevance":0.9}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/153"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 1.53 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.53</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/148#issuecomment-2703005580\" target=\"_blank\" rel=\"noopener\">The linked task shows that shiv was kicked two weeks ago so the &hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 88&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.9</td><td>2</td><td>1.53</td></tr></tbody></table></details>"},"0x4007":{"total":8.626,"userId":4975670,"comments":[{"id":2703630100,"content":"I didn't notice so I agree. \nYes the idea is if there is a blocker or they have to take a step back from work, they can let somebody else take over until they are ready to continue. \nIn this situation I suppose a p2p negotiation would have to occur where if somebody else took over, they could split the assignee reward.  \nIf it's already implemented then perhaps this scope can be just to change to warning instead of caution.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/148#issuecomment-2703630100","commentType":"ISSUE_AUTHOR","score":{"reward":6.066,"formatting":{"content":{"p":{"score":0,"elementCount":1},"br":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":82,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":66.34945121951222,"syllables":116,"sentences":4,"score":0.9365054878048779},"multiplier":1,"relevance":0.9}},{"id":2898708147,"content":"1. Change to warning\n_Originally posted by @ubiquity-os-beta in https://github.com/ubiquity-os-marketplace/command-ask/issues/51#issuecomment-2701805439_","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/148","commentType":"ISSUE_SPECIFICATION","score":{"reward":2.44,"formatting":{"content":{"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":1},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1.1},"priority":1,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":34.160909090909115,"syllables":42,"sentences":2,"score":0.7416090909090911},"multiplier":1,"relevance":1}}],"reviewRewards":[{"reviews":[{"reviewId":2678606452,"effect":{"addition":4,"deletion":2},"reward":0.12,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/153"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 8.626 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.12</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>2.44</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>6.066</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/153\" target=\"_blank\" rel=\"noopener\">#153</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+4 -2</td><td>2</td><td>0.12</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/148\" target=\"_blank\" rel=\"noopener\">1. Change to warning_Originally posted by @ubiquity-os-beta in &hellip;</a></h6></td><td><details><summary>2</summary><pre>content:&#13;  content:&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 1&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.1&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>1</td><td>1</td><td>2.44</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/148#issuecomment-2703630100\" target=\"_blank\" rel=\"noopener\">I didn't notice so I agree. Yes the idea is if there is a block&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    br:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 82&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.9</td><td>2</td><td>6.066</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_22.json","json":{"whck6":{"userId":6612648,"total":25.124,"task":{"reward":25,"multiplier":1},"comments":[{"id":2038631666,"content":"Resolves #22","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25","commentType":"PULL_SPECIFICATION","score":{"reward":0.124,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":77.90500000000002,"syllables":3,"sentences":1,"score":0.8209499999999998},"multiplier":1,"relevance":0.4}},{"id":2311915440,"content":"I've added a new config it is called emptyWalletText.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2311915440","commentType":"PULL_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":10,"wordValue":0,"result":0},"readability":{"fleschKincaid":69.78500000000001,"syllables":15,"sentences":1,"score":0.9021499999999999},"multiplier":0,"relevance":0.7}},{"id":2311929298,"content":"@Keyrxng Do you mind checking?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2311929298","commentType":"PULL_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":5,"wordValue":0,"result":0},"readability":{"fleschKincaid":100.24000000000002,"syllables":6,"sentences":1,"score":1},"multiplier":0,"relevance":0.3}},{"id":2313925637,"content":"Updated. \r\n@rndquu I am misunderstanding and removed [it](https://github.com/ubiquibot/command-start-stop/blob/7fa0eadd428c5daec854d4ee7f4de42305a922d9/src/adapters/supabase/helpers/user.ts#L17-L19)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2313925637","commentType":"PULL_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":8,"wordValue":0,"result":0},"readability":{"fleschKincaid":54.72500000000002,"syllables":14,"sentences":2,"score":0.9472500000000003},"multiplier":0,"relevance":0.5}},{"id":2314914814,"content":"Updated. @rndquu","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2314914814","commentType":"PULL_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":2,"wordValue":0,"result":0},"readability":{"fleschKincaid":78.92000000000003,"syllables":3,"sentences":2,"score":0.8107999999999997},"multiplier":0,"relevance":0.3}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 25.124 XP ]</a>&nbsp;</h3><h6>@whck6</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>0.124</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25\" target=\"_blank\" rel=\"noopener\">Resolves #22</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.124</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2311915440\" target=\"_blank\" rel=\"noopener\">I've added a new config it is called emptyWalletText.</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2311929298\" target=\"_blank\" rel=\"noopener\">@Keyrxng Do you mind checking?</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0&#13;  result: 0&#13;</pre></details></td><td>0.3</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2313925637\" target=\"_blank\" rel=\"noopener\">Updated. @rndquu I am misunderstanding and removed [it](https:&hellip;</a></h6></td><td><details><summary>1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0&#13;  result: 0&#13;</pre></details></td><td>0.5</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2314914814\" target=\"_blank\" rel=\"noopener\">Updated. @rndquu</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0&#13;  result: 0&#13;</pre></details></td><td>0.3</td><td>1</td><td>0</td></tr></tbody></table></details>"},"gentlementlegen":{"total":0.543,"userId":9807008,"comments":[{"id":2315072289,"content":"@whck6 you should first `/start` to assign yourself to this issue and notify users that you are working on it.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/22#issuecomment-2315072289","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.543,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":71.78157894736843,"syllables":26,"sentences":1,"score":0.8821842105263157},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.543 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.543</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/22#issuecomment-2315072289\" target=\"_blank\" rel=\"noopener\">@whck6 you should first &#96;/start&#96; to assign yourself to t&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.543</td></tr></tbody></table></details>"},"Keyrxng":{"total":8.84,"userId":106303466,"comments":[{"id":2322795953,"content":"@whck6 is your permit [above](https://github.com/ubiquibot/command-start-stop/issues/22#issuecomment-2322772632) not working?\r\nWe are aware of a slight issue with permit generation at the moment which is being resolved as we speak. If we need to we will regenerate the permit if you haven't claimed it by then but things will be resolved within 24 hrs","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/22#issuecomment-2322795953","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.214,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":52,"wordValue":0.1,"result":2.41},"readability":{"fleschKincaid":75.35705128205129,"syllables":70,"sentences":3,"score":0.8464294871794871},"multiplier":0.25,"relevance":0.2}},{"id":1736233348,"content":"@rndquu There was a slight variance here because this comment is intended to be passive while the comment above is intended to be assertive.\r\nIs the plan to write one response that will accurately represent both outcomes here or should we extend the config item?\r\n`config.customStrings.walletRequired`\r\n`config.customStrings.walletSuggestion`\r\nThen any future configurable strings can easily be inserted here?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#discussion_r1736233348","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -17,10 +17,10 @@ export class User extends Super {\n     if ((error && !data) || !data.wallets?.address) {\n       this.context.logger.error(\"No wallet address found\", { userId, issueNumber });\n       if (this.context.config.startRequiresWallet) {\n-        await addCommentToIssue(this.context, \"```diff\\n! Please set your wallet address with the /wallet command first and try again.\\n```\");\n+        await addCommentToIssue(this.context, this.context.config.emptyWalletText);\n         throw new Error(\"No wallet address found\");\n       } else {\n-        await addCommentToIssue(this.context, \"```diff\\n# Please set your wallet address with the /wallet command in order to be eligible for rewards.\\n```\");","score":{"reward":0.632,"formatting":{"content":{"p":{"score":0,"elementCount":5}},"result":0},"priority":1,"words":{"wordCount":55,"wordValue":0.1,"result":2.46},"readability":{"fleschKincaid":57.48121212121217,"syllables":85,"sentences":3,"score":0.9748121212121217},"multiplier":0.25,"relevance":0.8}},{"id":2312088089,"content":"@whck6 Thanks for the PR.\r\nJust so you know, this PR can't be merged until https://github.com/ubiquity/safe.ubq.fi/issues/3 is complete as the infrastructure needed is not completely built yet. It may be best to choose another task without dependencies as it would be merged quicker.\r\nYou have correctly added a new config option but it's usage isn't right. `emptyWalletText` should be a string and it should be used to notify a user that they do not have a wallet registered.\r\n---\r\n@rndquu to keep it simple, why don't we just update the current comment to something like:\r\nold: `Please set your wallet address with the /wallet command first and try again.`\r\nsuggested: `If you have an ethereum wallet please register it using the /wallet command otherwise visit .... to register an account with us`\r\nI can't think how we'd choose which message to use if the flow is `/wallet` > !wallet > portal > `/wallet`. `/register` seems like a useless command if it only points them to the portal (because storage is handled on the UI). What do you think?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2312088089","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.918,"formatting":{"content":{"p":{"score":0,"elementCount":7},"hr":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":140,"wordValue":0.1,"result":2.32},"readability":{"fleschKincaid":82.37839205816557,"syllables":197,"sentences":12,"score":0.7762160794183443},"multiplier":0.25,"relevance":0.9}},{"id":2313167601,"content":"@rndquu my mistake I misunderstood things originally, confused myself as we had spoken about having two messages. Instead there will be only one \"no wallet\" message and it will be passed in via the config","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2313167601","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.396,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":58.54678571428573,"syllables":54,"sentences":2,"score":0.9854678571428573},"multiplier":0.25,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2268793719,"effect":{"addition":4,"deletion":2},"reward":0.06,"priority":1},{"reviewId":2273753404,"effect":{"addition":483,"deletion":179},"reward":6.62,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 8.84 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>6.68</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.214</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>1.946</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25\" target=\"_blank\" rel=\"noopener\">#25</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+4 -2</td><td>1</td><td>0.06</td></tr><tr><td>+483 -179</td><td>1</td><td>6.62</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/22#issuecomment-2322795953\" target=\"_blank\" rel=\"noopener\">@whck6 is your permit [above](https://github.com/ubiquibot/comma&hellip;</a></h6></td><td><details><summary>3.41</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 52&#13;  wordValue: 0.1&#13;  result: 2.41&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.214</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#discussion_r1736233348\" target=\"_blank\" rel=\"noopener\">@rndquu There was a slight variance here because this comment is&hellip;</a></h6></td><td><details><summary>2.46</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;  result: 0&#13;regex:&#13;  wordCount: 55&#13;  wordValue: 0.1&#13;  result: 2.46&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.632</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2312088089\" target=\"_blank\" rel=\"noopener\">@whck6 Thanks for the PR.Just so you know, this PR can't be me&hellip;</a></h6></td><td><details><summary>3.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 7&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 140&#13;  wordValue: 0.1&#13;  result: 2.32&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.918</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2313167601\" target=\"_blank\" rel=\"noopener\">@rndquu my mistake I misunderstood things originally, confused m&hellip;</a></h6></td><td><details><summary>2.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.396</td></tr></tbody></table></details>"},"rndquu":{"total":18.231,"userId":119500907,"comments":[{"id":2465763685,"content":"Depends on https://github.com/ubiquity/safe.ubq.fi/issues/3\r\nWe're going to have 2 registration flows:\r\n1. Our usual flow via the `/wallet` command\r\n2. A new one via webauthn and `safe.ubq.fi` ([example](https://github.com/ubiquibot/plugins-wishlist/issues/35#issue-2465056368))\r\nThe `command-start-stop` plugin displays a warning message when `startRequiresWallet = true` and user doesn't have a registered wallet:\r\n```\r\nPlease set your wallet address with the /wallet command first and try again.\r\n``` \r\nSince we're going to have 2 flows the message above is not applicable for the \"webauthn\" flow. Possible solution could be to add a new plugin option for the warning message like `emptyWalletText`.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/22","commentType":"ISSUE_SPECIFICATION","score":{"reward":6.13,"formatting":{"content":{"p":{"score":0,"elementCount":6},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2.2},"priority":1,"words":{"wordCount":71,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":67.92500000000001,"syllables":116,"sentences":5,"score":0.9207499999999998},"multiplier":1,"relevance":1}},{"id":2265643494,"content":"The newly added `emptyWalletText` param should be used [here](https://github.com/ubiquibot/command-start-stop/blob/930c45e53ec2ba542342f885627230cd5f0ec85c/src/adapters/supabase/helpers/user.ts#L20) and [here](https://github.com/ubiquibot/command-start-stop/blob/930c45e53ec2ba542342f885627230cd5f0ec85c/src/adapters/supabase/helpers/user.ts#L23).","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#pullrequestreview-2265643494","commentType":"PULL_COLLABORATOR","score":{"reward":2.043,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":95.165,"syllables":12,"sentences":1,"score":0.64835},"multiplier":1,"relevance":0.9}},{"id":1736569004,"content":"That's kind of overengineering, I'd keep a single param and introduce \"custom strings\" only when we need them next time.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#discussion_r1736569004","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -17,10 +17,10 @@ export class User extends Super {\n     if ((error && !data) || !data.wallets?.address) {\n       this.context.logger.error(\"No wallet address found\", { userId, issueNumber });\n       if (this.context.config.startRequiresWallet) {\n-        await addCommentToIssue(this.context, \"```diff\\n! Please set your wallet address with the /wallet command first and try again.\\n```\");\n+        await addCommentToIssue(this.context, this.context.config.emptyWalletText);\n         throw new Error(\"No wallet address found\");\n       } else {\n-        await addCommentToIssue(this.context, \"```diff\\n# Please set your wallet address with the /wallet command in order to be eligible for rewards.\\n```\");","score":{"reward":0.812,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":57.605000000000004,"syllables":33,"sentences":1,"score":0.9760500000000001},"multiplier":1,"relevance":0.4}},{"id":1736608663,"content":"https://github.com/ubiquibot/plugin-template/issues/19","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#discussion_r1736608663","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -17,10 +17,10 @@ export class User extends Super {\n     if ((error && !data) || !data.wallets?.address) {\n       this.context.logger.error(\"No wallet address found\", { userId, issueNumber });\n       if (this.context.config.startRequiresWallet) {\n-        await addCommentToIssue(this.context, \"```diff\\n! Please set your wallet address with the /wallet command first and try again.\\n```\");\n+        await addCommentToIssue(this.context, this.context.config.emptyWalletText);\n         throw new Error(\"No wallet address found\");\n       } else {\n-        await addCommentToIssue(this.context, \"```diff\\n# Please set your wallet address with the /wallet command in order to be eligible for rewards.\\n```\");","score":{"reward":0.375,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":44.150000000000006,"syllables":15,"sentences":2,"score":0.8415},"multiplier":1,"relevance":0.3}},{"id":2312705795,"content":"Let's just make the text configurable and decide later on the exact text content.\r\n@whck6 Regarding the PR, although it depends on https://github.com/ubiquity/safe.ubq.fi/issues/3 we can still merge it since we appreciate the help of new contributors. A few notes:\r\n1. Why do we need [this](https://github.com/ubiquibot/command-start-stop/blob/7fa0eadd428c5daec854d4ee7f4de42305a922d9/src/adapters/supabase/helpers/user.ts#L17-L19) check?\r\n2. As `Keyrxng` already state the `emptyWalletText` param is expected to be of a `string` type (smth like `emptyWalletText: T.String({ default: \"Please set your wallet address with the /wallet command first and try again.\" })`) and used [here](https://github.com/ubiquibot/command-start-stop/blob/930c45e53ec2ba542342f885627230cd5f0ec85c/src/adapters/supabase/helpers/user.ts#L20) and (perhaps) [here](https://github.com/ubiquibot/command-start-stop/blob/930c45e53ec2ba542342f885627230cd5f0ec85c/src/adapters/supabase/helpers/user.ts#L23).\r\n@Keyrxng Overall all text messages should be configurable in the end but right now we have the only use case for \"EOA vs webauthn\" registration flows.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2312705795","commentType":"PULL_COLLABORATOR","score":{"reward":6.561,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":3}},"result":3.2},"priority":1,"words":{"wordCount":91,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":76.55350000000003,"syllables":139,"sentences":8,"score":0.8344649999999997},"multiplier":1,"relevance":0.9}},{"id":2315467159,"content":"Works fine. @whck6 Could you also update readme docs https://github.com/ubiquibot/command-start-stop/blob/development/README.md with the newly introduced parameter?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2315467159","commentType":"PULL_COLLABORATOR","score":{"reward":2.24,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":61.74725000000004,"syllables":41,"sentences":4,"score":0.9825274999999997},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2265643494,"effect":{"addition":2,"deletion":0},"reward":0.02,"priority":1},{"reviewId":2269315951,"effect":{"addition":2,"deletion":2},"reward":0.04,"priority":1},{"reviewId":2269317566,"effect":{"addition":1,"deletion":0},"reward":0.01,"priority":1},{"reviewId":2269372046,"effect":{"addition":0,"deletion":0},"reward":0,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 18.231 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>4</td><td>0.07</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>6.13</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>12.031</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25\" target=\"_blank\" rel=\"noopener\">#25</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+2 -0</td><td>1</td><td>0.02</td></tr><tr><td>+2 -2</td><td>1</td><td>0.04</td></tr><tr><td>+1 -0</td><td>1</td><td>0.01</td></tr><tr><td>+0 -0</td><td>1</td><td>0</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/22\" target=\"_blank\" rel=\"noopener\">Depends on https://github.com/ubiquity/safe.ubq.fi/issues/3We'&hellip;</a></h6></td><td><details><summary>4.8</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2.2&#13;regex:&#13;  wordCount: 71&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>1</td><td>1</td><td>6.13</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#pullrequestreview-2265643494\" target=\"_blank\" rel=\"noopener\">The newly added &#96;emptyWalletText&#96; param should be used [&hellip;</a></h6></td><td><details><summary>1.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.9</td><td>1</td><td>2.043</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#discussion_r1736569004\" target=\"_blank\" rel=\"noopener\">That's kind of overengineering, I'd keep a single param and intr&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.812</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#discussion_r1736608663\" target=\"_blank\" rel=\"noopener\">https://github.com/ubiquibot/plugin-template/issues/19</a></h6></td><td><details><summary>1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.375</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2312705795\" target=\"_blank\" rel=\"noopener\">Let's just make the text configurable and decide later on the ex&hellip;</a></h6></td><td><details><summary>5.83</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 3.2&#13;regex:&#13;  wordCount: 91&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.9</td><td>1</td><td>6.561</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/25#issuecomment-2315467159\" target=\"_blank\" rel=\"noopener\">Works fine. @whck6 Could you also update readme docs https://git&hellip;</a></h6></td><td><details><summary>2.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.24</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_64.json","json":{"gentlementlegen":{"userId":9807008,"total":811.676,"task":{"reward":800,"multiplier":1},"comments":[{"id":2551977965,"content":"I don't know if it is related but I noticed that this plugin has a very hard time with quick and batch changes of labels, even more when it is not allowed, e.g. I am not allowed to set a price but at the same time I set a price and remove a time. Since both are un-allowed, the bot doesn't know how to revert the changes properly. Second, the other problem is that changing a label triggers two events: \"unlabel\" and \"label\". There probably could be a race-condition with the two events.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2551977965","commentType":"ISSUE_ASSIGNEE","score":{"reward":2.268,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":98,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":81.48523809523812,"syllables":126,"sentences":6,"score":0.7851476190476189},"multiplier":0.25,"relevance":0.7}},{"id":2579258772,"content":"@0x4007 I also noticed this has a flaw: if you update the base rate of the organization repository, I think that all the price tags will be updated with that new multiplier. But if a repo overrides this value then it will have the wrong multiplier applied to that repository.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2579258772","commentType":"ISSUE_ASSIGNEE","score":{"reward":2.736,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":50,"wordValue":0.1,"result":2.38},"readability":{"fleschKincaid":54.56000000000002,"syllables":75,"sentences":2,"score":0.9456000000000002},"multiplier":0.25,"relevance":0.9}},{"id":2581691640,"content":"I think it is similar to the problem we have with `daemon-disqualifier` which uses the configuration of the repo it was triggered on, but actually updates all the repos using that same configuration. I'll try to find a workaround for this.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2581691640","commentType":"ISSUE_ASSIGNEE","score":{"reward":2.272,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":60.15920731707318,"syllables":61,"sentences":2,"score":0.9984079268292682},"multiplier":0.25,"relevance":0.8}},{"id":2662283808,"content":"I think this was partially fixed by https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/79 because now it runs as an Action so the worker doesn't explode mid flight. However, the problem I mentioned earlier subsists: it is not updating the proper repositories. Also, it tries to create the same labels multiple times which is wrong as well.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2662283808","commentType":"ISSUE_ASSIGNEE","score":{"reward":4.4,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":62.375922131147576,"syllables":93,"sentences":4,"score":0.9762407786885242},"multiplier":0.25,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 811.676 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>800</td></tr><tr><td>Issue</td><td>Comment</td><td>4</td><td>11.676</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2551977965\" target=\"_blank\" rel=\"noopener\">I don't know if it is related but I noticed that this plugin has&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 98&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.7</td><td>4</td><td>2.268</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2579258772\" target=\"_blank\" rel=\"noopener\">@0x4007 I also noticed this has a flaw: if you update the base r&hellip;</a></h6></td><td><details><summary>2.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 50&#13;  wordValue: 0.1&#13;  result: 2.38&#13;</pre></details></td><td>0.9</td><td>4</td><td>2.736</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2581691640\" target=\"_blank\" rel=\"noopener\">I think it is similar to the problem we have with &#96;daemon-di&hellip;</a></h6></td><td><details><summary>2.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.8</td><td>4</td><td>2.272</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2662283808\" target=\"_blank\" rel=\"noopener\">I think this was partially fixed by https://github.com/ubiquity-&hellip;</a></h6></td><td><details><summary>3.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 51&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>1</td><td>4</td><td>4.4</td></tr></tbody></table></details>"},"0x4007":{"total":87.832,"userId":4975670,"comments":[{"id":2556233089,"content":"We should definitely be leveraging the timeline to understand how to correctly revert\nGood observation I suppose we should refactor our logic here to take this into consideration","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2556233089","commentType":"ISSUE_AUTHOR","score":{"reward":2.532,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":15.257857142857176,"syllables":54,"sentences":1,"score":0.5525785714285718},"multiplier":1,"relevance":0.3}},{"id":2579713729,"content":"Seems like a complex fix. \nMaybe it's more efficient to check the base rate during another event, perhaps something more localized like if a comment is posted on an issue or something, and to only fix that issues pricing. \nWorst case scenario somebody /start and it changes the price right after they start. Annoying but at least they didn't actually do any work yet?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2579713729","commentType":"ISSUE_AUTHOR","score":{"reward":5.248,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":66,"wordValue":0.1,"result":2.57},"readability":{"fleschKincaid":68.31477272727274,"syllables":95,"sentences":4,"score":0.9168522727272727},"multiplier":1,"relevance":0.4}},{"id":2581730093,"content":"Sure, but my point is that my proposed approach would solve for that as well. I think it might be a better strategy given how simple it would be to implement. \r\nI'm also keen to remove base rate update because it is the sole reason why daemon-pricing responds so slow to set a price.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2581730093","commentType":"ISSUE_AUTHOR","score":{"reward":3.708,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":56,"wordValue":0.1,"result":2.47},"readability":{"fleschKincaid":76.09547619047622,"syllables":74,"sentences":3,"score":0.8390452380952378},"multiplier":1,"relevance":0.3}},{"id":2692061192,"content":"Changed time to accommodate the full change to the approach of how the plugin works.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2692061192","commentType":"ISSUE_AUTHOR","score":{"reward":0.6,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":78.81000000000003,"syllables":20,"sentences":1,"score":0.8118999999999997},"multiplier":1,"relevance":0.1}},{"id":2692084785,"content":"There's obviously a bug #92 \n@gentlementlegen i think this is your code. Take a look. \nIt seems this specific problem keeps coming up across different plug-ins. I think this is the third isolated instance. \nCouldn't we have a method in the SDK that will check the issue ID number before taking any actions and throw an error if it doesn't match? @whilefoo rfc","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2692084785","commentType":"ISSUE_AUTHOR","score":{"reward":10.272,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":67,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":78.07098258706468,"syllables":93,"sentences":6,"score":0.8192901741293532},"multiplier":1,"relevance":0.8}},{"id":2695230187,"content":"Can you push a fix please.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2695230187","commentType":"ISSUE_AUTHOR","score":{"reward":2.212,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":116.14500000000001,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":2736341381,"content":"This is bad because I have to go back in and manually re-add all the pricing. \r\nExample: \r\n- https://github.com/ubiquity-os-marketplace/.ubiquity-os/commit/3635c013b31f35975dffa370369de72d52d2da0b\r\n- causes https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#event-15637253843\r\nThis isn't the first time this happened either, with other \"normal\" priority levels. \r\nAfter a quick look at our https://github.com/orgs/ubiquity/projects/27 I noticed it only seems to do it inside of the @ubiquity-os-marketplace organization. The other two organizations were not affected, even after doing the same config changes.\r\nDue to exceeded rate limits, it is possible that this failed halfway through the process. \r\n![telegram-cloud-photo-size-5-6258183812232101774-y](https://github.com/user-attachments/assets/9b699790-81bd-4a2f-9ade-f36e54fe62db)\r\nAs of this moment I won't fix the price labels but in case they are left as is, these can be useful to review for reference for not being affected:\r\n<img width=\"647\" alt=\"image\" src=\"https://github.com/user-attachments/assets/66407641-7a6b-4877-b10b-df42c62821d1\" />\r\n###### https://devpool.directory/ubiquity-os-marketplace\r\n<img width=\"656\" alt=\"image\" src=\"https://github.com/user-attachments/assets/77cfb43d-515d-4d57-b487-48e85e9523fb\" />\r\n###### https://devpool.directory/ubiquity-os-marketplace?proposal=true","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64","commentType":"ISSUE_SPECIFICATION","score":{"reward":13.78,"formatting":{"content":{"p":{"score":0,"elementCount":11},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"h6":{"score":1,"elementCount":2},"a":{"score":1,"elementCount":6}},"result":8.2},"priority":1,"words":{"wordCount":126,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":61.65550000000002,"syllables":300,"sentences":15,"score":0.9834449999999998},"multiplier":1,"relevance":1}},{"id":2635819526,"content":"This seems like it's tricky to test since it addresses a lot of odds and ends. Perhaps we can test in production.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#pullrequestreview-2635819526","commentType":"PULL_COLLABORATOR","score":{"reward":2.328,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":92.17119565217394,"syllables":28,"sentences":2,"score":0.6782880434782607},"multiplier":1,"relevance":0.3}},{"id":1976357352,"content":"Interesting workaround","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1976357352","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -24,16 +24,40 @@ async function isAuthed(context: Context): Promise<boolean> {\n   const isSenderAuthed = await isUserAdminOrBillingManager(context, sender);\n \n   if (!isPusherAuthed) {\n-    logger.error(\"Pusher is not an admin or billing manager\");\n+    logger.error(\"Pusher is not an admin or billing manager\", {\n+      login: pusher,\n+    });\n   }\n \n   if (!isSenderAuthed) {\n-    logger.error(\"Sender is not an admin or billing manager\");\n+    logger.error(\"Sender is not an admin or billing manager\", {\n+      login: sender,\n+    });\n   }\n \n   return !!(isPusherAuthed && isSenderAuthed);\n }\n \n+async function sendEmptyCommits(context: Context) {\n+  const { logger } = context;\n+\n+  const repos = await listOrgRepos(context);\n+  for (const repository of repos) {\n+    const ctx = {\n+      ...context,\n+      payload: {\n+        repository: repository,\n+      },\n+    } as Context;\n+    // Pushing an empty commit will trigger a label update on the repository using its local configuration.","score":{"reward":0.8,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":-91.29499999999996,"syllables":7,"sentences":1,"score":0},"multiplier":1,"relevance":0.8}},{"id":1980873006,"content":"One of the most invasive features of @ubiquityos is the labels. That's precisely what received the complaint from Rick. These labels should be fully customizable to make the integration far more seamless. This was always the plan from day one. \nIn addition we should only retain the actively used price labels instead of pre populating them.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1980873006","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -79,30 +72,28 @@ export async function syncPriceLabelsToConfig(context: Context): Promise<void> {\n   // Get the missing labels\n   const missingLabels = [...new Set(pricingLabels.filter((label) => !allLabels.map((i) => i.name).includes(label.name)).map((o) => o.name))];\n \n-  // Delete current price labels\n-  const labelsToDelete = allLabels.filter((o) => o.name.startsWith(\"Price: \"));\n-  await deleteLabelsFromRepository(context, labelsToDelete);\n-\n   // Create missing labels\n   if (missingLabels.length > 0) {\n+    // Delete current price labels\n+    const labelsToDelete = allLabels.filter((o) => o.name.startsWith(\"Price: \"));\n+    await deleteLabelsFromRepository(context, labelsToDelete);\n     logger.info(`Missing labels found in ${context.payload.repository.html_url}, creating them`, { missingLabels });\n     await Promise.allSettled(missingLabels.map((label) => createLabel(context, label, \"default\")));\n     logger.info(`Creating missing labels done`);\n+  } else if (incorrectPriceLabels.length > 0) {\n+    await deleteLabelsFromRepository(context, incorrectPriceLabels);\n   }","score":{"reward":11.556,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":57,"wordValue":0.1,"result":2.48},"readability":{"fleschKincaid":58.716631578947386,"syllables":92,"sentences":5,"score":0.9871663157894739},"multiplier":1,"relevance":0.9}},{"id":2670518089,"content":"I think you should unassign until actively working on it. Or else @ubiquityos wouldn't follow up","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2670518089","commentType":"PULL_COLLABORATOR","score":{"reward":2.736,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":58.8663235294118,"syllables":28,"sentences":2,"score":0.988663235294118},"multiplier":1,"relevance":0.4}},{"id":2692042174,"content":"It's a bit hard for me to tell what's going on from the pictures but I trust you and I are on the same page with the problems.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2692042174","commentType":"PULL_COLLABORATOR","score":{"reward":1.84,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":86.14500000000002,"syllables":32,"sentences":1,"score":0.7385499999999997},"multiplier":1,"relevance":0.2}},{"id":2692248967,"content":"We can consider a first responder and safe mode \nWorker \nActions","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2692248967","commentType":"PULL_COLLABORATOR","score":{"reward":2.5,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":64.9245454545455,"syllables":17,"sentences":1,"score":0.9507545454545451},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2635819526,"effect":{"addition":177,"deletion":116},"reward":11.72,"priority":4},{"reviewId":2652338228,"effect":{"addition":157,"deletion":84},"reward":9.64,"priority":4},{"reviewId":2660242623,"effect":{"addition":63,"deletion":96},"reward":6.36,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 87.832 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>27.72</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>13.78</td></tr><tr><td>Issue</td><td>Comment</td><td>6</td><td>24.572</td></tr><tr><td>Review</td><td>Comment</td><td>6</td><td>21.76</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89\" target=\"_blank\" rel=\"noopener\">#89</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+177 -116</td><td>4</td><td>11.72</td></tr><tr><td>+157 -84</td><td>4</td><td>9.64</td></tr><tr><td>+63 -96</td><td>4</td><td>6.36</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64\" target=\"_blank\" rel=\"noopener\">This is bad because I have to go back in and manually re-add all&hellip;</a></h6></td><td><details><summary>10.64</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 11&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    h6:&#13;      score: 1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 6&#13;  result: 8.2&#13;regex:&#13;  wordCount: 126&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>1</td><td>1</td><td>13.78</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2556233089\" target=\"_blank\" rel=\"noopener\">We should definitely be leveraging the timeline to understand ho&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.3</td><td>4</td><td>2.532</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2579713729\" target=\"_blank\" rel=\"noopener\">Seems like a complex fix. Maybe it's more efficient to check th&hellip;</a></h6></td><td><details><summary>2.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 66&#13;  wordValue: 0.1&#13;  result: 2.57&#13;</pre></details></td><td>0.4</td><td>4</td><td>5.248</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2581730093\" target=\"_blank\" rel=\"noopener\">Sure, but my point is that my proposed approach would solve for &hellip;</a></h6></td><td><details><summary>2.47</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 56&#13;  wordValue: 0.1&#13;  result: 2.47&#13;</pre></details></td><td>0.3</td><td>4</td><td>3.708</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2692061192\" target=\"_blank\" rel=\"noopener\">Changed time to accommodate the full change to the approach of h&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2692084785\" target=\"_blank\" rel=\"noopener\">There's obviously a bug #92 @gentlementlegen i think this is yo&hellip;</a></h6></td><td><details><summary>2.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 67&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>0.8</td><td>4</td><td>10.272</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2695230187\" target=\"_blank\" rel=\"noopener\">Can you push a fix please.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.7</td><td>4</td><td>2.212</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#pullrequestreview-2635819526\" target=\"_blank\" rel=\"noopener\">This seems like it's tricky to test since it addresses a lot of &hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.3</td><td>4</td><td>2.328</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1976357352\" target=\"_blank\" rel=\"noopener\">Interesting workaround</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.8</td><td>4</td><td>0.8</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1980873006\" target=\"_blank\" rel=\"noopener\">One of the most invasive features of @ubiquityos is the labels. &hellip;</a></h6></td><td><details><summary>2.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 57&#13;  wordValue: 0.1&#13;  result: 2.48&#13;</pre></details></td><td>0.9</td><td>4</td><td>11.556</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2670518089\" target=\"_blank\" rel=\"noopener\">I think you should unassign until actively working on it. Or els&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.4</td><td>4</td><td>2.736</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2692042174\" target=\"_blank\" rel=\"noopener\">It's a bit hard for me to tell what's going on from the pictures&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.2</td><td>4</td><td>1.84</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2692248967\" target=\"_blank\" rel=\"noopener\">We can consider a first responder and safe mode Worker Actions</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.5</td><td>4</td><td>2.5</td></tr></tbody></table></details>"},"whilefoo":{"total":215.216,"userId":139262667,"comments":[{"id":2692391951,"content":"It was mostly a problem where plugins think issues and PR will be in the same repo, but here un-assign was done in the right issue but the comment got posted in the wrong issue.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2692391951","commentType":"ISSUE_COLLABORATOR","score":{"reward":6.384,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":64.54500000000002,"syllables":45,"sentences":1,"score":0.9545499999999998},"multiplier":1,"relevance":0.6}},{"id":2692757786,"content":"Just looked through the code and it seems that `removeAllAssignees` gets `issue` as a parameter, but the commentHandler will post to the issue from the context - that's why it posted to the wrong issue","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2692757786","commentType":"ISSUE_COLLABORATOR","score":{"reward":7.112,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":65.66727272727275,"syllables":42,"sentences":1,"score":0.9433272727272726},"multiplier":1,"relevance":0.7}},{"id":2695656894,"content":"The fix is https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/83","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2695656894","commentType":"ISSUE_COLLABORATOR","score":{"reward":3.44,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":50.56057692307695,"syllables":23,"sentences":2,"score":0.9056057692307695},"multiplier":1,"relevance":0.5}},{"id":1967994265,"content":"isn't this run only in the worker? why run both?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1967994265","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -80,14 +80,22 @@ export default {\n           case \"issues.opened\":\n           case \"repository.created\":\n           case \"push\": {\n-            const text = (await responseClone.json()) as Record<string, unknown>;\n-            return startAction(context, text);\n+            if (isLocalEnvironment()) {\n+              return run(context);\n+            } else {\n+              const text = (await responseClone.json()) as Record<string, unknown>;\n+              return startAction(context, text);\n+            }\n           }\n           case \"issues.labeled\":\n           case \"issues.unlabeled\": {\n-            const text = (await responseClone.json()) as Record<string, unknown>;\n-            await startAction(context, text);\n-            return run(context);\n+            if (isLocalEnvironment()) {\n+              return run(context);\n+            } else {\n+              const text = (await responseClone.json()) as Record<string, unknown>;\n+              await startAction(context, text);\n+              return run(context);\n+            }\n           }","score":{"reward":4.032,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":101.27068181818181,"syllables":13,"sentences":2,"score":1},"multiplier":1,"relevance":0.8}},{"id":1967997293,"content":"why did these numbers change?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1967997293","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -63,18 +64,18 @@ describe(\"Label Base Rate Changes\", () => {\n       const updatedIssue = db.issue.findFirst({ where: { id: { equals: 1 } } });\n       const updatedIssue2 = db.issue.findFirst({ where: { id: { equals: 3 } } });\n \n-      expect(updatedRepo?.labels).toHaveLength(28);\n+      expect(updatedRepo?.labels).toHaveLength(29);\n       expect(updatedIssue?.labels).toHaveLength(3);\n-      expect(updatedIssue2?.labels).toHaveLength(3);\n+      expect(updatedIssue2?.labels).toHaveLength(2);\n \n       const priceLabels = updatedIssue?.labels.filter((label) => (label as Label).name.includes(\"Price:\"));\n       const priceLabels2 = updatedIssue2?.labels.filter((label) => (label as Label).name.includes(\"Price:\"));\n \n       expect(priceLabels).toHaveLength(1);\n-      expect(priceLabels2).toHaveLength(1);\n+      expect(priceLabels2).toHaveLength(0);\n \n-      expect(priceLabels?.map((label) => (label as Label).name)).toContain(`Price: ${priceMap[1] * 5} USD`);\n-      expect(priceLabels2?.map((label) => (label as Label).name)).toContain(`Price: ${priceMap[1] * 5} USD`);","score":{"reward":1.932,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":100.24000000000002,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":1968019853,"content":"I hope this won't cause rate limit issue. Suppose you have a repo with 100 issues and then you remove all labels triggering this plugin to run 100 times and then you add back labels again triggering 100 runs, even worse if you have multiple big repos","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1968019853","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -66,47 +64,50 @@ export async function globalLabelUpdate(context: Context) {\n \n   const repos = await listOrgRepos(context);\n \n-  for (const repo of repos) {\n+  for (const repository of repos) {\n     const ctx = {\n       ...context,\n       payload: {\n-        repository: repo,\n+        repository: repository,\n       },\n     } as Context;\n \n-    // this should create labels on the repos that are missing\n-    await syncPriceLabelsToConfig(ctx);\n-  }\n-\n-  // update all issues with the new pricing\n-  if (config.globalConfigUpdate) {\n-    await updateAllIssuePriceLabels(context);\n-  }\n-}\n-\n-async function updateAllIssuePriceLabels(context: Context) {\n-  const { logger, config } = context;\n-  const repos = await listOrgRepos(context);\n-\n-  for (const repo of repos) {\n-    logger.info(`Fetching issues for ${repo.name}`);\n-    const issues = await listRepoIssues(context, repo.owner.login, repo.name);\n+    logger.info(`Updating pricing labels in ${repository.html_url}`);\n \n+    const owner = repository.owner.login;\n+    const repo = repository.name;\n+    const issues = await listRepoIssues(context, owner, repo);\n+    // For each issue inside the repository, we want to save the currently set labels except the price,\n+    // then remove all these labels, trigger a synchronization so up-to-date Price labels are generated,\n+    // and finally we want to add back all the previously set labels (except the price).\n+    // This way, the plugin gets triggered by the \"issues.labeled\" event, and recreates the price, using the proper\n+    // configuration.\n     for (const issue of issues) {\n-      logger.info(`Updating issue ${issue.number} in ${repo.name}`);\n-      await setPriceLabel(\n-        {\n-          ...context,\n-          payload: {\n-            repository: repo,\n-            issue,\n-          },\n-        } as Context,\n-        issue.labels as Label[],\n-        config\n-      );\n-\n-      await new Promise((resolve) => setTimeout(resolve, 50));\n+      const currentLabels = (\n+        await context.octokit.paginate(context.octokit.rest.issues.listLabelsOnIssue, {\n+          owner,\n+          repo,\n+          issue_number: issue.number,\n+        })\n+      )\n+        .filter((o) => !o.name.startsWith(\"Price:\"))\n+        .map((o) => o.name);\n+      logger.info(`Removing all labels in issue ${issue.html_url}`, { currentLabels });\n+      if (currentLabels.length) {\n+        await context.octokit.rest.issues.removeAllLabels({\n+          owner,\n+          repo,\n+          issue_number: issue.number,\n+        });\n+        // this should create labels on the repos that are missing\n+        await syncPriceLabelsToConfig(ctx);\n+        await context.octokit.rest.issues.addLabels({\n+          repo,\n+          owner,\n+          issue_number: issue.number,\n+          labels: currentLabels,\n+        });","score":{"reward":10.836,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":48,"wordValue":0.1,"result":2.35},"readability":{"fleschKincaid":66.15000000000003,"syllables":66,"sentences":2,"score":0.9384999999999997},"multiplier":1,"relevance":0.9}},{"id":1968027331,"content":"```suggestion\r\n      if (!priceLabels.some((o) => o.name === targetPriceLabel)) {\r\n        priceLabels.push({ name: targetPriceLabel });\r\n      }\r\n```\r\nshouldn't you compare the whole label name and not just the price value?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1968027331","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -22,11 +21,25 @@ export async function syncPriceLabelsToConfig(context: Context): Promise<void> {\n       }\n       const targetPrice = calculateTaskPrice(context, timeValue, priorityValue, config.basePriceMultiplier);\n       const targetPriceLabel = `Price: ${targetPrice} USD`;\n-      priceLabels.push({ name: targetPriceLabel });\n+      // Make sure we do not push the same price twice\n+      if (!priceLabels.some((o) => o.name === targetPrice)) {\n+        priceLabels.push({ name: targetPriceLabel });\n+      }","score":{"reward":5.112,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":83.85357142857143,"syllables":18,"sentences":1,"score":0.7614642857142857},"multiplier":1,"relevance":0.9}},{"id":1968053006,"content":"`handleGlobalUpdate` will remove incorrect price labels, but later in this function (`syncPriceLabelsToConfig`) you also remove all current price labels, so is there any reason to have `handleGlobalUpdate` or vice versa?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1968053006","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -35,17 +48,21 @@ export async function syncPriceLabelsToConfig(context: Context): Promise<void> {\n \n   if (incorrectPriceLabels.length > 0 && config.globalConfigUpdate) {\n     await handleGlobalUpdate(context, logger, incorrectPriceLabels);","score":{"reward":7.36,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":57.23000000000002,"syllables":39,"sentences":1,"score":0.9723000000000002},"multiplier":1,"relevance":0.8}},{"id":1968059694,"content":"is there a scenario where this function runs but price labels stay the same, because in that scenario it will delete them but they won't be created again","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1968059694","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -60,34 +77,56 @@ export async function syncPriceLabelsToConfig(context: Context): Promise<void> {\n   }\n \n   // Get the missing labels\n-  const missingLabels = [...new Set(pricingLabels.filter((label) => !allLabels.map((i) => i.name).includes(label.name)))];\n+  const missingLabels = [...new Set(pricingLabels.filter((label) => !allLabels.map((i) => i.name).includes(label.name)).map((o) => o.name))];\n+\n+  // Delete current price labels\n+  const labelsToDelete = allLabels.filter((o) => o.name.startsWith(\"Price: \"));\n+  if (labelsToDelete.length > 0) {\n+    logger.info(\"Deleting current list of price labels\", {\n+      labels: labelsToDelete.map((o) => o.name),\n+    });\n+    await Promise.allSettled(\n+      labelsToDelete.map((label) =>\n+        context.octokit.rest.issues.deleteLabel({\n+          owner,\n+          repo: context.payload.repository.name,\n+          name: label.name,\n+        })\n+      )\n+    );\n+  }","score":{"reward":8.532,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":66.5448275862069,"syllables":38,"sentences":1,"score":0.934551724137931},"multiplier":1,"relevance":0.9}},{"id":1968073145,"content":"here only repository is changed but won't config stay the same even though the repo may have different config than org?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1968073145","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -66,47 +64,50 @@ export async function globalLabelUpdate(context: Context) {\n \n   const repos = await listOrgRepos(context);\n \n-  for (const repo of repos) {\n+  for (const repository of repos) {\n     const ctx = {\n       ...context,\n       payload: {\n-        repository: repo,\n+        repository: repository,\n       },\n     } as Context;","score":{"reward":6.496,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":57.605000000000004,"syllables":33,"sentences":1,"score":0.9760500000000001},"multiplier":1,"relevance":0.8}},{"id":1971156451,"content":"For example you change multiplier from `1` to `1.0`, `allLabels` have `Price: 100 USD` and `pricingLabels` have `Price: 100 USD` so it means `missingLabels` will filter out `Price: 100 USD` so then it will remove all price labels but only create the ones in `missingLabels` which doesn't have `Price: 100 USD`","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1971156451","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -60,34 +77,56 @@ export async function syncPriceLabelsToConfig(context: Context): Promise<void> {\n   }\n \n   // Get the missing labels\n-  const missingLabels = [...new Set(pricingLabels.filter((label) => !allLabels.map((i) => i.name).includes(label.name)))];\n+  const missingLabels = [...new Set(pricingLabels.filter((label) => !allLabels.map((i) => i.name).includes(label.name)).map((o) => o.name))];\n+\n+  // Delete current price labels\n+  const labelsToDelete = allLabels.filter((o) => o.name.startsWith(\"Price: \"));\n+  if (labelsToDelete.length > 0) {\n+    logger.info(\"Deleting current list of price labels\", {\n+      labels: labelsToDelete.map((o) => o.name),\n+    });\n+    await Promise.allSettled(\n+      labelsToDelete.map((label) =>\n+        context.octokit.rest.issues.deleteLabel({\n+          owner,\n+          repo: context.payload.repository.name,\n+          name: label.name,\n+        })\n+      )\n+    );\n+  }","score":{"reward":9.252,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":67.81911764705885,"syllables":42,"sentences":1,"score":0.9218088235294115},"multiplier":1,"relevance":0.9}},{"id":1971163614,"content":"Yeah there's really no solution and throttler will work fine in the Action because it has 6 hours to run (I think), Worker side that runs on labeled event will possibly timeout","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1971163614","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -66,47 +64,50 @@ export async function globalLabelUpdate(context: Context) {\n \n   const repos = await listOrgRepos(context);\n \n-  for (const repo of repos) {\n+  for (const repository of repos) {\n     const ctx = {\n       ...context,\n       payload: {\n-        repository: repo,\n+        repository: repository,\n       },\n     } as Context;\n \n-    // this should create labels on the repos that are missing\n-    await syncPriceLabelsToConfig(ctx);\n-  }\n-\n-  // update all issues with the new pricing\n-  if (config.globalConfigUpdate) {\n-    await updateAllIssuePriceLabels(context);\n-  }\n-}\n-\n-async function updateAllIssuePriceLabels(context: Context) {\n-  const { logger, config } = context;\n-  const repos = await listOrgRepos(context);\n-\n-  for (const repo of repos) {\n-    logger.info(`Fetching issues for ${repo.name}`);\n-    const issues = await listRepoIssues(context, repo.owner.login, repo.name);\n+    logger.info(`Updating pricing labels in ${repository.html_url}`);\n \n+    const owner = repository.owner.login;\n+    const repo = repository.name;\n+    const issues = await listRepoIssues(context, owner, repo);\n+    // For each issue inside the repository, we want to save the currently set labels except the price,\n+    // then remove all these labels, trigger a synchronization so up-to-date Price labels are generated,\n+    // and finally we want to add back all the previously set labels (except the price).\n+    // This way, the plugin gets triggered by the \"issues.labeled\" event, and recreates the price, using the proper\n+    // configuration.\n     for (const issue of issues) {\n-      logger.info(`Updating issue ${issue.number} in ${repo.name}`);\n-      await setPriceLabel(\n-        {\n-          ...context,\n-          payload: {\n-            repository: repo,\n-            issue,\n-          },\n-        } as Context,\n-        issue.labels as Label[],\n-        config\n-      );\n-\n-      await new Promise((resolve) => setTimeout(resolve, 50));\n+      const currentLabels = (\n+        await context.octokit.paginate(context.octokit.rest.issues.listLabelsOnIssue, {\n+          owner,\n+          repo,\n+          issue_number: issue.number,\n+        })\n+      )\n+        .filter((o) => !o.name.startsWith(\"Price:\"))\n+        .map((o) => o.name);\n+      logger.info(`Removing all labels in issue ${issue.html_url}`, { currentLabels });\n+      if (currentLabels.length) {\n+        await context.octokit.rest.issues.removeAllLabels({\n+          owner,\n+          repo,\n+          issue_number: issue.number,\n+        });\n+        // this should create labels on the repos that are missing\n+        await syncPriceLabelsToConfig(ctx);\n+        await context.octokit.rest.issues.addLabels({\n+          repo,\n+          owner,\n+          issue_number: issue.number,\n+          labels: currentLabels,\n+        });","score":{"reward":7.14,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":55.41272727272728,"syllables":46,"sentences":1,"score":0.9541272727272728},"multiplier":1,"relevance":0.7}},{"id":1973464677,"content":"why was this removed now? This is executed on push events which mean that labels/multiplier could change so it should sync labels, no?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1973464677","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -99,8 +91,6 @@ export async function globalLabelUpdate(context: Context) {\n           repo,\n           issue_number: issue.number,\n         });\n-        // this should create labels on the repos that are missing\n-        await syncPriceLabelsToConfig(ctx);","score":{"reward":6.56,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":81.85500000000002,"syllables":32,"sentences":2,"score":0.7814499999999999},"multiplier":1,"relevance":0.8}},{"id":1976489431,"content":"Couldn't you fetch the correct config since you have Octokit with org's token so you have access to all repos? Then you could sync labels and add new price labels in the Action.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1976489431","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -99,8 +91,6 @@ export async function globalLabelUpdate(context: Context) {\n           repo,\n           issue_number: issue.number,\n         });\n-        // this should create labels on the repos that are missing\n-        await syncPriceLabelsToConfig(ctx);","score":{"reward":7.084,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":80.30107142857145,"syllables":45,"sentences":2,"score":0.7969892857142855},"multiplier":1,"relevance":0.7}},{"id":1977758697,"content":"what about deleting incorrect time and priority labels? for example if you change them in the config","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1977758697","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -79,30 +72,28 @@ export async function syncPriceLabelsToConfig(context: Context): Promise<void> {\n   // Get the missing labels\n   const missingLabels = [...new Set(pricingLabels.filter((label) => !allLabels.map((i) => i.name).includes(label.name)).map((o) => o.name))];\n \n-  // Delete current price labels\n-  const labelsToDelete = allLabels.filter((o) => o.name.startsWith(\"Price: \"));\n-  await deleteLabelsFromRepository(context, labelsToDelete);\n-\n   // Create missing labels\n   if (missingLabels.length > 0) {\n+    // Delete current price labels\n+    const labelsToDelete = allLabels.filter((o) => o.name.startsWith(\"Price: \"));\n+    await deleteLabelsFromRepository(context, labelsToDelete);\n     logger.info(`Missing labels found in ${context.payload.repository.html_url}, creating them`, { missingLabels });\n     await Promise.allSettled(missingLabels.map((label) => createLabel(context, label, \"default\")));\n     logger.info(`Creating missing labels done`);\n+  } else if (incorrectPriceLabels.length > 0) {\n+    await deleteLabelsFromRepository(context, incorrectPriceLabels);\n   }","score":{"reward":6.156,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":58.8663235294118,"syllables":28,"sentences":2,"score":0.988663235294118},"multiplier":1,"relevance":0.9}},{"id":1980191939,"content":"Yeah this was never implemented so let's leave that for another task","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1980191939","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -79,30 +72,28 @@ export async function syncPriceLabelsToConfig(context: Context): Promise<void> {\n   // Get the missing labels\n   const missingLabels = [...new Set(pricingLabels.filter((label) => !allLabels.map((i) => i.name).includes(label.name)).map((o) => o.name))];\n \n-  // Delete current price labels\n-  const labelsToDelete = allLabels.filter((o) => o.name.startsWith(\"Price: \"));\n-  await deleteLabelsFromRepository(context, labelsToDelete);\n-\n   // Create missing labels\n   if (missingLabels.length > 0) {\n+    // Delete current price labels\n+    const labelsToDelete = allLabels.filter((o) => o.name.startsWith(\"Price: \"));\n+    await deleteLabelsFromRepository(context, labelsToDelete);\n     logger.info(`Missing labels found in ${context.payload.repository.html_url}, creating them`, { missingLabels });\n     await Promise.allSettled(missingLabels.map((label) => createLabel(context, label, \"default\")));\n     logger.info(`Creating missing labels done`);\n+  } else if (incorrectPriceLabels.length > 0) {\n+    await deleteLabelsFromRepository(context, incorrectPriceLabels);\n   }","score":{"reward":3.312,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":76.50153846153849,"syllables":18,"sentences":1,"score":0.8349846153846151},"multiplier":1,"relevance":0.6}},{"id":2694547491,"content":"I realized that the repo config completely overrides org config, so when you push an empty commit to a repo that doesn't have a config then it will have org config so it will correctly work but if it has a config which doesn't have pricing plugin (only other plugins), the plugin won't even run. Is this intended? I guess we can't do much because of the way config merging works right now.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2694547491","commentType":"PULL_COLLABORATOR","score":{"reward":10.752,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":77,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":65.41969696969699,"syllables":105,"sentences":3,"score":0.9458030303030301},"multiplier":1,"relevance":0.8}},{"id":2694608562,"content":"I guess, but you could also argue that if you have a repo config with one plugin (for example you only want this plugin in this repo) you still want to run plugins from org config","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2694608562","commentType":"PULL_COLLABORATOR","score":{"reward":6.432,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":57.49500000000003,"syllables":48,"sentences":1,"score":0.9749500000000003},"multiplier":1,"relevance":0.6}},{"id":2700665931,"content":"Not sure if I did something wrong but I think this is incorrect behavior:\r\nI have an org with org-wide config, one [repo](https://github.com/ubiquibot-whilefoo-testing/testing) with its own pricing config, and another [repo](https://github.com/ubiquibot-whilefoo-testing/test) with empty config. I triggered the run by [commiting](https://github.com/ubiquibot-whilefoo-testing/test/commit/dd3508519dc13e88e3f8c5f67d225174a071d7ab) an empty line in the config and what happened was that it removed all price labels but only added three labels.\r\n[First run](https://github.com/ubiquity-whilefoo/daemon-pricing/actions/runs/13674875926/job/38233054036)\r\n[Second run](https://github.com/ubiquity-whilefoo/daemon-pricing/actions/runs/13674880201/job/38233068948)","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2700665931","commentType":"PULL_COLLABORATOR","score":{"reward":34.884,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":5}},"result":5},"priority":4,"words":{"wordCount":66,"wordValue":0.1,"result":2.57},"readability":{"fleschKincaid":66.57772727272727,"syllables":92,"sentences":3,"score":0.9342227272727273},"multiplier":1,"relevance":0.9}},{"id":2703436544,"content":"![image](https://github.com/user-attachments/assets/35416fcc-b997-484e-9f12-1838947a6a32)\r\nTried to [trigger](https://github.com/ubiquibot-whilefoo-testing/test/commit/f4b0330be4bae299a0d47f1b9f9ee89d66e40d35) again and now it removed those 3 labels and added other labels: https://github.com/ubiquity-whilefoo/daemon-pricing/actions/runs/13697088627/job/38301892557\r\nTriggering for [3rd time](https://github.com/ubiquity-whilefoo/daemon-pricing/actions/runs/13697235685/job/38302360185) makes it go back to those 3 labels.\r\nSomething weird is definitely going on","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2703436544","commentType":"PULL_COLLABORATOR","score":{"reward":23.22,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":3}},"result":3},"priority":4,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":61.890000000000015,"syllables":69,"sentences":3,"score":0.9810999999999999},"multiplier":1,"relevance":0.9}},{"id":2703574909,"content":"The kernel checks for plugins array length\r\nhttps://github.com/ubiquity-os/ubiquity-os-kernel/blob/d9ae7482477dbe9d07c367ddb795f66250b97e69/src/github/utils/config.ts#L54","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2703574909","commentType":"PULL_COLLABORATOR","score":{"reward":6.076,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":55.60115942028986,"syllables":39,"sentences":3,"score":0.9560115942028986},"multiplier":1,"relevance":0.7}},{"id":2705046126,"content":"Now it works correctly!\r\nBut me targeting the Action instead of the Worker wasn't the root problem though? It was the plugin deleting all price labels instead of just incorrect labels, right?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2705046126","commentType":"PULL_COLLABORATOR","score":{"reward":8.032,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":70.0518181818182,"syllables":49,"sentences":3,"score":0.8994818181818179},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2637727727,"effect":{"addition":177,"deletion":116},"reward":11.72,"priority":4},{"reviewId":2647580302,"effect":{"addition":8,"deletion":36},"reward":1.76,"priority":4},{"reviewId":2654540766,"effect":{"addition":170,"deletion":102},"reward":10.88,"priority":4},{"reviewId":2667708171,"effect":{"addition":13,"deletion":5},"reward":0.72,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 215.216 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>4</td><td>25.08</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>16.936</td></tr><tr><td>Review</td><td>Comment</td><td>19</td><td>173.2</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89\" target=\"_blank\" rel=\"noopener\">#89</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+177 -116</td><td>4</td><td>11.72</td></tr><tr><td>+8 -36</td><td>4</td><td>1.76</td></tr><tr><td>+170 -102</td><td>4</td><td>10.88</td></tr><tr><td>+13 -5</td><td>4</td><td>0.72</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2692391951\" target=\"_blank\" rel=\"noopener\">It was mostly a problem where plugins think issues and PR will b&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.6</td><td>4</td><td>6.384</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2692757786\" target=\"_blank\" rel=\"noopener\">Just looked through the code and it seems that &#96;removeAllAss&hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.7</td><td>4</td><td>7.112</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/64#issuecomment-2695656894\" target=\"_blank\" rel=\"noopener\">The fix is https://github.com/ubiquity-os-marketplace/daemon-dis&hellip;</a></h6></td><td><details><summary>1.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.5</td><td>4</td><td>3.44</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1967994265\" target=\"_blank\" rel=\"noopener\">isn't this run only in the worker? why run both?</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.8</td><td>4</td><td>4.032</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1967997293\" target=\"_blank\" rel=\"noopener\">why did these numbers change?</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>4</td><td>1.932</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1968019853\" target=\"_blank\" rel=\"noopener\">I hope this won't cause rate limit issue. Suppose you have a rep&hellip;</a></h6></td><td><details><summary>2.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 48&#13;  wordValue: 0.1&#13;  result: 2.35&#13;</pre></details></td><td>0.9</td><td>4</td><td>10.836</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1968027331\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionif (!priceLabels.some((o) =&gt;&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.9</td><td>4</td><td>5.112</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1968053006\" target=\"_blank\" rel=\"noopener\">&#96;handleGlobalUpdate&#96; will remove incorrect price labels,&hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.8</td><td>4</td><td>7.36</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1968059694\" target=\"_blank\" rel=\"noopener\">is there a scenario where this function runs but price labels st&hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.9</td><td>4</td><td>8.532</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1968073145\" target=\"_blank\" rel=\"noopener\">here only repository is changed but won't config stay the same e&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.8</td><td>4</td><td>6.496</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1971156451\" target=\"_blank\" rel=\"noopener\">For example you change multiplier from &#96;1&#96; to &#96;1.0&#&hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.9</td><td>4</td><td>9.252</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1971163614\" target=\"_blank\" rel=\"noopener\">Yeah there's really no solution and throttler will work fine in &hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.7</td><td>4</td><td>7.14</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1973464677\" target=\"_blank\" rel=\"noopener\">why was this removed now? This is executed on push events which &hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.8</td><td>4</td><td>6.56</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1976489431\" target=\"_blank\" rel=\"noopener\">Couldn't you fetch the correct config since you have Octokit wit&hellip;</a></h6></td><td><details><summary>2.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.7</td><td>4</td><td>7.084</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1977758697\" target=\"_blank\" rel=\"noopener\">what about deleting incorrect time and priority labels? for exam&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.9</td><td>4</td><td>6.156</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#discussion_r1980191939\" target=\"_blank\" rel=\"noopener\">Yeah this was never implemented so let's leave that for another &hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.6</td><td>4</td><td>3.312</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2694547491\" target=\"_blank\" rel=\"noopener\">I realized that the repo config completely overrides org config,&hellip;</a></h6></td><td><details><summary>2.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 77&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.8</td><td>4</td><td>10.752</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2694608562\" target=\"_blank\" rel=\"noopener\">I guess, but you could also argue that if you have a repo config&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.6</td><td>4</td><td>6.432</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2700665931\" target=\"_blank\" rel=\"noopener\">Not sure if I did something wrong but I think this is incorrect &hellip;</a></h6></td><td><details><summary>7.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 5&#13;  result: 5&#13;regex:&#13;  wordCount: 66&#13;  wordValue: 0.1&#13;  result: 2.57&#13;</pre></details></td><td>0.9</td><td>4</td><td>34.884</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2703436544\" target=\"_blank\" rel=\"noopener\">![image](https://github.com/user-attachments/assets/35416fcc-b99&hellip;</a></h6></td><td><details><summary>4.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 3&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.9</td><td>4</td><td>23.22</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2703574909\" target=\"_blank\" rel=\"noopener\">The kernel checks for plugins array lengthhttps://github.com/u&hellip;</a></h6></td><td><details><summary>1.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>4</td><td>6.076</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/89#issuecomment-2705046126\" target=\"_blank\" rel=\"noopener\">Now it works correctly!But me targeting the Action instead of &hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.8</td><td>4</td><td>8.032</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_28.json","json":{"gentlementlegen":{"userId":9807008,"total":202.912,"task":{"reward":200,"multiplier":1},"comments":[{"id":2492976827,"content":"@Keyrxng While I do agree that it will elongate the run time, I am not sure if we need to paginate reviews? I didn't go through the whole API but maybe we can only consider the last review? Or get a list of unresolved comments? I actually am worried more about hitting the fetch limit that the runtime duration itself (because runtime duration can be optimized, api are much harder to improve).\r\nMoving to a dist build is totally possible, but the main problem is that even if the run could be instantaneous, we cannot skip the duration where the action run is being picked up by a gitHub node. This can sometimes take 1s, sometimes 5 minutes or more. Which is why it can be unreliable for commands that needs to be responsive.\r\nSwitching from one to another should be made much easier once https://github.com/ubiquity-os-marketplace/command-start-stop/pull/86 is merged in.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/28#issuecomment-2492976827","commentType":"ISSUE_ASSIGNEE","score":{"reward":2.912,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":149,"wordValue":0.1,"result":2.24},"readability":{"fleschKincaid":66.64930555555556,"syllables":231,"sentences":9,"score":0.9335069444444444},"multiplier":0.25,"relevance":0.7}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 202.912 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>200</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.912</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/28#issuecomment-2492976827\" target=\"_blank\" rel=\"noopener\">@Keyrxng While I do agree that it will elongate the run time, I &hellip;</a></h6></td><td><details><summary>3.24</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 149&#13;  wordValue: 0.1&#13;  result: 2.24&#13;</pre></details></td><td>0.7</td><td>4</td><td>2.912</td></tr></tbody></table></details>"},"ishowvel":{"total":0.42,"userId":186167176,"comments":[{"id":2470347726,"content":"Is this task up for grabs or is @jordan-ae still working on it","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/28#issuecomment-2470347726","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.42,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":95.93928571428573,"syllables":16,"sentences":1,"score":0.6406071428571427},"multiplier":0.25,"relevance":0.3}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.42 XP ]</a>&nbsp;</h3><h6>@ishowvel</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.42</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/28#issuecomment-2470347726\" target=\"_blank\" rel=\"noopener\">Is this task up for grabs or is @jordan-ae still working on it</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.3</td><td>4</td><td>0.42</td></tr></tbody></table></details>"},"jordan-ae":{"total":1.064,"userId":33989423,"comments":[{"id":2470368378,"content":"Still working on it trying to get test pass. Giving me a bit of a hassle","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/28#issuecomment-2470368378","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.064,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":98.25250000000001,"syllables":19,"sentences":2,"score":0.6174749999999999},"multiplier":0.25,"relevance":0.7}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 1.064 XP ]</a>&nbsp;</h3><h6>@jordan-ae</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.064</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/28#issuecomment-2470368378\" target=\"_blank\" rel=\"noopener\">Still working on it trying to get test pass. Giving me a bit of &hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.7</td><td>4</td><td>1.064</td></tr></tbody></table></details>"},"Keyrxng":{"total":2.772,"userId":106303466,"comments":[{"id":2490990486,"content":"This has a big chance of not performing well as a worker with these suggestions because:\r\n- for every assigned issue we need to paginate reviews (potentially 10s-100s) for each\r\n- this feature increases that limit more and more\r\nPerhaps moving to a dist build action should be considered?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/28#issuecomment-2490990486","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":2.772,"formatting":{"content":{"p":{"score":0,"elementCount":4},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":4,"words":{"wordCount":48,"wordValue":0.1,"result":2.35},"readability":{"fleschKincaid":31.215000000000018,"syllables":72,"sentences":1,"score":0.7121500000000002},"multiplier":0.25,"relevance":0.9}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 2.772 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.772</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/28#issuecomment-2490990486\" target=\"_blank\" rel=\"noopener\">This has a big chance of not performing well as a worker with th&hellip;</a></h6></td><td><details><summary>2.55</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 48&#13;  wordValue: 0.1&#13;  result: 2.35&#13;</pre></details></td><td>0.9</td><td>4</td><td>2.772</td></tr></tbody></table></details>"},"0x4007":{"total":33.736,"userId":4975670,"comments":[{"id":2503197586,"content":"I am not sure because it's hard to compensate for research required to author good specifications but 1. We should still limit to the assignee reward amount and 2. I wish that I received the credit since I'm the original author! \nI think generally the order from highest to lowest for major contributions to completing projects should be \n1. The assignee (the contributor actually doing the work)\n2. The reviewers\n3. The specification author\n4. The rest","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/28#issuecomment-2503197586","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.596,"formatting":{"content":{"p":{"score":0,"elementCount":1},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":4}},"result":0.4},"priority":4,"words":{"wordCount":75,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":49.05975000000004,"syllables":123,"sentences":4,"score":0.8905975000000004},"multiplier":1,"relevance":0.3}},{"id":2464183564,"content":"Code looks fine I just wish the QA was more clear.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91#pullrequestreview-2464183564","commentType":"PULL_COLLABORATOR","score":{"reward":1.008,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":111.07000000000002,"syllables":11,"sentences":1,"score":1},"multiplier":1,"relevance":0.2}},{"id":1860148029,"content":"This description isn't very clear. Given the specification, I guess that this should describe the max time we will wait for a reviewer to review while holding up the task for the assignee","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91#discussion_r1860148029","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -39,7 +39,7 @@ function maxConcurrentTasks() {\n \n export const pluginSettingsSchema = T.Object(\n   {\n-    reviewDelayTolerance: T.String({ default: \"1 Day\" }),\n+    reviewDelayTolerance: T.String({ default: \"1 Day\", description: \"How long shall the wait be for a reviewer to take action?\" }),","score":{"reward":8.256,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":65.16823529411766,"syllables":50,"sentences":2,"score":0.9483176470588234},"multiplier":1,"relevance":0.8}},{"id":2503160538,"content":"Your QA isn't clear can you list the three scenarios and their outputs?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91#issuecomment-2503160538","commentType":"PULL_COLLABORATOR","score":{"reward":3.36,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":89.89642857142859,"syllables":17,"sentences":1,"score":0.7010357142857141},"multiplier":1,"relevance":0.6}},{"id":2503182629,"content":"Then let's test in prod","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91#issuecomment-2503182629","commentType":"PULL_COLLABORATOR","score":{"reward":0.316,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":116.14500000000001,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}}],"reviewRewards":[{"reviews":[{"reviewId":2464183564,"effect":{"addition":258,"deletion":147},"reward":16.2,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 33.736 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>16.2</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>4.596</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>12.94</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91\" target=\"_blank\" rel=\"noopener\">#91</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+258 -147</td><td>4</td><td>16.2</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/28#issuecomment-2503197586\" target=\"_blank\" rel=\"noopener\">I am not sure because it's hard to compensate for research requi&hellip;</a></h6></td><td><details><summary>3.02</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 4&#13;  result: 0.4&#13;regex:&#13;  wordCount: 75&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.3</td><td>4</td><td>4.596</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91#pullrequestreview-2464183564\" target=\"_blank\" rel=\"noopener\">Code looks fine I just wish the QA was more clear.</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.2</td><td>4</td><td>1.008</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91#discussion_r1860148029\" target=\"_blank\" rel=\"noopener\">This description isn't very clear. Given the specification, I gu&hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.8</td><td>4</td><td>8.256</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91#issuecomment-2503160538\" target=\"_blank\" rel=\"noopener\">Your QA isn't clear can you list the three scenarios and their o&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.6</td><td>4</td><td>3.36</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91#issuecomment-2503182629\" target=\"_blank\" rel=\"noopener\">Then let's test in prod</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.316</td></tr></tbody></table></details>"},"whilefoo":{"total":3.14,"userId":139262667,"comments":[{"id":2489452377,"content":"The original implementation allowed for productive contributors to work on two tasks concurrently. With a starting two task limit:\r\n| Condition                                              | Task Adjustment       | Explanation                                                                                             |\r\n|--------------------------------------------------------|-----------------------|---------------------------------------------------------------------------------------------------------|\r\n| If any reviewer approved the pull                      | +1 task per pull      | It's likely that the pull is good, just waiting on other slow reviewers to confirm.                      |\r\n| If reviewers take longer than 24 hours                 | +1 task per pull      | Don't wait for lazy reviewers to be able to start a new task.                                            |\r\n| If any reviewer requested changes                      | -1 task per pull      | They should focus on addressing the changes as a top priority.                                           |\r\n_Originally posted by @0x4007 in https://github.com/ubiquibot/command-start-stop/pull/19#discussion_r1731441502_\r\nFor the sake of this conversation a completed PR is when the conditions are met in the above table.\r\nIn the current state the code checks if any review is approved or if there is 0 reviews but 24 hours have passed since the creation of the PR, however it doesn't check if there's any requested changes so it will count it as completed even if there 1 approve and 1 requested changes.\r\nThere is still a problem when the reviewer requests changes and the contributor resolves those changes but waits for the reviewer to make a new review so they can't start another task.\r\nThere's two possible solutions: check if the reviewer was requested more than x hours ago or check that changes have been marked as solved","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/28","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.14,"formatting":{"content":{"p":{"score":0,"elementCount":11},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":232,"wordValue":0.1,"result":1.42},"readability":{"fleschKincaid":59.634513314967876,"syllables":343,"sentences":9,"score":0.9963451331496788},"multiplier":1,"relevance":1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 3.14 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.14</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/28\" target=\"_blank\" rel=\"noopener\">The original implementation allowed for productive contributors &hellip;</a></h6></td><td><details><summary>2.42</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 11&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 232&#13;  wordValue: 0.1&#13;  result: 1.42&#13;</pre></details></td><td>1</td><td>1</td><td>3.14</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_2.json","json":{"gentlementlegen":{"userId":9807008,"total":36.657,"task":{"reward":25,"multiplier":1},"comments":[{"id":2007554266,"content":"I am aware of this problem indeed. However, I also use a Macbook and have no issue running Docker instances, is it because you are using an older version of MacOS?\r\nTo fix this, it is possible to deploy your own Supabase version using the Supabase CLI to a free account as well, I do this to test the db without having to run everything locally.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/2#issuecomment-2007554266","commentType":"ISSUE_AUTHOR","score":{"reward":1.992,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":66,"wordValue":0.1,"result":2.57},"readability":{"fleschKincaid":57.605000000000004,"syllables":99,"sentences":3,"score":0.9760500000000001},"multiplier":1,"relevance":0.6}},{"id":2014088832,"content":"I am really not sure to understand the use of Cloudflare in general at that point, I never tried to set it up locally. What I like about Supabase is to spin up my local instance with one command line, and being able to manipulate everything without the worry to break it. Because on Cloudflare case how do I set up KV values without admin access? Should I have my own account and my own instances?\r\nFor this issue it should consist of calling a `prebuild` command running Supabase CLI https://supabase.com/docs/guides/api/rest/generating-types","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/2#issuecomment-2014088832","commentType":"ISSUE_AUTHOR","score":{"reward":4.176,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":89,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":67.67299319727894,"syllables":142,"sentences":6,"score":0.9232700680272106},"multiplier":1,"relevance":0.9}},{"id":2194926088,"content":"Currently, the TypeScript types that are generated by Supabase are committed in the repository. It might be a better practice to generate them on a build step. This would give some benefits:\r\n- less likely to merge conflict between contributors\r\n- types always up to date on a build, which would fail compilation if they changed\r\nThe drawback would be that for contributors who do not have a Service Role Key, they would only be able to generate the schema locally.\r\nThe expected fix would be to have a `prebuild` step that generates the types properly.\r\nRefers to https://github.com/ubiquibot/assistive-pricing/pull/1#discussion_r1529509069","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/2","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.94,"formatting":{"content":{"p":{"score":0,"elementCount":6},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1.2},"priority":1,"words":{"wordCount":95,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":57.460897435897465,"syllables":162,"sentences":6,"score":0.9746089743589746},"multiplier":1,"relevance":1}},{"id":1868022557,"content":"Resolves #2 \r\nOpening a separate PR redundant of #3 for clarity and only solving one task with one PR.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/4","commentType":"PULL_SPECIFICATION","score":{"reward":0.549,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":53.97105263157897,"syllables":30,"sentences":1,"score":0.9397105263157897},"multiplier":1,"relevance":0.3}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 36.657 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.94</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>6.168</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.549</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/2\" target=\"_blank\" rel=\"noopener\">Currently, the TypeScript types that are generated by Supabase a&hellip;</a></h6></td><td><details><summary>3.82</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.2&#13;regex:&#13;  wordCount: 95&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>1</td><td>1</td><td>4.94</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/2#issuecomment-2007554266\" target=\"_blank\" rel=\"noopener\">I am aware of this problem indeed. However, I also use a Macbook&hellip;</a></h6></td><td><details><summary>2.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 66&#13;  wordValue: 0.1&#13;  result: 2.57&#13;</pre></details></td><td>0.6</td><td>1</td><td>1.992</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/2#issuecomment-2014088832\" target=\"_blank\" rel=\"noopener\">I am really not sure to understand the use of Cloudflare in gene&hellip;</a></h6></td><td><details><summary>3.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 89&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.9</td><td>1</td><td>4.176</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/4\" target=\"_blank\" rel=\"noopener\">Resolves #2 Opening a separate PR redundant of #3 for clarity &hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.549</td></tr></tbody></table></details>"},"whilefoo":{"total":2.934,"userId":139262667,"comments":[{"id":2007523605,"content":"If you want to generate types you need to push migrations to a DB and then generate types (for some weird reason, it can't generate types without a database). Running a local DB requires Docker which not everybody has installed - in my case I use a Macbook which needs a VM for Docker so I usually have it turned off.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/2#issuecomment-2007523605","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.934,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":61,"wordValue":0.1,"result":2.53},"readability":{"fleschKincaid":56.60536885245902,"syllables":86,"sentences":2,"score":0.9660536885245903},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/4"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 2.934 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.934</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/2#issuecomment-2007523605\" target=\"_blank\" rel=\"noopener\">If you want to generate types you need to push migrations to a D&hellip;</a></h6></td><td><details><summary>2.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 61&#13;  wordValue: 0.1&#13;  result: 2.53&#13;</pre></details></td><td>0.9</td><td>1</td><td>2.934</td></tr></tbody></table></details>"},"0x4007":{"total":3.751,"userId":4975670,"comments":[{"id":2013824050,"content":"Can you set a time estimate label @FernandVEYRIER \r\nAlso I just realized that this is for a plugin. This is an example of why I think we should use Cloudflare KV instead of Supabase. Its simpler. \r\nPerhaps we should use KV and close this issue as unplanned. @whilefoo rfc\r\n---\r\nI just saw this comment https://github.com/ubiquibot/assistive-pricing/pull/1#discussion_r1529093790 which explains why we need to use Supabase (for GitHub Actions.) The [documentation](https://developers.cloudflare.com/kv/get-started/) doesn't suggest this is true. It can be initialized as a \"workers\" project but just not deployed on Cloudflare as a Worker, right?\r\nIt just seems that a full Supabase database per plugin isn't worth it.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/2#issuecomment-2013824050","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.915,"formatting":{"content":{"p":{"score":0,"elementCount":5},"hr":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":105,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":69.30464912280705,"syllables":168,"sentences":9,"score":0.9069535087719295},"multiplier":1,"relevance":0.5}},{"id":2014420452,"content":"Yes\r\nThey have a tool built in called miniflare that runs everything locally! Including KV locally! I'm very bullish on Cloudflare developer experience.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/2#issuecomment-2014420452","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.836,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":47.140000000000015,"syllables":43,"sentences":3,"score":0.8714000000000002},"multiplier":1,"relevance":0.4}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/4"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 3.751 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>2</td><td>3.751</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/2#issuecomment-2013824050\" target=\"_blank\" rel=\"noopener\">Can you set a time estimate label @FernandVEYRIER Also I just &hellip;</a></h6></td><td><details><summary>4.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 105&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>0.5</td><td>1</td><td>2.915</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/2#issuecomment-2014420452\" target=\"_blank\" rel=\"noopener\">YesThey have a tool built in called miniflare that runs everyt&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.836</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_63.json","json":{"gentlementlegen":{"userId":9807008,"total":18,"task":{"reward":18,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 18 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>18</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":5.14,"userId":4975670,"comments":[{"id":2736320112,"content":"```diff\r\n! Priority value is not defined\r\n```\r\nLooks like it doesn't know how to handle `0`\r\n_Originally posted by @ubiquity-os-beta[bot] in https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/173#issuecomment-2539381080_","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/63","commentType":"ISSUE_SPECIFICATION","score":{"reward":2.89,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":42.150000000000034,"syllables":53,"sentences":2,"score":0.8215000000000003},"multiplier":1,"relevance":1}},{"id":2508568209,"content":"Do you have QA? Code looks fine","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/65#pullrequestreview-2508568209","commentType":"PULL_COLLABORATOR","score":{"reward":0.81,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":118.6825,"syllables":7,"sentences":2,"score":1},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2508568209,"effect":{"addition":37,"deletion":11},"reward":1.44,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/65"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 5.14 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>1.44</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>2.89</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.81</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/65\" target=\"_blank\" rel=\"noopener\">#65</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+37 -11</td><td>3</td><td>1.44</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/63\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;diff! Priority value is not defined&#96;&#96;&hellip;</a></h6></td><td><details><summary>2.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>1</td><td>1</td><td>2.89</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/65#pullrequestreview-2508568209\" target=\"_blank\" rel=\"noopener\">Do you have QA? Code looks fine</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.81</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_102.json","json":{"gentlementlegen":{"userId":9807008,"total":59.977,"task":{"reward":50,"multiplier":1},"comments":[{"id":2729005940,"content":"We currently have restrictions on the level of tasks we are able to start (at the moment at least priority 3). However, users can still link a pull-request to that issue if they want to. What happens is that the plugin properly recognizes that the task cannot be started (\"`⚠ This task does not reflect a business priority at the moment. You may start tasks with one of the following labels: Priority: 3 (High), Priority: 4 (Urgent), Priority: 5 (Emergency)`\") but fails to post that comment because the starting event comes from the pull-request and not the issue, thus failing with `› Cannot post comment because issue is not found in the payload`. This comment should be posted otherwise users could think that the plugin is not working properly.\r\n## What is to be done\r\n- properly post the comment that the user cannot start this task\r\n- add related tests\r\n## Example of failed run\r\nhttps://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/60#issuecomment-2525053118","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/102","commentType":"ISSUE_SPECIFICATION","score":{"reward":7.45,"formatting":{"content":{"p":{"score":0,"elementCount":4},"h2":{"score":1,"elementCount":2},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":3.2},"priority":1,"words":{"wordCount":111,"wordValue":0.1,"result":2.55},"readability":{"fleschKincaid":61.53481707317076,"syllables":181,"sentences":6,"score":0.9846518292682924},"multiplier":1,"relevance":1}},{"id":2254334804,"content":"Resolves #102\r\nDepends on https://github.com/ubiquity-os/plugin-sdk/pull/42 to properly post errors\r\nQA: https://github.com/Meniole/command-start-stop/pull/53","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/115","commentType":"PULL_SPECIFICATION","score":{"reward":2.527,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":69.23333333333335,"syllables":41,"sentences":3,"score":0.9076666666666665},"multiplier":1,"relevance":0.7}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 59.977 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>7.45</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>2.527</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/102\" target=\"_blank\" rel=\"noopener\">We currently have restrictions on the level of tasks we are able&hellip;</a></h6></td><td><details><summary>5.75</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    h2:&#13;      score: 1&#13;      elementCount: 2&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 3.2&#13;regex:&#13;  wordCount: 111&#13;  wordValue: 0.1&#13;  result: 2.55&#13;</pre></details></td><td>1</td><td>1</td><td>7.45</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/115\" target=\"_blank\" rel=\"noopener\">Resolves #102Depends on https://github.com/ubiquity-os/plugin-&hellip;</a></h6></td><td><details><summary>2.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.7</td><td>1</td><td>2.527</td></tr></tbody></table></details>"},"0x4007":{"total":2.652,"userId":4975670,"comments":[{"id":2574441393,"content":"This was not collaborative so it should have thrown an error, unless you're an admin on this repo.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/102#issuecomment-2574441393","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.196,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":67.32894736842107,"syllables":27,"sentences":1,"score":0.9267105263157893},"multiplier":1,"relevance":0.6}},{"id":2576575390,"content":"Then it's fine.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/102#issuecomment-2576575390","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.456,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.4}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/115"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 2.652 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>2</td><td>2.652</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/102#issuecomment-2574441393\" target=\"_blank\" rel=\"noopener\">This was not collaborative so it should have thrown an error, un&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.6</td><td>2</td><td>2.196</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/102#issuecomment-2576575390\" target=\"_blank\" rel=\"noopener\">Then it's fine.</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.4</td><td>2</td><td>0.456</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_262.json","json":{"gentlementlegen":{"userId":9807008,"total":26.85,"task":{"reward":24,"multiplier":1},"comments":[{"id":2647221695,"content":"It is specific to the review incentivizer module, the rest of the plugin should work fine. I guess if no pull-request is linked this module should just do nothing since there is no review to incentivize, and the rest of the plugin should run as usual.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/262#issuecomment-2647221695","commentType":"ISSUE_ASSIGNEE","score":{"reward":2.85,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":47,"wordValue":0.1,"result":2.33},"readability":{"fleschKincaid":62.38250000000002,"syllables":67,"sentences":2,"score":0.9761749999999998},"multiplier":0.25,"relevance":0.95}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 26.85 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>24</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.85</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/262#issuecomment-2647221695\" target=\"_blank\" rel=\"noopener\">It is specific to the review incentivizer module, the rest of th&hellip;</a></h6></td><td><details><summary>2.33</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 47&#13;  wordValue: 0.1&#13;  result: 2.33&#13;</pre></details></td><td>0.95</td><td>4</td><td>2.85</td></tr></tbody></table></details>"},"0x4007":{"total":21.664,"userId":4975670,"comments":[{"id":2642139241,"content":"@shiv810  why are the results different for recommendation?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/262#issuecomment-2642139241","commentType":"ISSUE_AUTHOR","score":{"reward":2.256,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":40.09,"syllables":15,"sentences":1,"score":0.8009000000000001},"multiplier":1,"relevance":0.6}},{"id":2648462759,"content":"I believe that I didn't edit though. At least I don't recall it and unfortunately from mobile i can't see edit timestamps","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/262#issuecomment-2648462759","commentType":"ISSUE_AUTHOR","score":{"reward":2.616,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":65.55550000000002,"syllables":38,"sentences":2,"score":0.9444449999999998},"multiplier":1,"relevance":0.3}},{"id":2837438012,"content":"https://github.com/ubiquity-os-marketplace/text-vector-embeddings/pull/83#issuecomment-2641906759\nReview incentivizer has a bug here. \nWe will need to discuss how to fix for this scenario but we essentially decided to credit koya0 but not accept the pull. This happens occasionally and we should support it. \nI suppose the exception can be detected if it's closed as complete and the assignee has a closed pull. \n_Originally posted by @0x4007 in https://github.com/ubiquity-os-marketplace/text-vector-embeddings/issues/15#issuecomment-2642129028_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/262","commentType":"ISSUE_SPECIFICATION","score":{"reward":5.83,"formatting":{"content":{"p":{"score":0,"elementCount":1},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":62,"wordValue":0.1,"result":2.54},"readability":{"fleschKincaid":54.677272727272765,"syllables":145,"sentences":7,"score":0.9467727272727277},"multiplier":1,"relevance":1}},{"id":2607670353,"content":"I would change to warn","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/264#pullrequestreview-2607670353","commentType":"PULL_COLLABORATOR","score":{"reward":1.656,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.6}},{"id":1950225276,"content":"Error doesn't make sense. Warn does to me","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/264#discussion_r1950225276","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -38,7 +38,8 @@ export class ReviewIncentivizerModule extends BaseModule {\n \n     const prNumbers = data.linkedReviews.map((review) => review.self?.number);\n     if (!prNumbers.length) {\n-      throw this.context.logger.error(`No pull request linked to this issue, Aborting`);\n+      this.context.logger.error(`No pull request is linked to this issue, won't run review incentivizer`);","score":{"reward":3.706,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":108.26750000000001,"syllables":10,"sentences":2,"score":1},"multiplier":1,"relevance":0.85}}],"reviewRewards":[{"reviews":[{"reviewId":2607670353,"effect":{"addition":139,"deletion":1},"reward":5.6,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/264"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 21.664 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>5.6</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.83</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>4.872</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>5.362</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/264\" target=\"_blank\" rel=\"noopener\">#264</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+139 -1</td><td>4</td><td>5.6</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/262\" target=\"_blank\" rel=\"noopener\">https://github.com/ubiquity-os-marketplace/text-vector-embedding&hellip;</a></h6></td><td><details><summary>4.54</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 62&#13;  wordValue: 0.1&#13;  result: 2.54&#13;</pre></details></td><td>1</td><td>1</td><td>5.83</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/262#issuecomment-2642139241\" target=\"_blank\" rel=\"noopener\">@shiv810  why are the results different for recommendation?</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.6</td><td>4</td><td>2.256</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/262#issuecomment-2648462759\" target=\"_blank\" rel=\"noopener\">I believe that I didn't edit though. At least I don't recall it &hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.3</td><td>4</td><td>2.616</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/264#pullrequestreview-2607670353\" target=\"_blank\" rel=\"noopener\">I would change to warn</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.6</td><td>4</td><td>1.656</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/264#discussion_r1950225276\" target=\"_blank\" rel=\"noopener\">Error doesn't make sense. Warn does to me</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.85</td><td>4</td><td>3.706</td></tr></tbody></table></details>"},"shiv810":{"total":3.224,"userId":53160903,"comments":[{"id":2648194094,"content":"This happens because of double posting. When you edit the issue spec again, it will update the first instance of the recommendation/issue matchmaking post.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/262#issuecomment-2648194094","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.32,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":55.40350000000004,"syllables":41,"sentences":2,"score":0.9540350000000004},"multiplier":0.25,"relevance":0.6}},{"id":2648475442,"content":"<img width=\"1005\" alt=\"Image\" src=\"https://github.com/user-attachments/assets/09148d23-641a-44cf-86ec-7e3112e1a64c\" />\nThis was the edit, that triggered the `issue.updated` event.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/262#issuecomment-2648475442","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.904,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":72.32350000000002,"syllables":36,"sentences":2,"score":0.8767649999999998},"multiplier":0.25,"relevance":0.7}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/264"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 3.224 XP ]</a>&nbsp;</h3><h6>@shiv810</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>2</td><td>3.224</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/262#issuecomment-2648194094\" target=\"_blank\" rel=\"noopener\">This happens because of double posting. When you edit the issue &hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.6</td><td>4</td><td>1.32</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/262#issuecomment-2648475442\" target=\"_blank\" rel=\"noopener\">&lt;img width=\"1005\" alt=\"Image\" src=\"https://github.com/user-at&hellip;</a></h6></td><td><details><summary>2.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.7</td><td>4</td><td>1.904</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-disqualifier_44.json","json":{"gentlementlegen":{"userId":9807008,"total":75,"task":{"reward":75,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 75 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":67.974,"userId":4975670,"comments":[{"id":2453095827,"content":"Perhaps we should remove the concept of \"deadlines\" because we care more for persistent effort on a project vs a hard deadline date (some projects are underestimated for example) \nIt could be helpful to make it transparent what the disqualifier dates will be, for example:\nBut these numbers are divided based on the priority level. So for 5 emergency those would be \n```\n7 days / 5 = 1 day 9 hours 36 minutes \n14 days / 5 = 2 days 19 hours 12 minutes \n```\nAlso note that currently our settings are 3.5 days and 7 but I think we should do 7 and 14 with this new behavior. \n---\nLet's change the assign message start to at least remove the concept of \"deadlines\" \nPerhaps on the assign event, this plugin can leave a comment explaining the schedule. \nThen we can remove the start message on that plugin.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/44#issuecomment-2453095827","commentType":"ISSUE_COLLABORATOR","score":{"reward":11.373,"formatting":{"content":{"p":{"score":0,"elementCount":2},"h2":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":126,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":59.057000000000016,"syllables":182,"sentences":5,"score":0.9905700000000002},"multiplier":1,"relevance":0.85}},{"id":2474647773,"content":"The message needs work to accommodate both scenarios. \nScenario 1: no pull. \n2: normal follow ups. \nWe need to express the schedule to the assignee for both scenarios. \nhttps://github.com/Meniole/daemon-disqualifier/issues/6#issuecomment-2513618073","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#pullrequestreview-2474647773","commentType":"PULL_COLLABORATOR","score":{"reward":9.72,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":53.4698245614035,"syllables":66,"sentences":6,"score":0.934698245614035},"multiplier":1,"relevance":0.9}},{"id":2495187585,"content":"QA looks good","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#pullrequestreview-2495187585","commentType":"PULL_COLLABORATOR","score":{"reward":0.69,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":119.19000000000003,"syllables":3,"sentences":1,"score":1},"multiplier":1,"relevance":0.5}},{"id":1867087300,"content":"Add linguist","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1867087300","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.558,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":77.90500000000002,"syllables":3,"sentences":1,"score":0.8209499999999998},"multiplier":1,"relevance":0.6}},{"id":1867088045,"content":"```suggestion\n        \"description\": \"Delay to send reminders. 0 means disabled. Any other value is counted in days, e.g. 1.5 days\",\n```\nThe , syntax ambiguous","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1867088045","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,13 +1,14 @@\n {\n   \"name\": \"Daemon Disqualifier\",\n-  \"description\": \"Watches user activity on issues, sends reminders on deadlines, and unassign inactive users.\",\n+  \"description\": \"Watches user activity on issues, sends reminders on disqualification threshold, and unassign inactive users.\",\n   \"ubiquity:listeners\": [\"pull_request_review_comment.created\", \"issue_comment.created\", \"push\"],\n   \"configuration\": {\n     \"default\": {},\n     \"type\": \"object\",\n     \"properties\": {\n       \"warning\": {\n         \"default\": \"3.5 days\",\n+        \"description\": \"Delay to send reminders. 0 means disabled. Any other value is counted in days, e.g. 1,5 days\",","score":{"reward":0.96,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":6.390000000000015,"syllables":7,"sentences":1,"score":0.46390000000000015},"multiplier":1,"relevance":0.8}},{"id":1867088635,"content":"If ES Lint works below, then you shouldn't need to qualify it with the executable","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1867088635","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -78,7 +79,7 @@\n   },\n   \"lint-staged\": {\n     \"*.ts\": [\n-      \"yarn prettier --write\",\n+      \"bun prettier --write\",","score":{"reward":3.402,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":68.9825,"syllables":23,"sentences":1,"score":0.910175},"multiplier":1,"relevance":0.7}},{"id":1872747918,"content":"```suggestion\ndist/** linguist-generated\n```","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1872747918","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1 @@\n+dist/* linguist-generated","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1872749384,"content":"Bun lock file also","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1872749384","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1 @@\n+dist/* linguist-generated","score":{"reward":1.155,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.7}},{"id":1872750823,"content":"Is this correct","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1872750823","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.378,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":90.99000000000004,"syllables":4,"sentences":1,"score":0.6900999999999996},"multiplier":1,"relevance":0.3}},{"id":1872753428,"content":"I thought it's supposed to match the repository name for the plugin installer or something.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1872753428","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,15 +1,14 @@\n {\n-  \"name\": \"Daemon Disqualifier\",\n-  \"description\": \"Watches user activity on issues, sends reminders on deadlines, and unassign inactive users.\",\n-  \"ubiquity:listeners\": [\"pull_request_review_comment.created\", \"issue_comment.created\", \"push\"],\n+  \"name\": \"User activity watcher\",","score":{"reward":3.888,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":53.120000000000005,"syllables":26,"sentences":1,"score":0.9312},"multiplier":1,"relevance":0.8}},{"id":1874386430,"content":"You need to include all the generated files here.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1874386430","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1 @@\n+dist/* linguist-generated","score":{"reward":2.52,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":75.50000000000003,"syllables":13,"sentences":1,"score":0.8449999999999998},"multiplier":1,"relevance":0.8}},{"id":1874553273,"content":"Off hand I think thats it but the lockfile is not marked as generated.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1874553273","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1 @@\n+dist/* linguist-generated","score":{"reward":2.982,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":83.85357142857143,"syllables":18,"sentences":1,"score":0.7614642857142857},"multiplier":1,"relevance":0.7}},{"id":1879872981,"content":"I wonder if its redundant to tag the assignees and then remove them. We can leave it for now but just a thought to consider.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1879872981","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -96,9 +96,12 @@ async function removeAllAssignees(context: ContextPlugin, issue: ListIssueForRep\n     return false;\n   }\n   const logins = issue.assignees.map((o) => o?.login).filter((o) => !!o) as string[];\n-  const logMessage = logger.info(`Passed the deadline and no activity is detected, removing assignees: ${logins.map((o) => `@${o}`).join(\", \")}.`, {\n-    issue: issue.html_url,\n-  });\n+  const logMessage = logger.info(\n+    `Passed the disqualification threshold and no activity is detected, removing assignees: ${logins.map((o) => `@${o}`).join(\", \")}.`,","score":{"reward":3.78,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":82.47550000000001,"syllables":33,"sentences":2,"score":0.7752449999999999},"multiplier":1,"relevance":0.6}},{"id":1879874600,"content":"Why don't you add that to the README then?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1879874600","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":1.404,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":112.08500000000001,"syllables":10,"sentences":1,"score":1},"multiplier":1,"relevance":0.4}},{"id":2513642676,"content":"This approach works just adapt to my new prompt as described in the QA","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#issuecomment-2513642676","commentType":"PULL_COLLABORATOR","score":{"reward":2.94,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":89.89642857142859,"syllables":17,"sentences":1,"score":0.7010357142857141},"multiplier":1,"relevance":0.7}},{"id":2519599181,"content":"You need to highlight it as monospace text copy my template. Lastly it would be nice to place an \"and\" between time delimiters like hours and minutes.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#issuecomment-2519599181","commentType":"PULL_COLLABORATOR","score":{"reward":4.704,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":74.06583333333336,"syllables":38,"sentences":2,"score":0.8593416666666664},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2474635134,"effect":{"addition":413,"deletion":88},"reward":15.03,"priority":3},{"reviewId":2474647773,"effect":{"addition":0,"deletion":0},"reward":0,"priority":3},{"reviewId":2483901750,"effect":{"addition":58,"deletion":18},"reward":2.28,"priority":3},{"reviewId":2495187585,"effect":{"addition":4,"deletion":3},"reward":0.21,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 67.974 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>4</td><td>17.52</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>11.373</td></tr><tr><td>Review</td><td>Comment</td><td>15</td><td>39.081</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54\" target=\"_blank\" rel=\"noopener\">#54</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+413 -88</td><td>3</td><td>15.03</td></tr><tr><td>+0 -0</td><td>3</td><td>0</td></tr><tr><td>+58 -18</td><td>3</td><td>2.28</td></tr><tr><td>+4 -3</td><td>3</td><td>0.21</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/44#issuecomment-2453095827\" target=\"_blank\" rel=\"noopener\">Perhaps we should remove the concept of \"deadlines\" because we c&hellip;</a></h6></td><td><details><summary>3.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    h2:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 126&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>0.85</td><td>3</td><td>11.373</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#pullrequestreview-2474647773\" target=\"_blank\" rel=\"noopener\">The message needs work to accommodate both scenarios. Scenario &hellip;</a></h6></td><td><details><summary>2.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.9</td><td>3</td><td>9.72</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#pullrequestreview-2495187585\" target=\"_blank\" rel=\"noopener\">QA looks good</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.5</td><td>3</td><td>0.69</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1867087300\" target=\"_blank\" rel=\"noopener\">Add linguist</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.6</td><td>3</td><td>0.558</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1867088045\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion\"description\": \"Delay to send &hellip;</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.8</td><td>3</td><td>0.96</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1867088635\" target=\"_blank\" rel=\"noopener\">If ES Lint works below, then you shouldn't need to qualify it wi&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.402</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1872747918\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestiondist/** linguist-generated&#96;&#96;&&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1872749384\" target=\"_blank\" rel=\"noopener\">Bun lock file also</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.155</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1872750823\" target=\"_blank\" rel=\"noopener\">Is this correct</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.378</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1872753428\" target=\"_blank\" rel=\"noopener\">I thought it's supposed to match the repository name for the plu&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.888</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1874386430\" target=\"_blank\" rel=\"noopener\">You need to include all the generated files here.</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.8</td><td>3</td><td>2.52</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1874553273\" target=\"_blank\" rel=\"noopener\">Off hand I think thats it but the lockfile is not marked as gene&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.982</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1879872981\" target=\"_blank\" rel=\"noopener\">I wonder if its redundant to tag the assignees and then remove t&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.6</td><td>3</td><td>3.78</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1879874600\" target=\"_blank\" rel=\"noopener\">Why don't you add that to the README then?</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.404</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#issuecomment-2513642676\" target=\"_blank\" rel=\"noopener\">This approach works just adapt to my new prompt as described in &hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.94</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#issuecomment-2519599181\" target=\"_blank\" rel=\"noopener\">You need to highlight it as monospace text copy my template. Las&hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.704</td></tr></tbody></table></details>"},"ariesgun":{"total":0,"userId":10436502,"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54"}]},"whilefoo":{"total":32.531,"userId":139262667,"comments":[{"id":2630698595,"content":"This is the [issue](https://github.com/ubiquity-os/ubiquity-os-kernel/issues/166) where I got disqualified 3 days earlier than the deadline\r\nWhen I started the task with `/start` on 28th October, the bot said the deadline is Sat, Nov 2, 2:36 PM UTC, however on 30th October, the bot said the deadline has passed and unassigned me\r\nFound another [issue](https://github.com/ubiquity-os/permit-generation/issues/71#issuecomment-2448881918) with the same problem","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/44","commentType":"ISSUE_SPECIFICATION","score":{"reward":5.48,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":57,"wordValue":0.1,"result":2.48},"readability":{"fleschKincaid":34.69578947368424,"syllables":77,"sentences":1,"score":0.7469578947368425},"multiplier":1,"relevance":1}},{"id":2493668073,"content":"this looks good however I didn't see any fixes for the bug I experienced where I was disqualified earlier than expected","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#pullrequestreview-2493668073","commentType":"PULL_COLLABORATOR","score":{"reward":4.848,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":65.29590909090909,"syllables":31,"sentences":1,"score":0.9470409090909091},"multiplier":1,"relevance":0.8}},{"id":1878895307,"content":"will this be now a worker or this just in case?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1878895307","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":1.134,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":103.37909090909093,"syllables":12,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}},{"id":2536419497,"content":"I see, however I didn't get any reminders, is that because the bot doesn't run as a cron but only on events?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#issuecomment-2536419497","commentType":"PULL_COLLABORATOR","score":{"reward":4.389,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":73.20000000000002,"syllables":31,"sentences":1,"score":0.8679999999999999},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2493668073,"effect":{"addition":461,"deletion":95},"reward":16.68,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 32.531 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>16.68</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.48</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>10.371</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54\" target=\"_blank\" rel=\"noopener\">#54</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+461 -95</td><td>3</td><td>16.68</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/44\" target=\"_blank\" rel=\"noopener\">This is the [issue](https://github.com/ubiquity-os/ubiquity-os-k&hellip;</a></h6></td><td><details><summary>4.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 57&#13;  wordValue: 0.1&#13;  result: 2.48&#13;</pre></details></td><td>1</td><td>1</td><td>5.48</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#pullrequestreview-2493668073\" target=\"_blank\" rel=\"noopener\">this looks good however I didn't see any fixes for the bug I exp&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.848</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#discussion_r1878895307\" target=\"_blank\" rel=\"noopener\">will this be now a worker or this just in case?</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.134</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/54#issuecomment-2536419497\" target=\"_blank\" rel=\"noopener\">I see, however I didn't get any reminders, is that because the b&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.389</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_34.json","json":{"0x4007":{"userId":4975670,"total":53.238,"task":{"reward":50,"multiplier":1},"comments":[{"id":2350972116,"content":"Who has access to the database?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/34#issuecomment-2350972116","commentType":"ISSUE_AUTHOR","score":{"reward":1.078,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":73.84500000000001,"syllables":9,"sentences":1,"score":0.8615499999999998},"multiplier":1,"relevance":0.7}},{"id":2526339896,"content":"```\r\nassistive-pricing plugin failed to run.\r\nError: Column 'repository_id' of relation 'access' does not exist\r\nUsage:   /<command> @<username> [labels...]\r\nArguments:\r\n  command        The command to execute, e.g. /allow\r\n  username       User name to allow rights to, e.g @ubiquibot\r\n  labels         Labels to allow, e.g time priority\r\nOptions:\r\n  -V, --version  output the version number\r\n  -h, --help     display help for command\r\n```\r\n_Originally posted by @ubiquity-os[bot] in https://github.com/0x4007/command-start-stop/issues/1#issuecomment-2350971720_","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/34","commentType":"ISSUE_SPECIFICATION","score":{"reward":2.16,"formatting":{"content":{"p":{"score":0,"elementCount":1},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":52.00000000000003,"syllables":31,"sentences":2,"score":0.9200000000000003},"multiplier":1,"relevance":1}}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 53.238 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>2.16</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.078</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/34\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;assistive-pricing plugin failed to run.Error:&hellip;</a></h6></td><td><details><summary>1.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>1</td><td>1</td><td>2.16</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/34#issuecomment-2350972116\" target=\"_blank\" rel=\"noopener\">Who has access to the database?</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.078</td></tr></tbody></table></details>"},"gentlementlegen":{"total":4.624,"userId":9807008,"comments":[{"id":2351211014,"content":"@0x4007 The word count is close to correct, counted with a tool gave me `66` for the spec, here the word count for the spec is `79`. The total should have been `(((18*0.1) + (1*0.1) + (59*0.1) + (1*0.1))*3)^0.85=14.74`, so dunno what happened.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/34#issuecomment-2351211014","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.44,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":95.02705882352943,"syllables":38,"sentences":2,"score":0.6497294117647057},"multiplier":1,"relevance":0.3}},{"id":2351401662,"content":"According to the configuration `code` is rewarded 5\r\nhttps://github.com/ubiquity/ubiquibot-config/blob/development/.github/.ubiquibot-config.yml#L53\r\nwhich explain why you got such a high reward.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/34#issuecomment-2351401662","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.272,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":43.41696551724141,"syllables":54,"sentences":5,"score":0.834169655172414},"multiplier":1,"relevance":0.4}},{"id":2351460063,"content":"Then this should be ok after https://github.com/ubiquibot/conversation-rewards/issues/92 is in.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/34#issuecomment-2351460063","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.912,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":61.24000000000001,"syllables":26,"sentences":2,"score":0.9875999999999999},"multiplier":1,"relevance":0.2}}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 4.624 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>3</td><td>4.624</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/34#issuecomment-2351211014\" target=\"_blank\" rel=\"noopener\">@0x4007 The word count is close to correct, counted with a tool &hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.3</td><td>2</td><td>1.44</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/34#issuecomment-2351401662\" target=\"_blank\" rel=\"noopener\">According to the configuration &#96;code&#96; is rewarded 5htt&hellip;</a></h6></td><td><details><summary>2.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.4</td><td>2</td><td>2.272</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/34#issuecomment-2351460063\" target=\"_blank\" rel=\"noopener\">Then this should be ok after https://github.com/ubiquibot/conver&hellip;</a></h6></td><td><details><summary>1.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.912</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_45.json","json":{"whilefoo":{"userId":139262667,"total":75,"task":{"reward":75,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 75 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":7.731,"userId":4975670,"comments":[{"id":2425029564,"content":"Repo created seems like a good idea for now","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/45#issuecomment-2425029564","commentType":"ISSUE_AUTHOR","score":{"reward":2.424,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":94.30000000000001,"syllables":11,"sentences":1,"score":0.6569999999999999},"multiplier":1,"relevance":0.8}},{"id":2598858148,"content":"I regularly create new repositories and try to price tasks, but we always need to first toggle some random label (the convention we follow is \"good first task\") and then the plug-in populates the rest. \nThe problem with this is that it's not intuitive. We should listen for when a new issue is filed and check if the labels are populated already. \nIf they aren't then we should populate. I think that this flow is more intuitive for new partners.  \nOr ideally, this plug-in should change the organization repository's default labels so that when a new repository created, they are already pre-populated but I'm not sure if this is straightforward or worth extending our permissions for if we don't already have them.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/45","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.12,"formatting":{"content":{"p":{"score":0,"elementCount":1},"br":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":130,"wordValue":0.1,"result":2.41},"readability":{"fleschKincaid":61.1971794871795,"syllables":190,"sentences":6,"score":0.988028205128205},"multiplier":1,"relevance":1}},{"id":1808368844,"content":"What is `issue_comment.created` used for?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/46#discussion_r1808368844","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,12 +1,7 @@\n {\n   \"name\": \"Assistive pricing\",\n   \"description\": \"Handles assistive pricing, and allows for users to modify labels.\",\n-  \"ubiquity:listeners\": [\n-    \"issues.labeled\",\n-    \"issues.unlabeled\",\n-    \"label.edited\",\n-    \"issue_comment.created\"\n-  ],\n+  \"ubiquity:listeners\": [\"repository.created\", \"issues.opened\", \"issues.labeled\", \"issues.unlabeled\", \"label.edited\", \"issue_comment.created\"],","score":{"reward":1.197,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2381375954,"effect":{"addition":12,"deletion":21},"reward":0.99,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/46"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 7.731 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.99</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.12</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.424</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>1.197</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/46\" target=\"_blank\" rel=\"noopener\">#46</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+12 -21</td><td>3</td><td>0.99</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/45\" target=\"_blank\" rel=\"noopener\">I regularly create new repositories and try to price tasks, but &hellip;</a></h6></td><td><details><summary>2.41</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    br:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 130&#13;  wordValue: 0.1&#13;  result: 2.41&#13;</pre></details></td><td>1</td><td>1</td><td>3.12</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/45#issuecomment-2425029564\" target=\"_blank\" rel=\"noopener\">Repo created seems like a good idea for now</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.8</td><td>3</td><td>2.424</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/46#discussion_r1808368844\" target=\"_blank\" rel=\"noopener\">What is &#96;issue_comment.created&#96; used for?</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.197</td></tr></tbody></table></details>"},"gentlementlegen":{"total":8.988,"userId":9807008,"comments":[{"id":2381416881,"content":"Fine with the changes, would have appreciated a QA as well.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/46#pullrequestreview-2381416881","commentType":"PULL_COLLABORATOR","score":{"reward":1.74,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":95.68818181818183,"syllables":13,"sentences":1,"score":0.6431181818181817},"multiplier":1,"relevance":0.5}},{"id":2426464029,"content":"@whilefoo I think if you just create a repo and right away you're able to set time and duration tags without needed the `good first issue` tag would mean you got the tags right away, but let's test in here after merging it's not a breaking change.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/46#issuecomment-2426464029","commentType":"PULL_COLLABORATOR","score":{"reward":6.258,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":47,"wordValue":0.1,"result":2.33},"readability":{"fleschKincaid":52.93000000000001,"syllables":59,"sentences":1,"score":0.9293},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2381416881,"effect":{"addition":12,"deletion":21},"reward":0.99,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/46"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 8.988 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.99</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>7.998</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/46\" target=\"_blank\" rel=\"noopener\">#46</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+12 -21</td><td>3</td><td>0.99</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/46#pullrequestreview-2381416881\" target=\"_blank\" rel=\"noopener\">Fine with the changes, would have appreciated a QA as well.</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.74</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/46#issuecomment-2426464029\" target=\"_blank\" rel=\"noopener\">@whilefoo I think if you just create a repo and right away you'r&hellip;</a></h6></td><td><details><summary>2.33</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 47&#13;  wordValue: 0.1&#13;  result: 2.33&#13;</pre></details></td><td>0.7</td><td>3</td><td>6.258</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_84.json","json":{"gentlementlegen":{"userId":9807008,"total":55.961,"task":{"reward":50,"multiplier":1},"comments":[{"id":2561979478,"content":"Yes it is `command-start-stop`, the disqualifier never assigns users. I suppose this behavior has something to do with the flow on pull-request linking to assign users.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/84#issuecomment-2561979478","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.513,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":60.23230769230773,"syllables":41,"sentences":2,"score":0.9976769230769227},"multiplier":0.25,"relevance":0.9}},{"id":2586567780,"content":"I've investigated this, and this happens because there is [logic](https://github.com/ubiquity-os-marketplace/command-start-stop/blob/b3405d795416687afbeb080092dce2c7b33111c1/src/plugin.ts#L23) associated to `pull_request.edited`. This was implemented because if you first open a PR without linking the issue, then edit your pull-request to add `Resolves #--` we need to listen for this event to properly assign a user. I suppose the fix would be to assign the author of the pull-request instead of the user who edited it.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/84#issuecomment-2586567780","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.16,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":67,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":61.68606965174132,"syllables":97,"sentences":3,"score":0.9831393034825868},"multiplier":0.25,"relevance":1}},{"id":2274148949,"content":"Resolves #84\r\nQA:\r\n- [on editing a pull-request authored by a bot](https://github.com/Meniole/command-start-stop/pull/4#issuecomment-2587386984) \r\n- [on editor a pull-request made by another user (reached the issue limit but user assign attempt happened)](https://github.com/Meniole/command-start-stop/issues/56#issuecomment-2587392925)\r\n- [on editing own pull-request](https://github.com/Meniole/command-start-stop/issues/56#issuecomment-2587345019)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/121","commentType":"PULL_SPECIFICATION","score":{"reward":4.288,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"a":{"score":1,"elementCount":2}},"result":2.3},"priority":1,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":38.36714285714288,"syllables":55,"sentences":1,"score":0.7836714285714288},"multiplier":1,"relevance":0.8}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 55.961 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>1.673</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>4.288</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/84#issuecomment-2561979478\" target=\"_blank\" rel=\"noopener\">Yes it is &#96;command-start-stop&#96;, the disqualifier never a&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.513</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/84#issuecomment-2586567780\" target=\"_blank\" rel=\"noopener\">I've investigated this, and this happens because there is [logic&hellip;</a></h6></td><td><details><summary>3.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 67&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>1</td><td>1</td><td>1.16</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/121\" target=\"_blank\" rel=\"noopener\">Resolves #84QA:- [on editing a pull-request authored by a bo&hellip;</a></h6></td><td><details><summary>4.34</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2.3&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.8</td><td>1</td><td>4.288</td></tr></tbody></table></details>"},"0x4007":{"total":3.363,"userId":4975670,"comments":[{"id":2482274776,"content":"Looks like the logic to capture the closing keywords also works on edits. I suppose that it should check if it is currently assigned, and if so, to not clobber assignment.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/84#issuecomment-2482274776","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.187,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":71.02508064516131,"syllables":44,"sentences":2,"score":0.8897491935483869},"multiplier":1,"relevance":0.9}},{"id":2561975138,"content":"@gentlementlegen i am guessing it's command start stop but would be great if you can confirm.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/84#issuecomment-2561975138","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.176,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":70.14470588235295,"syllables":24,"sentences":1,"score":0.8985529411764704},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/121"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 3.363 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>2</td><td>3.363</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/84#issuecomment-2482274776\" target=\"_blank\" rel=\"noopener\">Looks like the logic to capture the closing keywords also works &hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.9</td><td>1</td><td>2.187</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/84#issuecomment-2561975138\" target=\"_blank\" rel=\"noopener\">@gentlementlegen i am guessing it's command start stop but would&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.176</td></tr></tbody></table></details>"},"Sadaf-A":{"total":0,"userId":119438857,"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/121"}]},"rndquu":{"total":10.984,"userId":119500907,"comments":[{"id":2560722811,"content":"I'm not 100% sure, https://github.com/ubiquity-os-marketplace/command-start-stop or https://github.com/ubiquity-os-marketplace/daemon-disqualifier","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/84#issuecomment-2560722811","commentType":"ISSUE_AUTHOR","score":{"reward":2.664,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":51.92289855072465,"syllables":40,"sentences":3,"score":0.9192289855072465},"multiplier":1,"relevance":0.8}},{"id":2661539798,"content":"There's [this](https://github.com/ubiquity-os/ubiquity-os-plugin-installer/issues/4) issue which was initially assigned to `Keyrxng`.\r\nWhat happened:\r\n1. I edited [this](https://github.com/ubiquity-os/ubiquity-os-plugin-installer/pull/12#issue-2642288540) PR comment\r\n2. `ubiquity-os-beta` suddenly [assigned](https://github.com/ubiquity-os/ubiquity-os-plugin-installer/issues/4#issuecomment-2478494730) me to the issue while the expected behavior was to keep `Keyrxng` as the original assignee\r\nP.S. Not sure what's the correct repository for this issue, https://github.com/ubiquity-os-marketplace/command-start-stop or https://github.com/ubiquity-os-marketplace/daemon-disqualifier","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/84","commentType":"ISSUE_SPECIFICATION","score":{"reward":8.32,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":4}},"result":4.2},"priority":1,"words":{"wordCount":46,"wordValue":0.1,"result":2.31},"readability":{"fleschKincaid":52.491785714285726,"syllables":107,"sentences":6,"score":0.9249178571428572},"multiplier":1,"relevance":1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/121"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 10.984 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Specification</td><td>1</td><td>8.32</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.664</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/84\" target=\"_blank\" rel=\"noopener\">There's [this](https://github.com/ubiquity-os/ubiquity-os-plugin&hellip;</a></h6></td><td><details><summary>6.51</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 4&#13;  result: 4.2&#13;regex:&#13;  wordCount: 46&#13;  wordValue: 0.1&#13;  result: 2.31&#13;</pre></details></td><td>1</td><td>1</td><td>8.32</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/84#issuecomment-2560722811\" target=\"_blank\" rel=\"noopener\">I'm not 100% sure, https://github.com/ubiquity-os-marketplace/co&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.664</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_256.json","json":{"gentlementlegen":{"userId":9807008,"total":16.95,"task":{"reward":12,"multiplier":1},"comments":[{"id":2825507120,"content":"_Originally posted by @0x4007 in [#249](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/249#issuecomment-2629097797)_\n## Task\nWe should add some feedback in the message that a human actor should be closing the task in order to generate rewards.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/256","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.95,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"h2":{"score":1,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":2},"priority":1,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":54.87586206896553,"syllables":42,"sentences":1,"score":0.9487586206896553},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 16.95 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>12</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.95</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/256\" target=\"_blank\" rel=\"noopener\">_Originally posted by @0x4007 in [#249](https://github.com/ubiqu&hellip;</a></h6></td><td><details><summary>3.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    h2:&#13;      score: 1&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 2&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>1</td><td>1</td><td>4.95</td></tr></tbody></table></details>"},"0x4007":{"total":11.598,"userId":4975670,"comments":[{"id":2598339629,"content":"Renaming permits to rewards because we may enable automatic transfers soon, which means no more permits.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#pullrequestreview-2598339629","commentType":"PULL_COLLABORATOR","score":{"reward":2.528,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":42.545000000000016,"syllables":28,"sentences":1,"score":0.8254500000000001},"multiplier":1,"relevance":0.8}},{"id":1944526220,"content":"```suggestion\r\n        ? logger.warn(\"Bots can not generate rewards.\")\r\n        : logger.error(\"You are not allowed to generate rewards.\");\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#discussion_r1944526220","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -26,7 +26,10 @@ export async function run(context: ContextPlugin) {\n   }\n \n   if (config.incentives.collaboratorOnlyPaymentInvocation && !(await isUserAllowedToGeneratePermits(context))) {\n-    const result = logger.error(\"You are not allowed to generate permits.\");\n+    const result =\n+      payload.sender.type === \"Bot\"\n+        ? logger.warn(\"Bots can not generate permits.\")\n+        : logger.error(\"You are not allowed to generate permits.\");","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1944526617,"content":"```suggestion\r\n    expect(result).toEqual(\"Bots can not generate rewards.\");\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#discussion_r1944526617","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -178,6 +178,62 @@ describe(\"Pre-check tests\", () => {\n     expect(result).toEqual(\"You are not allowed to generate permits.\");\n   });\n \n+  it(\"Should post a warning message that bots cannot trigger permit generation\", async () => {\n+    jest.unstable_mockModule(\"../src/data-collection/collect-linked-pulls\", () => ({\n+      collectLinkedMergedPulls: jest.fn(() => []),\n+    }));\n+    jest.unstable_mockModule(\"@ubiquity-os/plugin-sdk\", () => ({\n+      postComment: jest.fn(),\n+    }));\n+    const { run } = await import(\"../src/run\");\n+\n+    const result = await run({\n+      eventName: \"issues.closed\",\n+      payload: {\n+        issue: {\n+          html_url: issueUrl,\n+          number: 1,\n+          state_reason: \"completed\",\n+          assignees: [\n+            {\n+              id: 1,\n+              login: \"ubiquity-os\",\n+            },\n+          ],\n+        },\n+        repository: {\n+          name: \"conversation-rewards\",\n+          owner: {\n+            login: \"ubiquity-os\",\n+            id: 76412717,\n+          },\n+        },\n+        sender: {\n+          login: \"bot-user\",\n+          type: \"Bot\",\n+        },\n+      },\n+      config: cfg,\n+      logger: new Logs(\"debug\"),\n+      octokit: {\n+        rest: {\n+          orgs: {\n+            getMembershipForUser: jest.fn(() => {\n+              throw new Error();\n+            }),\n+          },\n+          repos: {\n+            getCollaboratorPermissionLevel: jest.fn(() => {\n+              return { data: { role_name: \"read\" } };\n+            }),\n+          },\n+        },\n+      },\n+    } as unknown as ContextPlugin);\n+\n+    expect(result).toEqual(\"Bots can not generate permits.\");","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.7}},{"id":1944527033,"content":"```suggestion\r\n    expect(result).toEqual(\"You are not allowed to generate rewards.\");\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#discussion_r1944527033","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -178,6 +178,62 @@ describe(\"Pre-check tests\", () => {\n     expect(result).toEqual(\"You are not allowed to generate permits.\");","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.6}},{"id":1944527270,"content":"```suggestion\r\n  it(\"Should post a warning message that bots cannot trigger reward generation\", async () => {\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#discussion_r1944527270","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -178,6 +178,62 @@ describe(\"Pre-check tests\", () => {\n     expect(result).toEqual(\"You are not allowed to generate permits.\");\n   });\n \n+  it(\"Should post a warning message that bots cannot trigger permit generation\", async () => {","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.7}},{"id":1944527569,"content":"```suggestion\r\n  it(\"Should deny a user to generate rewards if non-admin and allow admins\", async () => {\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#discussion_r1944527569","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -178,6 +178,62 @@ describe(\"Pre-check tests\", () => {\n     expect(result).toEqual(\"You are not allowed to generate permits.\");\n   });\n \n+  it(\"Should post a warning message that bots cannot trigger permit generation\", async () => {\n+    jest.unstable_mockModule(\"../src/data-collection/collect-linked-pulls\", () => ({\n+      collectLinkedMergedPulls: jest.fn(() => []),\n+    }));\n+    jest.unstable_mockModule(\"@ubiquity-os/plugin-sdk\", () => ({\n+      postComment: jest.fn(),\n+    }));\n+    const { run } = await import(\"../src/run\");\n+\n+    const result = await run({\n+      eventName: \"issues.closed\",\n+      payload: {\n+        issue: {\n+          html_url: issueUrl,\n+          number: 1,\n+          state_reason: \"completed\",\n+          assignees: [\n+            {\n+              id: 1,\n+              login: \"ubiquity-os\",\n+            },\n+          ],\n+        },\n+        repository: {\n+          name: \"conversation-rewards\",\n+          owner: {\n+            login: \"ubiquity-os\",\n+            id: 76412717,\n+          },\n+        },\n+        sender: {\n+          login: \"bot-user\",\n+          type: \"Bot\",\n+        },\n+      },\n+      config: cfg,\n+      logger: new Logs(\"debug\"),\n+      octokit: {\n+        rest: {\n+          orgs: {\n+            getMembershipForUser: jest.fn(() => {\n+              throw new Error();\n+            }),\n+          },\n+          repos: {\n+            getCollaboratorPermissionLevel: jest.fn(() => {\n+              return { data: { role_name: \"read\" } };\n+            }),\n+          },\n+        },\n+      },\n+    } as unknown as ContextPlugin);\n+\n+    expect(result).toEqual(\"Bots can not generate permits.\");\n+  });\n+\n   it(\"Should deny a user to generate permits if non-admin and allow admins\", async () => {","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.4}},{"id":1944530412,"content":"It might be worth renaming our methods to rewards instead of permits if we actually do end up changing to \"transfer first\" style reward distribution.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#discussion_r1944530412","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -26,7 +26,10 @@ export async function run(context: ContextPlugin) {\n   }\n \n   if (config.incentives.collaboratorOnlyPaymentInvocation && !(await isUserAllowedToGeneratePermits(context))) {","score":{"reward":3.424,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":46.10000000000002,"syllables":40,"sentences":1,"score":0.8610000000000002},"multiplier":1,"relevance":0.8}},{"id":2636943731,"content":"Why a note and not a warning? Is this a strict adherence to the 1xx, 2xx, ..., 5xx error code methodology?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#issuecomment-2636943731","commentType":"PULL_COLLABORATOR","score":{"reward":1.83,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":81.62833333333334,"syllables":28,"sentences":3,"score":0.7837166666666665},"multiplier":1,"relevance":0.5}},{"id":2637816295,"content":"Maybe a 4xx class error. Whatever we decided to use for that. It's almost like a 403 forbidden perhaps.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#issuecomment-2637816295","commentType":"PULL_COLLABORATOR","score":{"reward":2.196,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":81.62833333333334,"syllables":28,"sentences":3,"score":0.7837166666666665},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2598339629,"effect":{"addition":64,"deletion":5},"reward":1.38,"priority":2},{"reviewId":2598346244,"effect":{"addition":6,"deletion":6},"reward":0.24,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 11.598 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>1.62</td></tr><tr><td>Review</td><td>Comment</td><td>9</td><td>9.978</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259\" target=\"_blank\" rel=\"noopener\">#259</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+64 -5</td><td>2</td><td>1.38</td></tr><tr><td>+6 -6</td><td>2</td><td>0.24</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#pullrequestreview-2598339629\" target=\"_blank\" rel=\"noopener\">Renaming permits to rewards because we may enable automatic tran&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.528</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#discussion_r1944526220\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion? logger.warn(\"Bots can not g&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#discussion_r1944526617\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionexpect(result).toEqual(\"Bots can &hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#discussion_r1944527033\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionexpect(result).toEqual(\"You are n&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.6</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#discussion_r1944527270\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionit(\"Should post a warning message t&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#discussion_r1944527569\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionit(\"Should deny a user to generate &hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.4</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#discussion_r1944530412\" target=\"_blank\" rel=\"noopener\">It might be worth renaming our methods to rewards instead of per&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.8</td><td>2</td><td>3.424</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#issuecomment-2636943731\" target=\"_blank\" rel=\"noopener\">Why a note and not a warning? Is this a strict adherence to the &hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.5</td><td>2</td><td>1.83</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/259#issuecomment-2637816295\" target=\"_blank\" rel=\"noopener\">Maybe a 4xx class error. Whatever we decided to use for that. It&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.6</td><td>2</td><td>2.196</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-disqualifier_51.json","json":{"gentlementlegen":{"userId":9807008,"total":410.756,"task":{"reward":400,"multiplier":1},"comments":[{"id":2576542287,"content":"@0x4007 Wouldn't it be simpler to use a \"quota\" or \"credits\" for reminders?\r\nBased on what you describe:\r\n- priority 1 gets 5 credits\r\n- priority 2 gets 4 credits\r\n- etc...\r\nSo basically you would be allowed to get `n` reminders total for a given task, each of the reminders using 1 credit?\r\nMaybe I didn't understand properly, but given the specification, consider the following example:\r\n- a user has 7 days to fulfill the task\r\n- the user takes 6 days to finish it, and changes it to \"ready for review\"\r\n- no review happens within 3.5 days, a reminder should be sent, but instead the user gets disqualified right away?\r\nIs this correct?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2576542287","commentType":"ISSUE_ASSIGNEE","score":{"reward":3.672,"formatting":{"content":{"p":{"score":0,"elementCount":11},"ul":{"score":0,"elementCount":2},"li":{"score":0.1,"elementCount":6}},"result":0.6},"priority":4,"words":{"wordCount":112,"wordValue":0.1,"result":2.54},"readability":{"fleschKincaid":60.23297619047622,"syllables":169,"sentences":6,"score":0.9976702380952378},"multiplier":0.25,"relevance":0.9}},{"id":2576610450,"content":"I think your idea makes more sense because with mine, a `Priority 1` with a `1 Week` deadline would get 5 reminders thus a month of extra time at most, which is too much for a one week tasks obviously. \r\nHowever wouldn't this mean that it would also be the case with your spec? I know the deadlines are not meant to be strictly exact, but the gap between a week and a month seems too big.\r\nMaybe we could make it as simple as one reminder allowed only? Would that be too harsh? If we handle slow reviews I think it would help us keeping deadline tighter.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2576610450","commentType":"ISSUE_ASSIGNEE","score":{"reward":2.528,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":4,"words":{"wordCount":105,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":83.5239285714286,"syllables":131,"sentences":6,"score":0.764760714285714},"multiplier":0.25,"relevance":0.8}},{"id":2578124391,"content":"Yes I understand the problem you are trying to solve. The one I am thinking of is when users take a 1h task, and they keep pushing for many days, so no reminder or blame is sent although that task should have been finished quite quickly. I've seen 15 minutes tasks take a week.\r\nLet's try implementing your idea and see how it goes, it just feels like more pressure is put on high priority tasks which are currently mostly handled by the core team, when I think what you're targeting are low level priority tasks done by outside contributors.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2578124391","commentType":"ISSUE_ASSIGNEE","score":{"reward":2.624,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":103,"wordValue":0.1,"result":2.59},"readability":{"fleschKincaid":69.81525485436894,"syllables":135,"sentences":4,"score":0.9018474514563105},"multiplier":0.25,"relevance":0.8}},{"id":2603921267,"content":"I am convinced that the top-up calculation can be made much simpler, because in the end it is just a multiplier for the deadline, no need to calculate all the in-between steps, more likely just the \"final final\" deadline,","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2603921267","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.932,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":45.54195121951224,"syllables":58,"sentences":1,"score":0.8554195121951225},"multiplier":0.25,"relevance":0.7}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 410.756 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>400</td></tr><tr><td>Issue</td><td>Comment</td><td>4</td><td>10.756</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2576542287\" target=\"_blank\" rel=\"noopener\">@0x4007 Wouldn't it be simpler to use a \"quota\" or \"credits\" for&hellip;</a></h6></td><td><details><summary>3.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 11&#13;    ul:&#13;      score: 0&#13;      elementCount: 2&#13;    li:&#13;      score: 0.1&#13;      elementCount: 6&#13;  result: 0.6&#13;regex:&#13;  wordCount: 112&#13;  wordValue: 0.1&#13;  result: 2.54&#13;</pre></details></td><td>0.9</td><td>4</td><td>3.672</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2576610450\" target=\"_blank\" rel=\"noopener\">I think your idea makes more sense because with mine, a &#96;Pri&hellip;</a></h6></td><td><details><summary>2.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 105&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>0.8</td><td>4</td><td>2.528</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2578124391\" target=\"_blank\" rel=\"noopener\">Yes I understand the problem you are trying to solve. The one I &hellip;</a></h6></td><td><details><summary>2.59</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 103&#13;  wordValue: 0.1&#13;  result: 2.59&#13;</pre></details></td><td>0.8</td><td>4</td><td>2.624</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2603921267\" target=\"_blank\" rel=\"noopener\">I am convinced that the top-up calculation can be made much simp&hellip;</a></h6></td><td><details><summary>2.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.7</td><td>4</td><td>1.932</td></tr></tbody></table></details>"},"0x4007":{"total":231.41,"userId":4975670,"comments":[{"id":2576557035,"content":"Yes. \nIn practice the good talent gets their reviews processed pretty quickly. The ones who aren't cut out for the job end up being much slower from reviewers losing patience with them. But perhaps your proposal might be more fair. \nThe concept of \"credits\" seem to imply that storage is required. My strategy is just a calculation based on elapsed time. \nYou might be able to parse the entire timeline every time to see if there are exceptions to the timing though, like for slow reviews and such, but it makes the logic more complex.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2576557035","commentType":"ISSUE_AUTHOR","score":{"reward":11.844,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":96,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":74.82750000000003,"syllables":134,"sentences":7,"score":0.8517249999999997},"multiplier":1,"relevance":0.9}},{"id":2576710996,"content":"Of course in an ideal world everybody processes their tasks with utmost priority and speed. But the reality is that even our core team members spend several weeks on, for example, a one week task. \nAfter monitoring these behaviors for some years I confidently came up with this design for the specification. \nI think it's an acceptable starting point and we can iterate from there to try and coax better performance out of the team. However the main business problem I want to solve with this implementation is to disqualify the outside contributors who fall under this category:","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2576710996","commentType":"ISSUE_AUTHOR","score":{"reward":11.952,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":99,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":50.86527272727275,"syllables":159,"sentences":5,"score":0.9086527272727275},"multiplier":1,"relevance":0.9}},{"id":2578747395,"content":"I would like to try the current proposed strategy first but we can potentially have a static amount of top ups too with an alternative configuration (for example, 5 for every priority level) which would make things easier for the higher priority tasks.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2578747395","commentType":"ISSUE_AUTHOR","score":{"reward":10.76,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":25.46906976744188,"syllables":70,"sentences":1,"score":0.6546906976744188},"multiplier":1,"relevance":1}},{"id":2604318753,"content":"What about the reminders? If that is handled by another set of logic then okay!","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2604318753","commentType":"ISSUE_AUTHOR","score":{"reward":4.864,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":75.14250000000001,"syllables":22,"sentences":2,"score":0.8485749999999999},"multiplier":1,"relevance":0.8}},{"id":2647255176,"content":"Yeah I think each top up should incur a reminder of sorts. I'm wondering if it's annoying to interject and say something like \n\"You used 3 of 5 top ups!\" Etc","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2647255176","commentType":"ISSUE_AUTHOR","score":{"reward":9.76,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":82.87000000000003,"syllables":44,"sentences":3,"score":0.7712999999999997},"multiplier":1,"relevance":1}},{"id":2647547827,"content":"I think there is value in saying both numbers to take advantage of the psychological principle of loss aversion.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2647547827","commentType":"ISSUE_AUTHOR","score":{"reward":6.444,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":45.06578947368425,"syllables":32,"sentences":1,"score":0.8506578947368425},"multiplier":1,"relevance":0.9}},{"id":2687850699,"content":"Your formatting score needs better rounding. Can you fix that? I've seen it a few times before. @gentlementlegen","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2687850699","commentType":"ISSUE_AUTHOR","score":{"reward":0.712,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":77.34006578947371,"syllables":28,"sentences":4,"score":0.8265993421052629},"multiplier":1,"relevance":0.1}},{"id":2693452035,"content":"A quick idea that can use improvement:\r\nAssignee can restart the disqualification timer by continuing to try. There's many clear examples of the task not being the right fit for the assignee and they try i.e. for months on projects that should be doable in a day.\r\nWe could consider doing limits on time limit \"top ups.\" So for example:\r\n```\r\nPriority 1 - 5 top ups\r\nPriority 2 - 4 top ups \r\nPriority 3 - 3 top ups \r\nPriority 4 - 2 top ups \r\nPriority 5 - 1 top up. \r\n```\r\nI suspect that priority 5 tasks will border on eliminating most even capable assignees but once the task is complete even if just slightly after deadline we can always retroactively assign credit. \r\n---\r\n- We should be able to toggle this behavior in the config. \r\n- If it is enabled the message should clearly explain the amount of remaining top ups. \r\nI foresee a bit of complexity around the logic related to dealing with the \"time limits\" for follow up/disqualify and the top up counter. \r\n- If the limits are 7/14 as they are now, then the first top up should occur after 14 days on a priority 1 normal project. \r\n- priority 5 top up would be after `14 / 5 = 2.8` days.\r\n- Check the assignment timestamp and use that as a point of reference to calculate the current top up counter/state. i.e. if the task was assigned 35 days ago, and the clock speed is 14 days, then `35/14=2.5` meaning we are still at top up number 2. \r\n## Example Context\r\n- https://github.com/ubiquity-os/plugins-wishlist/issues/46#issuecomment-2450630585\r\n- Assigned 1 November, but this should have been disqualified by 10 November. \r\nLogic: \r\n```\r\n14 days base timer / priority 4 = 3.5 days. \r\nthis means that top up counter increments every 3.5 days. \r\npriority 4 has 2 additional top ups. \r\n1 November is the original granted 3.5 day time limit. \r\nafter 3.5 days pass, the first top up is spent. \r\nafter another 3.5 days pass, the second top up is spent. \r\n3.5 + 3.5 + 3.5 = 10.5 days has elapsed \r\non the next attempt to follow up disqualification occurs because no more top ups remain. \r\n```\r\nRemarks:\r\nI wonder if the original time that we grant should be based on the `Time: ` label because I see problems with tasks that are set to `Time: <1 Week` and `Priority: 5 (Emergency)` they would only be able to get 5.6 days to work on it.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.75,"formatting":{"content":{"p":{"score":0,"elementCount":15},"hr":{"score":0,"elementCount":1},"ul":{"score":0,"elementCount":3},"li":{"score":0.1,"elementCount":7},"h2":{"score":1,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":2.7},"priority":1,"words":{"wordCount":282,"wordValue":0.1,"result":1.02},"readability":{"fleschKincaid":67.60310939464703,"syllables":428,"sentences":19,"score":0.9239689060535297},"multiplier":1,"relevance":1}},{"id":2635865685,"content":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966956414","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#pullrequestreview-2635865685","commentType":"PULL_COLLABORATOR","score":{"reward":3.332,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":24.36159090909092,"syllables":23,"sentences":2,"score":0.6436159090909093},"multiplier":1,"relevance":0.7}},{"id":2644937270,"content":"Just need to change the message and we can merge this https://github.com/Meniole/daemon-disqualifier/issues/20#issuecomment-2685408080","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#pullrequestreview-2644937270","commentType":"PULL_COLLABORATOR","score":{"reward":8.128,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":63.23464285714289,"syllables":33,"sentences":2,"score":0.9676535714285711},"multiplier":1,"relevance":0.8}},{"id":1948077808,"content":"Ideally we should parse the priority labels from the plugin config because they are intended to be customizable to adhere to each org's preferences.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1948077808","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,7 +1,53 @@\n import { watchUserActivity } from \"./handlers/watch-user-activity\";\n import { ContextPlugin } from \"./types/plugin-input\";\n \n+async function populateTopUpThresholds(context: ContextPlugin) {\n+  const { config, octokit, logger } = context;\n+\n+  if (!config.topUps.enabled || Object.keys(config.topUps.amounts).length) {\n+    return;\n+  }\n+  if (!context.payload.repository.owner?.login) {\n+    throw logger.fatal(\"Missing owner login from payload\", { context: context.payload });\n+  }\n+\n+  const data = await octokit.paginate(octokit.rest.issues.listLabelsForRepo, {\n+    owner: context.payload.repository.owner?.login,\n+    repo: context.payload.repository.name,\n+  });\n+\n+  if (!data.length) {\n+    logger.debug(\"No labels have been found, won't populate top ups.\", { data });\n+    return;\n+  }\n+\n+  const priorityLabels = data\n+    .map((label) => {\n+      const match = label.name.match(/^Priority:\\s*(\\d+).*$/i);","score":{"reward":7.632,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":42.71600000000004,"syllables":41,"sentences":1,"score":0.8271600000000003},"multiplier":1,"relevance":0.9}},{"id":1948786702,"content":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2647547827","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1948786702","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -40,12 +42,14 @@ async function remindAssignees(context: ContextPlugin, issue: ListIssueForRepo)\n     logger.error(`Missing Assignees from ${issue.html_url}`);\n     return false;\n   }\n+\n   const logins = issue.assignees\n     .map((o) => o?.login)\n     .filter((o) => !!o)\n     .join(\", @\");\n+  const topUps = await getTopUpsRemaining(context);\n \n-  const logMessage = logger.info(`@${logins}, this task has been idle for a while. Please provide an update.\\n\\n`, {\n+  const logMessage = logger.info(`@${logins}, this task has been idle for a while. Please provide an update.\\n\\n<h5>Top ups remaining: ${topUps}</h5>`, {","score":{"reward":2.34,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":17.44500000000002,"syllables":26,"sentences":2,"score":0.5744500000000002},"multiplier":1,"relevance":0.5}},{"id":1950448003,"content":"```suggestion\n    `@${logins}, this task has been idle for a while. Please provide an update.\\n\\n<h5>You used `${topUpLimit - remainingTopUps}` of `${topUpLimit}` top ups</h5>`,\n```","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1950448003","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -40,14 +42,19 @@ async function remindAssignees(context: ContextPlugin, issue: ListIssueForRepo)\n     logger.error(`Missing Assignees from ${issue.html_url}`);\n     return false;\n   }\n+\n   const logins = issue.assignees\n     .map((o) => o?.login)\n     .filter((o) => !!o)\n     .join(\", @\");\n+  const { remainingTopUps, topUpLimit } = await getTopUpsRemaining(context);\n \n-  const logMessage = logger.info(`@${logins}, this task has been idle for a while. Please provide an update.\\n\\n`, {\n-    taskAssignees: issue.assignees.map((o) => o?.id),\n-  });\n+  const logMessage = logger.info(\n+    `@${logins}, this task has been idle for a while. Please provide an update.\\n\\n<h5>You used ${topUpLimit - remainingTopUps} / ${topUpLimit} top ups</h5>`,","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1952051200,"content":"Anything is possible. Just parse the yml config looking for daemon pricing","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1952051200","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,7 +1,53 @@\n import { watchUserActivity } from \"./handlers/watch-user-activity\";\n import { ContextPlugin } from \"./types/plugin-input\";\n \n+async function populateTopUpThresholds(context: ContextPlugin) {\n+  const { config, octokit, logger } = context;\n+\n+  if (!config.topUps.enabled || Object.keys(config.topUps.amounts).length) {\n+    return;\n+  }\n+  if (!context.payload.repository.owner?.login) {\n+    throw logger.fatal(\"Missing owner login from payload\", { context: context.payload });\n+  }\n+\n+  const data = await octokit.paginate(octokit.rest.issues.listLabelsForRepo, {\n+    owner: context.payload.repository.owner?.login,\n+    repo: context.payload.repository.name,\n+  });\n+\n+  if (!data.length) {\n+    logger.debug(\"No labels have been found, won't populate top ups.\", { data });\n+    return;\n+  }\n+\n+  const priorityLabels = data\n+    .map((label) => {\n+      const match = label.name.match(/^Priority:\\s*(\\d+).*$/i);","score":{"reward":3.24,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":59.745000000000005,"syllables":20,"sentences":2,"score":0.9974500000000001},"multiplier":1,"relevance":0.6}},{"id":1966956414,"content":"Since you added the priority levels to the config here, why don't you work with those?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966956414","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,7 +1,53 @@\n import { watchUserActivity } from \"./handlers/watch-user-activity\";\n import { ContextPlugin } from \"./types/plugin-input\";\n \n+async function populateTopUpThresholds(context: ContextPlugin) {\n+  const { config, octokit, logger } = context;\n+\n+  if (!config.topUps.enabled || Object.keys(config.topUps.amounts).length) {\n+    return;\n+  }\n+  if (!context.payload.repository.owner?.login) {\n+    throw logger.fatal(\"Missing owner login from payload\", { context: context.payload });\n+  }\n+\n+  const data = await octokit.paginate(octokit.rest.issues.listLabelsForRepo, {\n+    owner: context.payload.repository.owner?.login,\n+    repo: context.payload.repository.name,\n+  });\n+\n+  if (!data.length) {\n+    logger.debug(\"No labels have been found, won't populate top ups.\", { data });\n+    return;\n+  }\n+\n+  const priorityLabels = data\n+    .map((label) => {\n+      const match = label.name.match(/^Priority:\\s*(\\d+).*$/i);","score":{"reward":5.184,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":85.07411764705884,"syllables":21,"sentences":1,"score":0.7492588235294115},"multiplier":1,"relevance":0.8}},{"id":1966958888,"content":"I hope that you can think through and test if partners want to set the priority labels to be different. This should be easy to set up the plugin to work as expected, and to be verbose if it thinks there might be some problem or incompatibility with the partner config and preferences. \nFor example I've seen people do things like \np0 p1 p2 p3\nAnd priority 1 (emergency)","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966958888","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,7 +1,53 @@\n import { watchUserActivity } from \"./handlers/watch-user-activity\";\n import { ContextPlugin } from \"./types/plugin-input\";\n \n+async function populateTopUpThresholds(context: ContextPlugin) {\n+  const { config, octokit, logger } = context;\n+\n+  if (!config.topUps.enabled || Object.keys(config.topUps.amounts).length) {\n+    return;\n+  }\n+  if (!context.payload.repository.owner?.login) {\n+    throw logger.fatal(\"Missing owner login from payload\", { context: context.payload });\n+  }\n+\n+  const data = await octokit.paginate(octokit.rest.issues.listLabelsForRepo, {\n+    owner: context.payload.repository.owner?.login,\n+    repo: context.payload.repository.name,\n+  });\n+\n+  if (!data.length) {\n+    logger.debug(\"No labels have been found, won't populate top ups.\", { data });\n+    return;\n+  }\n+\n+  const priorityLabels = data\n+    .map((label) => {\n+      const match = label.name.match(/^Priority:\\s*(\\d+).*$/i);","score":{"reward":12.06,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":70,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":63.50309523809524,"syllables":99,"sentences":3,"score":0.9649690476190476},"multiplier":1,"relevance":0.9}},{"id":2658580627,"content":"There's no top up messages so this doesn't achieve the goal we discussed.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2658580627","commentType":"PULL_COLLABORATOR","score":{"reward":4.088,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":90.09000000000002,"syllables":18,"sentences":1,"score":0.6990999999999998},"multiplier":1,"relevance":0.7}},{"id":2658867059,"content":"I guess your examples only say \"disqualified cause no more top ups remaining\"\nCan you show an example with the counter like we discussed \n\"You used 3 of 5 top ups!\" Etc","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2658867059","commentType":"PULL_COLLABORATOR","score":{"reward":7.84,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":74.27000000000001,"syllables":44,"sentences":2,"score":0.8573},"multiplier":1,"relevance":0.8}},{"id":2660791541,"content":"Can you show a full example because the one you just linked only says 1 of 2 both times then it's closed which is unexpected. \nIt should be 1 of 2 \n2 of 2 \nDisqualified. \n---\nLastly I'm thinking of the best way to word it because without context the message is meaningless. \nI want to explain concisely something like \"you have used 1 of 2 deadline extensions.\"","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2660791541","commentType":"PULL_COLLABORATOR","score":{"reward":16.164,"formatting":{"content":{"h2":{"score":1,"elementCount":1},"p":{"score":0,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":69,"wordValue":0.1,"result":2.59},"readability":{"fleschKincaid":76.3497391304348,"syllables":95,"sentences":5,"score":0.836502608695652},"multiplier":1,"relevance":0.9}},{"id":2661242848,"content":"It would seem more like a human manager if it didn't constantly remind of the top up state. \nIdeally we should only remark on the top up on state change. \nAlternatively we can reword the entire comment to make it seem like it's a foot note/subtitle or something.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2661242848","commentType":"PULL_COLLABORATOR","score":{"reward":10.404,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":68.48588235294119,"syllables":73,"sentences":3,"score":0.9151411764705881},"multiplier":1,"relevance":0.85}},{"id":2661770834,"content":"Perhaps it makes more sense to focus on making it better UX for expected follow up times instead of optimizing it for a testing edge case. Nobody is going to set a 10 minute threshold in production.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2661770834","commentType":"PULL_COLLABORATOR","score":{"reward":7.56,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":64.58722972972974,"syllables":54,"sentences":2,"score":0.9541277027027025},"multiplier":1,"relevance":0.7}},{"id":2664206238,"content":"We need first to use the time label as a given amount of time and then use our disqualifier configured timer \nSo 15 minutes would be the time label and then after that we hit the first top up\nThen after 14 days or whatever the second top up.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2664206238","commentType":"PULL_COLLABORATOR","score":{"reward":9.504,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":49,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":44.875510204081664,"syllables":65,"sentences":1,"score":0.8487551020408166},"multiplier":1,"relevance":0.8}},{"id":2664549958,"content":"I don't understand but I imagine that the previous comments can be reviewed for a string match to determine when to share the update about \"state change\"\nIt's under \"remarks\" section of spec and I emphasized multiple times in our DMs as a \"concern\" when you were asking about starting this.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2664549958","commentType":"PULL_COLLABORATOR","score":{"reward":8.26,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":53,"wordValue":0.1,"result":2.43},"readability":{"fleschKincaid":31.726792452830225,"syllables":76,"sentences":1,"score":0.7172679245283022},"multiplier":1,"relevance":0.7}},{"id":2664623463,"content":"Regular reminders are the most useful capability. \nTop ups as less frequent notices are also useful. \nTop ups should not be redundant. For example it should repeat that you used 1 of 2 deadline extensions. It should only notify of each deadline extension once, like a human manager would.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2664623463","commentType":"PULL_COLLABORATOR","score":{"reward":11.628,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":49,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":57.03902040816328,"syllables":81,"sentences":5,"score":0.9703902040816328},"multiplier":1,"relevance":0.95}},{"id":2664627956,"content":"Sure. Bonus points if you can consolidate into a single comment next time cron runs","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2664627956","commentType":"PULL_COLLABORATOR","score":{"reward":3.04,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":75.14250000000001,"syllables":22,"sentences":2,"score":0.8485749999999999},"multiplier":1,"relevance":0.5}},{"id":2670515999,"content":"I left comments. New QA I wouldn't have expected it to close it until disqualification. If it is pull related perhaps it would be more clear to mention that no pull is linked and in this repository a pull must be linked for deadline extensions. \nFor the second link I think that making the numbers bold as well looks better. I left an example there.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2670515999","commentType":"PULL_COLLABORATOR","score":{"reward":10.88,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":66,"wordValue":0.1,"result":2.57},"readability":{"fleschKincaid":78.07336363636367,"syllables":90,"sentences":5,"score":0.8192663636363633},"multiplier":1,"relevance":0.85}}],"reviewRewards":[{"reviews":[{"reviewId":2604200296,"effect":{"addition":53,"deletion":0},"reward":2.12,"priority":4},{"reviewId":2605312584,"effect":{"addition":88,"deletion":20},"reward":4.32,"priority":4},{"reviewId":2608051573,"effect":{"addition":28,"deletion":18},"reward":1.84,"priority":4},{"reviewId":2610933048,"effect":{"addition":48,"deletion":13},"reward":2.44,"priority":4},{"reviewId":2635864755,"effect":{"addition":410,"deletion":217},"reward":25.08,"priority":4},{"reviewId":2644937270,"effect":{"addition":44,"deletion":37},"reward":3.24,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 231.41 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>6</td><td>39.04</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.75</td></tr><tr><td>Issue</td><td>Comment</td><td>7</td><td>56.336</td></tr><tr><td>Review</td><td>Comment</td><td>18</td><td>131.284</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79\" target=\"_blank\" rel=\"noopener\">#79</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+53 -0</td><td>4</td><td>2.12</td></tr><tr><td>+88 -20</td><td>4</td><td>4.32</td></tr><tr><td>+28 -18</td><td>4</td><td>1.84</td></tr><tr><td>+48 -13</td><td>4</td><td>2.44</td></tr><tr><td>+410 -217</td><td>4</td><td>25.08</td></tr><tr><td>+44 -37</td><td>4</td><td>3.24</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51\" target=\"_blank\" rel=\"noopener\">A quick idea that can use improvement:Assignee can restart the&hellip;</a></h6></td><td><details><summary>3.72</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 15&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    ul:&#13;      score: 0&#13;      elementCount: 3&#13;    li:&#13;      score: 0.1&#13;      elementCount: 7&#13;    h2:&#13;      score: 1&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 2.7&#13;regex:&#13;  wordCount: 282&#13;  wordValue: 0.1&#13;  result: 1.02&#13;</pre></details></td><td>1</td><td>1</td><td>4.75</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2576557035\" target=\"_blank\" rel=\"noopener\">Yes. In practice the good talent gets their reviews processed p&hellip;</a></h6></td><td><details><summary>2.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 96&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.9</td><td>4</td><td>11.844</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2576710996\" target=\"_blank\" rel=\"noopener\">Of course in an ideal world everybody processes their tasks with&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 99&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.9</td><td>4</td><td>11.952</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2578747395\" target=\"_blank\" rel=\"noopener\">I would like to try the current proposed strategy first but we c&hellip;</a></h6></td><td><details><summary>2.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 43&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>1</td><td>4</td><td>10.76</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2604318753\" target=\"_blank\" rel=\"noopener\">What about the reminders? If that is handled by another set of l&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.8</td><td>4</td><td>4.864</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2647255176\" target=\"_blank\" rel=\"noopener\">Yeah I think each top up should incur a reminder of sorts. I'm w&hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>1</td><td>4</td><td>9.76</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2647547827\" target=\"_blank\" rel=\"noopener\">I think there is value in saying both numbers to take advantage &hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.9</td><td>4</td><td>6.444</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/51#issuecomment-2687850699\" target=\"_blank\" rel=\"noopener\">Your formatting score needs better rounding. Can you fix that? I&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.712</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#pullrequestreview-2635865685\" target=\"_blank\" rel=\"noopener\">https://github.com/ubiquity-os-marketplace/daemon-disqualifier/p&hellip;</a></h6></td><td><details><summary>1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>4</td><td>3.332</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#pullrequestreview-2644937270\" target=\"_blank\" rel=\"noopener\">Just need to change the message and we can merge this https://gi&hellip;</a></h6></td><td><details><summary>1.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.8</td><td>4</td><td>8.128</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1948077808\" target=\"_blank\" rel=\"noopener\">Ideally we should parse the priority labels from the plugin conf&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.9</td><td>4</td><td>7.632</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1948786702\" target=\"_blank\" rel=\"noopener\">https://github.com/ubiquity-os-marketplace/daemon-disqualifier/i&hellip;</a></h6></td><td><details><summary>1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.5</td><td>4</td><td>2.34</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1950448003\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion&#96;@${logins}, this task has bee&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1952051200\" target=\"_blank\" rel=\"noopener\">Anything is possible. Just parse the yml config looking for daem&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.6</td><td>4</td><td>3.24</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966956414\" target=\"_blank\" rel=\"noopener\">Since you added the priority levels to the config here, why don'&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.8</td><td>4</td><td>5.184</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966958888\" target=\"_blank\" rel=\"noopener\">I hope that you can think through and test if partners want to s&hellip;</a></h6></td><td><details><summary>2.6</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 70&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>0.9</td><td>4</td><td>12.06</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2658580627\" target=\"_blank\" rel=\"noopener\">There's no top up messages so this doesn't achieve the goal we d&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.7</td><td>4</td><td>4.088</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2658867059\" target=\"_blank\" rel=\"noopener\">I guess your examples only say \"disqualified cause no more top u&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.8</td><td>4</td><td>7.84</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2660791541\" target=\"_blank\" rel=\"noopener\">Can you show a full example because the one you just linked only&hellip;</a></h6></td><td><details><summary>3.59</summary><pre>content:&#13;  content:&#13;    h2:&#13;      score: 1&#13;      elementCount: 1&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 69&#13;  wordValue: 0.1&#13;  result: 2.59&#13;</pre></details></td><td>0.9</td><td>4</td><td>16.164</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2661242848\" target=\"_blank\" rel=\"noopener\">It would seem more like a human manager if it didn't constantly &hellip;</a></h6></td><td><details><summary>2.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 51&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>0.85</td><td>4</td><td>10.404</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2661770834\" target=\"_blank\" rel=\"noopener\">Perhaps it makes more sense to focus on making it better UX for &hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>0.7</td><td>4</td><td>7.56</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2664206238\" target=\"_blank\" rel=\"noopener\">We need first to use the time label as a given amount of time an&hellip;</a></h6></td><td><details><summary>2.37</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 49&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>0.8</td><td>4</td><td>9.504</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2664549958\" target=\"_blank\" rel=\"noopener\">I don't understand but I imagine that the previous comments can &hellip;</a></h6></td><td><details><summary>2.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 53&#13;  wordValue: 0.1&#13;  result: 2.43&#13;</pre></details></td><td>0.7</td><td>4</td><td>8.26</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2664623463\" target=\"_blank\" rel=\"noopener\">Regular reminders are the most useful capability. Top ups as le&hellip;</a></h6></td><td><details><summary>2.37</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 49&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>0.95</td><td>4</td><td>11.628</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2664627956\" target=\"_blank\" rel=\"noopener\">Sure. Bonus points if you can consolidate into a single comment &hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.5</td><td>4</td><td>3.04</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#issuecomment-2670515999\" target=\"_blank\" rel=\"noopener\">I left comments. New QA I wouldn't have expected it to close it &hellip;</a></h6></td><td><details><summary>2.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 66&#13;  wordValue: 0.1&#13;  result: 2.57&#13;</pre></details></td><td>0.85</td><td>4</td><td>10.88</td></tr></tbody></table></details>"},"ManyRios":{"total":0,"userId":34518489,"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79"}]},"whilefoo":{"total":118.376,"userId":139262667,"comments":[{"id":1966605843,"content":"could use better naming of these variables","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966605843","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -22,41 +24,129 @@ export async function remindAssigneesForIssue(context: ContextPlugin, issue: Lis\n   const issueItem = parseIssueUrl(issue.html_url);\n \n   const hasLinkedPr = !!(await collectLinkedPullRequests(context, issueItem)).filter((o) => o.state === \"OPEN\").length;\n+  const { remainingTopUps } = await getTopUpsRemaining(context);\n   if (config.warning <= 0) {\n     logger.info(\"The reminder threshold is <= 0, won't send any reminder.\");\n-  } else if (config.pullRequestRequired && !hasLinkedPr) {\n+  } else if ((config.pullRequestRequired && !hasLinkedPr) || remainingTopUps <= 0) {\n     await unassignUserFromIssue(context, issue);\n+    await closeLinkedPullRequests(context, issue);\n   } else {\n     logger.info(`Passed the reminder threshold on ${issue.html_url} sending a reminder.`);\n     await remindAssignees(context, issue);\n   }\n }\n \n-async function remindAssignees(context: ContextPlugin, issue: ListIssueForRepo) {\n-  const { octokit, logger, config } = context;\n-  const { repo, owner, issue_number } = parseIssueUrl(issue.html_url);\n+interface Args {\n+  issueNumber: number;\n+  remainingTopUps: number;\n+  pr?: {\n+    prOwner: string;\n+    prRepo: string;\n+    prNumber: number;\n+  };\n+}\n \n-  if (!issue?.assignees?.length) {\n-    logger.error(`Missing Assignees from ${issue.html_url}`);\n+async function shouldDisplayTopUpsReminder(context: ContextPlugin, args: Args) {\n+  const { octokit, logger } = context;\n+  const userAssignmentEvent = await getMostRecentUserAssignmentEvent(context, context.payload.repository, args.issueNumber);\n+\n+  if (!userAssignmentEvent) {\n+    logger.warn(\"No user assignment event was found, won't display top-up value\");\n+    return false;\n+  }\n+\n+  const issueNumber = args.pr?.prNumber ?? args.issueNumber;\n+  const owner = args.pr?.prOwner ?? context.payload.repository.owner?.login;\n+  const repo = args.pr?.prRepo ?? context.payload.repository.name;\n+\n+  if (!owner) {\n+    logger.error(\"No owner was found in the payload, won't display top-up value\");\n     return false;\n   }\n+\n+  const regex = new RegExp(/\"remainingTopUps\": (\\d+)/, \"i\");\n+\n+  const lastTopUpValue = (\n+    await octokit.paginate(octokit.rest.issues.listEventsForTimeline, {\n+      owner: owner,\n+      repo: repo,\n+      issue_number: issueNumber,\n+    })\n+  ).reduce((acc, o) => {\n+    if (\n+      \"created_at\" in o &&\n+      \"actor\" in o &&\n+      \"body\" in o &&\n+      o.event === \"commented\" &&\n+      new Date(o.created_at).getTime() >= new Date(userAssignmentEvent.created_at).getTime() &&\n+      o.actor?.type === \"Bot\" &&\n+      o.body?.includes(\"remainingTopUps\")\n+    ) {\n+      const res = regex.exec(o.body);\n+      const value = Number(res?.[1]);\n+      if (!acc || value < acc) {\n+        return value;\n+      } else {\n+        return acc;\n+      }","score":{"reward":2.464,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":66.7871428571429,"syllables":11,"sentences":1,"score":0.9321285714285711},"multiplier":1,"relevance":0.7}},{"id":1966605977,"content":"```suggestion\r\n  ).reduce((lastTopUpvalue, event) => {\r\n```","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966605977","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -22,41 +24,129 @@ export async function remindAssigneesForIssue(context: ContextPlugin, issue: Lis\n   const issueItem = parseIssueUrl(issue.html_url);\n \n   const hasLinkedPr = !!(await collectLinkedPullRequests(context, issueItem)).filter((o) => o.state === \"OPEN\").length;\n+  const { remainingTopUps } = await getTopUpsRemaining(context);\n   if (config.warning <= 0) {\n     logger.info(\"The reminder threshold is <= 0, won't send any reminder.\");\n-  } else if (config.pullRequestRequired && !hasLinkedPr) {\n+  } else if ((config.pullRequestRequired && !hasLinkedPr) || remainingTopUps <= 0) {\n     await unassignUserFromIssue(context, issue);\n+    await closeLinkedPullRequests(context, issue);\n   } else {\n     logger.info(`Passed the reminder threshold on ${issue.html_url} sending a reminder.`);\n     await remindAssignees(context, issue);\n   }\n }\n \n-async function remindAssignees(context: ContextPlugin, issue: ListIssueForRepo) {\n-  const { octokit, logger, config } = context;\n-  const { repo, owner, issue_number } = parseIssueUrl(issue.html_url);\n+interface Args {\n+  issueNumber: number;\n+  remainingTopUps: number;\n+  pr?: {\n+    prOwner: string;\n+    prRepo: string;\n+    prNumber: number;\n+  };\n+}\n \n-  if (!issue?.assignees?.length) {\n-    logger.error(`Missing Assignees from ${issue.html_url}`);\n+async function shouldDisplayTopUpsReminder(context: ContextPlugin, args: Args) {\n+  const { octokit, logger } = context;\n+  const userAssignmentEvent = await getMostRecentUserAssignmentEvent(context, context.payload.repository, args.issueNumber);\n+\n+  if (!userAssignmentEvent) {\n+    logger.warn(\"No user assignment event was found, won't display top-up value\");\n+    return false;\n+  }\n+\n+  const issueNumber = args.pr?.prNumber ?? args.issueNumber;\n+  const owner = args.pr?.prOwner ?? context.payload.repository.owner?.login;\n+  const repo = args.pr?.prRepo ?? context.payload.repository.name;\n+\n+  if (!owner) {\n+    logger.error(\"No owner was found in the payload, won't display top-up value\");\n     return false;\n   }\n+\n+  const regex = new RegExp(/\"remainingTopUps\": (\\d+)/, \"i\");\n+\n+  const lastTopUpValue = (\n+    await octokit.paginate(octokit.rest.issues.listEventsForTimeline, {\n+      owner: owner,\n+      repo: repo,\n+      issue_number: issueNumber,\n+    })\n+  ).reduce((acc, o) => {","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.6}},{"id":1966609037,"content":"`startPlusLabelDuration` is not even used anywhere? https://github.com/search?q=repo%3Aubiquity-os-marketplace%2Fdaemon-disqualifier%20startPlusLabelDuration&type=code","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966609037","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -47,6 +35,29 @@ export async function getTaskAssignmentDetails(\n     mostRecentAssignmentEvent = latestBotAssignment;\n   }\n \n+  return mostRecentAssignmentEvent;\n+}\n+\n+/**\n+ * Retrieves assignment events from the timeline of an issue and calculates the disqualification threshold based on the time label.\n+ *\n+ * It does not care about previous updates, comments or other events that might have happened on the issue.\n+ *\n+ * It returns who is assigned and the initial calculated disqualification threshold (start + time label duration).\n+ */\n+export async function getTaskAssignmentDetails(\n+  context: ContextPlugin,\n+  repo: ContextPlugin[\"payload\"][\"repository\"],\n+  issue: ListIssueForRepo\n+): Promise<{ startPlusLabelDuration: string; taskAssignees: number[] } | false> {","score":{"reward":6.624,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":28.36111842105265,"syllables":39,"sentences":4,"score":0.6836111842105265},"multiplier":1,"relevance":0.9}},{"id":1966610066,"content":"this function is very similar to `getMostRecentUserAssignmentEvent`, is there any reason for two functions?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966610066","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -7,17 +7,44 @@ import { collectLinkedPullRequests } from \"./collect-linked-pulls\";\n import { getAssigneesActivityForIssue } from \"./get-assignee-activity\";\n import { parseIssueUrl } from \"./github-url\";\n import { areLinkedPullRequestsApproved } from \"./pull-request\";\n-import { closeLinkedPullRequests, remindAssigneesForIssue, unassignUserFromIssue } from \"./remind-and-remove\";\n+import { closeLinkedPullRequests, remindAssignees, remindAssigneesForIssue, unassignUserFromIssue } from \"./remind-and-remove\";\n import { getCommentsFromMetadata } from \"./structured-metadata\";\n import { getTaskAssignmentDetails, parsePriorityLabel } from \"./task-metadata\";\n \n function getMostRecentActivityDate(assignedEventDate: DateTime, activityEventDate?: DateTime): DateTime {\n   return activityEventDate && activityEventDate > assignedEventDate ? activityEventDate : assignedEventDate;\n }\n \n+export async function getAssignedEvent(context: ContextPlugin, repo: ContextPlugin[\"payload\"][\"repository\"], issue: ListIssueForRepo) {","score":{"reward":4.48,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":69.99384615384618,"syllables":19,"sentences":1,"score":0.9000615384615382},"multiplier":1,"relevance":0.8}},{"id":1966612153,"content":"this whole thing with args is a bit confusing","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966612153","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -22,41 +24,129 @@ export async function remindAssigneesForIssue(context: ContextPlugin, issue: Lis\n   const issueItem = parseIssueUrl(issue.html_url);\n \n   const hasLinkedPr = !!(await collectLinkedPullRequests(context, issueItem)).filter((o) => o.state === \"OPEN\").length;\n+  const { remainingTopUps } = await getTopUpsRemaining(context);\n   if (config.warning <= 0) {\n     logger.info(\"The reminder threshold is <= 0, won't send any reminder.\");\n-  } else if (config.pullRequestRequired && !hasLinkedPr) {\n+  } else if ((config.pullRequestRequired && !hasLinkedPr) || remainingTopUps <= 0) {\n     await unassignUserFromIssue(context, issue);\n+    await closeLinkedPullRequests(context, issue);\n   } else {\n     logger.info(`Passed the reminder threshold on ${issue.html_url} sending a reminder.`);\n     await remindAssignees(context, issue);\n   }\n }\n \n-async function remindAssignees(context: ContextPlugin, issue: ListIssueForRepo) {\n-  const { octokit, logger, config } = context;\n-  const { repo, owner, issue_number } = parseIssueUrl(issue.html_url);\n+interface Args {\n+  issueNumber: number;\n+  remainingTopUps: number;\n+  pr?: {\n+    prOwner: string;\n+    prRepo: string;\n+    prNumber: number;\n+  };\n+}\n \n-  if (!issue?.assignees?.length) {\n-    logger.error(`Missing Assignees from ${issue.html_url}`);\n+async function shouldDisplayTopUpsReminder(context: ContextPlugin, args: Args) {","score":{"reward":2.884,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":84.90000000000003,"syllables":12,"sentences":1,"score":0.7509999999999997},"multiplier":1,"relevance":0.7}},{"id":1968275039,"content":"why are there so many defined properties if only 4 of them are used?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968275039","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -22,41 +34,135 @@ export async function remindAssigneesForIssue(context: ContextPlugin, issue: Lis\n   const issueItem = parseIssueUrl(issue.html_url);\n \n   const hasLinkedPr = !!(await collectLinkedPullRequests(context, issueItem)).filter((o) => o.state === \"OPEN\").length;\n-  if (config.warning <= 0) {\n+  const { remainingExtensions } = await getRemainingAvailableExtensions(context);\n+  if (config.followUpInterval <= 0) {\n     logger.info(\"The reminder threshold is <= 0, won't send any reminder.\");\n-  } else if (config.pullRequestRequired && !hasLinkedPr) {\n+  } else if ((config.pullRequestRequired && !hasLinkedPr) || remainingExtensions <= 0) {\n     await unassignUserFromIssue(context, issue);\n+    await closeLinkedPullRequests(context, issue);\n   } else {\n     logger.info(`Passed the reminder threshold on ${issue.html_url} sending a reminder.`);\n     await remindAssignees(context, issue);\n   }\n }\n \n-async function remindAssignees(context: ContextPlugin, issue: ListIssueForRepo) {\n-  const { octokit, logger, config } = context;\n-  const { repo, owner, issue_number } = parseIssueUrl(issue.html_url);\n+async function shouldDisplayTopUpsReminder(context: ContextPlugin, issueAndPrTargets: IssuePrTarget) {\n+  const { octokit, logger } = context;\n+  const userAssignmentEvent = await getMostRecentUserAssignmentEvent(context, context.payload.repository, issueAndPrTargets.issueNumber);\n \n-  if (!issue?.assignees?.length) {\n-    logger.error(`Missing Assignees from ${issue.html_url}`);\n+  if (!userAssignmentEvent) {\n+    logger.warn(\"No user assignment event was found, won't display top-up value\");\n     return false;\n   }\n+\n+  const issueNumber = issueAndPrTargets.pr?.prNumber ?? issueAndPrTargets.issueNumber;\n+  const owner = issueAndPrTargets.pr?.prOwner ?? context.payload.repository.owner?.login;\n+  const repo = issueAndPrTargets.pr?.prRepo ?? context.payload.repository.name;\n+\n+  if (!owner) {\n+    logger.error(\"No owner was found in the payload, won't display top-up value\");\n+    return false;\n+  }\n+\n+  const regex = new RegExp(/\"remainingTopUps\": (\\d+)/, \"i\");\n+\n+  const lastTopUpValue = (\n+    await octokit.paginate(octokit.rest.issues.listEventsForTimeline, {\n+      owner: owner,\n+      repo: repo,\n+      issue_number: issueNumber,\n+    })\n+  ).reduce((lastTopUpValue, event) => {\n+    if (\n+      \"created_at\" in event &&\n+      \"actor\" in event &&\n+      \"body\" in event &&\n+      event.event === \"commented\" &&\n+      new Date(event.created_at).getTime() >= new Date(userAssignmentEvent.created_at).getTime() &&\n+      event.actor?.type === \"Bot\" &&\n+      event.body?.includes(\"remainingExtensions\")\n+    ) {\n+      const res = regex.exec(event.body);\n+      const value = Number(res?.[1]);\n+      if (!lastTopUpValue || value < lastTopUpValue) {\n+        return value;\n+      } else {\n+        return lastTopUpValue;\n+      }\n+    }\n+    return lastTopUpValue;\n+  }, 0);\n+  logger.debug(\"Last reminder top up value\", { lastTopUpValue, remainingExtensions: issueAndPrTargets.remainingExtensions });\n+  return lastTopUpValue !== issueAndPrTargets.remainingExtensions;\n+}\n+\n+async function buildReminderMessage(context: ContextPlugin, args: { remainingExtensions: number; extensionsLimit: number } & IssuePrTarget) {\n+  return !context.config.negligenceThreshold || !context.config.availableDeadlineExtensions.enabled || !(await shouldDisplayTopUpsReminder(context, args))\n+    ? \"this task has been idle for a while\"\n+    : `you have used <code>**${args.extensionsLimit - args.remainingExtensions + 1}**</code> of <code>**${args.extensionsLimit}**</code> available deadline extensions`;\n+}\n+\n+async function constructBodyWithMetadata(\n+  context: ContextPlugin,\n+  {\n+    reminderContent,\n+    extensionsLimit,\n+    remainingExtensions,\n+    issue,\n+  }: {\n+    reminderContent: string;\n+    extensionsLimit: number;\n+    remainingExtensions: number;\n+    owner: string;\n+    repo: string;\n+    issue_number: number;\n+    issue: ListIssueForRepo;\n+  }","score":{"reward":4.06,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":77.81071428571428,"syllables":19,"sentences":1,"score":0.8218928571428572},"multiplier":1,"relevance":0.7}},{"id":1968298257,"content":"you forgot to rename to deadline extensions","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968298257","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,7 +1,53 @@\n import { watchUserActivity } from \"./handlers/watch-user-activity\";\n import { ContextPlugin } from \"./types/plugin-input\";\n \n+async function populateTopUpThresholds(context: ContextPlugin) {","score":{"reward":2.848,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":54.70142857142861,"syllables":12,"sentences":1,"score":0.947014285714286},"multiplier":1,"relevance":0.8}},{"id":1968298815,"content":"add description for plugin installer","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968298815","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -91,6 +77,13 @@ export const pluginSettingsSchema = T.Object(\n       description: \"Whether a pull request is required for the given issue on disqualify\",\n       examples: [\"true\", \"false\"],\n     }),\n+    availableDeadlineExtensions: T.Object(","score":{"reward":1.82,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":32.56000000000003,"syllables":10,"sentences":1,"score":0.7256000000000004},"multiplier":1,"relevance":0.7}},{"id":1968306202,"content":"I know this is old code but I'm trying to understand the whole logic, won't this be always `lastReminderTime` because last reminder is always newer than `mostRecentActivityDate` or am I missing something?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968306202","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -81,20 +99,24 @@ export async function updateTaskReminder(context: ContextPlugin, repo: ContextPl\n     mostRecentActivityDate: mostRecentActivityDate.toLocaleString(DateTime.DATETIME_MED),\n   });\n \n-  const disqualificationTimeDifference = disqualification - warning;\n+  const disqualificationTimeDifference = negligenceThreshold - followUpInterval;\n \n   if (lastReminderComment) {\n     const lastReminderTime = DateTime.fromISO(lastReminderComment.created_at);\n     mostRecentActivityDate = lastReminderTime > mostRecentActivityDate ? lastReminderTime : mostRecentActivityDate;","score":{"reward":8.032,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":55.38625000000003,"syllables":45,"sentences":1,"score":0.9538625000000003},"multiplier":1,"relevance":0.8}},{"id":1968311420,"content":"looking at this again and it doesn't make sense, first `mostRecentAssignmentEvent` gets assigned to whichever is truthy and then it's checked if both are present and if user assignment is newer than bot then user assignment gets assigned to `mostRecentAssignmentEvent` but in else statement it's assigned to bot assignment even if it might actually be `null`","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968311420","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -8,37 +8,25 @@ type IssueLabel = Partial<Omit<RestEndpointMethodTypes[\"issues\"][\"listLabelsForR\n   color?: string | null;\n };\n \n-/**\n- * Retrieves assignment events from the timeline of an issue and calculates the disqualification threshold based on the time label.\n- *\n- * It does not care about previous updates, comments or other events that might have happened on the issue.\n- *\n- * It returns who is assigned and the initial calculated disqualification threshold (start + time label duration).\n- */\n-export async function getTaskAssignmentDetails(\n-  context: ContextPlugin,\n-  repo: ContextPlugin[\"payload\"][\"repository\"],\n-  issue: ListIssueForRepo\n-): Promise<{ startPlusLabelDuration: string; taskAssignees: number[] } | false> {\n+export async function getMostRecentUserAssignmentEvent(context: ContextPlugin, repo: ContextPlugin[\"payload\"][\"repository\"], issueNumber: number) {\n   const { logger, octokit, payload } = context;\n \n   if (!repo.owner) {\n     throw logger.error(\"No owner was found in the payload\", { payload });\n   }\n \n-  const assignmentEvents = await octokit.paginate(octokit.rest.issues.listEvents, {\n+  const events = await octokit.paginate(octokit.rest.issues.listEvents, {\n     owner: repo.owner.login,\n     repo: repo.name,\n-    issue_number: issue.number,\n+    issue_number: issueNumber,\n   });\n \n-  const assignedEvents = assignmentEvents\n+  const assignedEvents = events\n     .filter((o) => o.event === \"assigned\")\n     .sort((a, b) => DateTime.fromISO(b.created_at).toMillis() - DateTime.fromISO(a.created_at).toMillis());\n \n-  const latestUserAssignment = assignedEvents.find((o) => o.actor?.type === \"User\");\n-  const latestBotAssignment = assignedEvents.find((o) => o.actor?.type === \"Bot\");\n-\n+  const latestUserAssignment = assignedEvents.find((o) => (\"assigner\" in o ? o.assigner?.type === \"User\" : o.actor?.type === \"User\"));\n+  const latestBotAssignment = assignedEvents.find((o) => (\"assigner\" in o ? o.assigner?.type === \"Bot\" : o.actor?.type === \"Bot\"));\n   let mostRecentAssignmentEvent = latestUserAssignment || latestBotAssignment;\n \n   if (latestUserAssignment && latestBotAssignment && DateTime.fromISO(latestUserAssignment.created_at) > DateTime.fromISO(latestBotAssignment.created_at)) {","score":{"reward":10.764,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":56,"wordValue":0.1,"result":2.47},"readability":{"fleschKincaid":30.64857142857143,"syllables":79,"sentences":1,"score":0.7064857142857143},"multiplier":1,"relevance":0.9}},{"id":1968312212,"content":"you forgot to rename","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968312212","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -22,41 +34,135 @@ export async function remindAssigneesForIssue(context: ContextPlugin, issue: Lis\n   const issueItem = parseIssueUrl(issue.html_url);\n \n   const hasLinkedPr = !!(await collectLinkedPullRequests(context, issueItem)).filter((o) => o.state === \"OPEN\").length;\n-  if (config.warning <= 0) {\n+  const { remainingExtensions } = await getRemainingAvailableExtensions(context);\n+  if (config.followUpInterval <= 0) {\n     logger.info(\"The reminder threshold is <= 0, won't send any reminder.\");\n-  } else if (config.pullRequestRequired && !hasLinkedPr) {\n+  } else if ((config.pullRequestRequired && !hasLinkedPr) || remainingExtensions <= 0) {\n     await unassignUserFromIssue(context, issue);\n+    await closeLinkedPullRequests(context, issue);\n   } else {\n     logger.info(`Passed the reminder threshold on ${issue.html_url} sending a reminder.`);\n     await remindAssignees(context, issue);\n   }\n }\n \n-async function remindAssignees(context: ContextPlugin, issue: ListIssueForRepo) {\n-  const { octokit, logger, config } = context;\n-  const { repo, owner, issue_number } = parseIssueUrl(issue.html_url);\n+async function shouldDisplayTopUpsReminder(context: ContextPlugin, issueAndPrTargets: IssuePrTarget) {\n+  const { octokit, logger } = context;\n+  const userAssignmentEvent = await getMostRecentUserAssignmentEvent(context, context.payload.repository, issueAndPrTargets.issueNumber);\n \n-  if (!issue?.assignees?.length) {\n-    logger.error(`Missing Assignees from ${issue.html_url}`);\n+  if (!userAssignmentEvent) {\n+    logger.warn(\"No user assignment event was found, won't display top-up value\");\n     return false;\n   }\n+\n+  const issueNumber = issueAndPrTargets.pr?.prNumber ?? issueAndPrTargets.issueNumber;\n+  const owner = issueAndPrTargets.pr?.prOwner ?? context.payload.repository.owner?.login;\n+  const repo = issueAndPrTargets.pr?.prRepo ?? context.payload.repository.name;\n+\n+  if (!owner) {\n+    logger.error(\"No owner was found in the payload, won't display top-up value\");\n+    return false;\n+  }\n+\n+  const regex = new RegExp(/\"remainingTopUps\": (\\d+)/, \"i\");\n+\n+  const lastTopUpValue = (","score":{"reward":1.76,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.8}},{"id":1968314696,"content":"if it gets logged that's fine, but if it's not used then we should remove it","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968314696","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -47,6 +35,29 @@ export async function getTaskAssignmentDetails(\n     mostRecentAssignmentEvent = latestBotAssignment;\n   }\n \n+  return mostRecentAssignmentEvent;\n+}\n+\n+/**\n+ * Retrieves assignment events from the timeline of an issue and calculates the disqualification threshold based on the time label.\n+ *\n+ * It does not care about previous updates, comments or other events that might have happened on the issue.\n+ *\n+ * It returns who is assigned and the initial calculated disqualification threshold (start + time label duration).\n+ */\n+export async function getTaskAssignmentDetails(\n+  context: ContextPlugin,\n+  repo: ContextPlugin[\"payload\"][\"repository\"],\n+  issue: ListIssueForRepo\n+): Promise<{ startPlusLabelDuration: string; taskAssignees: number[] } | false> {","score":{"reward":4.564,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":99.265,"syllables":19,"sentences":1,"score":0.60735},"multiplier":1,"relevance":0.7}},{"id":1968318325,"content":"I'm not sure if the metadata affects anything because it's just an extra check that assignment events assignees are really the ones that started the task so maybe we should use the one with metadata?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968318325","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -7,17 +7,44 @@ import { collectLinkedPullRequests } from \"./collect-linked-pulls\";\n import { getAssigneesActivityForIssue } from \"./get-assignee-activity\";\n import { parseIssueUrl } from \"./github-url\";\n import { areLinkedPullRequestsApproved } from \"./pull-request\";\n-import { closeLinkedPullRequests, remindAssigneesForIssue, unassignUserFromIssue } from \"./remind-and-remove\";\n+import { closeLinkedPullRequests, remindAssignees, remindAssigneesForIssue, unassignUserFromIssue } from \"./remind-and-remove\";\n import { getCommentsFromMetadata } from \"./structured-metadata\";\n import { getTaskAssignmentDetails, parsePriorityLabel } from \"./task-metadata\";\n \n function getMostRecentActivityDate(assignedEventDate: DateTime, activityEventDate?: DateTime): DateTime {\n   return activityEventDate && activityEventDate > assignedEventDate ? activityEventDate : assignedEventDate;\n }\n \n+export async function getAssignedEvent(context: ContextPlugin, repo: ContextPlugin[\"payload\"][\"repository\"], issue: ListIssueForRepo) {","score":{"reward":8.448,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":45.80972972972974,"syllables":54,"sentences":1,"score":0.8580972972972973},"multiplier":1,"relevance":0.8}},{"id":1972118758,"content":"if you look at the code (line 71) you can see that it only checks for reminders that happened after most recent activity","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1972118758","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -81,20 +99,24 @@ export async function updateTaskReminder(context: ContextPlugin, repo: ContextPl\n     mostRecentActivityDate: mostRecentActivityDate.toLocaleString(DateTime.DATETIME_MED),\n   });\n \n-  const disqualificationTimeDifference = disqualification - warning;\n+  const disqualificationTimeDifference = negligenceThreshold - followUpInterval;\n \n   if (lastReminderComment) {\n     const lastReminderTime = DateTime.fromISO(lastReminderComment.created_at);\n     mostRecentActivityDate = lastReminderTime > mostRecentActivityDate ? lastReminderTime : mostRecentActivityDate;","score":{"reward":4.968,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":65.78565217391306,"syllables":32,"sentences":1,"score":0.9421434782608693},"multiplier":1,"relevance":0.6}},{"id":1972164337,"content":"Why? The one with metadata just has an extra check. Honestly just choose one, I don't think it makes much difference in practice :D","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1972164337","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -7,17 +7,44 @@ import { collectLinkedPullRequests } from \"./collect-linked-pulls\";\n import { getAssigneesActivityForIssue } from \"./get-assignee-activity\";\n import { parseIssueUrl } from \"./github-url\";\n import { areLinkedPullRequestsApproved } from \"./pull-request\";\n-import { closeLinkedPullRequests, remindAssigneesForIssue, unassignUserFromIssue } from \"./remind-and-remove\";\n+import { closeLinkedPullRequests, remindAssignees, remindAssigneesForIssue, unassignUserFromIssue } from \"./remind-and-remove\";\n import { getCommentsFromMetadata } from \"./structured-metadata\";\n import { getTaskAssignmentDetails, parsePriorityLabel } from \"./task-metadata\";\n \n function getMostRecentActivityDate(assignedEventDate: DateTime, activityEventDate?: DateTime): DateTime {\n   return activityEventDate && activityEventDate > assignedEventDate ? activityEventDate : assignedEventDate;\n }\n \n+export async function getAssignedEvent(context: ContextPlugin, repo: ContextPlugin[\"payload\"][\"repository\"], issue: ListIssueForRepo) {","score":{"reward":4.18,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":83.32066666666667,"syllables":34,"sentences":3,"score":0.7667933333333333},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2635313205,"effect":{"addition":469,"deletion":152},"reward":24.84,"priority":4},{"reviewId":2638206866,"effect":{"addition":142,"deletion":100},"reward":9.68,"priority":4},{"reviewId":2638271791,"effect":{"addition":0,"deletion":0},"reward":0,"priority":4},{"reviewId":2645438331,"effect":{"addition":142,"deletion":100},"reward":9.68,"priority":4},{"reviewId":2645520006,"effect":{"addition":54,"deletion":53},"reward":4.28,"priority":4},{"reviewId":2647362049,"effect":{"addition":13,"deletion":37},"reward":2,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 118.376 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>6</td><td>50.48</td></tr><tr><td>Review</td><td>Comment</td><td>15</td><td>67.896</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79\" target=\"_blank\" rel=\"noopener\">#79</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+469 -152</td><td>4</td><td>24.84</td></tr><tr><td>+142 -100</td><td>4</td><td>9.68</td></tr><tr><td>+0 -0</td><td>4</td><td>0</td></tr><tr><td>+142 -100</td><td>4</td><td>9.68</td></tr><tr><td>+54 -53</td><td>4</td><td>4.28</td></tr><tr><td>+13 -37</td><td>4</td><td>2</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966605843\" target=\"_blank\" rel=\"noopener\">could use better naming of these variables</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>4</td><td>2.464</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966605977\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion).reduce((lastTopUpvalue, event) =&&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.6</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966609037\" target=\"_blank\" rel=\"noopener\">&#96;startPlusLabelDuration&#96; is not even used anywhere? http&hellip;</a></h6></td><td><details><summary>1.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.9</td><td>4</td><td>6.624</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966610066\" target=\"_blank\" rel=\"noopener\">this function is very similar to &#96;getMostRecentUserAssignmen&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.8</td><td>4</td><td>4.48</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1966612153\" target=\"_blank\" rel=\"noopener\">this whole thing with args is a bit confusing</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.7</td><td>4</td><td>2.884</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968275039\" target=\"_blank\" rel=\"noopener\">why are there so many defined properties if only 4 of them are u&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.7</td><td>4</td><td>4.06</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968298257\" target=\"_blank\" rel=\"noopener\">you forgot to rename to deadline extensions</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.8</td><td>4</td><td>2.848</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968298815\" target=\"_blank\" rel=\"noopener\">add description for plugin installer</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>4</td><td>1.82</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968306202\" target=\"_blank\" rel=\"noopener\">I know this is old code but I'm trying to understand the whole l&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.8</td><td>4</td><td>8.032</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968311420\" target=\"_blank\" rel=\"noopener\">looking at this again and it doesn't make sense, first &#96;most&hellip;</a></h6></td><td><details><summary>2.47</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 56&#13;  wordValue: 0.1&#13;  result: 2.47&#13;</pre></details></td><td>0.9</td><td>4</td><td>10.764</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968312212\" target=\"_blank\" rel=\"noopener\">you forgot to rename</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.8</td><td>4</td><td>1.76</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968314696\" target=\"_blank\" rel=\"noopener\">if it gets logged that's fine, but if it's not used then we shou&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.7</td><td>4</td><td>4.564</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1968318325\" target=\"_blank\" rel=\"noopener\">I'm not sure if the metadata affects anything because it's just &hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>0.8</td><td>4</td><td>8.448</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1972118758\" target=\"_blank\" rel=\"noopener\">if you look at the code (line 71) you can see that it only check&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.6</td><td>4</td><td>4.968</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/79#discussion_r1972164337\" target=\"_blank\" rel=\"noopener\">Why? The one with metadata just has an extra check. Honestly jus&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.5</td><td>4</td><td>4.18</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_135.json","json":{"gentlementlegen":{"userId":9807008,"total":50,"task":{"reward":50,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 50 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":0.336,"userId":4975670,"comments":[{"id":2383708364,"content":"This error shouldn't display here.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/135#issuecomment-2383708364","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.296,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":87.94500000000002,"syllables":8,"sentences":1,"score":0.7205499999999998},"multiplier":1,"relevance":0.2}}],"reviewRewards":[{"reviews":[{"reviewId":2339073988,"effect":{"addition":1,"deletion":1},"reward":0.04,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/136"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.336 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.04</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.296</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/136\" target=\"_blank\" rel=\"noopener\">#136</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1 -1</td><td>2</td><td>0.04</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/135#issuecomment-2383708364\" target=\"_blank\" rel=\"noopener\">This error shouldn't display here.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.296</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_284.json","json":{"zugdev":{"userId":155616000,"total":604.355,"task":{"reward":600,"multiplier":1},"comments":[{"id":2864485723,"content":"Currently we are not saving token information (_address, network_) nor partner information (_address_) in our database. This makes it impossible for `pay.ubq.fi` to fetch user permits only from Supabase without scraping Github.\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/blob/4b91261d11e9a1e1456bd001a042fcc961bada91/src/parser/permit-generation-module.ts#L287-L312\nWe should store _**token_id**_ and _**partner_id**_ in the permit too.\nEdit:\nWe should also backfill the tables for old permits.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/284","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.2,"formatting":{"content":{"p":{"score":0,"elementCount":1},"em":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":49,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":42.30519607843138,"syllables":123,"sentences":6,"score":0.8230519607843138},"multiplier":1,"relevance":1}},{"id":2345642854,"content":"Resolves #284","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285","commentType":"PULL_SPECIFICATION","score":{"reward":0.155,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":77.90500000000002,"syllables":3,"sentences":1,"score":0.8209499999999998},"multiplier":1,"relevance":0.5}},{"id":2669870393,"content":"@0x4007","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2669870393","commentType":"PULL_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":1,"wordValue":0,"result":0},"readability":{"fleschKincaid":121.22000000000003,"syllables":1,"sentences":1,"score":1},"multiplier":0,"relevance":0.1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 604.355 XP ]</a>&nbsp;</h3><h6>@zugdev</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>600</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.2</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>0.155</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/284\" target=\"_blank\" rel=\"noopener\">Currently we are not saving token information (_address, network&hellip;</a></h6></td><td><details><summary>3.37</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    em:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 49&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>1</td><td>1</td><td>4.2</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285\" target=\"_blank\" rel=\"noopener\">Resolves #284</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.155</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2669870393\" target=\"_blank\" rel=\"noopener\">@0x4007</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0&#13;  result: 0&#13;</pre></details></td><td>0.1</td><td>3</td><td>0</td></tr></tbody></table></details>"},"rndquu":{"total":15.891,"userId":119500907,"comments":[{"id":2670707495,"content":"1. Why do we need to fetch permit info from supabase while all the required info is passed in URL query parameter?\n2. What exactly do we need to scrape from github on the `pay.ubq.fi` side?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/284#issuecomment-2670707495","commentType":"ISSUE_COLLABORATOR","score":{"reward":8.31,"formatting":{"content":{"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":3,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":69.59659090909092,"syllables":47,"sentences":2,"score":0.9040340909090908},"multiplier":1,"relevance":1}},{"id":2670712990,"content":"Pls:\r\n1. QA this PR, take the latest supabase backup from https://github.com/ubiquity/ubiquibot-db-backups and test the PR on your local DB instance\r\n2. Fix failing jest CI","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2670712990","commentType":"PULL_COLLABORATOR","score":{"reward":7.581,"formatting":{"content":{"p":{"score":0,"elementCount":3},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1.2},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":64.71000000000002,"syllables":45,"sentences":2,"score":0.9528999999999997},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 15.891 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>8.31</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>7.581</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/284#issuecomment-2670707495\" target=\"_blank\" rel=\"noopener\">1. Why do we need to fetch permit info from supabase while all t&hellip;</a></h6></td><td><details><summary>2.18</summary><pre>content:&#13;  content:&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>1</td><td>3</td><td>8.31</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2670712990\" target=\"_blank\" rel=\"noopener\">Pls:1. QA this PR, take the latest supabase backup from https:&hellip;</a></h6></td><td><details><summary>2.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.2&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.7</td><td>3</td><td>7.581</td></tr></tbody></table></details>"},"0x4007":{"total":5.1,"userId":4975670,"comments":[{"id":2685521595,"content":"You need to set a time estimate @zugdev","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/284#issuecomment-2685521595","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.41,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":82.39000000000001,"syllables":11,"sentences":1,"score":0.7760999999999999},"multiplier":1,"relevance":0.5}},{"id":2670519821,"content":"@gentlementlegen caution should be reserved for application errors. \nThis should be a warning because its changeable based on the inputs (change the labels)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2670519821","commentType":"PULL_COLLABORATOR","score":{"reward":3.69,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":51.71032608695654,"syllables":39,"sentences":2,"score":0.9171032608695654},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 5.1 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.41</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>3.69</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/284#issuecomment-2685521595\" target=\"_blank\" rel=\"noopener\">You need to set a time estimate @zugdev</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.41</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2670519821\" target=\"_blank\" rel=\"noopener\">@gentlementlegen caution should be reserved for application erro&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.6</td><td>3</td><td>3.69</td></tr></tbody></table></details>"},"gentlementlegen":{"total":68.703,"userId":9807008,"comments":[{"id":2652257979,"content":"I just set the private key in the environment.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#pullrequestreview-2652257979","commentType":"PULL_COLLABORATOR","score":{"reward":0.63,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":75.50000000000003,"syllables":13,"sentences":1,"score":0.8449999999999998},"multiplier":1,"relevance":0.2}},{"id":1963090788,"content":"Should use our logger","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1963090788","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -284,11 +284,110 @@ export class PermitGenerationModule extends BaseModule {\n     return locationId;\n   }\n \n+  async _getOrCreateToken(address: string, network: number) {\n+    let tokenId: number | null = null;\n+\n+    const { data: tokenData } = await this._supabase\n+      .from(\"tokens\")\n+      .select(\"id\")\n+      .eq(\"address\", address)\n+      .eq(\"network\", network)\n+      .single();\n+\n+    if (!tokenData) {\n+      const { data: insertedToken, error } = await this._supabase\n+        .from(\"tokens\")\n+        .insert({\n+          address,\n+          network,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedToken) {\n+        console.error(\"Failed to insert a new token:\", error);\n+      } else {\n+        tokenId = insertedToken.id;\n+      }\n+    } else {\n+      tokenId = tokenData.id;\n+    }\n+    if (!tokenId) {\n+      throw new Error(\n+        this.context.logger.error(\"Failed to retrieve the related token from permit\", {\n+          address,\n+          network,\n+        }).logMessage.raw\n+      );\n+    }\n+\n+    return tokenId;\n+  }\n+\n+  async _getOrCreatePartner(address: string) {\n+    let walletId: number | null = null;\n+    let partnerId: number | null = null;\n+\n+    const { data: walletData } = await this._supabase.from(\"wallets\").select(\"id\").eq(\"address\", address).single();\n+\n+    if (!walletData) {\n+      const { data: insertedWallet, error } = await this._supabase\n+        .from(\"wallets\")\n+        .insert({\n+          address,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedWallet) {\n+        console.error(\"Failed to insert a new wallet:\", error);\n+      } else {\n+        walletId = insertedWallet.id;\n+      }\n+    } else {\n+      walletId = walletData.id;\n+    }\n+    if (!walletId) {\n+      throw new Error(\n+        this.context.logger.error(\"Failed to retrieve the related wallet from permit\", { address }).logMessage.raw\n+      );\n+    }\n+\n+    const { data: partnerData } = await this._supabase.from(\"partners\").select(\"id\").eq(\"wallet_id\", walletId).single();\n+\n+    if (!partnerData) {\n+      const { data: insertedPartner, error } = await this._supabase\n+        .from(\"partners\")\n+        .insert({\n+          wallet_id: walletId,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedPartner) {\n+        console.error(\"Failed to insert a new token:\", error);","score":{"reward":1.248,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":97.025,"syllables":5,"sentences":1,"score":0.6297499999999999},"multiplier":1,"relevance":0.8}},{"id":1963091009,"content":"Should use our logger","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1963091009","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -284,11 +284,110 @@ export class PermitGenerationModule extends BaseModule {\n     return locationId;\n   }\n \n+  async _getOrCreateToken(address: string, network: number) {\n+    let tokenId: number | null = null;\n+\n+    const { data: tokenData } = await this._supabase\n+      .from(\"tokens\")\n+      .select(\"id\")\n+      .eq(\"address\", address)\n+      .eq(\"network\", network)\n+      .single();\n+\n+    if (!tokenData) {\n+      const { data: insertedToken, error } = await this._supabase\n+        .from(\"tokens\")\n+        .insert({\n+          address,\n+          network,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedToken) {\n+        console.error(\"Failed to insert a new token:\", error);\n+      } else {\n+        tokenId = insertedToken.id;\n+      }\n+    } else {\n+      tokenId = tokenData.id;\n+    }\n+    if (!tokenId) {\n+      throw new Error(\n+        this.context.logger.error(\"Failed to retrieve the related token from permit\", {\n+          address,\n+          network,\n+        }).logMessage.raw\n+      );\n+    }\n+\n+    return tokenId;\n+  }\n+\n+  async _getOrCreatePartner(address: string) {\n+    let walletId: number | null = null;\n+    let partnerId: number | null = null;\n+\n+    const { data: walletData } = await this._supabase.from(\"wallets\").select(\"id\").eq(\"address\", address).single();\n+\n+    if (!walletData) {\n+      const { data: insertedWallet, error } = await this._supabase\n+        .from(\"wallets\")\n+        .insert({\n+          address,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedWallet) {\n+        console.error(\"Failed to insert a new wallet:\", error);","score":{"reward":1.248,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":97.025,"syllables":5,"sentences":1,"score":0.6297499999999999},"multiplier":1,"relevance":0.8}},{"id":1963092252,"content":"Why not directly throwing the `logger.error` here?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1963092252","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -284,11 +284,110 @@ export class PermitGenerationModule extends BaseModule {\n     return locationId;\n   }\n \n+  async _getOrCreateToken(address: string, network: number) {\n+    let tokenId: number | null = null;\n+\n+    const { data: tokenData } = await this._supabase\n+      .from(\"tokens\")\n+      .select(\"id\")\n+      .eq(\"address\", address)\n+      .eq(\"network\", network)\n+      .single();\n+\n+    if (!tokenData) {\n+      const { data: insertedToken, error } = await this._supabase\n+        .from(\"tokens\")\n+        .insert({\n+          address,\n+          network,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedToken) {\n+        console.error(\"Failed to insert a new token:\", error);\n+      } else {\n+        tokenId = insertedToken.id;\n+      }\n+    } else {\n+      tokenId = tokenData.id;\n+    }\n+    if (!tokenId) {\n+      throw new Error(\n+        this.context.logger.error(\"Failed to retrieve the related token from permit\", {","score":{"reward":2.079,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":73.84500000000001,"syllables":9,"sentences":1,"score":0.8615499999999998},"multiplier":1,"relevance":0.9}},{"id":1963093160,"content":"Here as well the `logger.error` can be directly thrown no need to wrap it inside of `Error`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1963093160","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -284,11 +284,110 @@ export class PermitGenerationModule extends BaseModule {\n     return locationId;\n   }\n \n+  async _getOrCreateToken(address: string, network: number) {\n+    let tokenId: number | null = null;\n+\n+    const { data: tokenData } = await this._supabase\n+      .from(\"tokens\")\n+      .select(\"id\")\n+      .eq(\"address\", address)\n+      .eq(\"network\", network)\n+      .single();\n+\n+    if (!tokenData) {\n+      const { data: insertedToken, error } = await this._supabase\n+        .from(\"tokens\")\n+        .insert({\n+          address,\n+          network,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedToken) {\n+        console.error(\"Failed to insert a new token:\", error);\n+      } else {\n+        tokenId = insertedToken.id;\n+      }\n+    } else {\n+      tokenId = tokenData.id;\n+    }\n+    if (!tokenId) {\n+      throw new Error(\n+        this.context.logger.error(\"Failed to retrieve the related token from permit\", {\n+          address,\n+          network,\n+        }).logMessage.raw\n+      );\n+    }\n+\n+    return tokenId;\n+  }\n+\n+  async _getOrCreatePartner(address: string) {\n+    let walletId: number | null = null;\n+    let partnerId: number | null = null;\n+\n+    const { data: walletData } = await this._supabase.from(\"wallets\").select(\"id\").eq(\"address\", address).single();\n+\n+    if (!walletData) {\n+      const { data: insertedWallet, error } = await this._supabase\n+        .from(\"wallets\")\n+        .insert({\n+          address,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedWallet) {\n+        console.error(\"Failed to insert a new wallet:\", error);\n+      } else {\n+        walletId = insertedWallet.id;\n+      }\n+    } else {\n+      walletId = walletData.id;\n+    }\n+    if (!walletId) {\n+      throw new Error(\n+        this.context.logger.error(\"Failed to retrieve the related wallet from permit\", { address }).logMessage.raw","score":{"reward":3.942,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":90.09000000000002,"syllables":18,"sentences":1,"score":0.6990999999999998},"multiplier":1,"relevance":0.9}},{"id":1963093861,"content":"Same as the two other instances","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1963093861","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -284,11 +284,110 @@ export class PermitGenerationModule extends BaseModule {\n     return locationId;\n   }\n \n+  async _getOrCreateToken(address: string, network: number) {\n+    let tokenId: number | null = null;\n+\n+    const { data: tokenData } = await this._supabase\n+      .from(\"tokens\")\n+      .select(\"id\")\n+      .eq(\"address\", address)\n+      .eq(\"network\", network)\n+      .single();\n+\n+    if (!tokenData) {\n+      const { data: insertedToken, error } = await this._supabase\n+        .from(\"tokens\")\n+        .insert({\n+          address,\n+          network,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedToken) {\n+        console.error(\"Failed to insert a new token:\", error);\n+      } else {\n+        tokenId = insertedToken.id;\n+      }\n+    } else {\n+      tokenId = tokenData.id;\n+    }\n+    if (!tokenId) {\n+      throw new Error(\n+        this.context.logger.error(\"Failed to retrieve the related token from permit\", {\n+          address,\n+          network,\n+        }).logMessage.raw\n+      );\n+    }\n+\n+    return tokenId;\n+  }\n+\n+  async _getOrCreatePartner(address: string) {\n+    let walletId: number | null = null;\n+    let partnerId: number | null = null;\n+\n+    const { data: walletData } = await this._supabase.from(\"wallets\").select(\"id\").eq(\"address\", address).single();\n+\n+    if (!walletData) {\n+      const { data: insertedWallet, error } = await this._supabase\n+        .from(\"wallets\")\n+        .insert({\n+          address,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedWallet) {\n+        console.error(\"Failed to insert a new wallet:\", error);\n+      } else {\n+        walletId = insertedWallet.id;\n+      }\n+    } else {\n+      walletId = walletData.id;\n+    }\n+    if (!walletId) {\n+      throw new Error(\n+        this.context.logger.error(\"Failed to retrieve the related wallet from permit\", { address }).logMessage.raw\n+      );\n+    }\n+\n+    const { data: partnerData } = await this._supabase.from(\"partners\").select(\"id\").eq(\"wallet_id\", walletId).single();\n+\n+    if (!partnerData) {\n+      const { data: insertedPartner, error } = await this._supabase\n+        .from(\"partners\")\n+        .insert({\n+          wallet_id: walletId,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedPartner) {\n+        console.error(\"Failed to insert a new token:\", error);\n+      } else {\n+        partnerId = insertedPartner.id;\n+      }\n+    } else {\n+      partnerId = partnerData.id;\n+    }\n+    if (!partnerId) {\n+      throw new Error(\n+        this.context.logger.error(\"Failed to retrieve the related partner from permit\", { address }).logMessage.raw","score":{"reward":1.998,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":87.94500000000002,"syllables":8,"sentences":1,"score":0.7205499999999998},"multiplier":1,"relevance":0.9}},{"id":1966997175,"content":"```suggestion\r\n      });\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1966997175","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -269,26 +269,117 @@ export class PermitGenerationModule extends BaseModule {\n         .select(\"id\")\n         .single();\n       if (!newLocationData || error) {\n-        console.error(\"Failed to create a new location\", error);\n+        this.context.logger.error(\"Failed to create a new location\", error);\n       } else {\n         locationId = newLocationData.id;\n       }\n     } else {\n       locationId = locationData.id;\n     }\n     if (!locationId) {\n-      throw new Error(\n-        this.context.logger.error(\"Failed to retrieve the related location from issue\", { issue }).logMessage.raw\n-      );\n+      throw this.context.logger.error(\"Failed to retrieve the related location from issue\", { issue }).logMessage.raw;\n     }\n     return locationId;\n   }\n \n+  async _getOrCreateToken(address: string, network: number) {\n+    let tokenId: number | null = null;\n+\n+    const { data: tokenData } = await this._supabase\n+      .from(\"tokens\")\n+      .select(\"id\")\n+      .eq(\"address\", address)\n+      .eq(\"network\", network)\n+      .single();\n+\n+    if (!tokenData) {\n+      const { data: insertedToken, error } = await this._supabase\n+        .from(\"tokens\")\n+        .insert({\n+          address,\n+          network,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedToken) {\n+        this.context.logger.error(\"Failed to insert a new token:\", error);\n+      } else {\n+        tokenId = insertedToken.id;\n+      }\n+    } else {\n+      tokenId = tokenData.id;\n+    }\n+    if (!tokenId) {\n+      throw this.context.logger.error(\"Failed to retrieve the related token from permit\", {\n+        address,\n+        network,\n+      }).logMessage.raw;","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.8}},{"id":1966997282,"content":"```suggestion\r\n      throw this.context.logger.error(\"Failed to retrieve the related location from issue\", { issue });\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1966997282","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -269,26 +269,117 @@ export class PermitGenerationModule extends BaseModule {\n         .select(\"id\")\n         .single();\n       if (!newLocationData || error) {\n-        console.error(\"Failed to create a new location\", error);\n+        this.context.logger.error(\"Failed to create a new location\", error);\n       } else {\n         locationId = newLocationData.id;\n       }\n     } else {\n       locationId = locationData.id;\n     }\n     if (!locationId) {\n-      throw new Error(\n-        this.context.logger.error(\"Failed to retrieve the related location from issue\", { issue }).logMessage.raw\n-      );\n+      throw this.context.logger.error(\"Failed to retrieve the related location from issue\", { issue }).logMessage.raw;","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1966997402,"content":"```suggestion\r\n      throw this.context.logger.error(\"Failed to retrieve the related wallet from permit\", { address });\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1966997402","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -269,26 +269,117 @@ export class PermitGenerationModule extends BaseModule {\n         .select(\"id\")\n         .single();\n       if (!newLocationData || error) {\n-        console.error(\"Failed to create a new location\", error);\n+        this.context.logger.error(\"Failed to create a new location\", error);\n       } else {\n         locationId = newLocationData.id;\n       }\n     } else {\n       locationId = locationData.id;\n     }\n     if (!locationId) {\n-      throw new Error(\n-        this.context.logger.error(\"Failed to retrieve the related location from issue\", { issue }).logMessage.raw\n-      );\n+      throw this.context.logger.error(\"Failed to retrieve the related location from issue\", { issue }).logMessage.raw;\n     }\n     return locationId;\n   }\n \n+  async _getOrCreateToken(address: string, network: number) {\n+    let tokenId: number | null = null;\n+\n+    const { data: tokenData } = await this._supabase\n+      .from(\"tokens\")\n+      .select(\"id\")\n+      .eq(\"address\", address)\n+      .eq(\"network\", network)\n+      .single();\n+\n+    if (!tokenData) {\n+      const { data: insertedToken, error } = await this._supabase\n+        .from(\"tokens\")\n+        .insert({\n+          address,\n+          network,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedToken) {\n+        this.context.logger.error(\"Failed to insert a new token:\", error);\n+      } else {\n+        tokenId = insertedToken.id;\n+      }\n+    } else {\n+      tokenId = tokenData.id;\n+    }\n+    if (!tokenId) {\n+      throw this.context.logger.error(\"Failed to retrieve the related token from permit\", {\n+        address,\n+        network,\n+      }).logMessage.raw;\n+    }\n+\n+    return tokenId;\n+  }\n+\n+  async _getOrCreatePartner(address: string) {\n+    let walletId: number | null = null;\n+    let partnerId: number | null = null;\n+\n+    const { data: walletData } = await this._supabase.from(\"wallets\").select(\"id\").eq(\"address\", address).single();\n+\n+    if (!walletData) {\n+      const { data: insertedWallet, error } = await this._supabase\n+        .from(\"wallets\")\n+        .insert({\n+          address,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedWallet) {\n+        this.context.logger.error(\"Failed to insert a new wallet:\", error);\n+      } else {\n+        walletId = insertedWallet.id;\n+      }\n+    } else {\n+      walletId = walletData.id;\n+    }\n+    if (!walletId) {\n+      throw this.context.logger.error(\"Failed to retrieve the related wallet from permit\", { address }).logMessage.raw;","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1966997494,"content":"```suggestion\r\n      throw this.context.logger.error(\"Failed to retrieve the related partner from permit\", { address });\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1966997494","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -269,26 +269,117 @@ export class PermitGenerationModule extends BaseModule {\n         .select(\"id\")\n         .single();\n       if (!newLocationData || error) {\n-        console.error(\"Failed to create a new location\", error);\n+        this.context.logger.error(\"Failed to create a new location\", error);\n       } else {\n         locationId = newLocationData.id;\n       }\n     } else {\n       locationId = locationData.id;\n     }\n     if (!locationId) {\n-      throw new Error(\n-        this.context.logger.error(\"Failed to retrieve the related location from issue\", { issue }).logMessage.raw\n-      );\n+      throw this.context.logger.error(\"Failed to retrieve the related location from issue\", { issue }).logMessage.raw;\n     }\n     return locationId;\n   }\n \n+  async _getOrCreateToken(address: string, network: number) {\n+    let tokenId: number | null = null;\n+\n+    const { data: tokenData } = await this._supabase\n+      .from(\"tokens\")\n+      .select(\"id\")\n+      .eq(\"address\", address)\n+      .eq(\"network\", network)\n+      .single();\n+\n+    if (!tokenData) {\n+      const { data: insertedToken, error } = await this._supabase\n+        .from(\"tokens\")\n+        .insert({\n+          address,\n+          network,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedToken) {\n+        this.context.logger.error(\"Failed to insert a new token:\", error);\n+      } else {\n+        tokenId = insertedToken.id;\n+      }\n+    } else {\n+      tokenId = tokenData.id;\n+    }\n+    if (!tokenId) {\n+      throw this.context.logger.error(\"Failed to retrieve the related token from permit\", {\n+        address,\n+        network,\n+      }).logMessage.raw;\n+    }\n+\n+    return tokenId;\n+  }\n+\n+  async _getOrCreatePartner(address: string) {\n+    let walletId: number | null = null;\n+    let partnerId: number | null = null;\n+\n+    const { data: walletData } = await this._supabase.from(\"wallets\").select(\"id\").eq(\"address\", address).single();\n+\n+    if (!walletData) {\n+      const { data: insertedWallet, error } = await this._supabase\n+        .from(\"wallets\")\n+        .insert({\n+          address,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedWallet) {\n+        this.context.logger.error(\"Failed to insert a new wallet:\", error);\n+      } else {\n+        walletId = insertedWallet.id;\n+      }\n+    } else {\n+      walletId = walletData.id;\n+    }\n+    if (!walletId) {\n+      throw this.context.logger.error(\"Failed to retrieve the related wallet from permit\", { address }).logMessage.raw;\n+    }\n+\n+    const { data: partnerData } = await this._supabase.from(\"partners\").select(\"id\").eq(\"wallet_id\", walletId).single();\n+\n+    if (!partnerData) {\n+      const { data: insertedPartner, error } = await this._supabase\n+        .from(\"partners\")\n+        .insert({\n+          wallet_id: walletId,\n+        })\n+        .select(\"id\")\n+        .single();\n+\n+      if (error || !insertedPartner) {\n+        this.context.logger.error(\"Failed to insert a new token:\", error);\n+      } else {\n+        partnerId = insertedPartner.id;\n+      }\n+    } else {\n+      partnerId = partnerData.id;\n+    }\n+    if (!partnerId) {\n+      throw this.context.logger.error(\"Failed to retrieve the related partner from permit\", { address }).logMessage.raw;","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1972978173,"content":"Maybe you should rename this `SUPABASE_PRIVATE_KEY` because we already have `SUPABASE_KEY` used for the workflow which uses the anon key.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1972978173","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,21 @@\n+name: Backfill permits table\n+on:\n+  workflow_dispatch:\n+\n+jobs:\n+  backfill:\n+    name: Backfill permits table\n+    runs-on: ubuntu-latest\n+    env:\n+      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n+      SUPABASE_URL: ${{ secrets.SUPABASE_URL }}\n+      SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }} # needs to be secret key not anon key","score":{"reward":4.671,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":75.76500000000001,"syllables":24,"sentences":1,"score":0.8423499999999998},"multiplier":1,"relevance":0.9}},{"id":1975441853,"content":"wouldn't this be optional since only required for the script? Or even not there at all because we should not have it at runtime?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1975441853","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -4,6 +4,7 @@ import { LOG_LEVEL } from \"@ubiquity-os/ubiquity-os-logger\";\n const envConfigSchema = Type.Object({\n   SUPABASE_URL: Type.String(),\n   SUPABASE_KEY: Type.String(),\n+  SUPABASE_PRIVATE_KEY: Type.String(),","score":{"reward":4.992,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":85.85950000000001,"syllables":32,"sentences":2,"score":0.7414049999999999},"multiplier":1,"relevance":0.8}},{"id":1975443246,"content":"```suggestion\r\nconst _supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1975443246","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -18,7 +18,7 @@ import { GitHubIssueComment } from \"../src/github-types\";\n import { IssueComment } from \"@octokit/graphql-schema\";\n import { QUERY_COMMENT_DETAILS } from \"../src/types/requests\";\n \n-const _supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);\n+const _supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_PRIVATE_KEY);","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.8}},{"id":1975443817,"content":"Just above you assign it to the same name so it should be fine","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1975443817","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -18,7 +18,7 @@ import { GitHubIssueComment } from \"../src/github-types\";\n import { IssueComment } from \"@octokit/graphql-schema\";\n import { QUERY_COMMENT_DETAILS } from \"../src/types/requests\";\n \n-const _supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_KEY);\n+const _supabase = createClient<Database>(process.env.SUPABASE_URL, process.env.SUPABASE_PRIVATE_KEY);","score":{"reward":2.484,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":95.93928571428573,"syllables":16,"sentences":1,"score":0.6406071428571427},"multiplier":1,"relevance":0.6}},{"id":2676082415,"content":"@zugdev I'll have a look at it tomorrow. Does it retroactively need to fix previous permits, since the previous ones did not save this info?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2676082415","commentType":"PULL_COLLABORATOR","score":{"reward":4.683,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":66.74000000000002,"syllables":39,"sentences":2,"score":0.9325999999999998},"multiplier":1,"relevance":0.7}},{"id":2677336654,"content":"Tested and the table seems to be properly populated:\r\n<img width=\"1165\" alt=\"image\" src=\"https://github.com/user-attachments/assets/22c2d676-dd3d-42aa-b0ab-d468ca498096\" />","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2677336654","commentType":"PULL_COLLABORATOR","score":{"reward":5.859,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":73.24769230769233,"syllables":37,"sentences":2,"score":0.8675230769230766},"multiplier":1,"relevance":0.7}},{"id":2684638477,"content":"@zugdev What do you think about adding an Action that can be manually triggered to run your script to backfill the data? It seems to me that it would be the easiest way to run it, and that we could run it multiple times if we ever need it again.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2684638477","commentType":"PULL_COLLABORATOR","score":{"reward":7.2,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":50,"wordValue":0.1,"result":2.38},"readability":{"fleschKincaid":73.17200000000001,"syllables":64,"sentences":2,"score":0.8682799999999999},"multiplier":1,"relevance":0.8}},{"id":2687062067,"content":"@zugdev usually when RPC times out I just relaunch tests until it picks an RPC that is fast enough. Let me restart it.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2687062067","commentType":"PULL_COLLABORATOR","score":{"reward":2.955,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":84.8146739130435,"syllables":30,"sentences":2,"score":0.7518532608695649},"multiplier":1,"relevance":0.5}},{"id":2692637734,"content":"@zugdev please resolve conflicts first","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2692637734","commentType":"PULL_COLLABORATOR","score":{"reward":1.224,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":66.40000000000003,"syllables":8,"sentences":1,"score":0.9359999999999996},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2629088307,"effect":{"addition":101,"deletion":0},"reward":3.03,"priority":3},{"reviewId":2635941607,"effect":{"addition":376,"deletion":212},"reward":17.64,"priority":3},{"reviewId":2646780719,"effect":{"addition":65,"deletion":13},"reward":2.34,"priority":3},{"reviewId":2650801038,"effect":{"addition":7,"deletion":2},"reward":0.27,"priority":3},{"reviewId":2652257979,"effect":{"addition":1,"deletion":6},"reward":0.21,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 68.703 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>5</td><td>23.49</td></tr><tr><td>Review</td><td>Comment</td><td>19</td><td>45.213</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285\" target=\"_blank\" rel=\"noopener\">#285</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+101 -0</td><td>3</td><td>3.03</td></tr><tr><td>+376 -212</td><td>3</td><td>17.64</td></tr><tr><td>+65 -13</td><td>3</td><td>2.34</td></tr><tr><td>+7 -2</td><td>3</td><td>0.27</td></tr><tr><td>+1 -6</td><td>3</td><td>0.21</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#pullrequestreview-2652257979\" target=\"_blank\" rel=\"noopener\">I just set the private key in the environment.</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.63</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1963090788\" target=\"_blank\" rel=\"noopener\">Should use our logger</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.248</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1963091009\" target=\"_blank\" rel=\"noopener\">Should use our logger</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.248</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1963092252\" target=\"_blank\" rel=\"noopener\">Why not directly throwing the &#96;logger.error&#96; here?</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.079</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1963093160\" target=\"_blank\" rel=\"noopener\">Here as well the &#96;logger.error&#96; can be directly thrown n&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.9</td><td>3</td><td>3.942</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1963093861\" target=\"_blank\" rel=\"noopener\">Same as the two other instances</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.9</td><td>3</td><td>1.998</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1966997175\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion});&#96;&#96;&#96;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.8</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1966997282\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionthrow this.context.logger.error&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1966997402\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionthrow this.context.logger.error&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1966997494\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionthrow this.context.logger.error&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1972978173\" target=\"_blank\" rel=\"noopener\">Maybe you should rename this &#96;SUPABASE_PRIVATE_KEY&#96; beca&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.9</td><td>3</td><td>4.671</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1975441853\" target=\"_blank\" rel=\"noopener\">wouldn't this be optional since only required for the script? Or&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.992</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1975443246\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionconst _supabase = createClient&lt;Dat&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.8</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#discussion_r1975443817\" target=\"_blank\" rel=\"noopener\">Just above you assign it to the same name so it should be fine</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.6</td><td>3</td><td>2.484</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2676082415\" target=\"_blank\" rel=\"noopener\">@zugdev I'll have a look at it tomorrow. Does it retroactively n&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.683</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2677336654\" target=\"_blank\" rel=\"noopener\">Tested and the table seems to be properly populated:&lt;img wi&hellip;</a></h6></td><td><details><summary>2.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.7</td><td>3</td><td>5.859</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2684638477\" target=\"_blank\" rel=\"noopener\">@zugdev What do you think about adding an Action that can be man&hellip;</a></h6></td><td><details><summary>2.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 50&#13;  wordValue: 0.1&#13;  result: 2.38&#13;</pre></details></td><td>0.8</td><td>3</td><td>7.2</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2687062067\" target=\"_blank\" rel=\"noopener\">@zugdev usually when RPC times out I just relaunch tests until i&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.5</td><td>3</td><td>2.955</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/285#issuecomment-2692637734\" target=\"_blank\" rel=\"noopener\">@zugdev please resolve conflicts first</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.224</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_46.json","json":{"gentlementlegen":{"userId":9807008,"total":50,"task":{"reward":50,"multiplier":0.5},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 50 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>0.5</td><td>50</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"whilefoo":{"userId":139262667,"total":69.736,"task":{"reward":50,"multiplier":0.5},"comments":[{"id":1691833637,"content":"I made these changes in #67","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691833637","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -175,14 +179,15 @@ export class PermitGenerationModule implements Module {\n     let permitFeeAmountDecimal = new Decimal(0);\n     for (const [_, rewardResult] of Object.entries(result)) {\n       // accumulate total permit fee amount\n-      const totalAfterFee = +(new Decimal(rewardResult.total).mul(feeRateDecimal));\n+      const totalAfterFee = +new Decimal(rewardResult.total).mul(feeRateDecimal);","score":{"reward":0.948,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":116.14500000000001,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.6}},{"id":1691840534,"content":"I usually make a typebox schema for env in a separate file which validates the env and exports it. This makes it easier as there is only one entry point and it fails at the start of the program","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691840534","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -158,12 +158,16 @@ export class PermitGenerationModule implements Module {\n         return result;\n       }\n     }\n-    \n+\n     // Get treasury github user id\n     const octokit = getOctokitInstance();\n-    const { data: treasuryGithubData } = await octokit.users.getByUsername({ username: process.env.PERMIT_TREASURY_GITHUB_USERNAME });\n+    const { data: treasuryGithubData } = await octokit.users.getByUsername({\n+      username: process.env.PERMIT_TREASURY_GITHUB_USERNAME,","score":{"reward":4.368,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":69.90403846153849,"syllables":54,"sentences":2,"score":0.9009596153846151},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2199898799,"effect":{"addition":556,"deletion":165},"reward":14.42,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 69.736 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>0.5</td><td>50</td></tr><tr><td>Review</td><td>Code Review</td><td>1</td><td>14.42</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>5.316</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58\" target=\"_blank\" rel=\"noopener\">#58</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+556 -165</td><td>2</td><td>14.42</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691833637\" target=\"_blank\" rel=\"noopener\">I made these changes in #67</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.6</td><td>2</td><td>0.948</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691840534\" target=\"_blank\" rel=\"noopener\">I usually make a typebox schema for env in a separate file which&hellip;</a></h6></td><td><details><summary>2.15</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.15&#13;</pre></details></td><td>0.8</td><td>2</td><td>4.368</td></tr></tbody></table></details>"},"0x4007":{"total":45.575,"userId":4975670,"comments":[{"id":2620289405,"content":"@gentlementlegen @whilefoo this seems very wrong that it assigned you.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/46#issuecomment-2620289405","commentType":"ISSUE_AUTHOR","score":{"reward":0.452,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":44.405,"syllables":18,"sentences":1,"score":0.84405},"multiplier":1,"relevance":0.2}},{"id":2620290902,"content":"There's a bug from linking from here\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/253","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/46#issuecomment-2620290902","commentType":"ISSUE_AUTHOR","score":{"reward":3.632,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":63.613552631578955,"syllables":30,"sentences":2,"score":0.9638644736842105},"multiplier":1,"relevance":0.8}},{"id":2369761174,"content":"Left some remarks on https://github.com/ubiquity/ubiquibot-config/pull/18/files","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/46","commentType":"ISSUE_SPECIFICATION","score":{"reward":1.83,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":50.56057692307695,"syllables":23,"sentences":2,"score":0.9056057692307695},"multiplier":1,"relevance":1}},{"id":1682995824,"content":"Where did you put these?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1682995824","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -24,15 +27,11 @@ export enum CommentType {\n    */\n   CONTRIBUTOR = 0b100000,\n   /**\n-   * A user comment action on a {@link CommentType.ISSUE} or {@link CommentType.REVIEW}\n-   */\n-  COMMENTED = 0b1000000,\n-  /**\n-   * Pull request opening item\n-   */\n-  TASK = 0b10000000,","score":{"reward":0.828,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.6}},{"id":1682997486,"content":"Just be sure that for all of these, if no config is present, to \"disable\"","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1682997486","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,10 +1,6 @@\n import { Static, Type } from \"@sinclair/typebox\";\n \n export const githubCommentConfigurationType = Type.Object({\n-  /**\n-   * Enables or disables this module\n-   */\n-  enabled: Type.Boolean({ default: true }),","score":{"reward":2.368,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":84.45000000000003,"syllables":19,"sentences":1,"score":0.7554999999999997},"multiplier":1,"relevance":0.8}},{"id":1683002721,"content":"Did you test that this reward boost only is applied for the spec and not the other comments? \nI'm concerned cause the logic is so unique.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1683002721","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -286,7 +286,7 @@\n       {\n         \"content\": \"Can somebody work on generating a new `X25519_PRIVATE_KEY` for the ubiquibot organization? We need to share it for development purposes. 1. Generate a new key 2. Encrypt a new `evmPrivateKeyEncrypted` (no funds!) and add to the org bot config 3. Add the shared test key to the `comment-incentives` readme.  https://github.com/ubiquibot/comment-incentives/pull/21/commits/567419d9688e92edf698f64c697f1a7cafe1d02e _Originally posted by @pavlovcik in https://github.com/ubiquibot/comment-incentives/issues/19#issuecomment-1948876653_\",\n         \"url\": \"https://github.com/ubiquibot/comment-incentives/issues/22\",\n-        \"type\": \"ISSUE|ISSUER|SPECIFICATION\",\n+        \"type\": \"ISSUE_SPECIFICATION\",","score":{"reward":3.978,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":80.33250000000004,"syllables":36,"sentences":2,"score":0.7966749999999996},"multiplier":1,"relevance":0.9}},{"id":1683006404,"content":"Unexpected different formatter settings.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1683006404","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.264,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":-29.87499999999997,"syllables":11,"sentences":1,"score":0},"multiplier":1,"relevance":0.3}},{"id":1683009538,"content":"Can you explain what these do?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1683009538","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -56,17 +56,12 @@ with:\n     evmPrivateEncrypted: \"encrypted-key\"\n     erc20RewardToken: \"0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d\"\n     incentives:\n-      enabled: true\n       requirePriceLabel: true\n       contentEvaluator:\n-        enabled: true\n       userExtractor:\n-        enabled: true\n         redeemTask: true\n       dataPurge:","score":{"reward":1.106,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":102.045,"syllables":7,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":1683178881,"content":"Okay what is content evaluator, redeem task, and data purge?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1683178881","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -56,17 +56,12 @@ with:\n     evmPrivateEncrypted: \"encrypted-key\"\n     erc20RewardToken: \"0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d\"\n     incentives:\n-      enabled: true\n       requirePriceLabel: true\n       contentEvaluator:\n-        enabled: true\n       userExtractor:\n-        enabled: true\n         redeemTask: true\n       dataPurge:","score":{"reward":1.61,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":52.86500000000001,"syllables":17,"sentences":1,"score":0.9286500000000001},"multiplier":1,"relevance":0.7}},{"id":1691156824,"content":"```suggestion\r\n  readonly _configuration: ContentEvaluatorConfiguration | null = configuration.incentives.contentEvaluator;\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691156824","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,14 +15,14 @@ import { Value } from \"@sinclair/typebox/value\";\n  */\n export class ContentEvaluatorModule implements Module {\n   readonly _openAi = new OpenAI({ apiKey: OPENAI_API_KEY });\n-  readonly _configuration: ContentEvaluatorConfiguration = configuration.incentives.contentEvaluator;\n+  readonly _configuration: ContentEvaluatorConfiguration | undefined | null = configuration.incentives.contentEvaluator;","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1691157343,"content":"```suggestion\r\n  readonly _configuration: DataPurgeConfiguration | null = configuration.incentives.dataPurge;\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691157343","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -8,14 +8,14 @@ import { Module, Result } from \"./processor\";\n  * Removes the data in the comments that we do not want to be processed.\n  */\n export class DataPurgeModule implements Module {\n-  readonly _configuration: DataPurgeConfiguration = configuration.incentives.dataPurge;\n+  readonly _configuration: DataPurgeConfiguration | undefined | null = configuration.incentives.dataPurge;","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1691157666,"content":"```suggestion\r\n  private readonly _configuration: FormattingEvaluatorConfiguration | null =\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691157666","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -17,16 +17,26 @@ interface Multiplier {\n }\n \n export class FormattingEvaluatorModule implements Module {\n-  private readonly _configuration: FormattingEvaluatorConfiguration = configuration.incentives.formattingEvaluator;\n+  private readonly _configuration: FormattingEvaluatorConfiguration | undefined | null =","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1691158044,"content":"```suggestion\r\n  private readonly _configuration: GithubCommentConfiguration | null =\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691158044","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -22,7 +23,8 @@ interface SortedTasks {\n  * Posts a GitHub comment according to the given results.\n  */\n export class GithubCommentModule implements Module {\n-  private readonly _configuration: GithubCommentConfiguration = configuration.incentives.githubComment;\n+  private readonly _configuration: GithubCommentConfiguration | undefined | null =","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1691158538,"content":"```suggestion\r\n  readonly _configuration: PermitGenerationConfiguration | null = configuration.incentives.permitGeneration;\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691158538","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -33,7 +33,7 @@ interface Payload {\n }\n \n export class PermitGenerationModule implements Module {\n-  readonly _configuration: PermitGenerationConfiguration = configuration.incentives.permitGeneration;\n+  readonly _configuration: PermitGenerationConfiguration | undefined | null = configuration.incentives.permitGeneration;","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1691159526,"content":"Make sure to load this in at the top of the file, and to throw an error if its missing instead of potentially having this be invalid when its needed. I generally always make a helper function to load all the environment variables right at runtime start, and throw a detailed error if its missing any.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691159526","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -158,12 +158,16 @@ export class PermitGenerationModule implements Module {\n         return result;\n       }\n     }\n-    \n+\n     // Get treasury github user id\n     const octokit = getOctokitInstance();\n-    const { data: treasuryGithubData } = await octokit.users.getByUsername({ username: process.env.PERMIT_TREASURY_GITHUB_USERNAME });\n+    const { data: treasuryGithubData } = await octokit.users.getByUsername({\n+      username: process.env.PERMIT_TREASURY_GITHUB_USERNAME,","score":{"reward":6.042,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":56,"wordValue":0.1,"result":2.47},"readability":{"fleschKincaid":56.04714285714289,"syllables":81,"sentences":2,"score":0.9604714285714289},"multiplier":1,"relevance":0.95}},{"id":1691161351,"content":"```suggestion\r\n      const totalAfterFee = Number(new Decimal(rewardResult.total).mul(feeRateDecimal));\r\n```\r\nSeems that you discarded all my review changes from the other day. These should be wrapped with `Number();` instead of prefixing with `+` be sure to also do for the others.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691161351","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -175,14 +179,15 @@ export class PermitGenerationModule implements Module {\n     let permitFeeAmountDecimal = new Decimal(0);\n     for (const [_, rewardResult] of Object.entries(result)) {\n       // accumulate total permit fee amount\n-      const totalAfterFee = +(new Decimal(rewardResult.total).mul(feeRateDecimal));\n+      const totalAfterFee = +new Decimal(rewardResult.total).mul(feeRateDecimal);","score":{"reward":4.313,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":84.17956896551725,"syllables":37,"sentences":2,"score":0.7582043103448275},"multiplier":1,"relevance":0.95}},{"id":1691162076,"content":"I never liked how you leave in all this whitespace. In the future it would be nice to fix your HTML compressor/renderer.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691162076","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -52,52 +52,52 @@\n       {\n         \"content\": \"Link below for conversation context. It was to me. Anyways you need to create a new private key for this task!\",\n         \"url\": \"https://github.com/ubiquibot/comment-incentives/issues/22#issuecomment-1948930217\",\n-        \"type\": \"ISSUE|ISSUER|COMMENTED\"\n+        \"type\": \"ISSUE_AUTHOR\"\n       },\n       {\n         \"content\": \"In the repository secrets I think I need to change the key to match @gitcoindev's\",\n         \"url\": \"https://github.com/ubiquibot/comment-incentives/issues/22#issuecomment-1949201722\",\n-        \"type\": \"ISSUE|ISSUER|COMMENTED\"\n+        \"type\": \"ISSUE_AUTHOR\"\n       },\n       {\n         \"content\": \"I just changed it to `627H-BcWbcp_O3YmQGIA6MqgxVsFuplFCA9DK3iC7GQ` I hope that it doesn't break production for some reason (it should get it from Netlify secrets, but not sure if we implemented this correctly!) I fear that we might need to build a feature for this to support development key pair and production. Unfortunately I'm already winding down for the day so I'll leave you guys to try and investigate.\",\n         \"url\": \"https://github.com/ubiquibot/comment-incentives/issues/22#issuecomment-1949203681\",\n-        \"type\": \"ISSUE|ISSUER|COMMENTED\"\n+        \"type\": \"ISSUE_AUTHOR\"\n       },\n       {\n         \"content\": \"I don't understand what you mean by this\",\n         \"url\": \"https://github.com/ubiquibot/comment-incentives/issues/22#issuecomment-1949633751\",\n-        \"type\": \"ISSUE|ISSUER|COMMENTED\"\n+        \"type\": \"ISSUE_AUTHOR\"\n       },\n       {\n         \"content\": \"I'll investigate more on my computer later.\",\n         \"url\": \"https://github.com/ubiquibot/comment-incentives/issues/22#issuecomment-1949639054\",\n-        \"type\": \"ISSUE|ISSUER|COMMENTED\"\n+        \"type\": \"ISSUE_AUTHOR\"\n       },\n       {\n         \"content\": \"Will it be an issue if I revert to the commit and secret that I had before? It was the production x25519 key in the GitHub repository secrets when it was working like eight hours ago.  Posting this message before checking on my computer to get you before you log off.\",\n         \"url\": \"https://github.com/ubiquibot/comment-incentives/issues/22#issuecomment-1949642845\",\n-        \"type\": \"ISSUE|ISSUER|COMMENTED\"\n+        \"type\": \"ISSUE_AUTHOR\"\n       },\n       {\n         \"content\": \"Can somebody work on generating a new `X25519_PRIVATE_KEY` for the ubiquibot organization? We need to share it for development purposes. 1. Generate a new key 2. Encrypt a new `evmPrivateKeyEncrypted` (no funds!) and add to the org bot config 3. Add the shared test key to the `comment-incentives` readme.  https://github.com/ubiquibot/comment-incentives/pull/21/commits/567419d9688e92edf698f64c697f1a7cafe1d02e _Originally posted by @pavlovcik in https://github.com/ubiquibot/comment-incentives/issues/19#issuecomment-1948876653_\",\n         \"url\": \"https://github.com/ubiquibot/comment-incentives/issues/22\",\n-        \"type\": \"ISSUE|ISSUER|SPECIFICATION\"\n+        \"type\": \"ISSUE_SPECIFICATION\"\n       },\n       {\n         \"content\": \"Need to document a private key too\",\n         \"url\": \"https://github.com/ubiquibot/comment-incentives/pull/25#issuecomment-1949021356\",\n-        \"type\": \"REVIEW|COLLABORATOR|COMMENTED\"\n+        \"type\": \"PULL_COLLABORATOR\"\n       },\n       {\n         \"content\": \"I was editing this right now but was too slow to push.\",\n         \"url\": \"https://github.com/ubiquibot/comment-incentives/pull/25#issuecomment-1949196677\",\n-        \"type\": \"REVIEW|COLLABORATOR|COMMENTED\"\n+        \"type\": \"PULL_COLLABORATOR\"\n       },\n       {\n         \"content\": \"I am quoting some code! <task-lists sortable=\\\"\\\"> <table class=\\\"d-block user-select-contain\\\" data-paste-markdown-skip=\\\"\\\">   <tbody class=\\\"d-block\\\">     <tr class=\\\"d-block\\\">       <td class=\\\"d-block comment-body markdown-body  js-comment-body\\\">           <details open=\\\"\\\">       <summary>         <b>           <h3 dir=\\\"auto\\\">             <a href=\\\"https://pay.ubq.fi?claim=W3sidHlwZSI6ImVyYzIwLXBlcm1pdCIsInBlcm1pdCI6eyJwZXJtaXR0ZWQiOnsidG9rZW4iOiIweGU5MUQxNTNFMGI0MTUxOEEyQ2U4RGQzRDc5NDRGYTg2MzQ2M2E5N2QiLCJhbW91bnQiOiIyODAwMDAwMDAwMDAwMDAwMDAifSwibm9uY2UiOiIzODYyOTY0MDg5ODkzNzI1MzYwMjc5MjAyNzMxMjA2NzgzMTY0NDI2OTA3NTY2NTIxNzQ0NDkyNjQ1MTA0NTIyODU4Nzk1MjgzMDk0NCIsImRlYWRsaW5lIjoiNTc4OTYwNDQ2MTg2NTgwOTc3MTE3ODU0OTI1MDQzNDM5NTM5MjY2MzQ5OTIzMzI4MjAyODIwMTk3Mjg3OTIwMDM5NTY1NjQ4MTk5NjcifSwidHJhbnNmZXJEZXRhaWxzIjp7InRvIjoiMHgwZkMxYjkwOWJhOTI2NUE4NDZiODJDRjRDRTM1MmZjM2U3RWVCMkVEIiwicmVxdWVzdGVkQW1vdW50IjoiMjgwMDAwMDAwMDAwMDAwMDAwIn0sIm93bmVyIjoiMHg0NENhMTVEYjEwMWZEMWMxOTQ0NjdEYjZBRjBjNjdDNkJiRjRBQjUxIiwic2lnbmF0dXJlIjoiMHhiMzE4MmIwNjJiMDJmMjEwZTIzN2UzODQxMDNmNGE4YTUwMDNjMmYyODhiMDY5Nzg4MTY1ZDkwOWY4ODZmYTMzNTM4MjJlYjA5MGI1ODdjMWFiNWFiOTNjNTVlZDhkOTdiYzM3YzBmZjZlZDJhMWRkM2U1NjQ4M2JlMzk5MWIwNTFjIiwibmV0d29ya0lkIjoxMDB9XQ==\\\" rel=\\\"nofollow\\\">               [ 0.28 WXDAI ]             </a>           </h3>           <h6 dir=\\\"auto\\\">             <a class=\\\"user-mention notranslate\\\" data-hovercard-type=\\\"user\\\" data-hovercard-url=\\\"/users/gentlementlegen/hovercard\\\" data-octo-click=\\\"hovercard-link-click\\\" data-octo-dimensions=\\\"link_type:self\\\" href=\\\"https://github.com/gentlementlegen\\\">@gentlementlegen</a>           </h6>         </b>       </summary>       <h6 dir=\\\"auto\\\">Contributions Overview</h6>       <table role=\\\"table\\\">         <thead>           <tr>             <th>View</th>             <th>Contribution</th>             <th>Count</th>             <th>Reward</th>           </tr>         </thead>         <tbody>                      <tr>             <td>Issue</td>             <td>Specification</td>             <td>1</td>             <td>0.1</td>           </tr>           <tr>             <td>Issue</td>             <td>Comment</td>             <td>7</td>             <td>0.18</td>           </tr>         </tbody>       </table>       <h6 dir=\\\"auto\\\">Conversation Incentives</h6>       <table role=\\\"table\\\">         <thead>           <tr>             <th>Comment</th>             <th>Formatting</th>             <th>Relevance</th>             <th>Reward</th>           </tr>         </thead>         <tbody>                      <tr>             <td>               <h6 dir=\\\"auto\\\">                 <a href=\\\"https://github.com/Meniole/bot/issues/3\\\" data-hovercard-type=\\\"issue\\\" data-hovercard-url=\\\"/Meniole/bot/issues/3/hovercard\\\">issue 2</a>               </h6>             </td>             <td>             <details>               <summary>                 0.2               </summary>               <pre class=\\\"notranslate\\\">p:   count: 2   score: 1 </pre>              </details>             </td>             <td>0.5</td>             <td>0.1</td>           </tr>           <tr>             <td>               <h6 dir=\\\"auto\\\">                 <a href=\\\"https://github.com/Meniole/bot/issues/3#issuecomment-2076607863\\\" data-hovercard-type=\\\"issue\\\" data-hovercard-url=\\\"/Meniole/bot/issues/3/hovercard\\\">test</a>               </h6>             </td>             <td>             <details>               <summary>                 0.2               </summary>               <pre class=\\\"notranslate\\\">p:   count: 1   score: 1 </pre>              </details>             </td>             <td>-</td>             <td>-</td>           </tr>           <tr>             <td>               <h6 dir=\\\"auto\\\">                 <a href=\\\"https://github.com/Meniole/bot/issues/3#issuecomment-2076628437\\\" data-hovercard-type=\\\"issue\\\" data-hovercard-url=\\\"/Meniole/bot/issues/3/hovercard\\\">```hey```</a>               </h6>             </td>             <td>             <details>               <summary>                 0.4               </summary>               <pre class=\\\"notranslate\\\">p:   count: 1   score: 1 code:   count: 1   score: 1 </pre>              </details>             </td>             <td>-</td>             <td>-</td>           </tr>           <tr>             <td>               <h6 dir=\\\"auto\\\">                 <a href=\\\"https://github.com/Meniole/bot/issues/3#issuecomment-2076628605\\\" data-hovercard-type=\\\"issue\\\" data-hovercard-url=\\\"/Meniole/bot/issues/3/hovercard\\\">``` heyo ```</a>               </h6>             </td>             <td>             <details>               <summary>                 0.4               </summary>               <pre class=\\\"notranslate\\\">p:   count: 1   score: 1 code:   count: 1   score: 1 </pre>              </details>             </td>             <td>-</td>             <td>-</td>           </tr>           <tr>             <td>               <h6 dir=\\\"auto\\\">                 <a href=\\\"https://github.com/Meniole/bot/issues/3#issuecomment-2076632071\\\" data-hovercard-type=\\\"issue\\\" data-hovercard-url=\\\"/Meniole/bot/issues/3/hovercard\\\">gr</a>               </h6>             </td>             <td>             <details>               <summary>                 0.2               </summary>               <pre class=\\\"notranslate\\\">p:   count: 1   score: 1 </pre>              </details>             </td>             <td>-</td>             <td>-</td>           </tr>           <tr>             <td>               <h6 dir=\\\"auto\\\">                 <a href=\\\"https://github.com/Meniole/bot/issues/3#issuecomment-2076960228\\\" data-hovercard-type=\\\"issue\\\" data-hovercard-url=\\\"/Meniole/bot/issues/3/hovercard\\\">te</a>               </h6>             </td>             <td>             <details>               <summary>                 0.2               </summary>               <pre class=\\\"notranslate\\\">p:   count: 1   score: 1 </pre>              </details>             </td>             <td>-</td>             <td>-</td>           </tr>           <tr>             <td>               <h6 dir=\\\"auto\\\">                 <a href=\\\"https://github.com/Meniole/bot/issues/3#issuecomment-2076964178\\\" data-hovercard-type=\\\"issue\\\" data-hovercard-url=\\\"/Meniole/bot/issues/3/hovercard\\\">fwe</a>               </h6>             </td>             <td>             <details>               <summary>                 0.2               </summary>               <pre class=\\\"notranslate\\\">p:   count: 1   score: 1 </pre>              </details>             </td>             <td>-</td>             <td>-</td>           </tr>           <tr>             <td>               <h6 dir=\\\"auto\\\">                 <a href=\\\"https://github.com/Meniole/bot/issues/3#issuecomment-2076972544\\\" data-hovercard-type=\\\"issue\\\" data-hovercard-url=\\\"/Meniole/bot/issues/3/hovercard\\\">te</a>               </h6>             </td>             <td>             <details>               <summary>                 0.2               </summary>               <pre class=\\\"notranslate\\\">p:   count: 1   score: 1 </pre>              </details>             </td>             <td>0.9</td>             <td>0.18</td>           </tr>         </tbody>       </table>     </details>       </td>     </tr>   </tbody> </table> </task-lists> [😂](https://emojipedia.org/face-with-tears-of-joy) - elem 1 - elem 2\",","score":{"reward":1.592,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":81.13641304347829,"syllables":31,"sentences":2,"score":0.7886358695652171},"multiplier":1,"relevance":0.4}},{"id":1691163374,"content":"It is possible that I added these aforementioned changes on another pull I'm not entirely sure, but I remember adding this to my review.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691163374","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -175,14 +179,15 @@ export class PermitGenerationModule implements Module {\n     let permitFeeAmountDecimal = new Decimal(0);\n     for (const [_, rewardResult] of Object.entries(result)) {\n       // accumulate total permit fee amount\n-      const totalAfterFee = +(new Decimal(rewardResult.total).mul(feeRateDecimal));\n+      const totalAfterFee = +new Decimal(rewardResult.total).mul(feeRateDecimal);","score":{"reward":2.14,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":46.10000000000002,"syllables":40,"sentences":1,"score":0.8610000000000002},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2186089466,"effect":{"addition":436,"deletion":128},"reward":11.28,"priority":2},{"reviewId":2198825682,"effect":{"addition":132,"deletion":49},"reward":3.62,"priority":2},{"reviewId":2200821762,"effect":{"addition":12,"deletion":14},"reward":0.52,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 45.575 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>15.42</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>1.83</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>4.084</td></tr><tr><td>Review</td><td>Comment</td><td>15</td><td>24.241</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58\" target=\"_blank\" rel=\"noopener\">#58</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+436 -128</td><td>2</td><td>11.28</td></tr><tr><td>+132 -49</td><td>2</td><td>3.62</td></tr><tr><td>+12 -14</td><td>2</td><td>0.52</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/46\" target=\"_blank\" rel=\"noopener\">Left some remarks on https://github.com/ubiquity/ubiquibot-confi&hellip;</a></h6></td><td><details><summary>1.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>1</td><td>1</td><td>1.83</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/46#issuecomment-2620289405\" target=\"_blank\" rel=\"noopener\">@gentlementlegen @whilefoo this seems very wrong that it assigne&hellip;</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.452</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/46#issuecomment-2620290902\" target=\"_blank\" rel=\"noopener\">There's a bug from linking from herehttps://github.com/ubiquity&hellip;</a></h6></td><td><details><summary>1.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.8</td><td>2</td><td>3.632</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1682995824\" target=\"_blank\" rel=\"noopener\">Where did you put these?</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.6</td><td>2</td><td>0.828</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1682997486\" target=\"_blank\" rel=\"noopener\">Just be sure that for all of these, if no config is present, to &hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.368</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1683002721\" target=\"_blank\" rel=\"noopener\">Did you test that this reward boost only is applied for the spec&hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.9</td><td>2</td><td>3.978</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1683006404\" target=\"_blank\" rel=\"noopener\">Unexpected different formatter settings.</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.264</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1683009538\" target=\"_blank\" rel=\"noopener\">Can you explain what these do?</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.106</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1683178881\" target=\"_blank\" rel=\"noopener\">Okay what is content evaluator, redeem task, and data purge?</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.61</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691156824\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionreadonly _configuration: ContentEva&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691157343\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionreadonly _configuration: DataPurgeC&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691157666\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionprivate readonly _configuration: Fo&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691158044\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionprivate readonly _configuration: Gi&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691158538\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionreadonly _configuration: PermitGene&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691159526\" target=\"_blank\" rel=\"noopener\">Make sure to load this in at the top of the file, and to throw a&hellip;</a></h6></td><td><details><summary>2.47</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 56&#13;  wordValue: 0.1&#13;  result: 2.47&#13;</pre></details></td><td>0.95</td><td>2</td><td>6.042</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691161351\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionconst totalAfterFee = Number(ne&hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.95</td><td>2</td><td>4.313</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691162076\" target=\"_blank\" rel=\"noopener\">I never liked how you leave in all this whitespace. In the futur&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.4</td><td>2</td><td>1.592</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691163374\" target=\"_blank\" rel=\"noopener\">It is possible that I added these aforementioned changes on anot&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.5</td><td>2</td><td>2.14</td></tr></tbody></table></details>"},"rndquu":{"total":48.81,"userId":119500907,"comments":[{"id":2187708661,"content":"Works fine\r\nThe errors mentioned [here](https://github.com/ubiquibot/conversation-rewards/pull/58#issuecomment-2238566995) are actually present in the `development` branch so they are not caused by this PR. @gentlementlegen perhaps it makes sense to fix those errors in a separate PR.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#pullrequestreview-2187708661","commentType":"PULL_COLLABORATOR","score":{"reward":4.524,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":72.16022727272728,"syllables":46,"sentences":2,"score":0.8783977272727271},"multiplier":1,"relevance":0.6}},{"id":1682617834,"content":"@gentlementlegen I need a refresher:\r\n1. What's the difference between `ISSUE_COLLABORATOR` and `ISSUE_CONTRIBUTOR`?\r\n2. What's the difference between `PULL_COLLABORATOR` and `PULL_CONTRIBUTOR`?\r\nCollaborators are simply added to the organization?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1682617834","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -86,40 +81,38 @@ with:\n           td: 1\n           hr: 0\n         multipliers:\n-          - targets: [ ISSUE, ISSUER, SPECIFICATION ]\n+          - select: [ ISSUE_SPECIFICATION ]\n             formattingMultiplier: 1\n             wordValue: 0.1\n-          - targets: [ ISSUE, ISSUER, COMMENTED ]\n+          - select: [ ISSUE_AUTHOR ]\n             formattingMultiplier: 1\n             wordValue: 0.2\n-          - targets: [ ISSUE, ASSIGNEE, COMMENTED ]\n+          - select: [ ISSUE_ASSIGNEE ]\n             formattingMultiplier: 0\n             wordValue: 0\n-          - targets: [ ISSUE, COLLABORATOR, COMMENTED ]\n+          - select: [ ISSUE_COLLABORATOR ]\n             formattingMultiplier: 1\n             wordValue: 0.1\n-          - targets: [ ISSUE, CONTRIBUTOR, COMMENTED ]\n+          - select: [ ISSUE_CONTRIBUTOR ]\n             formattingMultiplier: 0.25\n             wordValue: 0.1\n-          - targets: [ REVIEW, ISSUER, TASK ]\n+          - select: [ PULL_SPECIFICATION ]\n             formattingMultiplier: 0\n             wordValue: 0\n-          - targets: [ REVIEW, ISSUER, COMMENTED ]\n+          - select: [ PULL_AUTHOR ]\n             formattingMultiplier: 2\n             wordValue: 0.2\n-          - targets: [ REVIEW, ASSIGNEE, COMMENTED ]\n+          - select: [ PULL_ASSIGNEE ]\n             formattingMultiplier: 1\n             wordValue: 0.1\n-          - targets: [ REVIEW, COLLABORATOR, COMMENTED ]\n+          - select: [ PULL_COLLABORATOR ]\n             formattingMultiplier: 1\n             wordValue: 0.1\n-          - targets: [ REVIEW, CONTRIBUTOR, COMMENTED ]\n+          - select: [ PULL_CONTRIBUTOR ]","score":{"reward":3.696,"formatting":{"content":{"p":{"score":0,"elementCount":4},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":2,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":40.09,"syllables":45,"sentences":3,"score":0.8009000000000001},"multiplier":1,"relevance":0.8}},{"id":1691429037,"content":"It's already handled [here](https://github.com/ubiquibot/conversation-rewards/blob/f75d842d18bea073aff3d19fe98f0fc83420ae1a/src/parser/permit-generation-module.ts#L150-L152)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691429037","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -158,12 +158,16 @@ export class PermitGenerationModule implements Module {\n         return result;\n       }\n     }\n-    \n+\n     // Get treasury github user id\n     const octokit = getOctokitInstance();\n-    const { data: treasuryGithubData } = await octokit.users.getByUsername({ username: process.env.PERMIT_TREASURY_GITHUB_USERNAME });\n+    const { data: treasuryGithubData } = await octokit.users.getByUsername({\n+      username: process.env.PERMIT_TREASURY_GITHUB_USERNAME,","score":{"reward":2.632,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":83.32000000000004,"syllables":7,"sentences":1,"score":0.7667999999999996},"multiplier":1,"relevance":0.7}},{"id":2236227132,"content":"@gentlementlegen Could you provide a full bot's config? Can't make it run with [this](https://github.com/rndquu-org/test-repo/blob/60906d00c59b6356ea353f7a263caae8b6de3d43/.github/.ubiquibot-config.yml) one (some config validation errors).","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#issuecomment-2236227132","commentType":"PULL_COLLABORATOR","score":{"reward":4.508,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":67.2632142857143,"syllables":32,"sentences":2,"score":0.927367857142857},"multiplier":1,"relevance":0.7}},{"id":2236887197,"content":"@gentlementlegen Check [this](https://github.com/rndquu-org/test-repo/blob/a2c3333223578218532df74c699adc72db1fb07f/.github/.ubiquibot-config.yml) config and [this](https://github.com/rndquu/conversation-rewards/actions/runs/9994462846/job/27624286686) CI run which outputs these errors:\r\n```\r\nInvalid incentives configuration detected, will revert to defaults.\r\n{\r\n  type: 46,\r\n  schema: { type: 'object', properties: {}, [Symbol(TypeBox.Kind)]: 'Object' },\r\n  path: '/incentives/contentEvaluator',\r\n  value: null,\r\n  message: 'Expected object'\r\n}\r\n{\r\n  type: 46,\r\n  schema: { type: 'object', properties: {}, [Symbol(TypeBox.Kind)]: 'Object' },\r\n  path: '/incentives/dataPurge',\r\n  value: null,\r\n  message: 'Expected object'\r\n}\r\n{\r\n  type: 46,\r\n  schema: { type: 'object', properties: {}, [Symbol(TypeBox.Kind)]: 'Object' },\r\n  path: '/incentives/permitGeneration',\r\n  value: null,\r\n  message: 'Expected object'\r\n}\r\n```\r\nThe [config](https://github.com/rndquu-org/test-repo/blob/a2c3333223578218532df74c699adc72db1fb07f/.github/.ubiquibot-config.yml) is from the readme file. Are those errors expected?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#issuecomment-2236887197","commentType":"PULL_COLLABORATOR","score":{"reward":8.244,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2},"priority":2,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":70.10163043478265,"syllables":34,"sentences":2,"score":0.8989836956521735},"multiplier":1,"relevance":0.9}},{"id":2238566995,"content":"The `Invalid incentives configuration detected, will revert to defaults.` error is gone. Check [this](https://github.com/rndquu/conversation-rewards/actions/runs/10004377224/job/27652942966) CI run which outputs:\r\n```\r\nInvalid configuration detected for DataPurgeModule, disabling.\r\nInvalid configuration detected for ContentEvaluatorModule, disabling.\r\nInvalid configuration detected for PermitGenerationModule, disabling.\r\n```\r\nIs it expected for [this](https://github.com/rndquu-org/test-repo/blob/a2c3333223578218532df74c699adc72db1fb07f/.github/.ubiquibot-config.yml) config?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#issuecomment-2238566995","commentType":"PULL_COLLABORATOR","score":{"reward":6.288,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":92.965,"syllables":20,"sentences":2,"score":0.67035},"multiplier":1,"relevance":0.8}},{"id":2238673317,"content":"I'm concerned about the above errors because they are caused by the default config provided in the readme file. It is somewhat expected that if you copy a config from the readme file then the plugin should run without any errors.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#issuecomment-2238673317","commentType":"PULL_COLLABORATOR","score":{"reward":4.018,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":42,"wordValue":0.1,"result":2.23},"readability":{"fleschKincaid":64.66285714285716,"syllables":60,"sentences":2,"score":0.9533714285714283},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2185428499,"effect":{"addition":436,"deletion":128},"reward":11.28,"priority":2},{"reviewId":2187708661,"effect":{"addition":55,"deletion":45},"reward":2,"priority":2},{"reviewId":2199276235,"effect":{"addition":77,"deletion":4},"reward":1.62,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 48.81 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>14.9</td></tr><tr><td>Review</td><td>Comment</td><td>7</td><td>33.91</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58\" target=\"_blank\" rel=\"noopener\">#58</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+436 -128</td><td>2</td><td>11.28</td></tr><tr><td>+55 -45</td><td>2</td><td>2</td></tr><tr><td>+77 -4</td><td>2</td><td>1.62</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#pullrequestreview-2187708661\" target=\"_blank\" rel=\"noopener\">Works fineThe errors mentioned [here](https://github.com/ubiqu&hellip;</a></h6></td><td><details><summary>2.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.6</td><td>2</td><td>4.524</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1682617834\" target=\"_blank\" rel=\"noopener\">@gentlementlegen I need a refresher:1. What's the difference b&hellip;</a></h6></td><td><details><summary>1.86</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.8</td><td>2</td><td>3.696</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#discussion_r1691429037\" target=\"_blank\" rel=\"noopener\">It's already handled [here](https://github.com/ubiquibot/convers&hellip;</a></h6></td><td><details><summary>1.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.632</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#issuecomment-2236227132\" target=\"_blank\" rel=\"noopener\">@gentlementlegen Could you provide a full bot's config? Can't ma&hellip;</a></h6></td><td><details><summary>2.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.7</td><td>2</td><td>4.508</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#issuecomment-2236887197\" target=\"_blank\" rel=\"noopener\">@gentlementlegen Check [this](https://github.com/rndquu-org/test&hellip;</a></h6></td><td><details><summary>3.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.9</td><td>2</td><td>8.244</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#issuecomment-2238566995\" target=\"_blank\" rel=\"noopener\">The &#96;Invalid incentives configuration detected, will revert &hellip;</a></h6></td><td><details><summary>3.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.8</td><td>2</td><td>6.288</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/58#issuecomment-2238673317\" target=\"_blank\" rel=\"noopener\">I'm concerned about the above errors because they are caused by &hellip;</a></h6></td><td><details><summary>2.23</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 42&#13;  wordValue: 0.1&#13;  result: 2.23&#13;</pre></details></td><td>0.7</td><td>2</td><td>4.018</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_298.json","json":{"gentlementlegen":{"userId":9807008,"total":75.702,"task":{"reward":75,"multiplier":1},"comments":[{"id":2709598967,"content":"@0x4007 yes it should have not, this should appear only when you try to set labels that are not part of the configuration. On a bigger scope I think that unavailable labels should be removed, this was discussed in another thread but currently labels keep stacking up (only price labels get properly updated).","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/298#issuecomment-2709598967","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.702,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":53,"wordValue":0.1,"result":2.43},"readability":{"fleschKincaid":53.83561320754718,"syllables":79,"sentences":2,"score":0.9383561320754719},"multiplier":0.25,"relevance":0.3}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 75.702 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.702</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/298#issuecomment-2709598967\" target=\"_blank\" rel=\"noopener\">@0x4007 yes it should have not, this should appear only when you&hellip;</a></h6></td><td><details><summary>2.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 53&#13;  wordValue: 0.1&#13;  result: 2.43&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.702</td></tr></tbody></table></details>"},"0x4007":{"total":28.95,"userId":4975670,"comments":[{"id":2708753123,"content":"@gentlementlegen I'm assuming this is a one hour task.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/298#issuecomment-2708753123","commentType":"ISSUE_AUTHOR","score":{"reward":2.457,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":61.32500000000002,"syllables":16,"sentences":1,"score":0.9867499999999998},"multiplier":1,"relevance":0.7}},{"id":2708863178,"content":"This error doesn't make sense to show.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/298#issuecomment-2708863178","commentType":"ISSUE_AUTHOR","score":{"reward":2.673,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":103.54,"syllables":9,"sentences":1,"score":1},"multiplier":1,"relevance":0.9}},{"id":2710425437,"content":"@gentlementlegen I understand you might not be able to handle this in the next few days so perhaps @Keyrxng can try it out.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/298#issuecomment-2710425437","commentType":"ISSUE_AUTHOR","score":{"reward":3.726,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":65.78565217391306,"syllables":32,"sentences":1,"score":0.9421434782608693},"multiplier":1,"relevance":0.6}},{"id":2710480493,"content":"It is a factor but I'll most likely just pay out of pocket again for this top up in the next day or so.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/298#issuecomment-2710480493","commentType":"ISSUE_AUTHOR","score":{"reward":3.165,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":79.94000000000001,"syllables":30,"sentences":1,"score":0.8005999999999999},"multiplier":1,"relevance":0.5}},{"id":2905304938,"content":"1. We need to switch to open router so we can unify our provider. Also it is useful for receiving crypto payments for top ups. \n2. Also please remove \"Error: \" prefix from all errors. It's redundant and it's wrapped in caution so it's obviously an error. \n_Originally posted by @ubiquity-os in https://github.com/ubiquity/business-development/issues/153#issuecomment-2708722667_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/298","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.62,"formatting":{"content":{"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1.2},"priority":1,"words":{"wordCount":53,"wordValue":0.1,"result":2.43},"readability":{"fleschKincaid":51.1489285714286,"syllables":108,"sentences":6,"score":0.911489285714286},"multiplier":1,"relevance":1}},{"id":2003005974,"content":"```suggestion\r\n                        \"default\": \"anthropic/claude-3.7-sonnet\",\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/312#discussion_r2003005974","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -57,9 +57,9 @@\n                     \"type\": \"object\",\n                     \"properties\": {\n                       \"model\": {\n-                        \"default\": \"gpt-4o-2024-08-06\",\n-                        \"description\": \"OpenAI model, e.g. gpt-4o\",\n-                        \"examples\": [\"gpt-4o\"],\n+                        \"default\": \"anthropic/claude-3.5-haiku\",","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.7}},{"id":2003006674,"content":"Change all instances to sonnet","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/312#discussion_r2003006674","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -57,9 +57,9 @@\n                     \"type\": \"object\",\n                     \"properties\": {\n                       \"model\": {\n-                        \"default\": \"gpt-4o-2024-08-06\",\n-                        \"description\": \"OpenAI model, e.g. gpt-4o\",\n-                        \"examples\": [\"gpt-4o\"],\n+                        \"default\": \"anthropic/claude-3.5-haiku\",","score":{"reward":1.17,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":83.32000000000004,"syllables":7,"sentences":1,"score":0.7667999999999996},"multiplier":1,"relevance":0.6}},{"id":2007407923,"content":"You should fill this out with everything","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/312#discussion_r2007407923","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -57,9 +57,9 @@\n                     \"type\": \"object\",\n                     \"properties\": {\n                       \"model\": {\n-                        \"default\": \"gpt-4o-2024-08-06\",\n-                        \"description\": \"OpenAI model, e.g. gpt-4o\",\n-                        \"examples\": [\"gpt-4o\"],\n+                        \"default\": \"anthropic/claude-3.7-sonnet\",\n+                        \"description\": \"LLM model, e.g. openai/gpt-4o\",\n+                        \"examples\": [\"anthropic/claude-3.7-sonnet\", \"openai/gpt-4o\"],","score":{"reward":2.322,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":78.87285714285717,"syllables":10,"sentences":1,"score":0.8112714285714283},"multiplier":1,"relevance":0.9}},{"id":2007444489,"content":"I don't see why not. It gives the LLM More info","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/312#discussion_r2007444489","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -57,9 +57,9 @@\n                     \"type\": \"object\",\n                     \"properties\": {\n                       \"model\": {\n-                        \"default\": \"gpt-4o-2024-08-06\",\n-                        \"description\": \"OpenAI model, e.g. gpt-4o\",\n-                        \"examples\": [\"gpt-4o\"],\n+                        \"default\": \"anthropic/claude-3.7-sonnet\",\n+                        \"description\": \"LLM model, e.g. openai/gpt-4o\",\n+                        \"examples\": [\"anthropic/claude-3.7-sonnet\", \"openai/gpt-4o\"],","score":{"reward":2.025,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":109.09500000000001,"syllables":13,"sentences":2,"score":1},"multiplier":1,"relevance":0.5}},{"id":2007445378,"content":"If space is a concern then do the last year of models","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/312#discussion_r2007445378","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -57,9 +57,9 @@\n                     \"type\": \"object\",\n                     \"properties\": {\n                       \"model\": {\n-                        \"default\": \"gpt-4o-2024-08-06\",\n-                        \"description\": \"OpenAI model, e.g. gpt-4o\",\n-                        \"examples\": [\"gpt-4o\"],\n+                        \"default\": \"anthropic/claude-3.7-sonnet\",\n+                        \"description\": \"LLM model, e.g. openai/gpt-4o\",\n+                        \"examples\": [\"anthropic/claude-3.7-sonnet\", \"openai/gpt-4o\"],","score":{"reward":2.232,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":95.955,"syllables":14,"sentences":1,"score":0.64045},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2697884966,"effect":{"addition":26,"deletion":25},"reward":1.53,"priority":3},{"reviewId":2705644361,"effect":{"addition":46,"deletion":55},"reward":3.03,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/312"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 28.95 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>4.56</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.62</td></tr><tr><td>Issue</td><td>Comment</td><td>4</td><td>12.021</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>7.749</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/312\" target=\"_blank\" rel=\"noopener\">#312</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+26 -25</td><td>3</td><td>1.53</td></tr><tr><td>+46 -55</td><td>3</td><td>3.03</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/298\" target=\"_blank\" rel=\"noopener\">1. We need to switch to open router so we can unify our provider&hellip;</a></h6></td><td><details><summary>3.63</summary><pre>content:&#13;  content:&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.2&#13;regex:&#13;  wordCount: 53&#13;  wordValue: 0.1&#13;  result: 2.43&#13;</pre></details></td><td>1</td><td>1</td><td>4.62</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/298#issuecomment-2708753123\" target=\"_blank\" rel=\"noopener\">@gentlementlegen I'm assuming this is a one hour task.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.457</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/298#issuecomment-2708863178\" target=\"_blank\" rel=\"noopener\">This error doesn't make sense to show.</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.673</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/298#issuecomment-2710425437\" target=\"_blank\" rel=\"noopener\">@gentlementlegen I understand you might not be able to handle th&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.6</td><td>3</td><td>3.726</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/298#issuecomment-2710480493\" target=\"_blank\" rel=\"noopener\">It is a factor but I'll most likely just pay out of pocket again&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.5</td><td>3</td><td>3.165</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/312#discussion_r2003005974\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion\"default\": \"a&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/312#discussion_r2003006674\" target=\"_blank\" rel=\"noopener\">Change all instances to sonnet</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.17</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/312#discussion_r2007407923\" target=\"_blank\" rel=\"noopener\">You should fill this out with everything</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.322</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/312#discussion_r2007444489\" target=\"_blank\" rel=\"noopener\">I don't see why not. It gives the LLM More info</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.5</td><td>3</td><td>2.025</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/312#discussion_r2007445378\" target=\"_blank\" rel=\"noopener\">If space is a concern then do the last year of models</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.6</td><td>3</td><td>2.232</td></tr></tbody></table></details>"},"Keyrxng":{"total":1.368,"userId":106303466,"comments":[{"id":2710477491,"content":"Nah I'm good but thanks for the shout @0x4007, shame I wasn't \"summoned\" lol been waiting for that call to arms.\nI was just pointing out that it's restricted and should probs be \"pushed\" since it's blocking contributors from being paid which seems like it's a high priority issue.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/298#issuecomment-2710477491","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.368,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":54,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":77.59666666666668,"syllables":65,"sentences":2,"score":0.8240333333333332},"multiplier":0.25,"relevance":0.6}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/312"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 1.368 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.368</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/298#issuecomment-2710477491\" target=\"_blank\" rel=\"noopener\">Nah I'm good but thanks for the shout @0x4007, shame I wasn't \"s&hellip;</a></h6></td><td><details><summary>2.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 54&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.368</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_155.json","json":{"gentlementlegen":{"userId":9807008,"total":75,"task":{"reward":75,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 75 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":47.651,"userId":4975670,"comments":[{"id":2482259516,"content":"Yeah thats tough. I suppose the direct solution would be a config to disable footnote link credits (find lines prefixed with `\\[\\^.*\\]:`)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/155#issuecomment-2482259516","commentType":"ISSUE_AUTHOR","score":{"reward":4.608,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":71.29178571428572,"syllables":31,"sentences":2,"score":0.8870821428571428},"multiplier":1,"relevance":0.8}},{"id":2579216666,"content":"- When aggregating rewards, collect every link into a single data store and only credit the first instance of a link. \r\n- In the following issue specification, I got way too much in rewards which can be solved by checking the redundant link (the only difference is the hash, which shouldn't count) I should have only received credit for basically one link. \r\n- https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/143","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/155","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.89,"formatting":{"content":{"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1.3},"priority":1,"words":{"wordCount":61,"wordValue":0.1,"result":2.53},"readability":{"fleschKincaid":52.265000000000015,"syllables":116,"sentences":4,"score":0.9226500000000002},"multiplier":1,"relevance":1}},{"id":1846078456,"content":"```suggestion\r\n      throw this.context.logger.error(\"Relevance / Comment length mismatch!\", {\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1846078456","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -109,7 +109,11 @@ export class ContentEvaluatorModule extends BaseModule {\n     );\n \n     if (Object.keys(relevancesByAi).length !== commentsToEvaluate.length + prCommentsToEvaluate.length) {\n-      throw this.context.logger.fatal(\"Relevance / Comment length mismatch!\", { relevancesByAi, commentsToEvaluate });\n+      throw this.context.logger.fatal(\"Relevance / Comment length mismatch!\", {","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.7}},{"id":1846078834,"content":"We are intending to link an emergency triage telegram channel to fatal errors so it should only be 1. consistent errors and 2. probably kernel related","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1846078834","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -109,7 +109,11 @@ export class ContentEvaluatorModule extends BaseModule {\n     );\n \n     if (Object.keys(relevancesByAi).length !== commentsToEvaluate.length + prCommentsToEvaluate.length) {\n-      throw this.context.logger.fatal(\"Relevance / Comment length mismatch!\", { relevancesByAi, commentsToEvaluate });\n+      throw this.context.logger.fatal(\"Relevance / Comment length mismatch!\", {","score":{"reward":5.376,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":54.869102564102604,"syllables":44,"sentences":3,"score":0.948691025641026},"multiplier":1,"relevance":0.8}},{"id":1846080261,"content":"What is elaborate in this context","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1846080261","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,12 @@\n+# This file serves as a base to elaborate a custom configuration","score":{"reward":0.711,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":59.745000000000005,"syllables":10,"sentences":1,"score":0.9974500000000001},"multiplier":1,"relevance":0.3}},{"id":1855852452,"content":"This approach seems wrong. You should check revision history and remove any content added by bots or other users.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1855852452","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -33,6 +33,8 @@ export class DataPurgeModule extends BaseModule {\n           .replace(/^\\/.+/g, \"\")\n           // Remove HTML comments\n           .replace(/<!--[\\s\\S]*?-->/g, \"\")\n+          // Remove the footnotes\n+          .replace(/^###### .*?\\[\\^\\d+\\^][\\s\\S]*$/gm, \"\")","score":{"reward":4.887,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":72.51881578947369,"syllables":28,"sentences":2,"score":0.8748118421052631},"multiplier":1,"relevance":0.9}},{"id":1855853419,"content":"I'm assuming this is for unique anchors. You should consider the query parameter as well. I think let's just consider them the same link with different query parameters.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1855853419","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -168,9 +170,26 @@ export class FormattingEvaluatorModule extends BaseModule {\n         element.remove();\n         continue;\n       }\n-      this._updateTagCount(formatting, tagName, score);\n+      if (tagName === \"a\") {\n+        const url = element.getAttribute(\"href\");\n+        if (url) {\n+          urlSet.add(url.split(\"#\")[0]);","score":{"reward":6.954,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":58.505000000000024,"syllables":49,"sentences":3,"score":0.9850500000000002},"multiplier":1,"relevance":0.95}},{"id":1855922266,"content":"@sshivaditya any ideas on how to improve the bot edit implementation? To me it seems obvious to compare before and after and not make an edit if the results are the same. \nOtherwise we might be able to annotate the inserted links in a specific way to at least handle this situation","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1855922266","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -33,6 +33,8 @@ export class DataPurgeModule extends BaseModule {\n           .replace(/^\\/.+/g, \"\")\n           // Remove HTML comments\n           .replace(/<!--[\\s\\S]*?-->/g, \"\")\n+          // Remove the footnotes\n+          .replace(/^###### .*?\\[\\^\\d+\\^][\\s\\S]*$/gm, \"\")","score":{"reward":7.982,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":52,"wordValue":0.1,"result":2.41},"readability":{"fleschKincaid":59.087820512820514,"syllables":80,"sentences":3,"score":0.9908782051282051},"multiplier":1,"relevance":0.85}},{"id":1856073266,"content":"I would try implementing the diff approach and if it is too difficult to get it to work reliably then I would go with your current implementation.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1856073266","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -33,6 +33,8 @@ export class DataPurgeModule extends BaseModule {\n           .replace(/^\\/.+/g, \"\")\n           // Remove HTML comments\n           .replace(/<!--[\\s\\S]*?-->/g, \"\")\n+          // Remove the footnotes\n+          .replace(/^###### .*?\\[\\^\\d+\\^][\\s\\S]*$/gm, \"\")","score":{"reward":4.788,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":54.09666666666669,"syllables":40,"sentences":1,"score":0.940966666666667},"multiplier":1,"relevance":0.7}},{"id":2499968947,"content":"Handle diffs in separate task if you can't do it quickly here.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#issuecomment-2499968947","commentType":"PULL_COLLABORATOR","score":{"reward":2.025,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":83.0092307692308,"syllables":17,"sentences":1,"score":0.7699076923076921},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2441844058,"effect":{"addition":10,"deletion":1},"reward":0.33,"priority":3},{"reviewId":2457235467,"effect":{"addition":101,"deletion":65},"reward":4.98,"priority":3},{"reviewId":2457587694,"effect":{"addition":2,"deletion":2},"reward":0.12,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 47.651 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>5.43</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.89</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>4.608</td></tr><tr><td>Review</td><td>Comment</td><td>8</td><td>32.723</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188\" target=\"_blank\" rel=\"noopener\">#188</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+10 -1</td><td>3</td><td>0.33</td></tr><tr><td>+101 -65</td><td>3</td><td>4.98</td></tr><tr><td>+2 -2</td><td>3</td><td>0.12</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/155\" target=\"_blank\" rel=\"noopener\">- When aggregating rewards, collect every link into a single dat&hellip;</a></h6></td><td><details><summary>3.83</summary><pre>content:&#13;  content:&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.3&#13;regex:&#13;  wordCount: 61&#13;  wordValue: 0.1&#13;  result: 2.53&#13;</pre></details></td><td>1</td><td>1</td><td>4.89</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/155#issuecomment-2482259516\" target=\"_blank\" rel=\"noopener\">Yeah thats tough. I suppose the direct solution would be a confi&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.608</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1846078456\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionthrow this.context.logger.error&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1846078834\" target=\"_blank\" rel=\"noopener\">We are intending to link an emergency triage telegram channel to&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.8</td><td>3</td><td>5.376</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1846080261\" target=\"_blank\" rel=\"noopener\">What is elaborate in this context</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.711</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1855852452\" target=\"_blank\" rel=\"noopener\">This approach seems wrong. You should check revision history and&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.9</td><td>3</td><td>4.887</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1855853419\" target=\"_blank\" rel=\"noopener\">I'm assuming this is for unique anchors. You should consider the&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.95</td><td>3</td><td>6.954</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1855922266\" target=\"_blank\" rel=\"noopener\">@sshivaditya any ideas on how to improve the bot edit implementa&hellip;</a></h6></td><td><details><summary>2.41</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 52&#13;  wordValue: 0.1&#13;  result: 2.41&#13;</pre></details></td><td>0.85</td><td>3</td><td>7.982</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1856073266\" target=\"_blank\" rel=\"noopener\">I would try implementing the diff approach and if it is too diff&hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.788</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#issuecomment-2499968947\" target=\"_blank\" rel=\"noopener\">Handle diffs in separate task if you can't do it quickly here.</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.5</td><td>3</td><td>2.025</td></tr></tbody></table></details>"},"shiv810":{"total":7.383,"userId":53160903,"comments":[{"id":1857086341,"content":"Edit history will have the bot edits. The only way to do this without changing the correct similar issues format would be to remove the duplicate regex:  \r\n`/\\[\\^(\\d+)\\^\\]: ⚠ \\d+% possible duplicate - [^\\n]+(\\n|$)/g`.  Also, the API provides the new body rather than the diff-formatted content, we may still need to use the regex in that case.Let me know if this works for you!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1857086341","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -33,6 +33,8 @@ export class DataPurgeModule extends BaseModule {\n           .replace(/^\\/.+/g, \"\")\n           // Remove HTML comments\n           .replace(/<!--[\\s\\S]*?-->/g, \"\")\n+          // Remove the footnotes\n+          .replace(/^###### .*?\\[\\^\\d+\\^][\\s\\S]*$/gm, \"\")","score":{"reward":2.133,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":59,"wordValue":0.1,"result":2.51},"readability":{"fleschKincaid":74.28408898305086,"syllables":82,"sentences":4,"score":0.8571591101694913},"multiplier":0.25,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2459245857,"effect":{"addition":110,"deletion":65},"reward":5.25,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 7.383 XP ]</a>&nbsp;</h3><h6>@shiv810</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>5.25</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>2.133</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188\" target=\"_blank\" rel=\"noopener\">#188</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+110 -65</td><td>3</td><td>5.25</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#discussion_r1857086341\" target=\"_blank\" rel=\"noopener\">Edit history will have the bot edits. The only way to do this wi&hellip;</a></h6></td><td><details><summary>2.51</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 59&#13;  wordValue: 0.1&#13;  result: 2.51&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.133</td></tr></tbody></table></details>"},"Keyrxng":{"total":0,"userId":106303466,"comments":[{"id":2495477579,"content":"I'm happy to get back to performing reviews - I just need the green light.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188#issuecomment-2495477579","commentType":"PULL_CONTRIBUTOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":84.45000000000003,"syllables":19,"sentences":1,"score":0.7554999999999997},"multiplier":0.25,"relevance":0}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/188"}]}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_114.json","json":{"gentlementlegen":{"userId":9807008,"total":106.74,"task":{"reward":100,"multiplier":1},"comments":[{"id":2761677647,"content":"![image](https://github.com/user-attachments/assets/3b7feaa1-ada6-4a6f-975d-554825644aa9)\r\n@gentlementlegen he's a collaborator this error should not have been thrown\r\n_Originally posted by @0x4007 in https://github.com/ubiquity/business-development/issues/106#issuecomment-2563943154_\r\n## What happened\r\nThe user was recognized as `member` instead of collaborator, thus not being able to start the task.\r\n## What was expected\r\nThe user should have been recognized as `collaborator` and start the task.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/114","commentType":"ISSUE_SPECIFICATION","score":{"reward":6.74,"formatting":{"content":{"p":{"score":0,"elementCount":5},"em":{"score":0,"elementCount":1},"h2":{"score":1,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":3},"priority":1,"words":{"wordCount":49,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":44.91740112994353,"syllables":99,"sentences":3,"score":0.8491740112994353},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 106.74 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>6.74</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/114\" target=\"_blank\" rel=\"noopener\">![image](https://github.com/user-attachments/assets/3b7feaa1-ada&hellip;</a></h6></td><td><details><summary>5.37</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    h2:&#13;      score: 1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 3&#13;regex:&#13;  wordCount: 49&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>1</td><td>1</td><td>6.74</td></tr></tbody></table></details>"},"0x4007":{"total":26.18,"userId":4975670,"comments":[{"id":2567382880,"content":"I think any of the options technically means they are added as a \"core team member.\" Possibly exclude `none` if that means they weren't added as a collaborator. \r\nI'm assuming you are missing `triage` and `maintain` from your enum:\r\n<img width=\"643\" alt=\"image\" src=\"https://github.com/user-attachments/assets/dec504a6-90de-43c2-861e-a16703081636\" />","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/114#issuecomment-2567382880","commentType":"ISSUE_COLLABORATOR","score":{"reward":16.56,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":44,"wordValue":0.1,"result":2.27},"readability":{"fleschKincaid":71.36238636363638,"syllables":79,"sentences":4,"score":0.8863761363636362},"multiplier":1,"relevance":1}},{"id":2567424796,"content":"So then you should consider any value as a \"core team member\" but `none` is unclear to me what exactly that represents.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/114#issuecomment-2567424796","commentType":"ISSUE_COLLABORATOR","score":{"reward":7.8,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":64.66285714285716,"syllables":30,"sentences":1,"score":0.9533714285714283},"multiplier":1,"relevance":1}},{"id":2567111725,"content":"@gentlementlegen  will you be able to prioritize this？","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/116#issuecomment-2567111725","commentType":"PULL_COLLABORATOR","score":{"reward":1.504,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":40.09,"syllables":15,"sentences":1,"score":0.8009000000000001},"multiplier":1,"relevance":0.4}},{"id":2570028021,"content":"That sounds like a good plan.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/116#issuecomment-2570028021","commentType":"PULL_COLLABORATOR","score":{"reward":0.316,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":116.14500000000001,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/116"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 26.18 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>2</td><td>24.36</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>1.82</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/114#issuecomment-2567382880\" target=\"_blank\" rel=\"noopener\">I think any of the options technically means they are added as a&hellip;</a></h6></td><td><details><summary>3.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 44&#13;  wordValue: 0.1&#13;  result: 2.27&#13;</pre></details></td><td>1</td><td>4</td><td>16.56</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/114#issuecomment-2567424796\" target=\"_blank\" rel=\"noopener\">So then you should consider any value as a \"core team member\" bu&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>1</td><td>4</td><td>7.8</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/116#issuecomment-2567111725\" target=\"_blank\" rel=\"noopener\">@gentlementlegen  will you be able to prioritize this？</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.4</td><td>4</td><td>1.504</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/116#issuecomment-2570028021\" target=\"_blank\" rel=\"noopener\">That sounds like a good plan.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.316</td></tr></tbody></table></details>"},"whilefoo":{"total":13.528,"userId":139262667,"comments":[{"id":2529761240,"content":"I'm fine with the changes, my only concern is that we will have to declare max concurrent tasks for every permission (write, read, ...) and it might be confusing","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/116#pullrequestreview-2529761240","commentType":"PULL_COLLABORATOR","score":{"reward":5.568,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":75.42784482758621,"syllables":40,"sentences":2,"score":0.8457215517241379},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2529761240,"effect":{"addition":142,"deletion":57},"reward":7.96,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/116"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 13.528 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>7.96</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>5.568</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/116\" target=\"_blank\" rel=\"noopener\">#116</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+142 -57</td><td>4</td><td>7.96</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/116#pullrequestreview-2529761240\" target=\"_blank\" rel=\"noopener\">I'm fine with the changes, my only concern is that we will have &hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.6</td><td>4</td><td>5.568</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_40.json","json":{"gentlementlegen":{"userId":9807008,"total":58.832,"task":{"reward":50,"multiplier":1},"comments":[{"id":2632701311,"content":"`publicAccessControl` has not been refactored so I believe so.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/40#issuecomment-2632701311","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.368,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":82.39000000000001,"syllables":11,"sentences":1,"score":0.7760999999999999},"multiplier":0.25,"relevance":0.8}},{"id":2417111065,"content":"Resolves #40\r\nQA: https://github.com/Meniole/daemon-pricing/issues/29#issuecomment-2753328125\r\nWill imply updating configurations as well since the schema changes.\r\nRelated pull-requests:\r\nhttps://github.com/ubiquity/pay.ubq.fi/pull/398\r\nhttps://github.com/ubiquity/business-development/pull/190\r\nhttps://github.com/ubiquity/work.ubq.fi/pull/211\r\nhttps://github.com/ubiquity/.ubiquity-os/pull/28\r\nhttps://github.com/ubiquity-os/.ubiquity-os/pull/10\r\nhttps://github.com/ubiquity-os-marketplace/.ubiquity-os/pull/21","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/101","commentType":"PULL_SPECIFICATION","score":{"reward":8.464,"formatting":{"content":{"p":{"score":0,"elementCount":10},"a":{"score":1,"elementCount":7}},"result":7},"priority":1,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":52.970272943038,"syllables":139,"sentences":16,"score":0.92970272943038},"multiplier":1,"relevance":0.8}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 58.832 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.368</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>8.464</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/40#issuecomment-2632701311\" target=\"_blank\" rel=\"noopener\">&#96;publicAccessControl&#96; has not been refactored so I belie&hellip;</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.8</td><td>2</td><td>0.368</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/101\" target=\"_blank\" rel=\"noopener\">Resolves #40QA: https://github.com/Meniole/daemon-pricing/issu&hellip;</a></h6></td><td><details><summary>8.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 10&#13;    a:&#13;      score: 1&#13;      elementCount: 7&#13;  result: 7&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.8</td><td>1</td><td>8.464</td></tr></tbody></table></details>"},"0x4007":{"total":20.284,"userId":4975670,"comments":[{"id":2391251118,"content":"@sshivaditya2019 looks like it appended similarity even with no results. Ensure that doesn't happen!","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/40#issuecomment-2391251118","commentType":"ISSUE_AUTHOR","score":{"reward":0.306,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":46.942499999999995,"syllables":27,"sentences":2,"score":0.869425},"multiplier":1,"relevance":0.1}},{"id":2631793355,"content":"@gentlementlegen  is this still current?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/40#issuecomment-2631793355","commentType":"ISSUE_AUTHOR","score":{"reward":0.91,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":32.56000000000003,"syllables":10,"sentences":1,"score":0.7256000000000004},"multiplier":1,"relevance":0.7}},{"id":2760189212,"content":"Add should to the rules? In the template if it bothers you.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/40#issuecomment-2760189212","commentType":"ISSUE_AUTHOR","score":{"reward":0.744,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":94.995,"syllables":15,"sentences":2,"score":0.6500499999999999},"multiplier":1,"relevance":0.3}},{"id":2563882269,"content":"I realize that contributors cant add labels unless there is an issue template that allows them to create an issue and select labels when creating issues, but this is an unusual scenario that projects need to go out of their way for. \r\n- Remove all references to `publicAccessControl.setLabel`\r\n- Refactor `publicAccessControl` to only be a boolean called: `fundContributorClosedIssue`, default is false.\r\nhttps://github.com/ubiquity-os-marketplace/assistive-pricing/blob/9984131a66eb9167dd0f60147a99e41ae382c43b/src/types/plugin-input.ts#L23-L29\r\n### Note\r\nThe reason why `fundContributorClosedIssue` exists is because if: \r\n1. an outside party files an issue\r\n2. we fund it\r\n3. self assign\r\nThen they can mark the issue closed as completed using the GitHub UI (because they created the issue) which makes an easy attack vector.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/40","commentType":"ISSUE_SPECIFICATION","score":{"reward":6.58,"formatting":{"content":{"p":{"score":0,"elementCount":9},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":5},"h3":{"score":1,"elementCount":1},"ol":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":2.5},"priority":1,"words":{"wordCount":99,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":55.65768965517243,"syllables":175,"sentences":5,"score":0.9565768965517243},"multiplier":1,"relevance":1}},{"id":2760183431,"content":"It doesn't look like your config updates are consistent across the board. We need the same config everywhere. I also noticed only one has the \"UbiquityOS Storage\" plugin, what is that about?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/101#issuecomment-2760183431","commentType":"PULL_COLLABORATOR","score":{"reward":4.064,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":64.9245454545455,"syllables":51,"sentences":3,"score":0.9507545454545451},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2724238173,"effect":{"addition":242,"deletion":142},"reward":7.68,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/101"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 20.284 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>7.68</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>6.58</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>1.96</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>4.064</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/101\" target=\"_blank\" rel=\"noopener\">#101</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+242 -142</td><td>2</td><td>7.68</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/40\" target=\"_blank\" rel=\"noopener\">I realize that contributors cant add labels unless there is an i&hellip;</a></h6></td><td><details><summary>5.11</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 9&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 5&#13;    h3:&#13;      score: 1&#13;      elementCount: 1&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 2.5&#13;regex:&#13;  wordCount: 99&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>1</td><td>1</td><td>6.58</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/40#issuecomment-2391251118\" target=\"_blank\" rel=\"noopener\">@sshivaditya2019 looks like it appended similarity even with no &hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.306</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/40#issuecomment-2631793355\" target=\"_blank\" rel=\"noopener\">@gentlementlegen  is this still current?</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>2</td><td>0.91</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/40#issuecomment-2760189212\" target=\"_blank\" rel=\"noopener\">Add should to the rules? In the template if it bothers you.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.744</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/101#issuecomment-2760183431\" target=\"_blank\" rel=\"noopener\">It doesn't look like your config updates are consistent across t&hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.8</td><td>2</td><td>4.064</td></tr></tbody></table></details>"},"YanVictorSN":{"total":0,"userId":98413246,"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/101"}]}}},{"name":"results/ubiquity-os-marketplace_daemon-disqualifier_84.json","json":{"gentlementlegen":{"userId":9807008,"total":19.937,"task":{"reward":18,"multiplier":1},"comments":[{"id":2699848024,"content":"To clarify, what does the deadline represent, the date when the new top up will be used?","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/84#issuecomment-2699848024","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.107,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":80.09764705882354,"syllables":22,"sentences":1,"score":0.7990235294117646},"multiplier":0.25,"relevance":0.9}},{"id":2377537886,"content":"Resolves #84\r\nQA: https://github.com/Meniole/daemon-disqualifier/issues/34#issuecomment-2709542900","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/85","commentType":"PULL_SPECIFICATION","score":{"reward":0.83,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":37.54519230769233,"syllables":25,"sentences":2,"score":0.7754519230769233},"multiplier":1,"relevance":0.5}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 19.937 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>18</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.107</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.83</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/84#issuecomment-2699848024\" target=\"_blank\" rel=\"noopener\">To clarify, what does the deadline represent, the date when the &hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.9</td><td>3</td><td>1.107</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/85\" target=\"_blank\" rel=\"noopener\">Resolves #84QA: https://github.com/Meniole/daemon-disqualifier&hellip;</a></h6></td><td><details><summary>1.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.83</td></tr></tbody></table></details>"},"0x4007":{"total":14.227,"userId":4975670,"comments":[{"id":2698860620,"content":"I was hoping that somebody else would be recommended because you seem saturated but @gentlementlegen this could be an easy one for you.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/84#issuecomment-2698860620","commentType":"ISSUE_AUTHOR","score":{"reward":1.827,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":47.39434782608697,"syllables":37,"sentences":1,"score":0.8739434782608697},"multiplier":1,"relevance":0.3}},{"id":2700135067,"content":"Yes the new top up / disqualification.","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/84#issuecomment-2700135067","commentType":"ISSUE_AUTHOR","score":{"reward":1.617,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":45.64500000000001,"syllables":11,"sentences":1,"score":0.8564500000000002},"multiplier":1,"relevance":0.7}},{"id":2895366540,"content":"We should state the new deadline for clarity. \r\nTry something like:\r\n@user, you have used <code>**3**</code> of <code>**3**</code> available deadline extensions. Please provide an update on your progress. The new deadline is on 6 March 16:08 UTC.\r\n_Originally posted by @ubiquity-os-beta[bot] in https://github.com/ubiquity-os-marketplace/command-ask/issues/70#issuecomment-2693229538_","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/84","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.33,"formatting":{"content":{"p":{"score":0,"elementCount":4},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":48,"wordValue":0.1,"result":2.35},"readability":{"fleschKincaid":62.735000000000014,"syllables":95,"sentences":6,"score":0.9726499999999999},"multiplier":1,"relevance":1}},{"id":1986943420,"content":"Can you match the style \nhttps://github.com/Meniole/daemon-disqualifier/issues/34#issuecomment-2709976511","url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/85#discussion_r1986943420","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -97,39 +99,54 @@ async function shouldDisplayRemainingExtensionsReminder(context: ContextPlugin,\n   return lastRemainingExtensionsValue !== issueAndPrTargets.remainingExtensions;\n }\n \n-async function buildReminderMessage(context: ContextPlugin, args: { remainingExtensions: number; extensionsLimit: number } & IssuePrTarget) {\n-  return !context.config.negligenceThreshold ||\n-    !context.config.availableDeadlineExtensions.enabled ||\n-    !(await shouldDisplayRemainingExtensionsReminder(context, args))\n+async function buildReminderMessage(context: ContextPlugin, args: { issue: ListIssueForRepo; extensions: Extensions } & IssuePrTarget) {\n+  const logins = args.issue.assignees\n+    ?.map((o) => o?.login)\n+    .filter((o) => !!o)\n+    .join(\", @\");\n+  const shouldDisplayExtensions =\n+    context.config.negligenceThreshold && context.config.availableDeadlineExtensions.enabled && (await shouldDisplayRemainingExtensionsReminder(context, args));\n+  const currentExtensionsMilestone = args.extensions.extensionsLimit - args.remainingExtensions + 1;\n+  const reminderContent = !shouldDisplayExtensions\n     ? \"this task has been idle for a while\"\n-    : `you have used <code>**${args.extensionsLimit - args.remainingExtensions + 1}**</code> of <code>**${args.extensionsLimit}**</code> available deadline extensions`;\n+    : `you have used <code>**${currentExtensionsMilestone}**</code> of <code>**${args.extensions.extensionsLimit}**</code> available deadline extensions`;\n+  const message = [`@${logins}, ${reminderContent}.`, \"Please provide an update on your progress.\"];\n+\n+  if (shouldDisplayExtensions && args.extensions.assignmentDate) {\n+    message.push(\n+      `The new deadline is on ${new Date(","score":{"reward":4.053,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":46.942499999999995,"syllables":27,"sentences":2,"score":0.869425},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2670347575,"effect":{"addition":49,"deletion":31},"reward":2.4,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/85"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 14.227 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>2.4</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.33</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>3.444</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>4.053</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/85\" target=\"_blank\" rel=\"noopener\">#85</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+49 -31</td><td>3</td><td>2.4</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/84\" target=\"_blank\" rel=\"noopener\">We should state the new deadline for clarity. Try something li&hellip;</a></h6></td><td><details><summary>3.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 48&#13;  wordValue: 0.1&#13;  result: 2.35&#13;</pre></details></td><td>1</td><td>1</td><td>4.33</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/84#issuecomment-2698860620\" target=\"_blank\" rel=\"noopener\">I was hoping that somebody else would be recommended because you&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.827</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/issues/84#issuecomment-2700135067\" target=\"_blank\" rel=\"noopener\">Yes the new top up / disqualification.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.617</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/85#discussion_r1986943420\" target=\"_blank\" rel=\"noopener\">Can you match the style https://github.com/Meniole/daemon-disqu&hellip;</a></h6></td><td><details><summary>1.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.053</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_12.json","json":{"gentlementlegen":{"userId":9807008,"total":55.38,"task":{"reward":50,"multiplier":1},"comments":[{"id":2417593901,"content":"V1 will notice a user of its deadline when it is assigned through the UI using and bypassing the `/start` command, see here: https://github.com/ubiquibot/conversation-rewards/issues/4#issuecomment-2237802296\r\nV2 should also be notifying the user for the deadline on self-assign, or generally UI assign.\r\nAlso applies on UI assign, example:  https://github.com/ubiquibot/conversation-rewards/issues/81#issuecomment-2290677866","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/12","commentType":"ISSUE_SPECIFICATION","score":{"reward":5.38,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":44.56894230769231,"syllables":112,"sentences":4,"score":0.8456894230769231},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 55.38 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.38</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/12\" target=\"_blank\" rel=\"noopener\">V1 will notice a user of its deadline when it is assigned throug&hellip;</a></h6></td><td><details><summary>4.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>1</td><td>1</td><td>5.38</td></tr></tbody></table></details>"},"Keyrxng":{"total":29.684,"userId":106303466,"comments":[{"id":2276976790,"content":"There seems to be an issue with posting error comments\r\nhttps://github.com/ubiquibot/command-start-stop/issues/34#issuecomment-2326108375","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#pullrequestreview-2276976790","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.186,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":59.20607142857145,"syllables":34,"sentences":2,"score":0.9920607142857145},"multiplier":0.25,"relevance":0.3}},{"id":1722890011,"content":"I would appreciate comments in this file and I think newer contributors would too. The first time I saw it in another plugin I thought \"this looks like heavy artillery\"","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722890011","commentType":"PULL_CONTRIBUTOR","diffHunk":"","score":{"reward":0.42,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":64.71000000000002,"syllables":45,"sentences":2,"score":0.9528999999999997},"multiplier":0.25,"relevance":0.7}},{"id":1722897291,"content":"Seems to me the same could be achieved with a `if` or `switch` case but that may be a naïve opinion","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722897291","commentType":"PULL_CONTRIBUTOR","diffHunk":"","score":{"reward":0.18,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":89.24500000000003,"syllables":23,"sentences":1,"score":0.7075499999999997},"multiplier":0.25,"relevance":0.4}},{"id":1722922097,"content":"But all this proxy does is convolute what could be a simple `if` or `switch` statement as we do not perform any mutation or action within the proxy other than calling one of two functions. `rpc-handler` uses a `Proxy` but it does mutate and control logic so it makes sense there, here it seems very OP.\r\nI guess my point is, are we adopting this approach across plugins as standard rather than the previous method of using an `if` for three `SupportedEvents` or less and a `switch` for more than thee?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722922097","commentType":"PULL_CONTRIBUTOR","diffHunk":"","score":{"reward":0.51,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":84,"wordValue":0.1,"result":2.64},"readability":{"fleschKincaid":63.600714285714304,"syllables":114,"sentences":3,"score":0.963992857142857},"multiplier":0.25,"relevance":0.6}},{"id":1722955204,"content":"I am not against the Proxy but I think if we are adopting it as standard we should comment it clearly so that no-one else has to ask GPT what's going here\r\nThis is a good reason for it.\r\n---\r\nI cannot shake the thought: if events are arbitrary and not defined in our `SupportedEvents` the `switch` and the `Proxy` will not run. \r\nIf plugins are built to work on any event like `user-activity-watcher` I think you said @gentlementlegen then the proxy would need to handle all events. \r\nPlugins which cannot run on any event need to be restricted to only their supported events at the plugin config level I think.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722955204","commentType":"PULL_CONTRIBUTOR","diffHunk":"","score":{"reward":0.656,"formatting":{"content":{"p":{"score":0,"elementCount":5},"hr":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":108,"wordValue":0.1,"result":2.57},"readability":{"fleschKincaid":68.98000000000002,"syllables":141,"sentences":4,"score":0.9101999999999998},"multiplier":0.25,"relevance":0.8}},{"id":1741752520,"content":"For some reason this PR is not posting a comment but my PR I just opened fresh from `development` does post a comment no problem, which is related to [this issue](https://github.com/ubiquibot/command-start-stop/issues/34)\r\nhttps://github.com/ubq-testing/command-start-stop/issues/19","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1741752520","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -75,17 +75,17 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   }\n \n   // get labels\n-  const labels = issue.labels;\n+  const labels = issue.labels ?? [];\n   const priceLabel = labels.find((label: Label) => label.name.startsWith(\"Price: \"));\n \n   if (!priceLabel) {\n     throw new Error(logger.error(\"No price label is set to calculate the duration\", { issueNumber: issue.number }).logMessage.raw);","score":{"reward":0.847,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":76.55500000000004,"syllables":52,"sentences":2,"score":0.8344499999999997},"multiplier":0.25,"relevance":0.7}},{"id":2326077417,"content":"Unsure exactly what's causing it considering the bubble-up logic remains unchanged as far as I can tell other than the addition of the proxy but it looks like it's throws the error instead of passing it to our comment wrapper\r\nMine: \r\n![image](https://github.com/user-attachments/assets/59b4deee-2559-4bc4-bc8c-fe80362be603)\r\nYours:\r\n![image](https://github.com/user-attachments/assets/6e835cbf-0e58-477a-85df-903c34d7ba31)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#issuecomment-2326077417","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.568,"formatting":{"content":{"p":{"score":0,"elementCount":5}},"result":0},"priority":1,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":38.960000000000036,"syllables":65,"sentences":1,"score":0.7896000000000004},"multiplier":0.25,"relevance":0.8}},{"id":2328850441,"content":"Odd that the Proxy messed with bubbling up the error that's something I'll need to look into in `telegram-bot` as I've leaned on the same approach there.\r\nfor a `Time: <1 Hour` task we seem to be getting a deadline of `now()` \r\n###### I swear I don't use Microsoft Copilot\r\n![image](https://github.com/user-attachments/assets/cf8f3f3a-1eb4-4a53-8502-eb7c83f6ba72)\r\nand `Time: <2 hour` gets a time of `now() + 1` \r\n![image](https://github.com/user-attachments/assets/fec26820-53ee-45a3-8f07-69baa9b425e7)\r\nIs this intended? \r\n---\r\nI guess this is a separate issue below.\r\nBut didn't we used to give a buffer as opposed to using the raw time string? I bring this up because if contributors start to get negative XP for being beyond the deadline or lesser rewards because of it then surely the opposite should be true for tasks which get \"completed\" within the deadline. \r\n\"Completed\" is also subjective here, is that time til PR or time til closed-as-complete?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#issuecomment-2328850441","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.963,"formatting":{"content":{"p":{"score":0,"elementCount":9},"h6":{"score":1,"elementCount":1},"hr":{"score":0,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":135,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":71.82416666666667,"syllables":179,"sentences":6,"score":0.8817583333333333},"multiplier":0.25,"relevance":0.9}},{"id":2333833887,"content":"That'll be my mistake then my bad. My timezone is UTC+00 which I'm sure is the same as the reminder, do you think you could add a `+ 1` so that it's achievable to complete a 1hr task within the deadline?\r\nAgreed lol. And with issue/PR activity bumping it forward technically it's not a strict deadline either so calculating a bonus/negative based on the deadline seems like it will be a difficult task actually.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#issuecomment-2333833887","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.504,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":79,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":65.77862341772155,"syllables":113,"sentences":4,"score":0.9422137658227845},"multiplier":0.25,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2247290369,"effect":{"addition":1053,"deletion":618},"reward":16.71,"priority":1},{"reviewId":2276922499,"effect":{"addition":508,"deletion":279},"reward":7.87,"priority":1},{"reviewId":2287302422,"effect":{"addition":22,"deletion":5},"reward":0.27,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 29.684 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>24.85</td></tr><tr><td>Review</td><td>Comment</td><td>9</td><td>4.834</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24\" target=\"_blank\" rel=\"noopener\">#24</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1053 -618</td><td>1</td><td>16.71</td></tr><tr><td>+508 -279</td><td>1</td><td>7.87</td></tr><tr><td>+22 -5</td><td>1</td><td>0.27</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#pullrequestreview-2276976790\" target=\"_blank\" rel=\"noopener\">There seems to be an issue with posting error commentshttps://&hellip;</a></h6></td><td><details><summary>1.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.186</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722890011\" target=\"_blank\" rel=\"noopener\">I would appreciate comments in this file and I think newer contr&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.42</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722897291\" target=\"_blank\" rel=\"noopener\">Seems to me the same could be achieved with a &#96;if&#96; or &#&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.18</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722922097\" target=\"_blank\" rel=\"noopener\">But all this proxy does is convolute what could be a simple &#96&hellip;</a></h6></td><td><details><summary>2.64</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 84&#13;  wordValue: 0.1&#13;  result: 2.64&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.51</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722955204\" target=\"_blank\" rel=\"noopener\">I am not against the Proxy but I think if we are adopting it as &hellip;</a></h6></td><td><details><summary>2.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 108&#13;  wordValue: 0.1&#13;  result: 2.57&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.656</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1741752520\" target=\"_blank\" rel=\"noopener\">For some reason this PR is not posting a comment but my PR I jus&hellip;</a></h6></td><td><details><summary>3.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.847</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#issuecomment-2326077417\" target=\"_blank\" rel=\"noopener\">Unsure exactly what's causing it considering the bubble-up logic&hellip;</a></h6></td><td><details><summary>2.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;  result: 0&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.568</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#issuecomment-2328850441\" target=\"_blank\" rel=\"noopener\">Odd that the Proxy messed with bubbling up the error that's some&hellip;</a></h6></td><td><details><summary>3.37</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 9&#13;    h6:&#13;      score: 1&#13;      elementCount: 1&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 135&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.963</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#issuecomment-2333833887\" target=\"_blank\" rel=\"noopener\">That'll be my mistake then my bad. My timezone is UTC+00 which I&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 79&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.504</td></tr></tbody></table></details>"},"0x4007":{"total":26.298,"userId":4975670,"comments":[{"id":1722712548,"content":"What is this file?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722712548","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.156,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":97.025,"syllables":5,"sentences":1,"score":0.6297499999999999},"multiplier":1,"relevance":0.3}},{"id":1722712790,"content":"```suggestion\r\n    const log = logger.error(\"You were previously unassigned from this task. You can not reassign yourself.\", { sender });\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722712790","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -21,6 +22,14 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n     throw new Error(\"Issue is a parent issue\");\n   }\n \n+  const hasBeenPreviouslyUnassigned = await hasUserBeenUnassigned(context);\n+\n+  if (hasBeenPreviouslyUnassigned) {\n+    const log = logger.error(\"You were previously unassigned from this task. You cannot reassign yourself.\", { sender });","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":1,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.8}},{"id":1722713201,"content":"```suggestion\r\n  return { content: \"Task assigned successfully\", statusCode: 200 };\r\n```\r\nHTTP status codes are far more concise and precise. Consider using these?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722713201","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -109,5 +123,5 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n     ].join(\"\\n\") as string\n   );\n \n-  return { output: \"Task assigned successfully\" };\n+  return { content: \"Task assigned successfully\", status: \"ok\" };","score":{"reward":1.179,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":73.84500000000001,"syllables":18,"sentences":2,"score":0.8615499999999998},"multiplier":1,"relevance":0.9}},{"id":1722713388,"content":"```suggestion\r\n    return { content: \"You are not assigned to this task\", statusCode: 200 };\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722713388","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -13,7 +14,7 @@ export async function stop(context: Context, issue: Context[\"payload\"][\"issue\"],\n   if (!userToUnassign) {\n     const log = logger.error(\"You are not assigned to this task\", { issueNumber, user: sender.login });\n     await addCommentToIssue(context, log?.logMessage.diff as string);\n-    return { output: \"You are not assigned to this task\" };\n+    return { content: \"You are not assigned to this task\", status: \"ok\" };","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":1,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.8}},{"id":1722713497,"content":"```suggestion\r\n  return { content: \"Task unassigned successfully\", statusCode: 200 };\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722713497","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -39,5 +40,5 @@ export async function stop(context: Context, issue: Context[\"payload\"][\"issue\"],\n   });\n \n   await addCommentToIssue(context, unassignedLog?.logMessage.diff as string);\n-  return { output: \"Task unassigned successfully\" };\n+  return { content: \"Task unassigned successfully\", status: \"ok\" };","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":1,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.8}},{"id":1722714614,"content":"```suggestion\r\n  APP_ID: T.Number(),\r\n```\r\nThese are numbers why not encode them as such?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722714614","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -4,6 +4,7 @@ import { StaticDecode } from \"@sinclair/typebox\";\n export const envSchema = T.Object({\n   SUPABASE_URL: T.String(),\n   SUPABASE_KEY: T.String(),\n+  APP_ID: T.String(),","score":{"reward":0.707,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":94.30000000000001,"syllables":11,"sentences":1,"score":0.6569999999999999},"multiplier":1,"relevance":0.7}},{"id":1722715686,"content":"Although this doesn't feel like `200` would be the correct \"http status code\" but you get the idea.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722715686","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -13,7 +14,7 @@ export async function stop(context: Context, issue: Context[\"payload\"][\"issue\"],\n   if (!userToUnassign) {\n     const log = logger.error(\"You are not assigned to this task\", { issueNumber, user: sender.login });\n     await addCommentToIssue(context, log?.logMessage.diff as string);\n-    return { output: \"You are not assigned to this task\" };\n+    return { content: \"You are not assigned to this task\", status: \"ok\" };","score":{"reward":1.014,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":85.16499999999999,"syllables":22,"sentences":1,"score":0.7483500000000001},"multiplier":1,"relevance":0.6}},{"id":1722715914,"content":"Same here I feel like there might be a more accurate status code to use.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722715914","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -39,5 +40,5 @@ export async function stop(context: Context, issue: Context[\"payload\"][\"issue\"],\n   });\n \n   await addCommentToIssue(context, unassignedLog?.logMessage.diff as string);\n-  return { output: \"Task unassigned successfully\" };\n+  return { content: \"Task unassigned successfully\", status: \"ok\" };","score":{"reward":0.876,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":90.09000000000002,"syllables":18,"sentences":1,"score":0.6990999999999998},"multiplier":1,"relevance":0.6}},{"id":1722837468,"content":"What is a \"proxy call\"?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722837468","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.207,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":100.24000000000002,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}},{"id":1722838321,"content":"It makes sense to follow that standard instead of making our own.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722838321","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -109,5 +123,5 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n     ].join(\"\\n\") as string\n   );\n \n-  return { output: \"Task assigned successfully\" };\n+  return { content: \"Task assigned successfully\", status: \"ok\" };","score":{"reward":0.896,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":81.85500000000002,"syllables":16,"sentences":1,"score":0.7814499999999999},"multiplier":1,"relevance":0.7}},{"id":1722841986,"content":"I am confused because its not included in that pull. Besides, your pull indicates the change, or else it wouldn't appear on this diff.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722841986","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -4,6 +4,7 @@ import { StaticDecode } from \"@sinclair/typebox\";\n export const envSchema = T.Object({\n   SUPABASE_URL: T.String(),\n   SUPABASE_KEY: T.String(),\n+  APP_ID: T.String(),","score":{"reward":1.04,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":85.85950000000001,"syllables":32,"sentences":2,"score":0.7414049999999999},"multiplier":1,"relevance":0.5}},{"id":1722893441,"content":"Yeah I just had a quick tutoring session with ChatGPT for this.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722893441","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.252,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":88.905,"syllables":15,"sentences":1,"score":0.71095},"multiplier":1,"relevance":0.2}},{"id":1722911976,"content":"If there are only three statuses maybe the HTTP status code idea is overkill. What do you think makes sense @gentlementlegen ? I assumed this was some type of plugin standard.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722911976","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,25 @@\n+import { Context, Env, SupportedEventsU } from \"../types\";\n+import { userSelfAssign, userStartStop } from \"./user-start-stop\";\n+\n+export interface Result {\n+  status: \"ok\" | \"failed\" | \"skipped\";","score":{"reward":1.652,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":75.42500000000001,"syllables":43,"sentences":3,"score":0.8457499999999999},"multiplier":1,"relevance":0.7}},{"id":1722914867,"content":"https://chatgpt.com/share/915e1875-a26a-4deb-b9fc-705e59f0212a","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722914867","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.354,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":98.8675,"syllables":11,"sentences":2,"score":0.6113249999999999},"multiplier":1,"relevance":0.3}},{"id":2336600070,"content":"What is this about timing and XP? There is no approved proposal related to this. \nXP is derived only from dollar rewards, plus adjustments. \nNo dollar rewards are related to deadlines and timing.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#issuecomment-2336600070","commentType":"PULL_COLLABORATOR","score":{"reward":1.255,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":70.27943181818185,"syllables":50,"sentences":4,"score":0.8972056818181815},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2247007142,"effect":{"addition":1053,"deletion":618},"reward":16.71,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 26.298 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>16.71</td></tr><tr><td>Review</td><td>Comment</td><td>15</td><td>9.588</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24\" target=\"_blank\" rel=\"noopener\">#24</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1053 -618</td><td>1</td><td>16.71</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722712548\" target=\"_blank\" rel=\"noopener\">What is this file?</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.156</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722712790\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionconst log = logger.error(\"You wer&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.8</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722713201\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionreturn { content: \"Task assigned su&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.9</td><td>1</td><td>1.179</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722713388\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionreturn { content: \"You are not as&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.8</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722713497\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionreturn { content: \"Task unassigned &hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.8</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722714614\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionAPP_ID: T.Number(),&#96;&#96;&#96&hellip;</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.707</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722715686\" target=\"_blank\" rel=\"noopener\">Although this doesn't feel like &#96;200&#96; would be the corre&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.6</td><td>1</td><td>1.014</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722715914\" target=\"_blank\" rel=\"noopener\">Same here I feel like there might be a more accurate status code&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.876</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722837468\" target=\"_blank\" rel=\"noopener\">What is a \"proxy call\"?</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.207</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722838321\" target=\"_blank\" rel=\"noopener\">It makes sense to follow that standard instead of making our own.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.896</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722841986\" target=\"_blank\" rel=\"noopener\">I am confused because its not included in that pull. Besides, yo&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.5</td><td>1</td><td>1.04</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722893441\" target=\"_blank\" rel=\"noopener\">Yeah I just had a quick tutoring session with ChatGPT for this.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.252</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722911976\" target=\"_blank\" rel=\"noopener\">If there are only three statuses maybe the HTTP status code idea&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.652</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1722914867\" target=\"_blank\" rel=\"noopener\">https://chatgpt.com/share/915e1875-a26a-4deb-b9fc-705e59f0212a</a></h6></td><td><details><summary>1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.354</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#issuecomment-2336600070\" target=\"_blank\" rel=\"noopener\">What is this about timing and XP? There is no approved proposal &hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.5</td><td>1</td><td>1.255</td></tr></tbody></table></details>"},"whilefoo":{"total":21.07,"userId":139262667,"comments":[{"id":1740768038,"content":"won't `getDeadline` return null if price label is not present?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1740768038","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -11,13 +17,22 @@ export async function userStartStop(context: Context): Promise<{ output: string\n     .slice(1)\n     .map((teamMate) => teamMate.split(\" \")[0]);\n \n-  const user = comment.user?.login ? { login: comment.user.login, id: comment.user.id } : { login: sender.login, id: sender.id };\n-\n   if (slashCommand === \"stop\") {\n-    return await stop(context, issue, user, repository);\n+    return await stop(context, issue, sender, repository);\n   } else if (slashCommand === \"start\") {\n     return await start(context, issue, sender, teamMates);\n   }\n \n-  return { output: null };\n+  return { status: HttpStatusCode.NOT_MODIFIED };\n+}\n+\n+export async function userSelfAssign(context: Context): Promise<Result> {\n+  const { payload } = context;\n+  const { issue } = payload;\n+  const deadline = getDeadline(issue);\n+\n+  const users = issue.assignees.map((user) => `@${user?.login}`).join(\", \");\n+\n+  await addCommentToIssue(context, `${users} the deadline is at ${deadline}`);","score":{"reward":0.88,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":86.70500000000001,"syllables":13,"sentences":1,"score":0.7329499999999999},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2275398389,"effect":{"addition":1321,"deletion":687},"reward":20.08,"priority":1},{"reviewId":2276844362,"effect":{"addition":8,"deletion":3},"reward":0.11,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 21.07 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>20.19</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.88</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24\" target=\"_blank\" rel=\"noopener\">#24</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1321 -687</td><td>1</td><td>20.08</td></tr><tr><td>+8 -3</td><td>1</td><td>0.11</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/24#discussion_r1740768038\" target=\"_blank\" rel=\"noopener\">won't &#96;getDeadline&#96; return null if price label is not pr&hellip;</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.88</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_26.json","json":{"gentlementlegen":{"userId":9807008,"total":410.288,"task":{"reward":400,"multiplier":1},"comments":[{"id":2315116006,"content":"I will read the old bot code more in detail, but for now the question I had would be:\r\n- if there is already a user assigned, and another user opens a PR against an issue, does it close the PR saying this is already assigned or shall we assign 2 users to the issue (I guess not since it can be abused)?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/26#issuecomment-2315116006","commentType":"ISSUE_AUTHOR","score":{"reward":5.778,"formatting":{"content":{"p":{"score":0,"elementCount":1},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":1}},"result":0.1},"priority":2,"words":{"wordCount":62,"wordValue":0.1,"result":2.54},"readability":{"fleschKincaid":32.01467741935488,"syllables":82,"sentences":1,"score":0.7201467741935488},"multiplier":1,"relevance":0.9}},{"id":2489097127,"content":"I believe that the v1 of the bot would automatically assign a user to an issue if that said user would open a pull-request against an issue. Currently this doesn't happen, for example in https://github.com/ubiquibot/command-start-stop/issues/22\r\nI do not know how this would play with the maximum assigned issues however, if a user would be above the maximum allowed threshold.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/26","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.51,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":60,"wordValue":0.1,"result":2.52},"readability":{"fleschKincaid":53.52478260869569,"syllables":106,"sentences":3,"score":0.9352478260869569},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 410.288 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>400</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.51</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>5.778</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/26\" target=\"_blank\" rel=\"noopener\">I believe that the v1 of the bot would automatically assign a us&hellip;</a></h6></td><td><details><summary>3.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 60&#13;  wordValue: 0.1&#13;  result: 2.52&#13;</pre></details></td><td>1</td><td>1</td><td>4.51</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/26#issuecomment-2315116006\" target=\"_blank\" rel=\"noopener\">I will read the old bot code more in detail, but for now the que&hellip;</a></h6></td><td><details><summary>2.64</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 1&#13;  result: 0.1&#13;regex:&#13;  wordCount: 62&#13;  wordValue: 0.1&#13;  result: 2.54&#13;</pre></details></td><td>0.9</td><td>2</td><td>5.778</td></tr></tbody></table></details>"},"0x4007":{"total":12.474,"userId":4975670,"comments":[{"id":2314122299,"content":"It respects that rule. If they hit their limit it simply doesn't assign them","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/26#issuecomment-2314122299","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.664,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":86.42250000000001,"syllables":20,"sentences":2,"score":0.7357749999999998},"multiplier":1,"relevance":0.9}},{"id":2316557818,"content":"It just follows the start logic. Basically it doesn't do anything in that scenario.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/26#issuecomment-2316557818","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.496,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":63.86250000000001,"syllables":24,"sentences":2,"score":0.9613749999999999},"multiplier":1,"relevance":0.8}},{"id":2338228389,"content":"No idea why I set this to one week.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/26#issuecomment-2338228389","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.218,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":103.70000000000002,"syllables":10,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}},{"id":2289589366,"content":"We never needed reopened in the past","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/39#pullrequestreview-2289589366","commentType":"PULL_COLLABORATOR","score":{"reward":0.498,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":90.95857142857145,"syllables":9,"sentences":1,"score":0.6904142857142855},"multiplier":1,"relevance":0.3}},{"id":1750056057,"content":"Reopened it doesn't seem to make sense","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/39#discussion_r1750056057","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,7 +1,7 @@\n {\n   \"name\": \"Start | Stop\",\n   \"description\": \"Assign or un-assign yourself from an issue.\",\n-  \"ubiquity:listeners\": [\"issue_comment.created\", \"issues.assigned\"],\n+  \"ubiquity:listeners\": [\"issue_comment.created\", \"issues.assigned\", \"pull_request.opened\", \"pull_request.reopened\"],","score":{"reward":1.386,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":103.54,"syllables":9,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":1750057240,"content":"What's the deadline bit for?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/39#discussion_r1750057240","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -26,10 +28,10 @@ export async function userStartStop(context: Context): Promise<Result> {\n   return { status: HttpStatusCode.NOT_MODIFIED };\n }\n \n-export async function userSelfAssign(context: Context): Promise<Result> {\n+export async function userSelfAssign(context: Context<\"issues.assigned\">): Promise<Result> {\n   const { payload } = context;\n   const { issue } = payload;\n-  const deadline = getDeadline(issue);\n+  const deadline = getDeadline(issue.labels);","score":{"reward":1.264,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":102.045,"syllables":7,"sentences":1,"score":1},"multiplier":1,"relevance":0.8}},{"id":2338223545,"content":"Just gonna focus on shipping and merging simple pulls to try and catch back up with things","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/39#issuecomment-2338223545","commentType":"PULL_COLLABORATOR","score":{"reward":0.328,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":80.09764705882354,"syllables":22,"sentences":1,"score":0.7990235294117646},"multiplier":1,"relevance":0.1}}],"reviewRewards":[{"reviews":[{"reviewId":2289589366,"effect":{"addition":146,"deletion":27},"reward":3.46,"priority":2},{"reviewId":2290038887,"effect":{"addition":3,"deletion":5},"reward":0.16,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/39"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 12.474 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>3.62</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>5.378</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>3.476</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/39\" target=\"_blank\" rel=\"noopener\">#39</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+146 -27</td><td>2</td><td>3.46</td></tr><tr><td>+3 -5</td><td>2</td><td>0.16</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/26#issuecomment-2314122299\" target=\"_blank\" rel=\"noopener\">It respects that rule. If they hit their limit it simply doesn't&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.9</td><td>2</td><td>2.664</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/26#issuecomment-2316557818\" target=\"_blank\" rel=\"noopener\">It just follows the start logic. Basically it doesn't do anythin&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.496</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/26#issuecomment-2338228389\" target=\"_blank\" rel=\"noopener\">No idea why I set this to one week.</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.218</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/39#pullrequestreview-2289589366\" target=\"_blank\" rel=\"noopener\">We never needed reopened in the past</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.498</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/39#discussion_r1750056057\" target=\"_blank\" rel=\"noopener\">Reopened it doesn't seem to make sense</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.386</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/39#discussion_r1750057240\" target=\"_blank\" rel=\"noopener\">What's the deadline bit for?</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.264</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/39#issuecomment-2338223545\" target=\"_blank\" rel=\"noopener\">Just gonna focus on shipping and merging simple pulls to try and&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.328</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_81.json","json":{"gentlementlegen":{"userId":9807008,"total":78.33,"task":{"reward":75,"multiplier":1},"comments":[{"id":2467443981,"content":"```\r\n! Failed to run comment evaluation. Error: execution reverted (no data present; likely require(false) occurred (action=\"call\", data=\"0x\", reason=\"require(false)\", transaction={ \"data\": \"0x95d89b41\", \"to\": \"0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d\" }, invocation=null, revert=null, code=CALL_EXCEPTION, version=6.13.1)\r\n```\r\n_Originally posted by @ubiquityos[bot] in https://github.com/ubiquibot/conversation-rewards/issues/76#issuecomment-2290670929_\r\nThe following error occurred during the comment evaluation, which seems linked to the `ether` package failing at some point, and needs investigating.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.33,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":25.716959459459474,"syllables":71,"sentences":2,"score":0.6571695945945948},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 78.33 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.33</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;! Failed to run comment evaluation. Error: exec&hellip;</a></h6></td><td><details><summary>2.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>1</td><td>1</td><td>3.33</td></tr></tbody></table></details>"},"0x4007":{"total":25.641,"userId":4975670,"comments":[{"id":2290855512,"content":"I think @Keyrxng might be the best to handle this task actually @gentlementlegen given their experience with building the RPC handler. \n@Keyrxng rfc. Your input to the specification can also be useful if you don't want to handle the code.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2290855512","commentType":"ISSUE_COLLABORATOR","score":{"reward":5.943,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":65.03162601626018,"syllables":62,"sentences":3,"score":0.9496837398373983},"multiplier":1,"relevance":0.7}},{"id":2292510079,"content":"I suppose we can bump the package and wait a month to see this error not happen again before closing as complete.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2292510079","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.8,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":69.14136363636365,"syllables":30,"sentences":1,"score":0.9085863636363635},"multiplier":1,"relevance":0.8}},{"id":2297922140,"content":"Mixed feelings on the crediting of this because we don't have the root cause diagnosed and are guessing that this is solved.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2297922140","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.824,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":76.82043478260871,"syllables":29,"sentences":1,"score":0.8317956521739128},"multiplier":1,"relevance":0.8}},{"id":2298002953,"content":"@gentlementlegen something was definitely recently broken here because I'm seeing it all the time now\r\nUpdate: perhaps its the HTML comment notation not being properly escaped, which could be an old problem.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2298002953","commentType":"ISSUE_COLLABORATOR","score":{"reward":6.426,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":27.212727272727278,"syllables":57,"sentences":1,"score":0.6721272727272728},"multiplier":1,"relevance":0.9}},{"id":2298188302,"content":"Those are the reward comments. I assumed that if I closed as unplanned first, and then merged the pull, it would skip permit generation but unfortunately it marked as complete upon merge.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2298188302","commentType":"ISSUE_COLLABORATOR","score":{"reward":3,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":66.33875,"syllables":47,"sentences":2,"score":0.9366125},"multiplier":1,"relevance":0.4}},{"id":2298211362,"content":"No everything is fine here. Carry on.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2298211362","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.528,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":70.33964285714288,"syllables":11,"sentences":2,"score":0.8966035714285713},"multiplier":1,"relevance":0.2}}],"reviewRewards":[{"reviews":[{"reviewId":2246925068,"effect":{"addition":2,"deletion":2},"reward":0.12,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/86"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 25.641 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.12</td></tr><tr><td>Issue</td><td>Comment</td><td>6</td><td>25.521</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/86\" target=\"_blank\" rel=\"noopener\">#86</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+2 -2</td><td>3</td><td>0.12</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2290855512\" target=\"_blank\" rel=\"noopener\">I think @Keyrxng might be the best to handle this task actually &hellip;</a></h6></td><td><details><summary>2.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.7</td><td>3</td><td>5.943</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2292510079\" target=\"_blank\" rel=\"noopener\">I suppose we can bump the package and wait a month to see this e&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.8</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2297922140\" target=\"_blank\" rel=\"noopener\">Mixed feelings on the crediting of this because we don't have th&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.824</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2298002953\" target=\"_blank\" rel=\"noopener\">@gentlementlegen something was definitely recently broken here b&hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.9</td><td>3</td><td>6.426</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2298188302\" target=\"_blank\" rel=\"noopener\">Those are the reward comments. I assumed that if I closed as unp&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.4</td><td>3</td><td>3</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2298211362\" target=\"_blank\" rel=\"noopener\">No everything is fine here. Carry on.</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.528</td></tr></tbody></table></details>"},"Keyrxng":{"total":5.037,"userId":106303466,"comments":[{"id":2290951735,"content":"I'm not at a computer right now to investigate things at all I will be able in about an hour or so.\nI'm happy to take it if that is suitable\nI'd double check that the rpc handler package is the latest version it likely isn't\nI haven't seen that specific error before 'require(false)' so I don't have much value to add without debugging sorry","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2290951735","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.743,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":72,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":52.79500000000003,"syllables":100,"sentences":2,"score":0.9279500000000003},"multiplier":0.25,"relevance":0.7}},{"id":2291574631,"content":"Checked in with @gentlementlegen and he's going to take care of it as it's a level playing field with understanding etc\r\nIt's really strange that it would have failed for a read-op and something like `symbol()` that takes no args and returns a hardcoded string value but instead errors with \"no data present\" which reads as if that function doesn't exist at the target address but it certainly does\r\n1. `rpc-handler` needs bumped from `1.1.0` to `1.2.3`\r\n2. There isn't any other way to call the method and the target address is correct so I doubt it's user error or a fault from the handler itself. We cannot see the network that it sent the request to but the only thing I can think of besides an out-of-sync/faulty provider is that `rpc-handler@1.1.0` was able to default to `localhost` (although I'm sure I wrote a fix for that from the beginning so long as the networkId wasn't `31337` it would race and return another)\r\nI'm happy to take the task if the need calls for it for whatever reason but I'm sure it's easily resolved with a package bump but I may be wrong","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2291574631","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.47,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":3,"words":{"wordCount":199,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":-4.265037688442192,"syllables":259,"sentences":2,"score":0},"multiplier":0.25,"relevance":1}},{"id":2295347247,"content":"I'm sure we just loop through our object of valid latencies retrying the call on each provider once and then moving on before repeating the entire object loop again n times according to the config settings.\r\nIn theory with a handful of RPCs we should expect to never see a failed call which exhausts all endpoints for any reason other than human error, well that was my thinking originally and the purpose of the `Proxy`.\r\nI've found authoring something which appears to have no bugs is far more anxiety inducing than something you had to really fight with to make it do what you want. So I hope you do find a bug because while I'm confident in my work I am very hesitant to say that it's completely error free","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2295347247","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.824,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":3,"words":{"wordCount":134,"wordValue":0.1,"result":2.38},"readability":{"fleschKincaid":52.24593283582091,"syllables":191,"sentences":4,"score":0.9224593283582091},"multiplier":0.25,"relevance":0.8}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/86"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 5.037 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>3</td><td>5.037</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2290951735\" target=\"_blank\" rel=\"noopener\">I'm not at a computer right now to investigate things at all I w&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 72&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.743</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2291574631\" target=\"_blank\" rel=\"noopener\">Checked in with @gentlementlegen and he's going to take care of &hellip;</a></h6></td><td><details><summary>1.94</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 199&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>1</td><td>3</td><td>1.47</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/81#issuecomment-2295347247\" target=\"_blank\" rel=\"noopener\">I'm sure we just loop through our object of valid latencies retr&hellip;</a></h6></td><td><details><summary>2.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 134&#13;  wordValue: 0.1&#13;  result: 2.38&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.824</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_25.json","json":{"gentlementlegen":{"userId":9807008,"total":150,"task":{"reward":150,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 150 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>150</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"rndquu":{"total":6.89,"userId":119500907,"comments":[{"id":2320537116,"content":"Check [this](https://github.com/ubiquity/ts-template/issues/41#issuecomment-2134682781) comment where conversation rewards are distributed for the issue that was closed as \"not planned\".\r\nExpected behaviour: conversation rewards are not printed for github issues closed as \"not planned\".","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/25","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.77,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":57.379919354838734,"syllables":49,"sentences":2,"score":0.9737991935483873},"multiplier":1,"relevance":1}}],"reviewRewards":[{"reviews":[{"reviewId":2090196755,"effect":{"addition":85,"deletion":19},"reward":3.12,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/27"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 6.89 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>3.12</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.77</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/27\" target=\"_blank\" rel=\"noopener\">#27</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+85 -19</td><td>3</td><td>3.12</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/25\" target=\"_blank\" rel=\"noopener\">Check [this](https://github.com/ubiquity/ts-template/issues/41#i&hellip;</a></h6></td><td><details><summary>2.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>1</td><td>1</td><td>3.77</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_185.json","json":{"shiv810":{"userId":53160903,"total":602.567,"task":{"reward":600,"multiplier":1},"comments":[{"id":2193426804,"content":"Resolves [#185](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185)\r\n- Adds Evals for `Command-ask` using the `Levenshtein` score.\r\n- New Github Action for running the evals.","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37","commentType":"PULL_SPECIFICATION","score":{"reward":2.567,"formatting":{"content":{"p":{"score":0,"elementCount":3},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1.2},"priority":1,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":75.14250000000001,"syllables":22,"sentences":2,"score":0.8485749999999999},"multiplier":1,"relevance":0.85}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 602.567 XP ]</a>&nbsp;</h3><h6>@shiv810</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>600</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>2.567</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37\" target=\"_blank\" rel=\"noopener\">Resolves [#185](https://github.com/ubiquity-os-marketplace/text-&hellip;</a></h6></td><td><details><summary>2.41</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.2&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.85</td><td>1</td><td>2.567</td></tr></tbody></table></details>"},"0x4007":{"total":90.586,"userId":4975670,"comments":[{"id":2480634709,"content":"rfc @transitive-bullshit","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2480634709","commentType":"ISSUE_AUTHOR","score":{"reward":0.387,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":34.59000000000003,"syllables":6,"sentences":1,"score":0.7459000000000003},"multiplier":1,"relevance":0.3}},{"id":2492919269,"content":"This should list the tasks you're currently working on. I've seen it work before so perhaps it's broken","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2492919269","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":87.40607142857144,"syllables":27,"sentences":2,"score":0.7259392857142857},"multiplier":1,"relevance":0}},{"id":2544051173,"content":"@gentlementlegen theres a bug it shouldn't have generated a payment permit for Travis because he never registered a wallet. I think it would make sense to show an error for them explaining that they need to register a wallet to be eligible for rewards, and not a broken link. \nAlso it appears that relevance scoring isn't taking effect at least when looking at rndquu last comment reward.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2544051173","commentType":"ISSUE_AUTHOR","score":{"reward":1.002,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":69,"wordValue":0.1,"result":2.59},"readability":{"fleschKincaid":55.97695652173914,"syllables":104,"sentences":3,"score":0.9597695652173914},"multiplier":1,"relevance":0.1}},{"id":2544712711,"content":"Check rndquu last comment reward \n```\n5.71 * 0.3 = 1.713 \n1.713 * 3 = 5.139 \n```\nShould have been 5.139\nThe old version it would just not render Travis payment","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2544712711","commentType":"ISSUE_AUTHOR","score":{"reward":0.543,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":86.70500000000001,"syllables":26,"sentences":2,"score":0.7329499999999999},"multiplier":1,"relevance":0.1}},{"id":2664586451,"content":"We need to make evals to benchmark accuracy\n\"Search for Braintrust AI\"","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185","commentType":"ISSUE_SPECIFICATION","score":{"reward":1.33,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":67.75500000000001,"syllables":18,"sentences":1,"score":0.9224499999999999},"multiplier":1,"relevance":1}},{"id":1878023087,"content":"I assume `ubiquity-agent` is for testing purposes only.","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1878023087","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -19,7 +17,7 @@ jobs:\n       VOYAGEAI_API_KEY: ${{ secrets.VOYAGEAI_API_KEY }}\n       OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}\n       OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}\n-      UBIQUITY_OS_APP_NAME: \"ubiquity-agent\"  # Hardcoded value\n+      UBIQUITY_OS_APP_NAME: \"ubiquity-agent\"","score":{"reward":1.056,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":66.7871428571429,"syllables":11,"sentences":1,"score":0.9321285714285711},"multiplier":1,"relevance":0.4}},{"id":1880079376,"content":"Will it be a problem to leave in `@ubosshivaditya`?\r\nAlso this seems like a random example can you explain the context of this file further?","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1880079376","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,25 @@\n+{\n+  \"issueResponses\": [\n+    {\n+      \"scenario\": \"manifest.name mismatch \",\n+      \"issue\": {\n+        \"body\": \"Manifests need to be updated so the name matches the intended name, which is the name of the repo it lives in.\\n\\nAny mismatch in manifest.name and the plugin repo, and we will not be able to install those plugins. The config will look like this:\\n\\nThis is because the worker URL contains the repo name, and we use that to match against manifest.name.\",\n+        \"number\": 27,\n+        \"html_url\": \"https://github.com/ubiquity-os/ubiquity-os-plugin-installer/issues/27/\",\n+        \"question\": \"@ubosshivaditya could you please provide a summary of the issue ?\"","score":{"reward":4.347,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":78.33000000000001,"syllables":33,"sentences":2,"score":0.8166999999999999},"multiplier":1,"relevance":0.7}},{"id":1880080972,"content":"This shouldn't have passed linter settings. Make sure you run `yarn format` in case the git hooks aren't working. We don't generally allow arrow functions unless they are used in some tiny callback context.","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1880080972","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,114 @@\n+import { SupabaseClient } from \"@supabase/supabase-js\";\n+import { createAdapters } from \"../../src/adapters\";\n+import { CommentSimilaritySearchResult } from \"../../src/adapters/supabase/helpers/comment\";\n+import { IssueSimilaritySearchResult } from \"../../src/adapters/supabase/helpers/issues\";\n+import { fetchRepoLanguageStats, fetchRepoDependencies } from \"../../src/handlers/ground-truths/chat-bot\";\n+import { findGroundTruths } from \"../../src/handlers/ground-truths/find-ground-truths\";\n+import { logger } from \"../../src/helpers/errors\";\n+import { formatChatHistory } from \"../../src/helpers/format-chat-history\";\n+import { recursivelyFetchLinkedIssues } from \"../../src/helpers/issue-fetching\";\n+import { Context } from \"../../src/types\";\n+import { VoyageAIClient } from \"voyageai\";\n+import OpenAI from \"openai\";\n+\n+const SEPERATOR = \"######################################################\\n\";\n+\n+export interface FetchContext {\n+  rerankedText: string[];\n+  formattedChat: string[];\n+  groundTruths: string[];\n+}\n+\n+export interface EvalClients {\n+  supabase: SupabaseClient;\n+  voyage: VoyageAIClient;\n+  openai: OpenAI;\n+}\n+\n+export const initAdapters = (context: Context, clients: EvalClients): Context => {","score":{"reward":6.885,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":76.55333333333336,"syllables":49,"sentences":3,"score":0.8344666666666665},"multiplier":1,"relevance":0.9}},{"id":1880082063,"content":"Are these many hashtags really necessary? I thought writing in plain markdown syntax is sufficient.","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1880082063","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,114 @@\n+import { SupabaseClient } from \"@supabase/supabase-js\";\n+import { createAdapters } from \"../../src/adapters\";\n+import { CommentSimilaritySearchResult } from \"../../src/adapters/supabase/helpers/comment\";\n+import { IssueSimilaritySearchResult } from \"../../src/adapters/supabase/helpers/issues\";\n+import { fetchRepoLanguageStats, fetchRepoDependencies } from \"../../src/handlers/ground-truths/chat-bot\";\n+import { findGroundTruths } from \"../../src/handlers/ground-truths/find-ground-truths\";\n+import { logger } from \"../../src/helpers/errors\";\n+import { formatChatHistory } from \"../../src/helpers/format-chat-history\";\n+import { recursivelyFetchLinkedIssues } from \"../../src/helpers/issue-fetching\";\n+import { Context } from \"../../src/types\";\n+import { VoyageAIClient } from \"voyageai\";\n+import OpenAI from \"openai\";\n+\n+const SEPERATOR = \"######################################################\\n\";\n+\n+export interface FetchContext {\n+  rerankedText: string[];\n+  formattedChat: string[];\n+  groundTruths: string[];\n+}\n+\n+export interface EvalClients {\n+  supabase: SupabaseClient;\n+  voyage: VoyageAIClient;\n+  openai: OpenAI;\n+}\n+\n+export const initAdapters = (context: Context, clients: EvalClients): Context => {\n+  const adapters = createAdapters(clients.supabase, clients.voyage, clients.openai, context);\n+  context.adapters = adapters;\n+\n+  // Update adapter contexts\n+  Object.values(adapters).forEach((adapterGroup) => {\n+    Object.values(adapterGroup).forEach((adapter) => {\n+      if (adapter && typeof adapter === \"object\" && \"context\" in adapter) {\n+        adapter.context = context;\n+      }\n+    });\n+  });\n+  return context;\n+};\n+\n+export async function fetchContext(context: Context, question: string): Promise<FetchContext> {\n+  const {\n+    config: { similarityThreshold },\n+    adapters: {\n+      supabase: { comment, issue },\n+      voyage: { reranker },\n+    },\n+  } = context;\n+  const { specAndBodies, streamlinedComments } = await recursivelyFetchLinkedIssues({\n+    context,\n+    owner: context.payload.repository.owner.login,\n+    repo: context.payload.repository.name,\n+  });\n+  let formattedChat = await formatChatHistory(context, streamlinedComments, specAndBodies);\n+  logger.info(`${formattedChat.join(\"\")}`);\n+  // using db functions to find similar comments and issues\n+  const [similarComments, similarIssues] = await Promise.all([\n+    comment.findSimilarComments(question, 1 - similarityThreshold, \"\"),\n+    issue.findSimilarIssues(question, 1 - similarityThreshold, \"\"),\n+  ]);\n+  // combine the similar comments and issues into a single array\n+  const similarText = [\n+    ...(similarComments?.map((comment: CommentSimilaritySearchResult) => comment.comment_plaintext) || []),\n+    ...(similarIssues?.map((issue: IssueSimilaritySearchResult) => issue.issue_plaintext) || []),\n+  ];\n+  // filter out any empty strings\n+  formattedChat = formattedChat.filter((text) => text);\n+  // rerank the similar text using voyageai\n+  const rerankedText = similarText.length > 0 ? await reranker.reRankResults(similarText, question) : [];\n+  // gather structural data about the payload repository\n+  const [languages, { dependencies, devDependencies }] = await Promise.all([fetchRepoLanguageStats(context), fetchRepoDependencies(context)]);\n+  let groundTruths: string[] = [];\n+  if (!languages.length) {\n+    groundTruths.push(\"No languages found in the repository\");\n+  }\n+  if (!Reflect.ownKeys(dependencies).length) {\n+    groundTruths.push(\"No dependencies found in the repository\");\n+  }\n+  if (!Reflect.ownKeys(devDependencies).length) {\n+    groundTruths.push(\"No devDependencies found in the repository\");\n+  }\n+  if (groundTruths.length > 3) {\n+    groundTruths = await findGroundTruths(context, \"chat-bot\", { languages, dependencies, devDependencies });\n+  }\n+  return {\n+    rerankedText,\n+    formattedChat,\n+    groundTruths,\n+  };\n+}\n+\n+export function formattedHistory(fetchContext: FetchContext): string {\n+  //Iterate through the formatted chat history and add it to the final formatted chat\n+  let formattedChat = \"#################### Chat History ####################\\n\";\n+  fetchContext.formattedChat.forEach((chat) => {\n+    formattedChat += chat;\n+  });\n+  formattedChat += SEPERATOR;\n+  //Iterate through the reranked text and add it to the final formatted chat\n+  formattedChat += \"#################### Reranked Text ####################\\n\";\n+  fetchContext.rerankedText.forEach((reranked) => {\n+    formattedChat += reranked;\n+  });\n+  formattedChat += SEPERATOR;\n+  //Iterate through the ground truths and add it to the final formatted chat\n+  formattedChat += \"#################### Ground Truths ####################\\n\";","score":{"reward":2.79,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":52.58250000000001,"syllables":26,"sentences":2,"score":0.9258250000000001},"multiplier":1,"relevance":0.6}},{"id":1880082917,"content":"Why did you set such a low max? Also should we really be using GPT?","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1880082917","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,206 @@\n+import { Eval } from \"braintrust\";\n+import { Levenshtein, ContextPrecision } from \"autoevals\";\n+import goldResponses from \"./data/eval-gold-responses.json\";\n+import OpenAI from \"openai\";\n+import { VoyageAIClient } from \"voyageai\";\n+import { createClient } from \"@supabase/supabase-js\";\n+import { createAdapters } from \"../src/adapters\";\n+import { Context } from \"../src/types/context\";\n+import { logger } from \"../src/helpers/errors\";\n+import { customOctokit as Octokit } from \"@ubiquity-os/plugin-sdk/octokit\";\n+import issueTemplate from \"../tests/__mocks__/issue-template\";\n+import { writeFileSync } from \"fs\";\n+import { fetchContext, formattedHistory, initAdapters } from \"./handlers/setup-context\";\n+\n+// Required environment variables with type assertion\n+const requiredEnvVars = {\n+  OPENAI_API_KEY: process.env.OPENAI_API_KEY as string,\n+  UBIQUITY_OS_APP_NAME: process.env.UBIQUITY_OS_APP_NAME as string,\n+  VOYAGEAI_API_KEY: process.env.VOYAGEAI_API_KEY as string,\n+  SUPABASE_URL: process.env.SUPABASE_URL as string,\n+  SUPABASE_KEY: process.env.SUPABASE_KEY as string,\n+  OPENROUTER_API_KEY: process.env.OPENROUTER_API_KEY as string,\n+};\n+\n+// Validate all required env vars are present\n+Object.entries(requiredEnvVars).forEach(([key, value]) => {\n+  if (!value) {\n+    throw new Error(`${key} is required`);\n+  }\n+});\n+\n+type Scenario = {\n+  scenario: string;\n+  issue: {\n+    body: string;\n+    html_url: string;\n+    number: number;\n+    question: string;\n+  };\n+  responseMustInclude: Array<string>;\n+  sender: {\n+    login: string;\n+    type: string;\n+  };\n+  repository: {\n+    name: string;\n+    owner: {\n+      login: string;\n+      type: string;\n+    };\n+  };\n+  expectedResponse: string;\n+};\n+\n+type EvalInput = {\n+  scenario: Scenario;\n+};\n+\n+type EvalOutput = {\n+  output: string;\n+  context: string;\n+  expected: string;\n+};\n+\n+const inputs = {\n+  config: {\n+    model: \"gpt-4o\",\n+    similarityThreshold: 0.8,\n+    maxTokens: 1000,","score":{"reward":3.456,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":97.7025,"syllables":18,"sentences":2,"score":0.622975},"multiplier":1,"relevance":0.8}},{"id":1880083365,"content":"yarn format","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1880083365","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,206 @@\n+import { Eval } from \"braintrust\";\n+import { Levenshtein, ContextPrecision } from \"autoevals\";\n+import goldResponses from \"./data/eval-gold-responses.json\";\n+import OpenAI from \"openai\";\n+import { VoyageAIClient } from \"voyageai\";\n+import { createClient } from \"@supabase/supabase-js\";\n+import { createAdapters } from \"../src/adapters\";\n+import { Context } from \"../src/types/context\";\n+import { logger } from \"../src/helpers/errors\";\n+import { customOctokit as Octokit } from \"@ubiquity-os/plugin-sdk/octokit\";\n+import issueTemplate from \"../tests/__mocks__/issue-template\";\n+import { writeFileSync } from \"fs\";\n+import { fetchContext, formattedHistory, initAdapters } from \"./handlers/setup-context\";\n+\n+// Required environment variables with type assertion\n+const requiredEnvVars = {\n+  OPENAI_API_KEY: process.env.OPENAI_API_KEY as string,\n+  UBIQUITY_OS_APP_NAME: process.env.UBIQUITY_OS_APP_NAME as string,\n+  VOYAGEAI_API_KEY: process.env.VOYAGEAI_API_KEY as string,\n+  SUPABASE_URL: process.env.SUPABASE_URL as string,\n+  SUPABASE_KEY: process.env.SUPABASE_KEY as string,\n+  OPENROUTER_API_KEY: process.env.OPENROUTER_API_KEY as string,\n+};\n+\n+// Validate all required env vars are present\n+Object.entries(requiredEnvVars).forEach(([key, value]) => {\n+  if (!value) {\n+    throw new Error(`${key} is required`);\n+  }\n+});\n+\n+type Scenario = {\n+  scenario: string;\n+  issue: {\n+    body: string;\n+    html_url: string;\n+    number: number;\n+    question: string;\n+  };\n+  responseMustInclude: Array<string>;\n+  sender: {\n+    login: string;\n+    type: string;\n+  };\n+  repository: {\n+    name: string;\n+    owner: {\n+      login: string;\n+      type: string;\n+    };\n+  };\n+  expectedResponse: string;\n+};\n+\n+type EvalInput = {\n+  scenario: Scenario;\n+};\n+\n+type EvalOutput = {\n+  output: string;\n+  context: string;\n+  expected: string;\n+};\n+\n+const inputs = {\n+  config: {\n+    model: \"gpt-4o\",\n+    similarityThreshold: 0.8,\n+    maxTokens: 1000,\n+  },\n+  settings: {\n+    openAiBaseUrl: \"https://openrouter.ai/api/v1\",\n+  },\n+};\n+\n+const clients = {\n+  supabase: createClient(requiredEnvVars.SUPABASE_URL, requiredEnvVars.SUPABASE_KEY),\n+  voyage: new VoyageAIClient({ apiKey: requiredEnvVars.VOYAGEAI_API_KEY }),\n+  openai: new OpenAI({\n+    apiKey: (inputs.settings.openAiBaseUrl && requiredEnvVars.OPENROUTER_API_KEY) || requiredEnvVars.OPENAI_API_KEY,\n+    baseURL: inputs.settings.openAiBaseUrl || undefined,\n+  }),\n+};\n+\n+// Create base context\n+const baseContext: Partial<Context> = {\n+  config: inputs.config,\n+  env: requiredEnvVars,\n+  logger,\n+  octokit: new Octokit({ auth: process.env.GITHUB_TOKEN }),\n+};\n+\n+export const main = async () => {\n+  const result = await Eval<EvalInput, EvalOutput, string, void, void>(\n+    \"Command Ask LLM\",\n+    {\n+      data: () => {\n+        const responses = goldResponses.issueResponses as Scenario[];\n+        return responses.map((scenario: Scenario) => {\n+          return {\n+            input: {\n+              scenario,\n+            },\n+            expected: scenario.expectedResponse,\n+          };\n+        });\n+      },\n+      task: async (input: EvalInput) => {\n+        const { scenario } = input;\n+        let initialContext: Context = {\n+          ...baseContext,\n+          adapters: {} as ReturnType<typeof createAdapters>,\n+          payload: {\n+            issue: {\n+              ...issueTemplate,\n+              body: scenario.issue.body,\n+              html_url: scenario.issue.html_url,\n+              number: scenario.issue.number,\n+            } as unknown as Context[\"payload\"][\"issue\"],\n+            sender: scenario.sender,\n+            repository: {\n+              name: scenario.repository.name,\n+              owner: {\n+                login: scenario.repository.owner.login,\n+              },\n+            },\n+            comment: {\n+              body: scenario.issue.question,\n+              user: scenario.sender,\n+            } as unknown as Context[\"payload\"][\"comment\"],\n+            action: \"created\" as string,\n+            installation: { id: 1 } as unknown as Context[\"payload\"][\"installation\"],\n+            organization: { login: \"ubiquity\" } as unknown as Context[\"payload\"][\"organization\"],\n+          },\n+          eventName: \"issue_comment.created\",\n+        } as Context;\n+\n+        initialContext = initAdapters(initialContext, clients);\n+        const chatHistory = await fetchContext(initialContext, scenario.issue.question);\n+        const formattedContextHistory = formattedHistory(chatHistory);\n+        const result = await initialContext.adapters.openai.completions.createCompletion(\n+          scenario.issue.question,\n+          initialContext.config.model || \"gpt-4o\",\n+          chatHistory.rerankedText,\n+          chatHistory.formattedChat,\n+          chatHistory.groundTruths,\n+          initialContext.env.UBIQUITY_OS_APP_NAME,\n+          initialContext.config.maxTokens\n+        );\n+\n+        return {\n+          output: result.answer,\n+          context: formattedContextHistory,\n+          expected: scenario.expectedResponse,\n+        };\n+      },\n+      scores: [\n+        (args) =>\n+          Levenshtein({\n+            output: args.output.output,\n+            expected: args.expected,\n+          }),\n+        (args) =>\n+          ContextPrecision({\n+            input: args.input.scenario.issue.question,\n+            output: args.output.output,\n+            context: args.output.context,\n+            expected: args.expected,\n+            openAiApiKey: requiredEnvVars.OPENROUTER_API_KEY,\n+            openAiBaseUrl: inputs.settings.openAiBaseUrl,\n+          }),\n+      ],\n+    },\n+    {}\n+  );\n+\n+  const scores = result.summary.scores || {};\n+  const metrics = result.summary.metrics || {};\n+\n+  // Helper function to format diff with arrow\n+  const formatDiff = (value: number | undefined, isTime = false) => {\n+    if (value === undefined) return \"-\";\n+    const arrow = value > 0 ? \"↑\" : \"↓\";\n+    const formatted = isTime ? Math.abs(value).toFixed(2) + \"s\" : Math.abs(value).toFixed(4);\n+    return `${arrow} ${formatted}`;\n+  };\n+\n+  // Helper function to get status emoji\n+  const getStatus = (regressions: number | undefined) => {","score":{"reward":0.372,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":77.90500000000002,"syllables":3,"sentences":1,"score":0.8209499999999998},"multiplier":1,"relevance":0.4}},{"id":1880084167,"content":"Why are we using two different models?","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1880084167","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":1.848,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":66.7871428571429,"syllables":11,"sentences":1,"score":0.9321285714285711},"multiplier":1,"relevance":0.7}},{"id":1883059295,"content":"We have the production and beta instance of the app so I'm not sure about dealing with secrets to save the names. Think through how this will be configured and let me know what you think makes sense   \nI guess it's \"gold standard\" I just messed up the terminology when I called it \"gold star\".","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1883059295","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,25 @@\n+{\n+  \"issueResponses\": [\n+    {\n+      \"scenario\": \"manifest.name mismatch \",\n+      \"issue\": {\n+        \"body\": \"Manifests need to be updated so the name matches the intended name, which is the name of the repo it lives in.\\n\\nAny mismatch in manifest.name and the plugin repo, and we will not be able to install those plugins. The config will look like this:\\n\\nThis is because the worker URL contains the repo name, and we use that to match against manifest.name.\",\n+        \"number\": 27,\n+        \"html_url\": \"https://github.com/ubiquity-os/ubiquity-os-plugin-installer/issues/27/\",\n+        \"question\": \"@ubosshivaditya could you please provide a summary of the issue ?\"","score":{"reward":7.512,"formatting":{"content":{"p":{"score":0,"elementCount":1},"br":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":57,"wordValue":0.1,"result":2.48},"readability":{"fleschKincaid":72.52855263157895,"syllables":71,"sentences":2,"score":0.8747144736842105},"multiplier":1,"relevance":0.8}},{"id":1883062724,"content":"There's also o1 now to consider using. \nTo be frank I'm not super concerned with costs because we don't even use this feature every day but it can be tremendously valuable to automatically populate all the context and ask a question conveniently particularly from mobile which is my normal client. \nIf it's providing high quality answers it's okay to spend a bit more in exchange for all the time savings.  \nHowever, obviously, if the difference is marginal then we can optimize and use the cheaper models.","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1883062724","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,206 @@\n+import { Eval } from \"braintrust\";\n+import { Levenshtein, ContextPrecision } from \"autoevals\";\n+import goldResponses from \"./data/eval-gold-responses.json\";\n+import OpenAI from \"openai\";\n+import { VoyageAIClient } from \"voyageai\";\n+import { createClient } from \"@supabase/supabase-js\";\n+import { createAdapters } from \"../src/adapters\";\n+import { Context } from \"../src/types/context\";\n+import { logger } from \"../src/helpers/errors\";\n+import { customOctokit as Octokit } from \"@ubiquity-os/plugin-sdk/octokit\";\n+import issueTemplate from \"../tests/__mocks__/issue-template\";\n+import { writeFileSync } from \"fs\";\n+import { fetchContext, formattedHistory, initAdapters } from \"./handlers/setup-context\";\n+\n+// Required environment variables with type assertion\n+const requiredEnvVars = {\n+  OPENAI_API_KEY: process.env.OPENAI_API_KEY as string,\n+  UBIQUITY_OS_APP_NAME: process.env.UBIQUITY_OS_APP_NAME as string,\n+  VOYAGEAI_API_KEY: process.env.VOYAGEAI_API_KEY as string,\n+  SUPABASE_URL: process.env.SUPABASE_URL as string,\n+  SUPABASE_KEY: process.env.SUPABASE_KEY as string,\n+  OPENROUTER_API_KEY: process.env.OPENROUTER_API_KEY as string,\n+};\n+\n+// Validate all required env vars are present\n+Object.entries(requiredEnvVars).forEach(([key, value]) => {\n+  if (!value) {\n+    throw new Error(`${key} is required`);\n+  }\n+});\n+\n+type Scenario = {\n+  scenario: string;\n+  issue: {\n+    body: string;\n+    html_url: string;\n+    number: number;\n+    question: string;\n+  };\n+  responseMustInclude: Array<string>;\n+  sender: {\n+    login: string;\n+    type: string;\n+  };\n+  repository: {\n+    name: string;\n+    owner: {\n+      login: string;\n+      type: string;\n+    };\n+  };\n+  expectedResponse: string;\n+};\n+\n+type EvalInput = {\n+  scenario: Scenario;\n+};\n+\n+type EvalOutput = {\n+  output: string;\n+  context: string;\n+  expected: string;\n+};\n+\n+const inputs = {\n+  config: {\n+    model: \"gpt-4o\",\n+    similarityThreshold: 0.8,\n+    maxTokens: 1000,","score":{"reward":8.964,"formatting":{"content":{"p":{"score":0,"elementCount":1},"br":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":91,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":47.082211538461564,"syllables":147,"sentences":4,"score":0.8708221153846156},"multiplier":1,"relevance":0.9}},{"id":1883149829,"content":"Hard coding seems questionable for developers but generally yes I agree that it's easier to deal with vs secrets. @gentlementlegen  please decide","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1883149829","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,25 @@\n+{\n+  \"issueResponses\": [\n+    {\n+      \"scenario\": \"manifest.name mismatch \",\n+      \"issue\": {\n+        \"body\": \"Manifests need to be updated so the name matches the intended name, which is the name of the repo it lives in.\\n\\nAny mismatch in manifest.name and the plugin repo, and we will not be able to install those plugins. The config will look like this:\\n\\nThis is because the worker URL contains the repo name, and we use that to match against manifest.name.\",\n+        \"number\": 27,\n+        \"html_url\": \"https://github.com/ubiquity-os/ubiquity-os-plugin-installer/issues/27/\",\n+        \"question\": \"@ubosshivaditya could you please provide a summary of the issue ?\"","score":{"reward":3.636,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":44.35380434782613,"syllables":41,"sentences":2,"score":0.8435380434782612},"multiplier":1,"relevance":0.6}},{"id":2495423068,"content":"@rndquu knows the solution for secrets and pull requests I think.  I'm not sure because I never implemented evals before. I suppose you might know best off hand and without research.","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2495423068","commentType":"PULL_COLLABORATOR","score":{"reward":3.66,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":77.03958333333337,"syllables":45,"sentences":3,"score":0.8296041666666664},"multiplier":1,"relevance":0.5}},{"id":2506255190,"content":"@rndquu","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2506255190","commentType":"PULL_COLLABORATOR","score":{"reward":0.108,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":1,"wordValue":0.1,"result":0.14},"readability":{"fleschKincaid":121.22000000000003,"syllables":1,"sentences":1,"score":1},"multiplier":1,"relevance":0.2}},{"id":2524975516,"content":"How far is this from being done @sshivaditya2019 ?","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2524975516","commentType":"PULL_COLLABORATOR","score":{"reward":1.41,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":82.39000000000001,"syllables":11,"sentences":1,"score":0.7760999999999999},"multiplier":1,"relevance":0.5}},{"id":2525020206,"content":"@rndquu might know the answer to getting workflows to run in relation to knip. Perhaps it has something to do with this being on your fork?\r\nFor QA purposes perhaps you can run it based on another event so we can see the results?","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2525020206","commentType":"PULL_COLLABORATOR","score":{"reward":5.058,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":44,"wordValue":0.1,"result":2.27},"readability":{"fleschKincaid":80.43015151515155,"syllables":58,"sentences":3,"score":0.7956984848484845},"multiplier":1,"relevance":0.6}},{"id":2525028683,"content":"Test summary seems more neat. We already have a very chatty bot on the comments.","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2525028683","commentType":"PULL_COLLABORATOR","score":{"reward":2.28,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":75.14250000000001,"syllables":22,"sentences":2,"score":0.8485749999999999},"multiplier":1,"relevance":0.5}},{"id":2533357464,"content":"I'm not sure what makes the most sense to do here. I think that the safest option is for collaborators to manually run this but I also wonder if we can also automatically run it just on merges to main?","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2533357464","commentType":"PULL_COLLABORATOR","score":{"reward":5.04,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":68.41286585365856,"syllables":57,"sentences":2,"score":0.9158713414634144},"multiplier":1,"relevance":0.6}},{"id":2535817921,"content":"I wonder if we should just migrate everything that needs a large context window to Claude at this point.","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2535817921","commentType":"PULL_COLLABORATOR","score":{"reward":3.801,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":71.78157894736843,"syllables":26,"sentences":1,"score":0.8821842105263157},"multiplier":1,"relevance":0.7}},{"id":2540267701,"content":"Is this good to go?","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2540267701","commentType":"PULL_COLLABORATOR","score":{"reward":0.621,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2492205611,"effect":{"addition":430,"deletion":35},"reward":13.95,"priority":3},{"reviewId":2495475122,"effect":{"addition":166,"deletion":165},"reward":9.93,"priority":3},{"reviewId":2501115083,"effect":{"addition":10,"deletion":8},"reward":0.54,"priority":3},{"reviewId":2501687985,"effect":{"addition":1,"deletion":1},"reward":0.06,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 90.586 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>4</td><td>24.48</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>1.33</td></tr><tr><td>Issue</td><td>Comment</td><td>4</td><td>1.932</td></tr><tr><td>Review</td><td>Comment</td><td>18</td><td>62.844</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37\" target=\"_blank\" rel=\"noopener\">#37</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+430 -35</td><td>3</td><td>13.95</td></tr><tr><td>+166 -165</td><td>3</td><td>9.93</td></tr><tr><td>+10 -8</td><td>3</td><td>0.54</td></tr><tr><td>+1 -1</td><td>3</td><td>0.06</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185\" target=\"_blank\" rel=\"noopener\">We need to make evals to benchmark accuracy\"Search for Braintru&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>1</td><td>1</td><td>1.33</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2480634709\" target=\"_blank\" rel=\"noopener\">rfc @transitive-bullshit</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.387</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2492919269\" target=\"_blank\" rel=\"noopener\">This should list the tasks you're currently working on. I've see&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2544051173\" target=\"_blank\" rel=\"noopener\">@gentlementlegen theres a bug it shouldn't have generated a paym&hellip;</a></h6></td><td><details><summary>2.59</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 69&#13;  wordValue: 0.1&#13;  result: 2.59&#13;</pre></details></td><td>0.1</td><td>3</td><td>1.002</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2544712711\" target=\"_blank\" rel=\"noopener\">Check rndquu last comment reward &#96;&#96;&#96;5.71 * 0.3 = 1&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.543</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1878023087\" target=\"_blank\" rel=\"noopener\">I assume &#96;ubiquity-agent&#96; is for testing purposes only.</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.056</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1880079376\" target=\"_blank\" rel=\"noopener\">Will it be a problem to leave in &#96;@ubosshivaditya&#96;?Als&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.347</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1880080972\" target=\"_blank\" rel=\"noopener\">This shouldn't have passed linter settings. Make sure you run &#&hellip;</a></h6></td><td><details><summary>2.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.9</td><td>3</td><td>6.885</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1880082063\" target=\"_blank\" rel=\"noopener\">Are these many hashtags really necessary? I thought writing in p&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.6</td><td>3</td><td>2.79</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1880082917\" target=\"_blank\" rel=\"noopener\">Why did you set such a low max? Also should we really be using G&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.456</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1880083365\" target=\"_blank\" rel=\"noopener\">yarn format</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.4</td><td>3</td><td>0.372</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1880084167\" target=\"_blank\" rel=\"noopener\">Why are we using two different models?</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.848</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1883059295\" target=\"_blank\" rel=\"noopener\">We have the production and beta instance of the app so I'm not s&hellip;</a></h6></td><td><details><summary>2.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    br:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 57&#13;  wordValue: 0.1&#13;  result: 2.48&#13;</pre></details></td><td>0.8</td><td>3</td><td>7.512</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1883062724\" target=\"_blank\" rel=\"noopener\">There's also o1 now to consider using. To be frank I'm not supe&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    br:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 91&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.9</td><td>3</td><td>8.964</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#discussion_r1883149829\" target=\"_blank\" rel=\"noopener\">Hard coding seems questionable for developers but generally yes &hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.6</td><td>3</td><td>3.636</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2495423068\" target=\"_blank\" rel=\"noopener\">@rndquu knows the solution for secrets and pull requests I think&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.5</td><td>3</td><td>3.66</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2506255190\" target=\"_blank\" rel=\"noopener\">@rndquu</a></h6></td><td><details><summary>0.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0.1&#13;  result: 0.14&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.108</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2524975516\" target=\"_blank\" rel=\"noopener\">How far is this from being done @sshivaditya2019 ?</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.41</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2525020206\" target=\"_blank\" rel=\"noopener\">@rndquu might know the answer to getting workflows to run in rel&hellip;</a></h6></td><td><details><summary>2.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 44&#13;  wordValue: 0.1&#13;  result: 2.27&#13;</pre></details></td><td>0.6</td><td>3</td><td>5.058</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2525028683\" target=\"_blank\" rel=\"noopener\">Test summary seems more neat. We already have a very chatty bot &hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.5</td><td>3</td><td>2.28</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2533357464\" target=\"_blank\" rel=\"noopener\">I'm not sure what makes the most sense to do here. I think that &hellip;</a></h6></td><td><details><summary>2.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.6</td><td>3</td><td>5.04</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2535817921\" target=\"_blank\" rel=\"noopener\">I wonder if we should just migrate everything that needs a large&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.801</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2540267701\" target=\"_blank\" rel=\"noopener\">Is this good to go?</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.621</td></tr></tbody></table></details>"},"transitive-bullshit":{"total":0.72,"userId":552829,"comments":[{"id":2480959003,"content":"https://www.braintrust.dev","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2480959003","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.72,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":99.73166666666668,"syllables":5,"sentences":3,"score":0.6026833333333331},"multiplier":0.25,"relevance":0.8}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.72 XP ]</a>&nbsp;</h3><h6>@transitive-bullshit</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.72</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2480959003\" target=\"_blank\" rel=\"noopener\">https://www.braintrust.dev</a></h6></td><td><details><summary>1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.8</td><td>3</td><td>0.72</td></tr></tbody></table></details>"},"Keyrxng":{"total":1.512,"userId":106303466,"comments":[{"id":2490981983,"content":"ideal and looks op, just what I was talking about here https://github.com/ubiquity-os-marketplace/command-ask/issues/32","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2490981983","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.512,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":67.2632142857143,"syllables":32,"sentences":2,"score":0.927367857142857},"multiplier":0.25,"relevance":0.8}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 1.512 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.512</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2490981983\" target=\"_blank\" rel=\"noopener\">ideal and looks op, just what I was talking about here https://g&hellip;</a></h6></td><td><details><summary>1.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.512</td></tr></tbody></table></details>"},"gentlementlegen":{"total":13.542,"userId":9807008,"comments":[{"id":2542832250,"content":"@sshivaditya2019 technically it should but there was no closing event here somehow. Your pull-request targets `command-ask` and this issue references `text-conversation-rewards` how are these related?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2542832250","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.473,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":53.655,"syllables":40,"sentences":2,"score":0.93655},"multiplier":1,"relevance":0.7}},{"id":2542834216,"content":"It only works when you target the main branch of the repo where the issue is located I think?\r\n@0x4007 I let you take action on this","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2542834216","commentType":"ISSUE_COLLABORATOR","score":{"reward":3.888,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":89.73250000000002,"syllables":33,"sentences":2,"score":0.7026749999999998},"multiplier":1,"relevance":0.6}},{"id":2544241830,"content":"@0x4007 Travais was not the person assigned to this task so no warning about the missing wallet was issues. Was there a protection for the v1 version when one a the commenting users had no wallet defined? I think it could also be an annoyance in the following scenario:\r\n- some inactive account comments on the task with no registered wallet\r\n- the task gets closed\r\n- generation is blocked for everyone unless that user sets a wallet\r\nWhy are you saying relevance is not taken into account?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2544241830","commentType":"ISSUE_COLLABORATOR","score":{"reward":3.357,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3}},"result":0.3},"priority":3,"words":{"wordCount":85,"wordValue":0.1,"result":2.64},"readability":{"fleschKincaid":49.68372549019611,"syllables":129,"sentences":3,"score":0.8968372549019611},"multiplier":1,"relevance":0.3}},{"id":2544830802,"content":"That is not how it is calculated, relevance does not influence the value of the html tags (I did not work on reverting this change yet).\r\n`(0.71*0.3+5)*3=5.213*3=15.639`\r\nOkay we can have that. Maybe it would be more friendly to display some message like \"missing wallet for permit generation\" under the user name.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2544830802","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.824,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":3,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":71.80352941176473,"syllables":71,"sentences":3,"score":0.8819647058823528},"multiplier":1,"relevance":0.2}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 13.542 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>4</td><td>13.542</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2542832250\" target=\"_blank\" rel=\"noopener\">@sshivaditya2019 technically it should but there was no closing &hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.473</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2542834216\" target=\"_blank\" rel=\"noopener\">It only works when you target the main branch of the repo where &hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.6</td><td>3</td><td>3.888</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2544241830\" target=\"_blank\" rel=\"noopener\">@0x4007 Travais was not the person assigned to this task so no w&hellip;</a></h6></td><td><details><summary>2.94</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;  result: 0.3&#13;regex:&#13;  wordCount: 85&#13;  wordValue: 0.1&#13;  result: 2.64&#13;</pre></details></td><td>0.3</td><td>3</td><td>3.357</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/185#issuecomment-2544830802\" target=\"_blank\" rel=\"noopener\">That is not how it is calculated, relevance does not influence t&hellip;</a></h6></td><td><details><summary>2.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 51&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>0.2</td><td>3</td><td>1.824</td></tr></tbody></table></details>"},"rndquu":{"total":30.113,"userId":119500907,"comments":[{"id":2506321148,"content":"@sshivaditya2019 Regarding [evals-testing.yml](https://github.com/ubiquity-os-marketplace/command-ask/blob/577d87dc14344facb5b445dd45193d5a33dbfc35/.github/workflows/evals-testing.yml) workflow.\r\nYes, github secrets can't be accessed in workflows triggered from forks by the `pull_request` trigger.\r\nWhat to do:\r\n1. I suppose [UBIQUITY_OS_APP_NAME](https://github.com/ubiquity-os-marketplace/command-ask/blob/577d87dc14344facb5b445dd45193d5a33dbfc35/.github/workflows/evals-testing.yml#L45C11-L45C31) can be hardcoded\r\n2. [SUPABASE_URL and SUPABASE_KEY](https://github.com/ubiquity-os-marketplace/command-ask/blob/577d87dc14344facb5b445dd45193d5a33dbfc35/.github/workflows/evals-testing.yml#L40C11-L41) can also be hardcoded ([example](https://github.com/ubiquity/pay.ubq.fi/blob/53b57dd2934787c02e228bd0b47d6cefb57ddca8/.github/workflows/build.yml#L31-L32))\r\n3. Refactor  [evals-testing.yml](https://github.com/ubiquity-os-marketplace/command-ask/blob/577d87dc14344facb5b445dd45193d5a33dbfc35/.github/workflows/evals-testing.yml) workflow to run on `workflow_run` ([example](https://github.com/ubiquity-os-marketplace/command-ask/blob/08e8ea1431244841c87613493e581095f24b23f7/.github/workflows/knip-reporter.yml#L3-L7)). This way when `knip` workflow is finished then `evals-testing.yml` will run in a privileged context (i.e. with access to github secrets in a safe way).","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2506321148","commentType":"PULL_COLLABORATOR","score":{"reward":20.466,"formatting":{"content":{"p":{"score":0,"elementCount":6},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"a":{"score":1,"elementCount":3}},"result":3.3},"priority":3,"words":{"wordCount":71,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":54.84095950704227,"syllables":120,"sentences":8,"score":0.9484095950704227},"multiplier":1,"relevance":0.9}},{"id":2530587687,"content":"[This](https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2506321148) comment describes the solution.\r\nChange [these](https://github.com/ubiquity-os-marketplace/command-ask/blob/a8922dba40ff84d0d9c71f6a602d5d184140f6ef/.github/workflows/evals-testing.yml#L3-L5) lines to:\r\n```yml\r\non:\r\n  workflow_run:\r\n    workflows: [\"Knip\"]\r\n    types:\r\n      - completed\r\n```\r\nand all the secrets will be available on a PR from a fork in a safe way.","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2530587687","commentType":"PULL_COLLABORATOR","score":{"reward":8.594,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":83.0092307692308,"syllables":34,"sentences":2,"score":0.7699076923076921},"multiplier":1,"relevance":0.85}},{"id":2540801333,"content":"If you mean the CI [question](https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2495181170), yes, good to go","url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2540801333","commentType":"PULL_COLLABORATOR","score":{"reward":1.053,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":103.625,"syllables":11,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-ask/pull/37"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 30.113 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>3</td><td>30.113</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2506321148\" target=\"_blank\" rel=\"noopener\">@sshivaditya2019 Regarding [evals-testing.yml](https://github.co&hellip;</a></h6></td><td><details><summary>5.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 3.3&#13;regex:&#13;  wordCount: 71&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>0.9</td><td>3</td><td>20.466</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2530587687\" target=\"_blank\" rel=\"noopener\">[This](https://github.com/ubiquity-os-marketplace/command-ask/pu&hellip;</a></h6></td><td><details><summary>2.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.85</td><td>3</td><td>8.594</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-ask/pull/37#issuecomment-2540801333\" target=\"_blank\" rel=\"noopener\">If you mean the CI [question](https://github.com/ubiquity-os-mar&hellip;</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.053</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_174.json","json":{"gentlementlegen":{"userId":9807008,"total":104.46,"task":{"reward":100,"multiplier":1},"comments":[{"id":2617010989,"content":"> ```diff\r\n@gentlementlegen perhaps we have too much overhead with each pull? And by that I mean headers and such not the main content? Because I don't imagine that each pull actually has that much \"body\" content. This easily can be optimized as I see some have barely any comments.\r\n_Originally posted by @0x4007 in https://github.com/ubiquity-os/ubiquity-os-kernel/issues/80#issuecomment-2439728916_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.46,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":54,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":61.07909090909095,"syllables":105,"sentences":6,"score":0.9892090909090905},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 104.46 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.46</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174\" target=\"_blank\" rel=\"noopener\">&gt; &#96;&#96;&#96;diff@gentlementlegen perhaps we have too m&hellip;</a></h6></td><td><details><summary>3.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 54&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>1</td><td>1</td><td>4.46</td></tr></tbody></table></details>"},"0x4007":{"total":87.904,"userId":4975670,"comments":[{"id":2556221877,"content":"I think high accuracy is the best choice from your selection. I think costs continue to decline with these LLMs as well.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2556221877","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.73,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":80.30636363636367,"syllables":30,"sentences":2,"score":0.7969363636363633},"multiplier":1,"relevance":0.7}},{"id":2603666193,"content":"I thought we fixed that by checking collaborators on the repository level.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2603666193","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.322,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":39.55500000000001,"syllables":22,"sentences":1,"score":0.7955500000000001},"multiplier":1,"relevance":0.9}},{"id":2603752354,"content":"I suppose the right thing to do is to add every core team member to every organization. \nI wanted to experiment with not having to do this in order to operate like a \"real DAO\" but I realize that there is a need for a distinction between \"trusted\" and \"not trusted\" contributor especially for:\n1. merging pulls\n2. setting labels\n3. generating permits\nIn the future, an XP system should be able to handle this dynamically.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2603752354","commentType":"ISSUE_COLLABORATOR","score":{"reward":5.728,"formatting":{"content":{"p":{"score":0,"elementCount":1},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3}},"result":0.3},"priority":2,"words":{"wordCount":73,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":36.513527397260304,"syllables":115,"sentences":2,"score":0.7651352739726031},"multiplier":1,"relevance":0.8}},{"id":2603754182,"content":"@shiv810 I can regenerate once you accept your invitation https://github.com/ubiquity-os-marketplace\n@gentlementlegen I'm assuming that the status is inherited from the organization level.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2603754182","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.928,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":26.446428571428584,"syllables":55,"sentences":2,"score":0.6644642857142858},"multiplier":1,"relevance":0.8}},{"id":2603798293,"content":"So then this is the only solution if the collaborator has a private profile. I wonder if there is a solution for them to be added to the org.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2603798293","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.23,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":69.59336206896553,"syllables":42,"sentences":2,"score":0.9040663793103447},"multiplier":1,"relevance":0.9}},{"id":2604874381,"content":"I wonder if we can build a shim for this problem in the form of some type of persistent JSON storage. Synchronizing would be difficult to do in realtime though, which matters more for if they were removed from the team.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2604874381","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.968,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":74.60310975609757,"syllables":54,"sentences":2,"score":0.8539689024390243},"multiplier":1,"relevance":0.9}},{"id":2608632483,"content":"Well to be more specific my vision was to append to this cache if another module detects that they are part of the organization collaborators, or if they set a label or performed some privileged action.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2608632483","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.554,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":33.99500000000003,"syllables":58,"sentences":1,"score":0.7399500000000003},"multiplier":1,"relevance":0.9}},{"id":2524855533,"content":"Very skeptical of tfidf approach. We should go simpler and filter out more instead.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#pullrequestreview-2524855533","commentType":"PULL_COLLABORATOR","score":{"reward":1.752,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":72.83000000000003,"syllables":21,"sentences":2,"score":0.8716999999999997},"multiplier":1,"relevance":0.6}},{"id":1899029185,"content":"This depends on the model and possibly should be an environment variable because we might change models.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899029185","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,6 +15,9 @@ import {\n import { BaseModule } from \"../types/module\";\n import { ContextPlugin } from \"../types/plugin-input\";\n import { GithubCommentScore, Result } from \"../types/results\";\n+import { TfIdf } from \"../helpers/tf-idf\";\n+\n+const TOKEN_MODEL_LIMIT = 124000;","score":{"reward":2.688,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":50.2388235294118,"syllables":28,"sentences":1,"score":0.902388235294118},"multiplier":1,"relevance":0.8}},{"id":1899029223,"content":"We should also filter out slash commands? And minimized comments?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899029223","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -61,7 +64,7 @@ export class ContentEvaluatorModule extends BaseModule {\n     const allCommentsUnClean = data.allComments || [];\n     const allComments: { id: number; comment: string; author: string }[] = [];\n     for (const commentObj of allCommentsUnClean) {\n-      if (commentObj.user) {\n+      if (commentObj.user && commentObj.user.type !== \"Bot\") {","score":{"reward":1.84,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":66.40000000000003,"syllables":16,"sentences":2,"score":0.9359999999999996},"multiplier":1,"relevance":0.8}},{"id":1899030032,"content":"I'm skeptical about this whole TFIDF approach\n1. The tokenizer algorithm is different per model and I'm not sure what model we should be using. I'm starting to see a pattern of OpenAI and Anthropic release cycles alternating so to get the best models perhaps we should also alternate. I heard good things about the new OpenAI model. \n2. I don't fully understand why we need this if we can just filter out a lot more overhead like the bot comments, slash commands \n3. The weaknesses of this approach isn't fully clear to me. We did some earlier research on implementing this method in here before but I recall that it wasn't a good fit. I just don't remember why- perhaps accuracy related.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899030032","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -178,15 +181,33 @@ export class ContentEvaluatorModule extends BaseModule {\n       const dummyResponse = JSON.stringify(this._generateDummyResponse(comments), null, 2);\n       const maxTokens = this._calculateMaxTokens(dummyResponse);\n \n-      const promptForComments = this._generatePromptForComments(specification, comments, allComments);\n+      let promptForComments = this._generatePromptForComments(specification, comments, allComments);\n+      if (this._calculateMaxTokens(promptForComments, Infinity) > TOKEN_MODEL_LIMIT) {","score":{"reward":6.408,"formatting":{"content":{"p":{"score":0,"elementCount":1},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3}},"result":0.3},"priority":2,"words":{"wordCount":127,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":60.116187664042016,"syllables":188,"sentences":6,"score":0.9988381233595799},"multiplier":1,"relevance":0.9}},{"id":1899066002,"content":"Can you articulate the weaknesses or concerns","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899066002","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -178,15 +181,33 @@ export class ContentEvaluatorModule extends BaseModule {\n       const dummyResponse = JSON.stringify(this._generateDummyResponse(comments), null, 2);\n       const maxTokens = this._calculateMaxTokens(dummyResponse);\n \n-      const promptForComments = this._generatePromptForComments(specification, comments, allComments);\n+      let promptForComments = this._generatePromptForComments(specification, comments, allComments);\n+      if (this._calculateMaxTokens(promptForComments, Infinity) > TOKEN_MODEL_LIMIT) {","score":{"reward":0.89,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":54.70142857142861,"syllables":12,"sentences":1,"score":0.947014285714286},"multiplier":1,"relevance":0.5}},{"id":1899075560,"content":"Hard coding the 12400 doesn't seem like a solution there either","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899075560","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,6 +15,9 @@ import {\n import { BaseModule } from \"../types/module\";\n import { ContextPlugin } from \"../types/plugin-input\";\n import { GithubCommentScore, Result } from \"../types/results\";\n+import { TfIdf } from \"../helpers/tf-idf\";\n+\n+const TOKEN_MODEL_LIMIT = 124000;","score":{"reward":1.792,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":81.85500000000002,"syllables":16,"sentences":1,"score":0.7814499999999999},"multiplier":1,"relevance":0.7}},{"id":1899078737,"content":"Line 179 is hard coded","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899078737","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,6 +15,9 @@ import {\n import { BaseModule } from \"../types/module\";\n import { ContextPlugin } from \"../types/plugin-input\";\n import { GithubCommentScore, Result } from \"../types/results\";\n+import { TfIdf } from \"../helpers/tf-idf\";\n+\n+const TOKEN_MODEL_LIMIT = 124000;","score":{"reward":0.828,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.6}},{"id":1899266564,"content":"Yes if we don't have it saved in our library or collection of known amounts then it should throw","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899266564","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,6 +15,9 @@ import {\n import { BaseModule } from \"../types/module\";\n import { ContextPlugin } from \"../types/plugin-input\";\n import { GithubCommentScore, Result } from \"../types/results\";\n+import { TfIdf } from \"../helpers/tf-idf\";\n+\n+const TOKEN_MODEL_LIMIT = 124000;","score":{"reward":2.562,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":80.78500000000003,"syllables":25,"sentences":1,"score":0.7921499999999998},"multiplier":1,"relevance":0.7}},{"id":1899266782,"content":"It shouldn't affect it at all. I would proceed with implicit approval even if shiv doesn't reply in time for merge.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899266782","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -61,7 +64,7 @@ export class ContentEvaluatorModule extends BaseModule {\n     const allCommentsUnClean = data.allComments || [];\n     const allComments: { id: number; comment: string; author: string }[] = [];\n     for (const commentObj of allCommentsUnClean) {\n-      if (commentObj.user) {\n+      if (commentObj.user && commentObj.user.type !== \"Bot\") {","score":{"reward":2.388,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":81.13641304347829,"syllables":31,"sentences":2,"score":0.7886358695652171},"multiplier":1,"relevance":0.6}},{"id":1901873260,"content":"Manually get the numbers from their docs then","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1901873260","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,6 +15,9 @@ import {\n import { BaseModule } from \"../types/module\";\n import { ContextPlugin } from \"../types/plugin-input\";\n import { GithubCommentScore, Result } from \"../types/results\";\n+import { TfIdf } from \"../helpers/tf-idf\";\n+\n+const TOKEN_MODEL_LIMIT = 124000;","score":{"reward":1.128,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":82.39000000000001,"syllables":11,"sentences":1,"score":0.7760999999999999},"multiplier":1,"relevance":0.6}},{"id":1902286378,"content":"Why is this a constant? Makes more sense to use let and directly manipulate this variable instead of assigning i","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1902286378","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -165,6 +167,42 @@ export class ContentEvaluatorModule extends BaseModule {\n     return { commentsToEvaluate, prCommentsToEvaluate };\n   }\n \n+  async _splitPromptForCommentEvaluation(\n+    specification: string,\n+    comments: CommentToEvaluate[],\n+    allComments: AllComments,\n+    maxTokens: number,\n+    promptGeneratorFunction: (issue: string, comments: CommentToEvaluate[], allComments: AllComments) => string\n+  ) {\n+    const commentRelevances: Relevances = {};\n+    const chunks = 2;","score":{"reward":2.66,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":65.555,"syllables":31,"sentences":2,"score":0.9444499999999999},"multiplier":1,"relevance":0.7}},{"id":1902286849,"content":"```suggestion\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1902286849","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -31,7 +31,8 @@\n     \"Rpcs\",\n     \"sonarjs\",\n     \"pico\",\n-    \"timespan\"\n+    \"timespan\",\n+    \"tfidf\"","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.3}},{"id":1903281632,"content":"Add more chunks if the request to OpenAI fails for being too long. I think this logic can be reactive so that it can always go through just by continuing to split the job on failures.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1903281632","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -165,6 +167,42 @@ export class ContentEvaluatorModule extends BaseModule {\n     return { commentsToEvaluate, prCommentsToEvaluate };\n   }\n \n+  async _splitPromptForCommentEvaluation(\n+    specification: string,\n+    comments: CommentToEvaluate[],\n+    allComments: AllComments,\n+    maxTokens: number,\n+    promptGeneratorFunction: (issue: string, comments: CommentToEvaluate[], allComments: AllComments) => string\n+  ) {\n+    const commentRelevances: Relevances = {};\n+    const chunks = 2;","score":{"reward":4.59,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":82.815,"syllables":45,"sentences":2,"score":0.77185},"multiplier":1,"relevance":0.9}},{"id":1903333486,"content":"@shiv810 rfc","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1903333486","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -165,6 +167,42 @@ export class ContentEvaluatorModule extends BaseModule {\n     return { commentsToEvaluate, prCommentsToEvaluate };\n   }\n \n+  async _splitPromptForCommentEvaluation(\n+    specification: string,\n+    comments: CommentToEvaluate[],\n+    allComments: AllComments,\n+    maxTokens: number,\n+    promptGeneratorFunction: (issue: string, comments: CommentToEvaluate[], allComments: AllComments) => string\n+  ) {\n+    const commentRelevances: Relevances = {};\n+    const chunks = 2;","score":{"reward":0.198,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":120.20500000000001,"syllables":2,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}},{"id":1906249128,"content":"Separate is fine then just as long as the current code is stable.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1906249128","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -165,6 +167,42 @@ export class ContentEvaluatorModule extends BaseModule {\n     return { commentsToEvaluate, prCommentsToEvaluate };\n   }\n \n+  async _splitPromptForCommentEvaluation(\n+    specification: string,\n+    comments: CommentToEvaluate[],\n+    allComments: AllComments,\n+    maxTokens: number,\n+    promptGeneratorFunction: (issue: string, comments: CommentToEvaluate[], allComments: AllComments) => string\n+  ) {\n+    const commentRelevances: Relevances = {};\n+    const chunks = 2;","score":{"reward":1.62,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":83.0092307692308,"syllables":17,"sentences":1,"score":0.7699076923076921},"multiplier":1,"relevance":0.6}},{"id":2564636272,"content":"More careful filtering of comments like removal of bot commands and comments, and possibly text summarization, or concatenation of multiple calls are all more accurate approaches. TFIDF is not the right tool for the job.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2564636272","commentType":"PULL_COLLABORATOR","score":{"reward":4.112,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":46.461071428571444,"syllables":59,"sentences":2,"score":0.8646107142857145},"multiplier":1,"relevance":0.8}},{"id":2564641029,"content":"Doing multiple calls to score everything and then concatenate results seems the most straightforward with no data loss.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2564641029","commentType":"PULL_COLLABORATOR","score":{"reward":2.436,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":47.565,"syllables":30,"sentences":1,"score":0.8756499999999999},"multiplier":1,"relevance":0.7}},{"id":2565015852,"content":"Divide into two and do 150 each call. Receive the results array and concatenate them together","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2565015852","commentType":"PULL_COLLABORATOR","score":{"reward":2.64,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":61.24000000000001,"syllables":26,"sentences":2,"score":0.9875999999999999},"multiplier":1,"relevance":0.8}},{"id":2566089232,"content":"Surely it's a bit of a trade off without all of the comments in one shot, but this approach seems to trades off the least. \n1. The task specification is by far the most important reference point. \n2. We can inject a new line in the prompt explaining that following is part 2/2 and that due to context window limits we had to split the conversation into multiple parts for evaluation. \nWhy would they complain about using a non default model? We set the default to what we know works.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2566089232","commentType":"PULL_COLLABORATOR","score":{"reward":6.462,"formatting":{"content":{"p":{"score":0,"elementCount":1},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":2,"words":{"wordCount":90,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":70.12500000000001,"syllables":126,"sentences":5,"score":0.8987499999999998},"multiplier":1,"relevance":0.9}},{"id":2594544347,"content":"It's hard for me to tell from the QA example but if it works it works so it's fine. \nMaybe comparing before and after output to see if the results are similar is the best test.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2594544347","commentType":"PULL_COLLABORATOR","score":{"reward":3.168,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":38,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":80.68684210526318,"syllables":48,"sentences":2,"score":0.7931315789473682},"multiplier":1,"relevance":0.6}},{"id":2595227409,"content":"For your low token limit example, I think your config was wrong because your relevance is set to 1 for both of the comments","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2595227409","commentType":"PULL_COLLABORATOR","score":{"reward":2.982,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":66.15000000000003,"syllables":33,"sentences":1,"score":0.9384999999999997},"multiplier":1,"relevance":0.7}},{"id":2595251340,"content":"Relevance 1 is not expected of course unless it's the spec.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2595251340","commentType":"PULL_COLLABORATOR","score":{"reward":1.28,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":81.85500000000002,"syllables":16,"sentences":1,"score":0.7814499999999999},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2524855533,"effect":{"addition":86,"deletion":4},"reward":1.8,"priority":2},{"reviewId":2524892029,"effect":{"addition":17,"deletion":8},"reward":0.5,"priority":2},{"reviewId":2529891670,"effect":{"addition":62,"deletion":15},"reward":1.54,"priority":2},{"reviewId":2530909230,"effect":{"addition":1,"deletion":2},"reward":0.06,"priority":2},{"reviewId":2535701365,"effect":{"addition":3,"deletion":3},"reward":0.12,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 87.904 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>5</td><td>4.02</td></tr><tr><td>Issue</td><td>Comment</td><td>7</td><td>29.46</td></tr><tr><td>Review</td><td>Comment</td><td>22</td><td>54.424</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225\" target=\"_blank\" rel=\"noopener\">#225</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+86 -4</td><td>2</td><td>1.8</td></tr><tr><td>+17 -8</td><td>2</td><td>0.5</td></tr><tr><td>+62 -15</td><td>2</td><td>1.54</td></tr><tr><td>+1 -2</td><td>2</td><td>0.06</td></tr><tr><td>+3 -3</td><td>2</td><td>0.12</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2556221877\" target=\"_blank\" rel=\"noopener\">I think high accuracy is the best choice from your selection. I &hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.73</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2603666193\" target=\"_blank\" rel=\"noopener\">I thought we fixed that by checking collaborators on the reposit&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.9</td><td>2</td><td>2.322</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2603752354\" target=\"_blank\" rel=\"noopener\">I suppose the right thing to do is to add every core team member&hellip;</a></h6></td><td><details><summary>2.91</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;  result: 0.3&#13;regex:&#13;  wordCount: 73&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.8</td><td>2</td><td>5.728</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2603754182\" target=\"_blank\" rel=\"noopener\">@shiv810 I can regenerate once you accept your invitation https:&hellip;</a></h6></td><td><details><summary>2.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.8</td><td>2</td><td>4.928</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2603798293\" target=\"_blank\" rel=\"noopener\">So then this is the only solution if the collaborator has a priv&hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.9</td><td>2</td><td>4.23</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2604874381\" target=\"_blank\" rel=\"noopener\">I wonder if we can build a shim for this problem in the form of &hellip;</a></h6></td><td><details><summary>2.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.9</td><td>2</td><td>4.968</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2608632483\" target=\"_blank\" rel=\"noopener\">Well to be more specific my vision was to append to this cache i&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.9</td><td>2</td><td>4.554</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#pullrequestreview-2524855533\" target=\"_blank\" rel=\"noopener\">Very skeptical of tfidf approach. We should go simpler and filte&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.6</td><td>2</td><td>1.752</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899029185\" target=\"_blank\" rel=\"noopener\">This depends on the model and possibly should be an environment &hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.688</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899029223\" target=\"_blank\" rel=\"noopener\">We should also filter out slash commands? And minimized comments?</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.84</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899030032\" target=\"_blank\" rel=\"noopener\">I'm skeptical about this whole TFIDF approach1. The tokenizer a&hellip;</a></h6></td><td><details><summary>2.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;  result: 0.3&#13;regex:&#13;  wordCount: 127&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>0.9</td><td>2</td><td>6.408</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899066002\" target=\"_blank\" rel=\"noopener\">Can you articulate the weaknesses or concerns</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.5</td><td>2</td><td>0.89</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899075560\" target=\"_blank\" rel=\"noopener\">Hard coding the 12400 doesn't seem like a solution there either</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.792</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899078737\" target=\"_blank\" rel=\"noopener\">Line 179 is hard coded</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.6</td><td>2</td><td>0.828</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899266564\" target=\"_blank\" rel=\"noopener\">Yes if we don't have it saved in our library or collection of kn&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.562</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899266782\" target=\"_blank\" rel=\"noopener\">It shouldn't affect it at all. I would proceed with implicit app&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.6</td><td>2</td><td>2.388</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1901873260\" target=\"_blank\" rel=\"noopener\">Manually get the numbers from their docs then</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.6</td><td>2</td><td>1.128</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1902286378\" target=\"_blank\" rel=\"noopener\">Why is this a constant? Makes more sense to use let and directly&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.66</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1902286849\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion&#96;&#96;&#96;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.3</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1903281632\" target=\"_blank\" rel=\"noopener\">Add more chunks if the request to OpenAI fails for being too lon&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.9</td><td>2</td><td>4.59</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1903333486\" target=\"_blank\" rel=\"noopener\">@shiv810 rfc</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.198</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1906249128\" target=\"_blank\" rel=\"noopener\">Separate is fine then just as long as the current code is stable.</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.6</td><td>2</td><td>1.62</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2564636272\" target=\"_blank\" rel=\"noopener\">More careful filtering of comments like removal of bot commands &hellip;</a></h6></td><td><details><summary>2.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.8</td><td>2</td><td>4.112</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2564641029\" target=\"_blank\" rel=\"noopener\">Doing multiple calls to score everything and then concatenate re&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.436</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2565015852\" target=\"_blank\" rel=\"noopener\">Divide into two and do 150 each call. Receive the results array &hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.64</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2566089232\" target=\"_blank\" rel=\"noopener\">Surely it's a bit of a trade off without all of the comments in &hellip;</a></h6></td><td><details><summary>2.83</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 90&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.9</td><td>2</td><td>6.462</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2594544347\" target=\"_blank\" rel=\"noopener\">It's hard for me to tell from the QA example but if it works it &hellip;</a></h6></td><td><details><summary>2.13</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 38&#13;  wordValue: 0.1&#13;  result: 2.13&#13;</pre></details></td><td>0.6</td><td>2</td><td>3.168</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2595227409\" target=\"_blank\" rel=\"noopener\">For your low token limit example, I think your config was wrong &hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.982</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2595251340\" target=\"_blank\" rel=\"noopener\">Relevance 1 is not expected of course unless it's the spec.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.5</td><td>2</td><td>1.28</td></tr></tbody></table></details>"},"shiv810":{"total":18.464,"userId":53160903,"comments":[{"id":2603375433,"content":"@gentlementlegen is this expected ? I don't see a permit generated for my id.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2603375433","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.518,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":66.7871428571429,"syllables":22,"sentences":2,"score":0.9321285714285711},"multiplier":0.25,"relevance":0.7}},{"id":1899274552,"content":"@gentlementlegen It shouldn't impact the comment evaluation at all. I think the prompt was updated, though the original one may have included something related to bot comments.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899274552","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -61,7 +64,7 @@ export class ContentEvaluatorModule extends BaseModule {\n     const allCommentsUnClean = data.allComments || [];\n     const allComments: { id: number; comment: string; author: string }[] = [];\n     for (const commentObj of allCommentsUnClean) {\n-      if (commentObj.user) {\n+      if (commentObj.user && commentObj.user.type !== \"Bot\") {","score":{"reward":0.696,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":53.639285714285734,"syllables":46,"sentences":2,"score":0.9363928571428574},"multiplier":0.25,"relevance":0.6}},{"id":1905995474,"content":"Besides the error code, `OpenRouter` provides `ProviderErrorMetadata`. This would allow us to parse the error, get the provider's name, and understand the error.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1905995474","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -165,6 +167,42 @@ export class ContentEvaluatorModule extends BaseModule {\n     return { commentsToEvaluate, prCommentsToEvaluate };\n   }\n \n+  async _splitPromptForCommentEvaluation(\n+    specification: string,\n+    comments: CommentToEvaluate[],\n+    allComments: AllComments,\n+    maxTokens: number,\n+    promptGeneratorFunction: (issue: string, comments: CommentToEvaluate[], allComments: AllComments) => string\n+  ) {\n+    const commentRelevances: Relevances = {};\n+    const chunks = 2;","score":{"reward":0.8,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":72.61545454545457,"syllables":32,"sentences":2,"score":0.8738454545454544},"multiplier":0.25,"relevance":0.8}},{"id":1918798016,"content":"I think this could lead to the previous issue, the \"Relevance Length Mismatch,\" though I'm not sure. But, if the goal is to reduce the token count, we could simply split the prompt into two system messages. Since prompts are cached by default, I don't think usage would be an issue..","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1918798016","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -243,7 +324,7 @@ export class ContentEvaluatorModule extends BaseModule {\n       ${allCommentsMap.join(\"\\n\")}\n \n       Comments to evaluate:\n-      ${commentsMap.join(\"\\n\")}\n+      ${userCommentsMap.join(\"\\n\")}","score":{"reward":1.05,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":53,"wordValue":0.1,"result":2.43},"readability":{"fleschKincaid":80.35993710691825,"syllables":68,"sentences":3,"score":0.7964006289308174},"multiplier":0.25,"relevance":0.7}},{"id":1919521058,"content":"Claude and OpenAI requests can be cached by adjusting the system message, as detailed in [OpenRouter](https://openrouter.ai/docs/prompt-caching). AFAIK, these are the main two platforms, though DeepSeek also supports prompt caching. Regardless, all OpenAI requests are cached via OpenRouter for 5 minutes, and no changes are required for that.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1919521058","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -243,7 +324,7 @@ export class ContentEvaluatorModule extends BaseModule {\n       ${allCommentsMap.join(\"\\n\")}\n \n       Comments to evaluate:\n-      ${commentsMap.join(\"\\n\")}\n+      ${userCommentsMap.join(\"\\n\")}","score":{"reward":1.944,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":47,"wordValue":0.1,"result":2.33},"readability":{"fleschKincaid":57.73333333333335,"syllables":74,"sentences":3,"score":0.9773333333333335},"multiplier":0.25,"relevance":0.9}},{"id":2564624201,"content":"I don't think TF-IDF would be the best option for selecting the comments, as it only takes in account the word frequency and does not give any importance to semantics. A better solution might be to switch to a larger context model, like Gemini, which provides a 2 million token context window when we reach the token limit, and exclude bot-generated comments from the selection process.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2564624201","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.296,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":69,"wordValue":0.1,"result":2.59},"readability":{"fleschKincaid":45.53054347826088,"syllables":103,"sentences":2,"score":0.8553054347826088},"multiplier":0.25,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2525155605,"effect":{"addition":86,"deletion":4},"reward":1.8,"priority":2},{"reviewId":2535292647,"effect":{"addition":78,"deletion":22},"reward":2,"priority":2},{"reviewId":2556569203,"effect":{"addition":317,"deletion":101},"reward":8.36,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 18.464 XP ]</a>&nbsp;</h3><h6>@shiv810</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>12.16</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.518</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>5.786</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225\" target=\"_blank\" rel=\"noopener\">#225</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+86 -4</td><td>2</td><td>1.8</td></tr><tr><td>+78 -22</td><td>2</td><td>2</td></tr><tr><td>+317 -101</td><td>2</td><td>8.36</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/174#issuecomment-2603375433\" target=\"_blank\" rel=\"noopener\">@gentlementlegen is this expected ? I don't see a permit generat&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.7</td><td>2</td><td>0.518</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1899274552\" target=\"_blank\" rel=\"noopener\">@gentlementlegen It shouldn't impact the comment evaluation at a&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.6</td><td>2</td><td>0.696</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1905995474\" target=\"_blank\" rel=\"noopener\">Besides the error code, &#96;OpenRouter&#96; provides &#96;Provi&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.8</td><td>2</td><td>0.8</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1918798016\" target=\"_blank\" rel=\"noopener\">I think this could lead to the previous issue, the \"Relevance Le&hellip;</a></h6></td><td><details><summary>2.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 53&#13;  wordValue: 0.1&#13;  result: 2.43&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.05</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1919521058\" target=\"_blank\" rel=\"noopener\">Claude and OpenAI requests can be cached by adjusting the system&hellip;</a></h6></td><td><details><summary>3.33</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 47&#13;  wordValue: 0.1&#13;  result: 2.33&#13;</pre></details></td><td>0.9</td><td>2</td><td>1.944</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#issuecomment-2564624201\" target=\"_blank\" rel=\"noopener\">I don't think TF-IDF would be the best option for selecting the &hellip;</a></h6></td><td><details><summary>2.59</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 69&#13;  wordValue: 0.1&#13;  result: 2.59&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.296</td></tr></tbody></table></details>"},"whilefoo":{"total":25.564,"userId":139262667,"comments":[{"id":1918306195,"content":"Are we sending user comments twice? Maybe we could decrease token usage by only sending them once.\r\nEither removing user comments from `allComments` or by sending only `allComments` and telling the LLM to evaluate the comments of user `x` against other comments","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1918306195","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -243,7 +324,7 @@ export class ContentEvaluatorModule extends BaseModule {\n       ${allCommentsMap.join(\"\\n\")}\n \n       Comments to evaluate:\n-      ${commentsMap.join(\"\\n\")}\n+      ${userCommentsMap.join(\"\\n\")}","score":{"reward":5.022,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":59.14769230769235,"syllables":62,"sentences":3,"score":0.9914769230769235},"multiplier":1,"relevance":0.9}},{"id":1918324483,"content":"Yeah that's why we could leave `allComments` so it makes more sense to the LLM but remove `userComments` and specify that the LLM should evaluate comments of user `x`. \r\nIf I understand correctly comments include id and author so the LLM would know which comments to evaluate, but I might be wrong maybe it will miss comments","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1918324483","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -243,7 +324,7 @@ export class ContentEvaluatorModule extends BaseModule {\n       ${allCommentsMap.join(\"\\n\")}\n \n       Comments to evaluate:\n-      ${commentsMap.join(\"\\n\")}\n+      ${userCommentsMap.join(\"\\n\")}","score":{"reward":4.41,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":55,"wordValue":0.1,"result":2.46},"readability":{"fleschKincaid":66.63522727272728,"syllables":73,"sentences":2,"score":0.9336477272727273},"multiplier":1,"relevance":0.7}},{"id":1918935175,"content":"I didn't know [prompt caching](https://platform.openai.com/docs/guides/prompt-caching) exists! It seems it still counts toward the TPM but it reduces cost so it might be good to implement.\r\nAs for removing duplicated comments, we should test if the LLM can reliably detect all comments and not miss them.\r\nWe should do this as part of another PR since this PR is already 3 weeks old and we should merge it.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1918935175","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -243,7 +324,7 @@ export class ContentEvaluatorModule extends BaseModule {\n       ${allCommentsMap.join(\"\\n\")}\n \n       Comments to evaluate:\n-      ${commentsMap.join(\"\\n\")}\n+      ${userCommentsMap.join(\"\\n\")}","score":{"reward":7.072,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":68,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":81.34176470588238,"syllables":87,"sentences":4,"score":0.7865823529411762},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2555695900,"effect":{"addition":374,"deletion":79},"reward":9.06,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 25.564 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>9.06</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>16.504</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225\" target=\"_blank\" rel=\"noopener\">#225</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+374 -79</td><td>2</td><td>9.06</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1918306195\" target=\"_blank\" rel=\"noopener\">Are we sending user comments twice? Maybe we could decrease toke&hellip;</a></h6></td><td><details><summary>2.15</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.15&#13;</pre></details></td><td>0.9</td><td>2</td><td>5.022</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1918324483\" target=\"_blank\" rel=\"noopener\">Yeah that's why we could leave &#96;allComments&#96; so it makes&hellip;</a></h6></td><td><details><summary>2.46</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 55&#13;  wordValue: 0.1&#13;  result: 2.46&#13;</pre></details></td><td>0.7</td><td>2</td><td>4.41</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/225#discussion_r1918935175\" target=\"_blank\" rel=\"noopener\">I didn't know [prompt caching](https://platform.openai.com/docs/&hellip;</a></h6></td><td><details><summary>3.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 68&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>0.8</td><td>2</td><td>7.072</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_18.json","json":{"gentlementlegen":{"userId":9807008,"total":101.77,"task":{"reward":100,"multiplier":1},"comments":[{"id":2094612068,"content":"@pavlovcik The issue was in https://github.com/ubiquity/devpool-directory-bounties/issues/14#issuecomment-1941514786 correct? Could you put back the comment that breaks for testing?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612068","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.168,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":53.56666666666669,"syllables":46,"sentences":3,"score":0.9356666666666669},"multiplier":0.25,"relevance":0.8}},{"id":2094612082,"content":"No way you could recreate something similar? I am not sure how to create the test case currently","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612082","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.602,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":80.20000000000003,"syllables":25,"sentences":2,"score":0.7979999999999997},"multiplier":0.25,"relevance":0.7}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 101.77 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>1.77</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612068\" target=\"_blank\" rel=\"noopener\">@pavlovcik The issue was in https://github.com/ubiquity/devpool-&hellip;</a></h6></td><td><details><summary>2.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.168</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612082\" target=\"_blank\" rel=\"noopener\">No way you could recreate something similar? I am not sure how t&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.7</td><td>2</td><td>0.602</td></tr></tbody></table></details>"},"0x4007":{"total":56.118,"userId":4975670,"comments":[{"id":2094612063,"content":"For context, this comment has the following metadata embedded, which only repository admins can technically see. \r\n```json\r\n{\r\n  \"handlerType\": {\r\n    \"type\": \"post\",\r\n    \"actions\": [\r\n      null\r\n    ]\r\n  },\r\n  \"activeHandler\": \"onLabelChangeSetPricing\",\r\n  \"error\": {\r\n    \"name\": \"HttpError\",\r\n    \"status\": 422,\r\n    \"response\": {\r\n      \"url\": \"https://api.github.com/repos/ubiquibot/comment-incentives/labels\",\r\n      \"status\": 422,\r\n      \"headers\": {\r\n        \"access-control-allow-origin\": \"*\",\r\n        \"access-control-expose-headers\": \"ETag, Link, Location, Retry-After, X-GitHub-OTP, X-RateLimit-Limit, X-RateLimit-Remaining, X-RateLimit-Used, X-RateLimit-Resource, X-RateLimit-Reset, X-OAuth-Scopes, X-Accepted-OAuth-Scopes, X-Poll-Interval, X-GitHub-Media-Type, X-GitHub-SSO, X-GitHub-Request-Id, Deprecation, Sunset\",\r\n        \"content-length\": \"182\",\r\n        \"content-security-policy\": \"default-src 'none'\",\r\n        \"content-type\": \"application/json; charset=utf-8\",\r\n        \"date\": \"Tue, 13 Feb 2024 13:31:03 GMT\",\r\n        \"referrer-policy\": \"origin-when-cross-origin, strict-origin-when-cross-origin\",\r\n        \"server\": \"GitHub.com\",\r\n        \"strict-transport-security\": \"max-age=31536000; includeSubdomains; preload\",\r\n        \"vary\": \"Accept-Encoding, Accept, X-Requested-With\",\r\n        \"x-accepted-github-permissions\": \"issues=write; pull_requests=write\",\r\n        \"x-content-type-options\": \"nosniff\",\r\n        \"x-frame-options\": \"deny\",\r\n        \"x-github-api-version-selected\": \"2022-11-28\",\r\n        \"x-github-media-type\": \"github.v3; format=json\",\r\n        \"x-github-request-id\": \"84C4:3D93:19D0499:34192E1:65CB6F17\",\r\n        \"x-ratelimit-limit\": \"5000\",\r\n        \"x-ratelimit-remaining\": \"4818\",\r\n        \"x-ratelimit-reset\": \"1707831648\",\r\n        \"x-ratelimit-resource\": \"core\",\r\n        \"x-ratelimit-used\": \"182\",\r\n        \"x-xss-protection\": \"0\"\r\n      },\r\n      \"data\": {\r\n        \"message\": \"Validation Failed\",\r\n        \"errors\": [\r\n          {\r\n            \"resource\": \"Label\",\r\n            \"code\": \"already_exists\",\r\n            \"field\": \"name\"\r\n          }\r\n        ],\r\n        \"documentation_url\": \"https://docs.github.com/rest/issues/labels#create-a-label\"\r\n      }\r\n    },\r\n    \"request\": {\r\n      \"method\": \"POST\",\r\n      \"url\": \"https://api.github.com/repos/ubiquibot/comment-incentives/labels\",\r\n      \"headers\": {\r\n        \"accept\": \"application/vnd.github.v3+json\",\r\n        \"user-agent\": \"probot/12.3.3 octokit-core.js/3.6.0 Node.js/20.11.0 (linux; x64)\",\r\n        \"authorization\": \"token [REDACTED]\",\r\n        \"content-type\": \"application/json; charset=utf-8\"\r\n      },\r\n      \"body\": \"{\\\"name\\\":\\\"Price: 25 USD\\\",\\\"color\\\":\\\"1f883d\\\"}\",\r\n      \"request\": {}\r\n    }\r\n  },\r\n  \"caller\": \"renderCatchAll\",\r\n  \"revision\": null\r\n}\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612063","commentType":"ISSUE_AUTHOR","score":{"reward":2.664,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":16.107500000000016,"syllables":33,"sentences":1,"score":0.5610750000000002},"multiplier":1,"relevance":0.9}},{"id":2094612075,"content":"Unfortunately I deleted it and I can't undelete. I realized my mistake only after filing this issue. \r\nWe MAY be able to recover the original comment from the [GitHub Actions logs](https://github.com/ubiquibot/comment-incentives/actions) but would need to sift through and compare timestamps.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612075","commentType":"ISSUE_AUTHOR","score":{"reward":6.987,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":54.71455284552849,"syllables":67,"sentences":3,"score":0.9471455284552849},"multiplier":1,"relevance":0.85}},{"id":2094612088,"content":"I think it is one of these successful runs from \"3 days ago\". Let me investigate first. I can recreate simply by re-running the action which would be the best way anyways.\r\n- https://github.com/ubiquibot/comment-incentives/actions/runs/7887177171/job/21521832098\r\n- https://github.com/ubiquibot/comment-incentives/actions/runs/7887329738/job/21522307422\r\n@FernandVEYRIER would you like me to re-run both or are you able to extract the information that you need from there?\r\n---\r\nI just realized that the plugin live processes the latest comment information in the conversation. Given that I deleted the offending comment it would not process it again. I can't remember off hand exactly how I produced the offending comment unfortunately.\r\n---\r\nI tried looking through logs and commit histories but I can't figure out exactly what the offending comment was. As a consequence I don't know what to do to set it up again. I guess you can just make up something and prove that html comments are filtered out if they are quote commented. Perhaps try a \"quote reply\" to a bot comment with some metadata inside.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612088","commentType":"ISSUE_AUTHOR","score":{"reward":8.752,"formatting":{"content":{"p":{"score":0,"elementCount":6},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"hr":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2.2},"priority":2,"words":{"wordCount":166,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":66.60653846153848,"syllables":279,"sentences":13,"score":0.9339346153846152},"multiplier":1,"relevance":0.8}},{"id":2094612097,"content":"I am pretty sure I ended up fixing this by no longer logging out the offending metadata https://github.com/ubiquibot/comment-incentives/pull/23\r\n---\r\nUpdate: my fix just makes the issue less likely to occur but it is not a solution.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612097","commentType":"ISSUE_AUTHOR","score":{"reward":6.562,"formatting":{"content":{"p":{"score":0,"elementCount":2},"hr":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":54.591428571428594,"syllables":65,"sentences":2,"score":0.9459142857142859},"multiplier":1,"relevance":0.85}},{"id":2094612111,"content":"lol the irony","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612111","commentType":"ISSUE_AUTHOR","score":{"reward":0.18,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":62.79000000000002,"syllables":5,"sentences":1,"score":0.9720999999999997},"multiplier":1,"relevance":0.2}},{"id":2094612124,"content":"Looks like it broke on the triple back tick from within the comment. That makes sense. I guess those need to be escaped. \r\n              <details>\r\n    <summary>\r\n      <b\r\n        ><h3>\r\n          <a\r\n            href=\"https://pay.ubq.fi/?claim=W3sidHlwZSI6ImVyYzIwLXBlcm1pdCIsInBlcm1pdCI6eyJwZXJtaXR0ZWQiOnsidG9rZW4iOiIweGU5MUQxNTNFMGI0MTUxOEEyQ2U4RGQzRDc5NDRGYTg2MzQ2M2E5N2QiLCJhbW91bnQiOiI1MDAwMDAwMDAwMDAwMDAwMDAwMCJ9LCJub25jZSI6IjI1MzMxMzYzNjEwOTUzMTg0ODgzOTg2MzU3MTA2MzA2NDEwMzA2NDA4MDI4NTMxODI2NzQ1NTA2MDc3NDM2ODkwMDcxMzk5OTk5NDYxIiwiZGVhZGxpbmUiOiIxMTU3OTIwODkyMzczMTYxOTU0MjM1NzA5ODUwMDg2ODc5MDc4NTMyNjk5ODQ2NjU2NDA1NjQwMzk0NTc1ODQwMDc5MTMxMjk2Mzk5MzUifSwidHJhbnNmZXJEZXRhaWxzIjp7InRvIjoiMHg0MDA3Q0UyMDgzYzdGM0UxODA5N2FlQjNBMzliYjhlQzE0OWEzNDFkIiwicmVxdWVzdGVkQW1vdW50IjoiNTAwMDAwMDAwMDAwMDAwMDAwMDAifSwib3duZXIiOiIweDQ0Q2ExNURiMTAxZkQxYzE5NDQ2N0RiNkFGMGM2N0M2QmJGNEFCNTEiLCJzaWduYXR1cmUiOiIweGI2ZDhhZDRmMDc3ZjZkMTFkM2NmYThjZTgyMDRkYWYzMzkyNmU1MGY3N2UxOTQ1ZGFlZmI0MmJjOWQ0OTMxMzUzZTJmNzc4YjA3MWU2YjE0M2ViN2FmZjM5YzZjMWQ0ZGE4ZjM4ZTEzNThjNTg1ZjBhMjdmZGNjNGIyMDEyZWUwMWMiLCJuZXR3b3JrSWQiOjEwMH1d\"\r\n          >\r\n            [ 50 WXDAI ]</a\r\n          >\r\n        </h3>\r\n        <h6>@pavlovcik</h6></b\r\n      >\r\n    </summary>\r\n    <h6>Contributions Overview</h6>\r\n<table><thead>\r\n<tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th>\r\n</thead><tbody>\r\n<tr><td>Issue</td><td>Comment</td><td>3</td><td>6.9</td></tr>\r\n<tr><td>Review</td><td>Comment</td><td>7</td><td>43.1</td></tr>\r\n</tbody></table>\r\n    <h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/issues/168#issuecomment-1954630073\">Not sure if this is a two or four hour task...</a></h6></td><td>1.1</td><td>0.2</td><td>1.1</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/issues/168#issuecomment-1954647075\">> The bot hasn't linked me yet, I'm not going to assign myself a...</a></h6></td><td>3.2</td><td>0.52</td><td>3.2</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/issues/168#issuecomment-1963887247\">It's weird that GitHub is not considering your \"closing keyword\"...</a></h6></td><td>2.6</td><td>0.54</td><td>2.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1954640216\">Your code is outdated. Pull from head...</a></h6></td><td>0.7</td><td>0.37</td><td>0.7</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957833975\">I got it under one second on my [branch](https://github.com/pavl...</a></h6></td><td><details><summary>2.7</summary>\r\n<pre>a:\r\n  count: 1\r\n  score: \"1\"\r\n  words: 1\r\n</pre>\r\n</details></td><td>0.65</td><td>2.7</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1959084214\">> As did I without the additional 15 rpc calls however it's a go...</a></h6></td><td>4.1</td><td>0.64</td><td>4.1</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1960437636\">I was going to merge yours in but I realized that its not stable...</a></h6></td><td>5.8</td><td>0.69</td><td>5.8</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1960917395\">> I'm a little confused as to what you mean by it's not currentl...</a></h6></td><td><details><summary>20.2</summary>\r\n<pre>a:\r\n  count: 1\r\n  score: \"1\"\r\n  words: 3\r\ncode:\r\n  count: 4\r\n  score: \"4\"\r\n  words: 6\r\n</pre>\r\n</details></td><td>0.78</td><td>20.2</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1962070117\">Let me spend some time testing today and I'll be careful to clea...</a></h6></td><td>4.1</td><td>0.8</td><td>4.1</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1963084102\">The error that I got is from. \r\n```\r\nerc20-permit.ts:67 Error:...</a></h6></td><td><details><summary>5.5</summary>\r\n<pre>code:\r\n  count: 1\r\n  score: \"1\"\r\n  words: 0\r\n</pre>\r\n</details></td><td>0.78</td><td>5.5</td></tr></tbody></table>\r\n  </details>\r\n  <details>\r\n    <summary>\r\n      <b\r\n        ><h3>\r\n          <a\r\n            href=\"https://pay.ubq.fi/?claim=W3sidHlwZSI6ImVyYzIwLXBlcm1pdCIsInBlcm1pdCI6eyJwZXJtaXR0ZWQiOnsidG9rZW4iOiIweGU5MUQxNTNFMGI0MTUxOEEyQ2U4RGQzRDc5NDRGYTg2MzQ2M2E5N2QiLCJhbW91bnQiOiI0MzU3MDAwMDAwMDAwMDAwMDAwMDAifSwibm9uY2UiOiIzNjkyNjE3MTgyMjY4NTcwODEwNzAyNDQ2MzY1NDE4NjIxOTU3NDc4MzY4Nzg4NDc5NDk4NjAyMTQwNDU3NjI5Njk3MTQ2MzQxNjQ4OSIsImRlYWRsaW5lIjoiMTE1NzkyMDg5MjM3MzE2MTk1NDIzNTcwOTg1MDA4Njg3OTA3ODUzMjY5OTg0NjY1NjQwNTY0MDM5NDU3NTg0MDA3OTEzMTI5NjM5OTM1In0sInRyYW5zZmVyRGV0YWlscyI6eyJ0byI6IjB4QWU1RDFGMTkyMDEzZGI4ODliMWUyMTE1QTM3MGFCMTMzZjM1OTc2NSIsInJlcXVlc3RlZEFtb3VudCI6IjQzNTcwMDAwMDAwMDAwMDAwMDAwMCJ9LCJvd25lciI6IjB4NDRDYTE1RGIxMDFmRDFjMTk0NDY3RGI2QUYwYzY3QzZCYkY0QUI1MSIsInNpZ25hdHVyZSI6IjB4YTJmNjkxYjVjZDkxMzJlYjllYzJlMjI1NzRiMTkxYWUxZDRhNzkzOGI0MTQ4ZDAwZTI0ZjhhN2Y3NTM3MmFlOTVmMzIyY2VlZjg5MzFlN2ZkZDYxOWNlYzNkNDA1NTNlOTZmNTg0OTFhOGJlMDU3NTBjYTY3ZDM0NGQ4YTIwY2ExYyIsIm5ldHdvcmtJZCI6MTAwfV0%3D\"\r\n          >\r\n            [ 435.7 WXDAI ]</a\r\n          >\r\n        </h3>\r\n        <h6>@Keyrxng</h6></b\r\n      >\r\n    </summary>\r\n    <h6>Contributions Overview</h6>\r\n<table><thead>\r\n<tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th>\r\n</thead><tbody>\r\n<tr><td>Issue</td><td>Specification</td><td>1</td><td>19</td></tr>\r\n<tr><td>Issue</td><td>Task</td><td>1</td><td>200</td></tr>\r\n<tr><td>Issue</td><td>Comment</td><td>1</td><td>6.4</td></tr>\r\n<tr><td>Issue</td><td>Comment</td><td>1</td><td>0</td></tr>\r\n<tr><td>Review</td><td>Comment</td><td>10</td><td>140.2</td></tr>\r\n<tr><td>Review</td><td>Comment</td><td>10</td><td>70.1</td></tr>\r\n</tbody></table>\r\n    <h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/issues/168\">Follow-on task to #158 \r\nThe goal is to reduce TTC (time till ...</a></h6></td><td><details><summary>19</summary>\r\n<pre>li:\r\n  count: 4\r\n  score: \"4\"\r\n  words: 53\r\n</pre>\r\n</details></td><td>1</td><td>19</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/issues/168#issuecomment-1954639846\">The bot hasn't linked me yet, I'm not going to assign myself and...</a></h6></td><td>6.4</td><td>0.05</td><td>6.4</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/issues/168#issuecomment-1954639846\">The bot hasn't linked me yet, I'm not going to assign myself and...</a></h6></td><td>-</td><td>0.05</td><td>-</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1954683499\">lmao I'll get there sooner or later with Git 😂 ...</a></h6></td><td>2</td><td>0.05</td><td>2</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957269289\">Optimistic rendering time till claimable:\r\n![optimistic-w-add-...</a></h6></td><td>2.2</td><td>0.57</td><td>2.2</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957280053\">had a nightmare trying to get that submodule added, thats what c...</a></h6></td><td>11.2</td><td>0.29</td><td>11.2</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957348255\">The rpc speed mapping is cool but I think it's a bit overkill pi...</a></h6></td><td>23.8</td><td>0.5</td><td>23.8</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957797441\">It's not determined by a block being mined as it involves no onc...</a></h6></td><td>12.6</td><td>0.505</td><td>12.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957817839\">> > It's not determined by a block being mined as it involves no...</a></h6></td><td><details><summary>18.6</summary>\r\n<pre>code:\r\n  count: 1\r\n  score: \"2\"\r\n  words: 3\r\n</pre>\r\n</details></td><td>0.52</td><td>18.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957841044\">As did I without the additional 15 rpc calls however it's a good...</a></h6></td><td>6.6</td><td>0.59</td><td>6.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1960692481\">I'm a little confused as to what you mean by it's not currently ...</a></h6></td><td><details><summary>27.8</summary>\r\n<pre>a:\r\n  count: 1\r\n  score: \"2\"\r\n  words: 3\r\ncode:\r\n  count: 4\r\n  score: \"8\"\r\n  words: 6\r\n</pre>\r\n</details></td><td>0.75</td><td>27.8</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1961222782\">Hitting localhost I generated 10 permits with an open window eac...</a></h6></td><td><details><summary>16.6</summary>\r\n<pre>code:\r\n  count: 1\r\n  score: \"2\"\r\n  words: 7\r\n</pre>\r\n</details></td><td>0.71</td><td>16.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1963541663\">This resolves the no network issue. \r\nI test by setting the ``...</a></h6></td><td><details><summary>18.8</summary>\r\n<pre>code:\r\n  count: 5\r\n  score: \"10\"\r\n  words: 7\r\n</pre>\r\n</details></td><td>0.76</td><td>18.8</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1954683499\">lmao I'll get there sooner or later with Git 😂 ...</a></h6></td><td>1</td><td>0.05</td><td>1</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957269289\">Optimistic rendering time till claimable:\r\n![optimistic-w-add-...</a></h6></td><td>1.1</td><td>0.57</td><td>1.1</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957280053\">had a nightmare trying to get that submodule added, thats what c...</a></h6></td><td>5.6</td><td>0.29</td><td>5.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957348255\">The rpc speed mapping is cool but I think it's a bit overkill pi...</a></h6></td><td>11.9</td><td>0.5</td><td>11.9</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957797441\">It's not determined by a block being mined as it involves no onc...</a></h6></td><td>6.3</td><td>0.505</td><td>6.3</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957817839\">> > It's not determined by a block being mined as it involves no...</a></h6></td><td><details><summary>9.3</summary>\r\n<pre>code:\r\n  count: 1\r\n  score: \"1\"\r\n  words: 3\r\n</pre>\r\n</details></td><td>0.52</td><td>9.3</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957841044\">As did I without the additional 15 rpc calls however it's a good...</a></h6></td><td>3.3</td><td>0.59</td><td>3.3</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1960692481\">I'm a little confused as to what you mean by it's not currently ...</a></h6></td><td><details><summary>13.9</summary>\r\n<pre>a:\r\n  count: 1\r\n  score: \"1\"\r\n  words: 3\r\ncode:\r\n  count: 4\r\n  score: \"4\"\r\n  words: 6\r\n</pre>\r\n</details></td><td>0.75</td><td>13.9</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1961222782\">Hitting localhost I generated 10 permits with an open window eac...</a></h6></td><td><details><summary>8.3</summary>\r\n<pre>code:\r\n  count: 1\r\n  score: \"1\"\r\n  words: 7\r\n</pre>\r\n</details></td><td>0.71</td><td>8.3</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1963541663\">This resolves the no network issue. \r\nI test by setting the ``...</a></h6></td><td><details><summary>9.4</summary>\r\n<pre>code:\r\n  count: 5\r\n  score: \"5\"\r\n  words: 7\r\n</pre>\r\n</details></td><td>0.76</td><td>9.4</td></tr></tbody></table>\r\n  </details>\r\n  <details>\r\n    <summary>\r\n      <b\r\n        ><h3>\r\n          <a\r\n            href=\"https://pay.ubq.fi/?claim=W3sidHlwZSI6ImVyYzIwLXBlcm1pdCIsInBlcm1pdCI6eyJwZXJtaXR0ZWQiOnsidG9rZW4iOiIweGU5MUQxNTNFMGI0MTUxOEEyQ2U4RGQzRDc5NDRGYTg2MzQ2M2E5N2QiLCJhbW91bnQiOiI5OTAwMDAwMDAwMDAwMDAwMDAwIn0sIm5vbmNlIjoiMTE0MTU0MTY3NDA3NTQxMTMxOTk2NTk0MjU5NzQzMjQ1MTcyNDcxOTU3MTM2MzUyMDQ3MjQ1Mzg4NzIwNDM1NTk5NjYzMzU2OTU4MTA3IiwiZGVhZGxpbmUiOiIxMTU3OTIwODkyMzczMTYxOTU0MjM1NzA5ODUwMDg2ODc5MDc4NTMyNjk5ODQ2NjU2NDA1NjQwMzk0NTc1ODQwMDc5MTMxMjk2Mzk5MzUifSwidHJhbnNmZXJEZXRhaWxzIjp7InRvIjoiMHgzMzZDMDMzODQyRkEzMTZkNDcwZTgyMGM4MWI3NDJlNjJBMDc2NURDIiwicmVxdWVzdGVkQW1vdW50IjoiOTkwMDAwMDAwMDAwMDAwMDAwMCJ9LCJvd25lciI6IjB4NDRDYTE1RGIxMDFmRDFjMTk0NDY3RGI2QUYwYzY3QzZCYkY0QUI1MSIsInNpZ25hdHVyZSI6IjB4MDI3OThkMTljMjE0MDg3Mzk2NmFjYWY3NTFiMTlkNmM2ZmEyMjBjM2MwZTkyZTExOWVlMzI0NzBjNGViOGFjNTAwNzdjODJkZjQyMDdkZWE3MTk1ZDJhNzRkNTI0NTQyM2UwYjY1ODZmMWIwYWUyNzVjZmE0ODE0OWY5NWQ4MTcxYiIsIm5ldHdvcmtJZCI6MTAwfV0%3D\"\r\n          >\r\n            [ 9.9 WXDAI ]</a\r\n          >\r\n        </h3>\r\n        <h6>@rndquu</h6></b\r\n      >\r\n    </summary>\r\n    <h6>Contributions Overview</h6>\r\n<table><thead>\r\n<tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th>\r\n</thead><tbody>\r\n<tr><td>Review</td><td>Comment</td><td>2</td><td>9.9</td></tr>\r\n</tbody></table>\r\n    <h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957785172\">> local anvil hits instantly everytime\r\nAs far as I remember w...</a></h6></td><td><details><summary>5.5</summary>\r\n<pre>a:\r\n  count: 1\r\n  score: \"1\"\r\n  words: 1\r\n</pre>\r\n</details></td><td>0.59</td><td>5.5</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/pay.ubq.fi/pull/169#issuecomment-1957804369\">> It's not determined by a block being mined as it involves no o...</a></h6></td><td><details><summary>4.4</summary>\r\n<pre>code:\r\n  count: 1\r\n  score: \"1\"\r\n  words: 3\r\n</pre>\r\n</details></td><td>0.44</td><td>4.4</td></tr></tbody></table>\r\n  </details>\r\n_Originally posted by @ubiquibot[bot] in https://github.com/ubiquity/pay.ubq.fi/issues/168#issuecomment-1963889840_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612124","commentType":"ISSUE_AUTHOR","score":{"reward":4.94,"formatting":{"content":{"p":{"score":0,"elementCount":23},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":262,"wordValue":0.1,"result":1.17},"readability":{"fleschKincaid":94.34304487179489,"syllables":394,"sentences":39,"score":0.6565695512820511},"multiplier":1,"relevance":0.95}},{"id":2094612147,"content":"I got saturated rewriting the conversation incentives module first. I didn't get a chance to finish. \nhttps://github.com/ubiquibot/conversation-rewards\nThe next module would be permit generation. \nThe final module would be the comment generation. So basically this would consume the output of the permit generation module. \nThat would essentially just be an array of permits. Feel free to start making that module from scratch?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612147","commentType":"ISSUE_AUTHOR","score":{"reward":6.72,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":62,"wordValue":0.1,"result":2.54},"readability":{"fleschKincaid":48.9133823529412,"syllables":120,"sentences":8,"score":0.889133823529412},"multiplier":1,"relevance":0.75}},{"id":2094612160,"content":"I haven't figured out the architecture to be honest. I think it makes sense that the conversation incentives indeed handles all that calculation but I'm unsure about how to pass it THROUGH `permit generation` module and then into the final `permit comment` module\r\nrfc @whilefoo \r\nIdeally if the kernel can store output information from each module. Then a future module can request a specific property from all of the outputs so far. I think we can take inspiration from how GitHub Actions already implemented this. We specify an output in the config and then pass it in directly from the config into the plugin. \r\n---\r\nEither way @FernandVEYRIER I think there's plenty of ground work to lay out before we figure out these \"external-to-plugin\" details","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612160","commentType":"ISSUE_AUTHOR","score":{"reward":4.368,"formatting":{"content":{"p":{"score":0,"elementCount":4},"hr":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":125,"wordValue":0.1,"result":2.45},"readability":{"fleschKincaid":51.68276666666668,"syllables":198,"sentences":6,"score":0.9168276666666668},"multiplier":1,"relevance":0.7}},{"id":2094612185,"content":"In GitHub actions it isn't necessary to worry about compatibility within the intermediary modules. You essentially direct the output precisely wherever it's needed. So all the outputs would, in a sense, stay in the memory of the kernel.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612185","commentType":"ISSUE_AUTHOR","score":{"reward":3.24,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":40,"wordValue":0.1,"result":2.18},"readability":{"fleschKincaid":38.906666666666695,"syllables":73,"sentences":3,"score":0.7890666666666669},"multiplier":1,"relevance":0.6}},{"id":2114200340,"content":"Lol my comment reward 👀","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2114200340","commentType":"ISSUE_AUTHOR","score":{"reward":0.22,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.2}},{"id":2114871486,"content":"I don't plan to claim it. Or perhaps claim and return 442","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2114871486","commentType":"ISSUE_AUTHOR","score":{"reward":0.715,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":102.62211538461541,"syllables":15,"sentences":2,"score":1},"multiplier":1,"relevance":0.25}},{"id":2279325622,"content":"# HTML Comment Serialization\r\nWhenever the bot needs to repost a comment, its serialization of the html and markdown comment syntax is unhandled, leading to situations like [this comment](https://github.com/ubiquibot/conversation-rewards/issues/18).)\r\nEnsure that the bot can properly handle these embedded metadata comments in the conversation rewards table (it displays a preview of every comment body)\r\n### Solution\r\nIdeally we can use a library or some built in methods but in case those are not available. \r\n- Be sure to test specifically for HTML comment: ``:\r\n- test specifically for embedded markdown \r\n- test specifically for embedded JSON objects\r\n- test specifically for embedded code\r\nChatGPT: \r\n```typescript\r\nfunction encodeHtmlEntities(str: string): string {\r\n  return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;');\r\n}\r\nfunction escapeMarkdown(content: string): string {\r\n  // Escapes markdown special characters\r\n  return content.replace(/([*_`#\\[\\]()<>])/g, '\\\\$1');\r\n}\r\nfunction embedJsonInMarkdown(json: any): string {\r\n  // Converts JSON to string and escapes for markdown\r\n  const jsonString = JSON.stringify(json, null, 2);\r\n  const escapedJson = escapeMarkdown(jsonString);\r\n  return \"```\\n\" + escapedJson + \"\\n```\";\r\n}\r\n```\r\n### Further Examples\r\nCheck out gitcoindev's conversation incentives: https://github.com/ubiquity/ubiquibot/issues/665#issuecomment-1949929911\r\n### Original Specification\r\nWhen generating the payment permits, the bot includes a table for \"conversation rewards\" with details around how the conversation rewards were calculated. \r\nHowever, I quoted a bot comment, which included the JSON metadata that the bot embeds inside of an HTML comment `` inside of its GitHub comment. \r\nWhen generating the conversation rewards table, the rendering broke because it doesn't know how to deal with HTML comments. It dumped the full JSON object into the comment incentives calculation table, which looked very wrong. \r\nIt should filter any HTML that is commented out so that it does not break the \"comment incentives\" table.\r\nUnfortunately I deleted the offending comment from the back-linked conversation, but I hope that this description makes sense.\r\n_Originally posted by @pavlovcik in https://github.com/ubiquity/devpool-directory-bounties/issues/14#issuecomment-1941514786_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18","commentType":"ISSUE_SPECIFICATION","score":{"reward":10.77,"formatting":{"content":{"h1":{"score":1,"elementCount":1},"p":{"score":0,"elementCount":15},"h3":{"score":1,"elementCount":3},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":4},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":3}},"result":7.4},"priority":1,"words":{"wordCount":232,"wordValue":0.1,"result":1.42},"readability":{"fleschKincaid":33.85370129870134,"syllables":446,"sentences":11,"score":0.7385370129870134},"multiplier":1,"relevance":1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/19"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 56.118 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Specification</td><td>1</td><td>10.77</td></tr><tr><td>Issue</td><td>Comment</td><td>11</td><td>45.348</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18\" target=\"_blank\" rel=\"noopener\"># HTML Comment SerializationWhenever the bot needs to repost a&hellip;</a></h6></td><td><details><summary>8.82</summary><pre>content:&#13;  content:&#13;    h1:&#13;      score: 1&#13;      elementCount: 1&#13;    p:&#13;      score: 0&#13;      elementCount: 15&#13;    h3:&#13;      score: 1&#13;      elementCount: 3&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 4&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 7.4&#13;regex:&#13;  wordCount: 232&#13;  wordValue: 0.1&#13;  result: 1.42&#13;</pre></details></td><td>1</td><td>1</td><td>10.77</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612063\" target=\"_blank\" rel=\"noopener\">For context, this comment has the following metadata embedded, w&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.9</td><td>2</td><td>2.664</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612075\" target=\"_blank\" rel=\"noopener\">Unfortunately I deleted it and I can't undelete. I realized my m&hellip;</a></h6></td><td><details><summary>3.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.85</td><td>2</td><td>6.987</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612088\" target=\"_blank\" rel=\"noopener\">I think it is one of these successful runs from \"3 days ago\". Le&hellip;</a></h6></td><td><details><summary>4.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    hr:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2.2&#13;regex:&#13;  wordCount: 166&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.8</td><td>2</td><td>8.752</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612097\" target=\"_blank\" rel=\"noopener\">I am pretty sure I ended up fixing this by no longer logging out&hellip;</a></h6></td><td><details><summary>3.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.85</td><td>2</td><td>6.562</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612111\" target=\"_blank\" rel=\"noopener\">lol the irony</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.18</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612124\" target=\"_blank\" rel=\"noopener\">Looks like it broke on the triple back tick from within the comm&hellip;</a></h6></td><td><details><summary>2.17</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 23&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 262&#13;  wordValue: 0.1&#13;  result: 1.17&#13;</pre></details></td><td>0.95</td><td>2</td><td>4.94</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612147\" target=\"_blank\" rel=\"noopener\">I got saturated rewriting the conversation incentives module fir&hellip;</a></h6></td><td><details><summary>3.54</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 62&#13;  wordValue: 0.1&#13;  result: 2.54&#13;</pre></details></td><td>0.75</td><td>2</td><td>6.72</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612160\" target=\"_blank\" rel=\"noopener\">I haven't figured out the architecture to be honest. I think it &hellip;</a></h6></td><td><details><summary>2.45</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 125&#13;  wordValue: 0.1&#13;  result: 2.45&#13;</pre></details></td><td>0.7</td><td>2</td><td>4.368</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612185\" target=\"_blank\" rel=\"noopener\">In GitHub actions it isn't necessary to worry about compatibilit&hellip;</a></h6></td><td><details><summary>2.18</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 40&#13;  wordValue: 0.1&#13;  result: 2.18&#13;</pre></details></td><td>0.6</td><td>2</td><td>3.24</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2114200340\" target=\"_blank\" rel=\"noopener\">Lol my comment reward 👀</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.22</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2114871486\" target=\"_blank\" rel=\"noopener\">I don't plan to claim it. Or perhaps claim and return 442</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.25</td><td>2</td><td>0.715</td></tr></tbody></table></details>"},"whilefoo":{"total":4.241,"userId":139262667,"comments":[{"id":2094612171,"content":"In the current implementation the `permit generation` plugin would be responsible for passing the calculation to the final `permit comment` along with permits.\r\nI do like this idea, for example something like this:\r\n```yml\r\n- name: \"Comment incentives\"\r\n  uses:\r\n    - id: conversation-incentives\r\n      plugin: ubiquibot/conversation-incentives\r\n      with:\r\n       ...\r\n    - id: permit-generation\r\n      plugin: ubiquibot/permit-generation\r\n      with:\r\n       calculation: {{ conversation-incentives.outputs.calculation }} \r\n       ...\r\n    - plugin: ubiquibot/permit-comment\r\n      with:\r\n       permits: {{ permit-generation.outputs.permits }} \r\n       calculation: {{ conversation-incentives.outputs.calculation }} \r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612171","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.241,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":46.2554310344828,"syllables":50,"sentences":2,"score":0.862554310344828},"multiplier":1,"relevance":0.91}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/19"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 4.241 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>4.241</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/18#issuecomment-2094612171\" target=\"_blank\" rel=\"noopener\">In the current implementation the &#96;permit generation&#96; pl&hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.91</td><td>2</td><td>4.241</td></tr></tbody></table></details>"},"rndquu":{"total":0.63,"userId":119500907,"comments":[{"id":2114528054,"content":"@molecula451 Why did you merge it with failing tests?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/19#issuecomment-2114528054","commentType":"PULL_COLLABORATOR","score":{"reward":0.63,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":75.50000000000003,"syllables":13,"sentences":1,"score":0.8449999999999998},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/19"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.63 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>0.63</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/19#issuecomment-2114528054\" target=\"_blank\" rel=\"noopener\">@molecula451 Why did you merge it with failing tests?</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.63</td></tr></tbody></table></details>"},"molecula451":{"total":12.084,"userId":41552663,"comments":[{"id":2114594868,"content":"I approved the PR here. I did not merged, gentleman merged, in any case, i think gentleman is aware of the failing tests run \r\n![image_2024-05-16_050100027](https://github.com/ubiquibot/conversation-rewards/assets/41552663/94e94bea-ecf4-4108-b15e-eea120ac147e)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/19#issuecomment-2114594868","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.204,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":85.38,"syllables":31,"sentences":2,"score":0.7462000000000001},"multiplier":0.25,"relevance":0.2}}],"reviewRewards":[{"reviews":[{"reviewId":2058557247,"effect":{"addition":418,"deletion":176},"reward":11.88,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/19"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 12.084 XP ]</a>&nbsp;</h3><h6>@molecula451</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>11.88</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.204</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/19\" target=\"_blank\" rel=\"noopener\">#19</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+418 -176</td><td>2</td><td>11.88</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/19#issuecomment-2114594868\" target=\"_blank\" rel=\"noopener\">I approved the PR here. I did not merged, gentleman merged, in a&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.204</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_143.json","json":{"gentlementlegen":{"userId":9807008,"total":400,"task":{"reward":400,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 400 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>400</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":39.322,"userId":4975670,"comments":[{"id":2404130212,"content":"Removed prompt improvement","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/143#issuecomment-2404130212","commentType":"ISSUE_AUTHOR","score":{"reward":0.24,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":6.390000000000015,"syllables":7,"sentences":1,"score":0.46390000000000015},"multiplier":1,"relevance":0.3}},{"id":2568553231,"content":"- https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/142\r\nNoticed many small things that should be adjusted. \r\n- [Compile with NCC](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/142#discussion_r1788979061) \r\n- [Dedicated App](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/142#discussion_r1788980354)\r\n- [Linter Warning Fix](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/142#discussion_r1788980677)\r\n- [Add Throw](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/142#discussion_r1788981151)\r\n- [+ Syntax](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/142#discussion_r1788982210)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/143","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.9,"formatting":{"content":{"ul":{"score":0,"elementCount":2},"li":{"score":0.1,"elementCount":6},"p":{"score":0,"elementCount":6},"a":{"score":1,"elementCount":1}},"result":1.6},"priority":1,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":55.685,"syllables":50,"sentences":3,"score":0.95685},"multiplier":1,"relevance":1}},{"id":1789850452,"content":"We need to fix the conflicting formatter. I noticed this is file is always toggling between the two different format rules.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1789850452","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":2.364,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":59.20607142857145,"syllables":34,"sentences":2,"score":0.9920607142857145},"multiplier":1,"relevance":0.6}},{"id":1789852840,"content":"It looks like this is toggling as well.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1789852840","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.792,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":103.54,"syllables":9,"sentences":1,"score":1},"multiplier":1,"relevance":0.4}},{"id":1789854441,"content":"Great fix","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1789854441","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,9 +1,9 @@\n-import { execSync } from \"child_process\";\n+import { context } from \"@actions/github\";\n \n export function createStructuredMetadata(className: string, metadata: unknown) {\n   const jsonString = JSON.stringify(metadata, null, 2);\n   const stackLine = new Error().stack?.split(\"\\n\")[2] ?? \"\";\n   const caller = stackLine.match(/at (\\S+)/)?.[1] ?? \"\";\n-  const revision = execSync(\"git rev-parse --short HEAD\").toString().trim();\n+  const revision = context.sha;","score":{"reward":0.528,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":120.20500000000001,"syllables":2,"sentences":1,"score":1},"multiplier":1,"relevance":0.8}},{"id":1789855542,"content":"This doesn't seem right maybe @zugdev or @rndquu might know what to do","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1789855542","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -21,6 +22,7 @@ export async function getERC20TokenSymbol(networkId: number, tokenAddress: strin\n   const provider = await handler.getFastestRpcProvider();\n \n   // fetch token symbol\n+  // @ts-expect-error expects a contract when imported through ESNext\n   const contract = new ethers.Contract(tokenAddress, abi, provider);","score":{"reward":2.114,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":101.98214285714286,"syllables":15,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":1789856327,"content":"You sure you want to cast this? Casting seems risky","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1789856327","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -16,9 +18,9 @@ function getOctokitInstance() {\n         retries: configuration.dataCollection.maxAttempts,\n         retryAfterBaseValue: configuration.dataCollection.delayMs,\n       },\n-    });\n+    }) as OctokitInstanceType;\n   }\n-  return octokitInstance;\n+  return octokitInstance as OctokitInstanceType;","score":{"reward":1.872,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":100.24000000000002,"syllables":12,"sentences":2,"score":1},"multiplier":1,"relevance":0.8}},{"id":1789857506,"content":"This seems like a significant logic change. What's going on here?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1789857506","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -65,13 +65,13 @@ export class ContentEvaluatorModule implements Module {\n     const allComments: { id: number; comment: string; author: string }[] = [];\n     for (const commentObj of allCommentsUnClean) {\n       if (commentObj.user) {\n-        allComments.push({ id: commentObj.id, comment: commentObj.body || \"\", author: commentObj.user.login });\n+        allComments.push({ id: commentObj.id, comment: commentObj.body ?? \"\", author: commentObj.user.login });\n       }\n     }\n \n     for (const key of Object.keys(result)) {\n       const currentElement = result[key];\n-      const comments = currentElement.comments || [];\n+      const comments = currentElement.comments ?? [];","score":{"reward":2.268,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":87.94500000000002,"syllables":16,"sentences":2,"score":0.7205499999999998},"multiplier":1,"relevance":0.9}},{"id":1789860203,"content":"It seems like you're doing this everywhere. I thought it's the opposite of || but I'm probably mistaken. Can you explain why you're changing these?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1789860203","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -222,13 +222,13 @@ export class GithubCommentModule implements Module {\n             <td>\n             <details>\n               <summary>\n-                ${new Decimal(commentScore.score?.words?.result || 0).add(new Decimal(commentScore.score?.formatting?.result || 0))}\n+                ${new Decimal(commentScore.score?.words?.result ?? 0).add(new Decimal(commentScore.score?.formatting?.result ?? 0))}\n               </summary>\n               <pre>${formatting}</pre>\n              </details>\n             </td>\n-            <td>${commentScore.score?.relevance || \"-\"}</td>\n-            <td>${commentScore.score?.reward || \"-\"}</td>\n+            <td>${commentScore.score?.relevance ?? \"-\"}</td>","score":{"reward":3.15,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":79.5259523809524,"syllables":39,"sentences":3,"score":0.804740476190476},"multiplier":1,"relevance":0.7}},{"id":1790114169,"content":"Can you inline the compiled files? Single line, minified? \r\nThis makes the size smaller, but also makes it clear that humans should not work on it.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1790114169","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":3.424,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":84.15371794871797,"syllables":35,"sentences":3,"score":0.7584628205128203},"multiplier":1,"relevance":0.8}},{"id":1790122295,"content":"Learned something new.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1790122295","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -222,13 +222,13 @@ export class GithubCommentModule implements Module {\n             <td>\n             <details>\n               <summary>\n-                ${new Decimal(commentScore.score?.words?.result || 0).add(new Decimal(commentScore.score?.formatting?.result || 0))}\n+                ${new Decimal(commentScore.score?.words?.result ?? 0).add(new Decimal(commentScore.score?.formatting?.result ?? 0))}\n               </summary>\n               <pre>${formatting}</pre>\n              </details>\n             </td>\n-            <td>${commentScore.score?.relevance || \"-\"}</td>\n-            <td>${commentScore.score?.reward || \"-\"}</td>\n+            <td>${commentScore.score?.relevance ?? \"-\"}</td>","score":{"reward":0.27,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":62.79000000000002,"syllables":5,"sentences":1,"score":0.9720999999999997},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2351390776,"effect":{"addition":523,"deletion":310},"reward":16.66,"priority":2},{"reviewId":2351780711,"effect":{"addition":79,"deletion":8},"reward":1.74,"priority":2},{"reviewId":2351793337,"effect":{"addition":0,"deletion":0},"reward":0,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 39.322 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>18.4</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.9</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.24</td></tr><tr><td>Review</td><td>Comment</td><td>9</td><td>16.782</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144\" target=\"_blank\" rel=\"noopener\">#144</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+523 -310</td><td>2</td><td>16.66</td></tr><tr><td>+79 -8</td><td>2</td><td>1.74</td></tr><tr><td>+0 -0</td><td>2</td><td>0</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/143\" target=\"_blank\" rel=\"noopener\">- https://github.com/ubiquity-os-marketplace/text-conversation-r&hellip;</a></h6></td><td><details><summary>3.03</summary><pre>content:&#13;  content:&#13;    ul:&#13;      score: 0&#13;      elementCount: 2&#13;    li:&#13;      score: 0.1&#13;      elementCount: 6&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.6&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>1</td><td>1</td><td>3.9</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/143#issuecomment-2404130212\" target=\"_blank\" rel=\"noopener\">Removed prompt improvement</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.24</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1789850452\" target=\"_blank\" rel=\"noopener\">We need to fix the conflicting formatter. I noticed this is file&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.6</td><td>2</td><td>2.364</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1789852840\" target=\"_blank\" rel=\"noopener\">It looks like this is toggling as well.</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.4</td><td>2</td><td>0.792</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1789854441\" target=\"_blank\" rel=\"noopener\">Great fix</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.8</td><td>2</td><td>0.528</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1789855542\" target=\"_blank\" rel=\"noopener\">This doesn't seem right maybe @zugdev or @rndquu might know what&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.114</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1789856327\" target=\"_blank\" rel=\"noopener\">You sure you want to cast this? Casting seems risky</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.872</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1789857506\" target=\"_blank\" rel=\"noopener\">This seems like a significant logic change. What's going on here?</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.9</td><td>2</td><td>2.268</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1789860203\" target=\"_blank\" rel=\"noopener\">It seems like you're doing this everywhere. I thought it's the o&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.7</td><td>2</td><td>3.15</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1790114169\" target=\"_blank\" rel=\"noopener\">Can you inline the compiled files? Single line, minified? This&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.8</td><td>2</td><td>3.424</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/144#discussion_r1790122295\" target=\"_blank\" rel=\"noopener\">Learned something new.</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.27</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_82.json","json":{"gentlementlegen":{"userId":9807008,"total":100,"task":{"reward":100,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 100 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":27.648,"userId":4975670,"comments":[{"id":2290951754,"content":"Not sure what the problem is but I figured it shouldn't take too long to diagnose. Let me know what you think a good time estimate is.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/82#issuecomment-2290951754","commentType":"ISSUE_AUTHOR","score":{"reward":1.302,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":92.91785714285714,"syllables":33,"sentences":2,"score":0.6708214285714286},"multiplier":1,"relevance":0.3}},{"id":2348093854,"content":"I don't understand why there are these mistakes in the implementation when the code is ready from v1. \nMy best guess is that it's draft pull related.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/82#issuecomment-2348093854","commentType":"ISSUE_AUTHOR","score":{"reward":2.29,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":81.26232758620691,"syllables":38,"sentences":2,"score":0.7873767241379309},"multiplier":1,"relevance":0.5}},{"id":2348131641,"content":"The first implementation just counted the total amount of words in the entire comment in one go. You don't need to associate word count with each element, like I mentioned before. The emphasis is on tag count, not word count. \r\nFor some elements, like `<code>`, we ignored words inside. Just subtract the amount of words counted inside from the total.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/82#issuecomment-2348131641","commentType":"ISSUE_AUTHOR","score":{"reward":4.41,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":60,"wordValue":0.1,"result":2.52},"readability":{"fleschKincaid":76.21500000000002,"syllables":84,"sentences":5,"score":0.8378499999999999},"multiplier":1,"relevance":0.7}},{"id":2467711729,"content":"122 `ol` and `li` counted in this comment, which is not correct. \r\n<img width=\"834\" alt=\"image\" src=\"https://github.com/user-attachments/assets/d97ce7e4-9764-406b-a0b5-cdd3dda8d718\">\r\n_Originally posted by @ubiquityos[bot] in https://github.com/ubiquity/pay.ubq.fi/issues/259#issuecomment-2290919985_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/82","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.55,"formatting":{"content":{"p":{"score":0,"elementCount":3},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":68.64621212121216,"syllables":68,"sentences":6,"score":0.9135378787878784},"multiplier":1,"relevance":1}},{"id":1758387842,"content":"Shouldn't the default be errors?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/118#discussion_r1758387842","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,6 +11,7 @@ import { userExtractorConfigurationType } from \"./user-extractor-config\";\n \n export const incentivesConfigurationSchema = T.Object(\n   {\n+    logLevel: T.Enum(LOG_LEVEL, { default: LOG_LEVEL.INFO }),","score":{"reward":1.036,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":87.94500000000002,"syllables":8,"sentences":1,"score":0.7205499999999998},"multiplier":1,"relevance":0.7}},{"id":1758389203,"content":"If we use a virtual DOM creator like `jsdom` or `mdast`, we should be able to query element.textContent and it should handle this and other situations in a robust manner. Since this is already finished, its fine. But if there are any problems with the implementation, or more operations you need to perform, consider the virtual DOM approach.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/118#discussion_r1758389203","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -26,6 +26,8 @@ export class DataPurgeModule implements Module {\n           .replace(/^>.*$/gm, \"\")\n           // Remove commands such as /start\n           .replace(/^\\/.+/g, \"\")\n+          // Remove HTML comments\n+          .replace(/<!--[\\s\\S]*?-->/g, \"\")","score":{"reward":5.12,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":57,"wordValue":0.1,"result":2.48},"readability":{"fleschKincaid":63.24493421052631,"syllables":87,"sentences":4,"score":0.9675506578947369},"multiplier":1,"relevance":0.8}},{"id":1758391249,"content":"textContent of the top level parent element will do the right thing.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/118#discussion_r1758391249","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -139,17 +141,36 @@ export class FormattingEvaluatorModule implements Module {\n \n     for (const element of elements) {\n       const tagName = element.tagName.toLowerCase();\n-      const wordCount = this._countWords(this._multipliers[commentType].regex, element.textContent || \"\");\n+      // We cannot use textContent otherwise we would duplicate counts, so instead we extract text nodes","score":{"reward":2.394,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":67.75500000000001,"syllables":18,"sentences":1,"score":0.9224499999999999},"multiplier":1,"relevance":0.9}},{"id":1758392113,"content":"I suppose that for the statistics it might be interesting to count words per element but honestly its out of scope and doesn't add business value while complicating the code.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/118#discussion_r1758392113","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -139,17 +141,36 @@ export class FormattingEvaluatorModule implements Module {\n \n     for (const element of elements) {\n       const tagName = element.tagName.toLowerCase();\n-      const wordCount = this._countWords(this._multipliers[commentType].regex, element.textContent || \"\");\n+      // We cannot use textContent otherwise we would duplicate counts, so instead we extract text nodes\n+      const textNodes = Array.from(element?.childNodes || []).filter((node) => node.nodeType === 3);\n+      const innerText = textNodes\n+        .map((node) => node.nodeValue?.trim())\n+        .join(\" \")\n+        .trim();\n+      const symbols = this._countSymbols(this._multipliers[commentType].regex, innerText);\n       let score = 0;\n       if (this._multipliers[commentType]?.html[tagName] !== undefined) {\n         score = this._multipliers[commentType].html[tagName];\n       } else {\n         logger.error(`Could not find multiplier for comment [${commentType}], <${tagName}>`);\n       }\n-      tagWordCount[tagName] = {\n-        symbols: wordCount,\n-        score,\n-      };\n+      logger.debug(\"Tag content results\", { tagName, symbols, text: element.textContent });\n+      // If we already had that tag included in the result, merge them and update total count","score":{"reward":2.892,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":44.37645161290325,"syllables":48,"sentences":1,"score":0.8437645161290326},"multiplier":1,"relevance":0.6}},{"id":1758437525,"content":"HTML comments shouldn't be included in element.textContent is my point","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/118#discussion_r1758437525","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -26,6 +26,8 @@ export class DataPurgeModule implements Module {\n           .replace(/^>.*$/gm, \"\")\n           // Remove commands such as /start\n           .replace(/^\\/.+/g, \"\")\n+          // Remove HTML comments\n+          .replace(/<!--[\\s\\S]*?-->/g, \"\")","score":{"reward":1.834,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":73.84500000000001,"syllables":18,"sentences":2,"score":0.8615499999999998},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2302417415,"effect":{"addition":67,"deletion":24},"reward":1.82,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/118"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 27.648 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>1.82</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.55</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>8.002</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>13.276</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/118\" target=\"_blank\" rel=\"noopener\">#118</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+67 -24</td><td>2</td><td>1.82</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/82\" target=\"_blank\" rel=\"noopener\">122 &#96;ol&#96; and &#96;li&#96; counted in this comment, which&hellip;</a></h6></td><td><details><summary>3.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>1</td><td>1</td><td>4.55</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/82#issuecomment-2290951754\" target=\"_blank\" rel=\"noopener\">Not sure what the problem is but I figured it shouldn't take too&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.3</td><td>2</td><td>1.302</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/82#issuecomment-2348093854\" target=\"_blank\" rel=\"noopener\">I don't understand why there are these mistakes in the implement&hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.5</td><td>2</td><td>2.29</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/82#issuecomment-2348131641\" target=\"_blank\" rel=\"noopener\">The first implementation just counted the total amount of words &hellip;</a></h6></td><td><details><summary>2.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 60&#13;  wordValue: 0.1&#13;  result: 2.52&#13;</pre></details></td><td>0.7</td><td>2</td><td>4.41</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/118#discussion_r1758387842\" target=\"_blank\" rel=\"noopener\">Shouldn't the default be errors?</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.036</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/118#discussion_r1758389203\" target=\"_blank\" rel=\"noopener\">If we use a virtual DOM creator like &#96;jsdom&#96; or &#96;mda&hellip;</a></h6></td><td><details><summary>2.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 57&#13;  wordValue: 0.1&#13;  result: 2.48&#13;</pre></details></td><td>0.8</td><td>2</td><td>5.12</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/118#discussion_r1758391249\" target=\"_blank\" rel=\"noopener\">textContent of the top level parent element will do the right th&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.9</td><td>2</td><td>2.394</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/118#discussion_r1758392113\" target=\"_blank\" rel=\"noopener\">I suppose that for the statistics it might be interesting to cou&hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.6</td><td>2</td><td>2.892</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/118#discussion_r1758437525\" target=\"_blank\" rel=\"noopener\">HTML comments shouldn't be included in element.textContent is my&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.834</td></tr></tbody></table></details>"},"EresDev":{"total":2.958,"userId":11886219,"comments":[{"id":2291028190,"content":"Probably because we are keeping only single new line and removing extra new lines. This is counting everything below the the last list element as a part of that element. Keeping all new lines should fix it, but make sure it doesn't break anything else. \r\nOverall score here should be correct as counting them in li/ol instead of p. P has shortage of them in count.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/82#issuecomment-2291028190","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.458,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":68,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":74.83982352941179,"syllables":95,"sentences":5,"score":0.8516017647058821},"multiplier":0.25,"relevance":0.9}},{"id":2293266419,"content":"It doesn't appear to be a counting problem. It is a problem in converting into HTML elements and that is coming from a missing new line elements when we try to clean up a raw comment by removing unnecessary stuff from it in the purge module I think. \r\nNew line characters in the raw comment are the delimiter used by `markdown-it` package to convert a raw comment into HTML elements. You need one new line to start or end a paragraph in raw comment. But you need 2 new lines to end `ol` element. \r\nIt is not a problem so far when nested elements are essential for each other, like ol/li Just need to make sure you score one of these as zero.  That also happens automatically because any element missing in the config gets a 0 score.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/82#issuecomment-2293266419","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.5,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":138,"wordValue":0.1,"result":2.34},"readability":{"fleschKincaid":66.66847826086958,"syllables":196,"sentences":7,"score":0.9333152173913042},"multiplier":0.25,"relevance":1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/118"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 2.958 XP ]</a>&nbsp;</h3><h6>@EresDev</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>2</td><td>2.958</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/82#issuecomment-2291028190\" target=\"_blank\" rel=\"noopener\">Probably because we are keeping only single new line and removin&hellip;</a></h6></td><td><details><summary>2.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 68&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>0.9</td><td>2</td><td>1.458</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/82#issuecomment-2293266419\" target=\"_blank\" rel=\"noopener\">It doesn't appear to be a counting problem. It is a problem in c&hellip;</a></h6></td><td><details><summary>2.34</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 138&#13;  wordValue: 0.1&#13;  result: 2.34&#13;</pre></details></td><td>1</td><td>2</td><td>1.5</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_113.json","json":{"gentlementlegen":{"userId":9807008,"total":150,"task":{"reward":150,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 150 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>150</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":4.24,"userId":4975670,"comments":[{"id":2519406762,"content":"If relevance scoring is skipped for a specific role, use a hyphen. \nIf it actually scored a perfect zero, then use zero. \nThis is more expressive. \n_Originally posted by @0x4007 in https://github.com/ubiquibot/conversation-rewards/pull/79#issuecomment-2342453056_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/113","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.74,"formatting":{"content":{"p":{"score":0,"elementCount":1},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":54.0729756097561,"syllables":70,"sentences":5,"score":0.940729756097561},"multiplier":1,"relevance":1}}],"reviewRewards":[{"reviews":[{"reviewId":2410737120,"effect":{"addition":12,"deletion":13},"reward":0.5,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/180"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 4.24 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.5</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.74</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/180\" target=\"_blank\" rel=\"noopener\">#180</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+12 -13</td><td>2</td><td>0.5</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/113\" target=\"_blank\" rel=\"noopener\">If relevance scoring is skipped for a specific role, use a hyphe&hellip;</a></h6></td><td><details><summary>2.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>1</td><td>1</td><td>3.74</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_47.json","json":{"gentlementlegen":{"userId":9807008,"total":6.28,"task":{"reward":6,"multiplier":1},"comments":[{"id":2441187175,"content":"I'll take care of it I guess since I am familiar with that.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/47#issuecomment-2441187175","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.28,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":95.93928571428573,"syllables":16,"sentences":1,"score":0.6406071428571427},"multiplier":0.25,"relevance":0.8}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 6.28 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>6</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.28</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/47#issuecomment-2441187175\" target=\"_blank\" rel=\"noopener\">I'll take care of it I guess since I am familiar with that.</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.28</td></tr></tbody></table></details>"},"0x4007":{"total":6,"userId":4975670,"comments":[{"id":2428007686,"content":"Time estimate?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/47#issuecomment-2428007686","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.217,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":35.60500000000002,"syllables":4,"sentences":1,"score":0.7560500000000002},"multiplier":1,"relevance":0.7}},{"id":1819194273,"content":"@Ubiquityos what is `--experimental-vm-modules` and is it necessary here?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/50#discussion_r1819194273","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -18,7 +19,7 @@\n     \"knip\": \"knip --config .github/knip.ts\",\n     \"knip-ci\": \"knip --no-exit-code --reporter json --config .github/knip.ts\",\n     \"prepare\": \"husky install\",\n-    \"test\": \"jest --setupFiles dotenv/config --coverage\",\n+    \"test\": \"NODE_OPTIONS=\\\"$NODE_OPTIONS --experimental-vm-modules\\\" jest --setupFiles dotenv/config --coverage\",","score":{"reward":0.776,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":50.66500000000002,"syllables":14,"sentences":1,"score":0.9066500000000002},"multiplier":1,"relevance":0.8}},{"id":1819430470,"content":"Shouldn't this be enabled?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/50#discussion_r1819430470","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,74 +1,31 @@\n-import manifest from \"../manifest.json\";\n-import { validateAndDecodeSchemas } from \"./handlers/validator\";\n+import { createClient } from \"@supabase/supabase-js\";\n+import { createPlugin } from \"@ubiquity-os/ubiquity-os-kernel\";\n+import type { ExecutionContext } from \"hono\";\n+import { createAdapters } from \"./adapters\";\n import { run } from \"./run\";\n-import { Env } from \"./types/env\";\n+import { SupportedEvents } from \"./types/context\";\n+import { Env, envSchema } from \"./types/env\";\n+import { AssistivePricingSettings, pluginSettingsSchema } from \"./types/plugin-input\";\n+import manifest from \"../manifest.json\";\n \n export default {\n-  async fetch(request: Request, env: Env): Promise<Response> {\n-    try {\n-      const url = new URL(request.url);\n-      if (url.pathname === \"/manifest.json\" && request.method === \"GET\") {\n-        return new Response(JSON.stringify(manifest), {\n-          headers: { \"content-type\": \"application/json\" },\n+  async fetch(request: Request, env: Env, executionCtx?: ExecutionContext) {\n+    return createPlugin<AssistivePricingSettings, Env, SupportedEvents>(\n+      (context) => {\n+        return run({\n+          ...context,\n+          adapters: createAdapters(createClient(context.env.SUPABASE_URL, context.env.SUPABASE_KEY), context),\n         });\n+      },\n+      //@ts-expect-error types are ok\n+      manifest,\n+      {\n+        envSchema: envSchema,\n+        postCommentOnError: true,\n+        settingsSchema: pluginSettingsSchema,\n+        logLevel: env.LOG_LEVEL,\n+        kernelPublicKey: env.KERNEL_PUBLIC_KEY,\n       }\n-      if (request.method !== \"POST\") {\n-        return new Response(JSON.stringify({ error: `Only POST requests are supported.` }), {\n-          status: 405,\n-          headers: { \"content-type\": \"application/json\", Allow: \"POST\" },\n-        });\n-      }\n-      const contentType = request.headers.get(\"content-type\");\n-      if (contentType !== \"application/json\") {\n-        return new Response(JSON.stringify({ error: `Bad request: ${contentType} is not a valid content type` }), {\n-          status: 400,\n-          headers: { \"content-type\": \"application/json\" },\n-        });\n-      }\n-      const webhookPayload = await request.json();\n-      // TODO: temporarily disabled, should be added back with the proper key in the configuration.\n-      // const signature = webhookPayload.signature;\n-      // delete webhookPayload.signature;\n-      // if (!(await verifySignature(env.UBIQUIBOT_PUBLIC_KEY, webhookPayload, signature))) {\n-      //   return new Response(JSON.stringify({ error: `Forbidden: Signature verification failed` }), {\n-      //     status: 403,\n-      //     headers: { \"content-type\": \"application/json\" },\n-      //   });\n-      // }\n-      const result = validateAndDecodeSchemas(env, webhookPayload.settings);\n-\n-      webhookPayload.settings = result.decodedSettings;\n-      await run(webhookPayload, result.decodedEnv);\n-      return new Response(JSON.stringify(\"OK\"), { status: 200, headers: { \"content-type\": \"application/json\" } });\n-    } catch (error) {\n-      return handleUncaughtError(error);\n-    }\n+    ).fetch(request, env, executionCtx);\n   },\n };\n-\n-function handleUncaughtError(errors: unknown) {\n-  console.error(errors);\n-  const status = 500;\n-  return new Response(JSON.stringify(errors), { status: status, headers: { \"content-type\": \"application/json\" } });\n-}\n-\n-// async function verifySignature(publicKeyPem: string, payload: unknown, signature: string) {","score":{"reward":0.621,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":100.24000000000002,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.9}},{"id":1819431433,"content":"Seems very unusual that we have to wrap it in an object","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/50#discussion_r1819431433","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -109,6 +109,6 @@ async function updateLabelColor(context: Context, labelName: string, color: stri\n       color,\n     });\n   } catch (e: unknown) {\n-    context.logger.error(\"Updating label color failed!\", e);\n+    context.logger.error(\"Updating label color failed!\", { e });","score":{"reward":0.768,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":81.85500000000002,"syllables":16,"sentences":1,"score":0.7814499999999999},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2399303149,"effect":{"addition":157,"deletion":237},"reward":3.94,"priority":1},{"reviewId":2399685076,"effect":{"addition":17,"deletion":34},"reward":0.51,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/50"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 6 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>4.45</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.217</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>2.165</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/50\" target=\"_blank\" rel=\"noopener\">#50</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+157 -237</td><td>1</td><td>3.94</td></tr><tr><td>+17 -34</td><td>1</td><td>0.51</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/47#issuecomment-2428007686\" target=\"_blank\" rel=\"noopener\">Time estimate?</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.217</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/50#discussion_r1819194273\" target=\"_blank\" rel=\"noopener\">@Ubiquityos what is &#96;--experimental-vm-modules&#96; and is i&hellip;</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.776</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/50#discussion_r1819430470\" target=\"_blank\" rel=\"noopener\">Shouldn't this be enabled?</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.621</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/50#discussion_r1819431433\" target=\"_blank\" rel=\"noopener\">Seems very unusual that we have to wrap it in an object</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.768</td></tr></tbody></table></details>"},"whilefoo":{"total":1.682,"userId":139262667,"comments":[{"id":2428389010,"content":"I can't seem to set labels. 15 minutes sounds about right","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/47#issuecomment-2428389010","commentType":"ISSUE_AUTHOR","score":{"reward":0.62,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":94.995,"syllables":15,"sentences":2,"score":0.6500499999999999},"multiplier":1,"relevance":0.5}},{"id":2602992162,"content":"Modify this plugin to use the SDK","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/47","commentType":"ISSUE_SPECIFICATION","score":{"reward":0.86,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":78.87285714285717,"syllables":10,"sentences":1,"score":0.8112714285714283},"multiplier":1,"relevance":1}},{"id":2442045992,"content":"I was looking at the code right as you changed to `KERNEL_PUBLIC_KEY` and I couldn't find the reason why it's not working :D","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/50#issuecomment-2442045992","commentType":"PULL_COLLABORATOR","score":{"reward":0.202,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":87.30000000000003,"syllables":27,"sentences":1,"score":0.7269999999999998},"multiplier":1,"relevance":0.1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/50"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 1.682 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Specification</td><td>1</td><td>0.86</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.62</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.202</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/47\" target=\"_blank\" rel=\"noopener\">Modify this plugin to use the SDK</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>1</td><td>1</td><td>0.86</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/47#issuecomment-2428389010\" target=\"_blank\" rel=\"noopener\">I can't seem to set labels. 15 minutes sounds about right</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.62</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/50#issuecomment-2442045992\" target=\"_blank\" rel=\"noopener\">I was looking at the code right as you changed to &#96;KERNEL_PU&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.202</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_62.json","json":{"gentlementlegen":{"userId":9807008,"total":200,"task":{"reward":200,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 200 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>200</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":150.006,"userId":4975670,"comments":[{"id":2386358406,"content":"@gentlementlegen I think this could save us from a lot of unnecessary blockers. Perhaps you can prioritize it?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2386358406","commentType":"ISSUE_AUTHOR","score":{"reward":4.272,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":56.70000000000002,"syllables":30,"sentences":2,"score":0.9670000000000002},"multiplier":1,"relevance":0.6}},{"id":2387593609,"content":"Just from the configuration. I don't think extra labels is a good idea.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2387593609","commentType":"ISSUE_AUTHOR","score":{"reward":5.256,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":72.83000000000003,"syllables":21,"sentences":2,"score":0.8716999999999997},"multiplier":1,"relevance":0.9}},{"id":2388355410,"content":"In the future I think its worthwhile to assume the correct answer for these small details that are fast to change to reduce delay. This message seems fine to start!","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2388355410","commentType":"ISSUE_AUTHOR","score":{"reward":4.68,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":78.81000000000003,"syllables":40,"sentences":2,"score":0.8118999999999997},"multiplier":1,"relevance":0.5}},{"id":2391699893,"content":"To me it seems like a lazy answer to keep adding labels for every feature. We already went through this with v1 of bot and the issues all looked like a mess.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2391699893","commentType":"ISSUE_AUTHOR","score":{"reward":8.712,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":79.5575,"syllables":42,"sentences":2,"score":0.804425},"multiplier":1,"relevance":0.9}},{"id":2392511441,"content":"I don't think it makes sense to implement a new approach. Just read from config like we always do because it works fine. We can embed metadata in the description if we have more complex needs.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2392511441","commentType":"ISSUE_AUTHOR","score":{"reward":10.36,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":82.27882882882884,"syllables":49,"sentences":3,"score":0.7772117117117117},"multiplier":1,"relevance":1}},{"id":2392794681,"content":"Then you have to sync. It's more complicated than just reading from config every time I think","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2392794681","commentType":"ISSUE_AUTHOR","score":{"reward":6.084,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":84.90000000000003,"syllables":24,"sentences":2,"score":0.7509999999999997},"multiplier":1,"relevance":0.9}},{"id":2392842994,"content":"Any changes to the config have to sync all the descriptions every time with your proposal. It's more complex.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2392842994","commentType":"ISSUE_AUTHOR","score":{"reward":6.624,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":78.24500000000002,"syllables":28,"sentences":2,"score":0.8175499999999998},"multiplier":1,"relevance":0.9}},{"id":2393473736,"content":"Then let's embed in the description if that means less new code. \nGiven that we don't do that anywhere else, and that we do something more similar to my proposal, I am highly skeptical that it is the simplest way.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2393473736","commentType":"ISSUE_AUTHOR","score":{"reward":10.188,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":42,"wordValue":0.1,"result":2.23},"readability":{"fleschKincaid":70.7057142857143,"syllables":57,"sentences":2,"score":0.892942857142857},"multiplier":1,"relevance":0.9}},{"id":2403983085,"content":"Perhaps we can use emoji so that it stands out like ⚠️","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2403983085","commentType":"ISSUE_AUTHOR","score":{"reward":3.776,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":87.99727272727276,"syllables":14,"sentences":1,"score":0.7200272727272724},"multiplier":1,"relevance":0.8}},{"id":2404116472,"content":"To clarify I mean in the description. ⚠️ contributor only.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2404116472","commentType":"ISSUE_AUTHOR","score":{"reward":3.78,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":42.46750000000003,"syllables":17,"sentences":2,"score":0.8246750000000003},"multiplier":1,"relevance":0.9}},{"id":2404520757,"content":"Price shoudn't have that","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2404520757","commentType":"ISSUE_AUTHOR","score":{"reward":1.932,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":2559612103,"content":"- Since we still are ways off to implementing XP, we should implement a simpler gating system. \r\n- Similar to how we manage max concurrent tasks per role, we should also have a config to gate based on the label. \r\n- There's no point in making a config for admin.\r\n```yml\r\n  - uses:\r\n    - plugin: https://ubiquibot-assistive-pricing-development.ubiquity.workers.dev\r\n      with:\r\n        labels:\r\n          time:\r\n            - \"Time: <1 Hour\"\r\n              collaboratorOnly: false\r\n            - \"Time: <2 Hours\"\r\n              collaboratorOnly: false\r\n            - \"Time: <4 Hours\"\r\n              collaboratorOnly: true\r\n            - \"Time: <1 Day\"\r\n              collaboratorOnly: true\r\n            - \"Time: <1 Week\"\r\n              collaboratorOnly: true\r\n            - \"Time: <1 Month\"\r\n              collaboratorOnly: true\r\n          priority:\r\n            - \"Priority: 1 (Normal)\"\r\n              collaboratorOnly: false\r\n            - \"Priority: 2 (Medium)\"\r\n              collaboratorOnly: false\r\n            - \"Priority: 3 (High)\"\r\n              collaboratorOnly: true\r\n            - \"Priority: 4 (Urgent)\"\r\n              collaboratorOnly: true\r\n            - \"Priority: 5 (Emergency)\"\r\n              collaboratorOnly: true\r\n        basePriceMultiplier: 2\r\n        publicAccessControl:\r\n          setLabel: true\r\n          fundExternalClosedIssue: false\r\n```\r\nWe could even embed metadata in the label description, although for this purpose maybe via the config here is simple enough.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.71,"formatting":{"content":{"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"p":{"score":0,"elementCount":4}},"result":0.3},"priority":1,"words":{"wordCount":69,"wordValue":0.1,"result":2.59},"readability":{"fleschKincaid":65.49146739130437,"syllables":101,"sentences":4,"score":0.9450853260869563},"multiplier":1,"relevance":1}},{"id":2410716313,"content":"Thanks for the QA. Please check my remark there and then this should be merged.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#pullrequestreview-2410716313","commentType":"PULL_COLLABORATOR","score":{"reward":3.768,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":108.9825,"syllables":16,"sentences":2,"score":1},"multiplier":1,"relevance":0.6}},{"id":1794617803,"content":"```suggestion\r\ndescription: \"UbiquityOS Delegated Compute Action\"\r\n```","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#discussion_r1794617803","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,16 +1,9 @@\n name: \"Delegate Compute\"\n-description: \"UbiquiBot Delegated Compute Action\"\n+description: \"Ubiquity-os Delegated Compute Action\"","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.8}},{"id":1826192796,"content":"Seems out of scope","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#discussion_r1826192796","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -8,25 +8,36 @@ Example of valid configuration:\n \n ```yml\n - plugin: https://ubiquity-os-daemon-pricing.ubq.fi\n-  type: github\n   with:\n     labels:\n       time:\n-        - \"Time: <1 Hour\"\n-        - \"Time: <2 Hours\"\n-        - \"Time: <4 Hours\"\n-        - \"Time: <1 Day\"\n-        - \"Time: <1 Week\"\n+        - name: \"Time: <1 Hour\"\n+          collaboratorOnly: false\n+        - name: \"Time: <2 Hours\"\n+          collaboratorOnly: false\n+        - name: \"Time: <4 Hours\"\n+          collaboratorOnly: false\n+        - name: \"Time: <1 Day\"\n+          collaboratorOnly: false\n+        - name: \"Time: <1 Week\"\n+          collaboratorOnly: false\n       priority:\n-        - \"Priority: 1 (Normal)\"\n-        - \"Priority: 2 (Medium)\"\n-        - \"Priority: 3 (High)\"\n-        - \"Priority: 4 (Urgent)\"\n-        - \"Priority: 5 (Emergency)\"\n+        - name: \"Priority: 1 (Normal)\"\n+          collaboratorOnly: false\n+        - name: \"Priority: 2 (Medium)\"\n+          collaboratorOnly: true\n+        - name: \"Priority: 3 (High)\"\n+          collaboratorOnly: false\n+        - name: \"Priority: 4 (Urgent)\"\n+          collaboratorOnly: false\n+        - name: \"Priority: 5 (Emergency)\"\n+          collaboratorOnly: false\n     basePriceMultiplier: 1\n     publicAccessControl:\n       setLabel: true\n       fundExternalClosedIssue: false\n+    globalConfigUpdate:\n+      excludeRepos: [\"devpool-directory\", \"devpool-directory-private\"]","score":{"reward":2.052,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.9}},{"id":1826195611,"content":"What's this for","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#discussion_r1826195611","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -12,8 +12,10 @@ createActionsPlugin<AssistivePricingSettings, Env, SupportedEvents>(\n     return run({ ...context, adapters: createAdapters(createClient(context.env.SUPABASE_URL, context.env.SUPABASE_KEY), context) });\n   },\n   {\n+    // @ts-expect-error types match","score":{"reward":1.596,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":1826195952,"content":"```suggestion\n  description?: string\n```","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#discussion_r1826195952","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -31,7 +31,12 @@ export async function listLabelsForRepo(context: ContextPlugin): Promise<Label[]\n   throw context.logger.error(\"Failed to fetch lists of labels\", { status: 500 });\n }\n \n-export async function createLabel(context: ContextPlugin, name: string, labelType = \"default\" as keyof typeof COLORS): Promise<void> {\n+export async function createLabel(\n+  context: ContextPlugin,\n+  name: string,\n+  labelType = \"default\" as keyof typeof COLORS,\n+  description: string | undefined","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.8}},{"id":1795016585,"content":"```suggestion\r\n          throw logger.error(\"Only collaborators can be assigned to this issue.\", {\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/65#discussion_r1795016585","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -82,14 +83,26 @@ export async function start(\n     throw logger.error(error, { issueNumber: issue.number });\n   }\n \n-  // get labels\n   const labels = issue.labels ?? [];\n   const priceLabel = labels.find((label: Label) => label.name.startsWith(\"Price: \"));\n \n   if (!priceLabel) {\n     throw logger.error(\"No price label is set to calculate the duration\", { issueNumber: issue.number });\n   }\n \n+  // Checks if non-collaborators can be assigned to the issue\n+  for (const label of labels) {\n+    if (label.description?.includes(\"collaborator only\")) {\n+      for (const user of toAssign) {\n+        if (!(await isUserCollaborator(context, user))) {\n+          throw logger.error(\"Non-collaborators cannot be assigned to this issue\", {","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":2404524545,"content":"Just make sure that you don't change the Price label descriptions with the collaborator only warning.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/65#issuecomment-2404524545","commentType":"PULL_COLLABORATOR","score":{"reward":4.816,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":60.19176470588238,"syllables":26,"sentences":1,"score":0.9980823529411762},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2358877670,"effect":{"addition":385,"deletion":123},"reward":20.32,"priority":4},{"reviewId":2410716313,"effect":{"addition":620,"deletion":476},"reward":43.84,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42"},{"reviews":[{"reviewId":2359579550,"effect":{"addition":103,"deletion":3},"reward":4.24,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/65"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 150.006 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>68.4</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.71</td></tr><tr><td>Issue</td><td>Comment</td><td>11</td><td>65.664</td></tr><tr><td>Review</td><td>Comment</td><td>7</td><td>12.232</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42\" target=\"_blank\" rel=\"noopener\">#42</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+385 -123</td><td>4</td><td>20.32</td></tr><tr><td>+620 -476</td><td>4</td><td>43.84</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/65\" target=\"_blank\" rel=\"noopener\">#65</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+103 -3</td><td>4</td><td>4.24</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62\" target=\"_blank\" rel=\"noopener\">- Since we still are ways off to implementing XP, we should impl&hellip;</a></h6></td><td><details><summary>2.89</summary><pre>content:&#13;  content:&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;  result: 0.3&#13;regex:&#13;  wordCount: 69&#13;  wordValue: 0.1&#13;  result: 2.59&#13;</pre></details></td><td>1</td><td>1</td><td>3.71</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2386358406\" target=\"_blank\" rel=\"noopener\">@gentlementlegen I think this could save us from a lot of unnece&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.6</td><td>4</td><td>4.272</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2387593609\" target=\"_blank\" rel=\"noopener\">Just from the configuration. I don't think extra labels is a goo&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.9</td><td>4</td><td>5.256</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2388355410\" target=\"_blank\" rel=\"noopener\">In the future I think its worthwhile to assume the correct answe&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.5</td><td>4</td><td>4.68</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2391699893\" target=\"_blank\" rel=\"noopener\">To me it seems like a lazy answer to keep adding labels for ever&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.9</td><td>4</td><td>8.712</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2392511441\" target=\"_blank\" rel=\"noopener\">I don't think it makes sense to implement a new approach. Just r&hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>1</td><td>4</td><td>10.36</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2392794681\" target=\"_blank\" rel=\"noopener\">Then you have to sync. It's more complicated than just reading f&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.9</td><td>4</td><td>6.084</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2392842994\" target=\"_blank\" rel=\"noopener\">Any changes to the config have to sync all the descriptions ever&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.9</td><td>4</td><td>6.624</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2393473736\" target=\"_blank\" rel=\"noopener\">Then let's embed in the description if that means less new code.&hellip;</a></h6></td><td><details><summary>2.23</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 42&#13;  wordValue: 0.1&#13;  result: 2.23&#13;</pre></details></td><td>0.9</td><td>4</td><td>10.188</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2403983085\" target=\"_blank\" rel=\"noopener\">Perhaps we can use emoji so that it stands out like ⚠️</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.8</td><td>4</td><td>3.776</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2404116472\" target=\"_blank\" rel=\"noopener\">To clarify I mean in the description. ⚠️ contributor only.</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.9</td><td>4</td><td>3.78</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2404520757\" target=\"_blank\" rel=\"noopener\">Price shoudn't have that</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>4</td><td>1.932</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#pullrequestreview-2410716313\" target=\"_blank\" rel=\"noopener\">Thanks for the QA. Please check my remark there and then this sh&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.6</td><td>4</td><td>3.768</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#discussion_r1794617803\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestiondescription: \"UbiquityOS Delegated Co&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.8</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#discussion_r1826192796\" target=\"_blank\" rel=\"noopener\">Seems out of scope</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.9</td><td>4</td><td>2.052</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#discussion_r1826195611\" target=\"_blank\" rel=\"noopener\">What's this for</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.7</td><td>4</td><td>1.596</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#discussion_r1826195952\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestiondescription?: string&#96;&#96;&#96;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.8</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/65#discussion_r1795016585\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionthrow logger.error(\"Only co&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/65#issuecomment-2404524545\" target=\"_blank\" rel=\"noopener\">Just make sure that you don't change the Price label description&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.7</td><td>4</td><td>4.816</td></tr></tbody></table></details>"},"Keyrxng":{"total":72.836,"userId":106303466,"comments":[{"id":2431112580,"content":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#issuecomment-2431077191\r\nSince https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/18 is not actually blocking this and after looking over things I'd like offer a super simple ultra low code suggestion that can be merged in under an hour\r\nIt really is as easy as reading from the config when the user calls `/start`, then if the task labels are lower than the new config thresholds they can start it.\r\n```yml\r\n   - uses:\r\n     - plugin: http://localhost:4000\r\n       runsOn:  [\"issue_comment.created\", \"issues.assigned\", \"issues.unassigned\", \"pull_request.opened\", \"pull_request.edited\"]\r\n       with:\r\n         reviewDelayTolerance: \"1 Day\"\r\n         taskStaleTimeoutDuration: \"30 Days\"\r\n         maxConcurrentTasks: \r\n           member: 2\r\n           contributor: 5\r\n         startRequiresWallet: false\r\n         rolesWithReviewAuthority: [\"OWNER\", \"ADMIN\", \"MEMBER\", \"CONTRIBUTOR\"]\r\n         collaboratorOnlyThresholds:{\r\n           time: 1 week,\r\n           priority: 4 urgent\r\n         }\r\n```\r\nThe benefits of using `assistive-pricing` I guess is being able to update label descriptions but that was never a concern before, as a comment on the task is usually the chosen approach to user feedback as opposed to bury inside label info which a contributor may not see unless they open up the label selection dropdown, and ultimately we'd need to serve feedback from `/start` anyway.\r\n\"time\" and \"priority\" prefixes may be changed by partners I think but not us so can deal with that later if that's an issue reading this approach.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2431112580","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":5.28,"formatting":{"content":{"p":{"score":0,"elementCount":5},"a":{"score":1,"elementCount":2}},"result":2},"priority":4,"words":{"wordCount":153,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":44.168285714285716,"syllables":263,"sentences":5,"score":0.8416828571428572},"multiplier":0.25,"relevance":1}},{"id":2431125462,"content":"example, I can't set labels in this org so I cannot see all of the available labels, meaning this description is hidden to contributors, so if they use `/start` we'll need to provide feedback anyway.\r\n![image](https://github.com/user-attachments/assets/e164e824-0a7b-4d4e-9e8c-d3fbe265a8f8)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2431125462","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":2.304,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":41.045000000000044,"syllables":55,"sentences":1,"score":0.8104500000000004},"multiplier":0.25,"relevance":0.9}},{"id":2431158455,"content":"I saw that PR was merged yeah, although if the descriptions are only visible to people with access it's more of an internal quality of life having label descriptions since only team can see them.\r\nSince they are not dependant on each other the change could be made in `start-stop` first and not be held back by me or any other bugs or whatever, if the plan is to change it later, may as well do it first as there is nothing holding that back. \r\nSorry, just trying to provide value/solutions vs problems and delays considering how things are rn, hope you understand.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2431158455","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":2.656,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":4,"words":{"wordCount":104,"wordValue":0.1,"result":2.59},"readability":{"fleschKincaid":56.13679487179489,"syllables":142,"sentences":3,"score":0.961367948717949},"multiplier":0.25,"relevance":0.8}},{"id":2434244570,"content":"Didn't notice this my mistake","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2434244570","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.152,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":87.94500000000002,"syllables":8,"sentences":1,"score":0.7205499999999998},"multiplier":0.25,"relevance":0.2}},{"id":1826541627,"content":"oops, merged already.\r\nSorry I didn;t review this @gentlementlegen the notification slipped through and I was not assigned as reviewer so it didn't show on the other tab I used to track","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#discussion_r1826541627","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -8,25 +8,36 @@ Example of valid configuration:\n \n ```yml\n - plugin: https://ubiquity-os-daemon-pricing.ubq.fi\n-  type: github\n   with:\n     labels:\n       time:\n-        - \"Time: <1 Hour\"\n-        - \"Time: <2 Hours\"\n-        - \"Time: <4 Hours\"\n-        - \"Time: <1 Day\"\n-        - \"Time: <1 Week\"\n+        - name: \"Time: <1 Hour\"\n+          collaboratorOnly: false\n+        - name: \"Time: <2 Hours\"\n+          collaboratorOnly: false\n+        - name: \"Time: <4 Hours\"\n+          collaboratorOnly: false\n+        - name: \"Time: <1 Day\"\n+          collaboratorOnly: false\n+        - name: \"Time: <1 Week\"\n+          collaboratorOnly: false\n       priority:\n-        - \"Priority: 1 (Normal)\"\n-        - \"Priority: 2 (Medium)\"\n-        - \"Priority: 3 (High)\"\n-        - \"Priority: 4 (Urgent)\"\n-        - \"Priority: 5 (Emergency)\"\n+        - name: \"Priority: 1 (Normal)\"\n+          collaboratorOnly: false\n+        - name: \"Priority: 2 (Medium)\"\n+          collaboratorOnly: true\n+        - name: \"Priority: 3 (High)\"\n+          collaboratorOnly: false\n+        - name: \"Priority: 4 (Urgent)\"\n+          collaboratorOnly: false\n+        - name: \"Priority: 5 (Emergency)\"\n+          collaboratorOnly: false\n     basePriceMultiplier: 1\n     publicAccessControl:\n       setLabel: true\n       fundExternalClosedIssue: false\n+    globalConfigUpdate:\n+      excludeRepos: [\"devpool-directory\", \"devpool-directory-private\"]","score":{"reward":0.78,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":65.16823529411766,"syllables":50,"sentences":2,"score":0.9483176470588234},"multiplier":0.25,"relevance":0.3}},{"id":2431033688,"content":"@gentlementlegen why is https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/18 a requirement to progress with this PR, what's the blocker?\r\nSpec for [#18](https://github.com/ubiquity-os/plugins-wishlist/issues/8)\r\nThey seem totally completely unrelated? No mention in the spec of the issue fixing a broken feature but adding a new unrelated feature that relates to the config file changes which I don't think you'd be using to implement XP gating?\r\nJust looked through the review comments and can't see anything that relates the two, I'm sorry if I've missed it.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#issuecomment-2431033688","commentType":"PULL_CONTRIBUTOR","score":{"reward":4.2,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":2}},"result":2},"priority":4,"words":{"wordCount":83,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":61.510838709677444,"syllables":139,"sentences":5,"score":0.9848916129032256},"multiplier":0.25,"relevance":0.7}},{"id":2431144348,"content":"Made a suggestion in regards to this feature in the Task mate that will clear you of the grief and hassle of waiting for me or #18\r\nHaven't slept, going to try get some now and I'll push #18 through when I wake but my suggestion is literally a < 15 min change in `start-stop` vs the unknowns with code review and fixing the bugs\r\nI don't want to be a blocker and also trying to provide more solutions than problems.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#issuecomment-2431144348","commentType":"PULL_CONTRIBUTOR","score":{"reward":2.464,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":4,"words":{"wordCount":82,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":17.339146341463433,"syllables":103,"sentences":1,"score":0.5733914634146343},"multiplier":0.25,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2411228611,"effect":{"addition":873,"deletion":502},"reward":55,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42"},{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/65"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 72.836 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>55</td></tr><tr><td>Issue</td><td>Comment</td><td>4</td><td>10.392</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>7.444</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42\" target=\"_blank\" rel=\"noopener\">#42</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+873 -502</td><td>4</td><td>55</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2431112580\" target=\"_blank\" rel=\"noopener\">https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/4&hellip;</a></h6></td><td><details><summary>4.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 153&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>1</td><td>4</td><td>5.28</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2431125462\" target=\"_blank\" rel=\"noopener\">example, I can't set labels in this org so I cannot see all of t&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.9</td><td>4</td><td>2.304</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2431158455\" target=\"_blank\" rel=\"noopener\">I saw that PR was merged yeah, although if the descriptions are &hellip;</a></h6></td><td><details><summary>2.59</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 104&#13;  wordValue: 0.1&#13;  result: 2.59&#13;</pre></details></td><td>0.8</td><td>4</td><td>2.656</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/62#issuecomment-2434244570\" target=\"_blank\" rel=\"noopener\">Didn't notice this my mistake</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.2</td><td>4</td><td>0.152</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#discussion_r1826541627\" target=\"_blank\" rel=\"noopener\">oops, merged already.Sorry I didn;t review this @gentlementleg&hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.3</td><td>4</td><td>0.78</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#issuecomment-2431033688\" target=\"_blank\" rel=\"noopener\">@gentlementlegen why is https://github.com/ubiquity-os-marketpla&hellip;</a></h6></td><td><details><summary>4.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 83&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.7</td><td>4</td><td>4.2</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/42#issuecomment-2431144348\" target=\"_blank\" rel=\"noopener\">Made a suggestion in regards to this feature in the Task mate th&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 82&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.8</td><td>4</td><td>2.464</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_166.json","json":{"gentlementlegen":{"userId":9807008,"total":75,"task":{"reward":75,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 75 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":20.576,"userId":4975670,"comments":[{"id":2481834767,"content":"@gentlementlegen","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/166#issuecomment-2481834767","commentType":"ISSUE_AUTHOR","score":{"reward":0.042,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":1,"wordValue":0.1,"result":0.14},"readability":{"fleschKincaid":-217.17999999999998,"syllables":5,"sentences":1,"score":0},"multiplier":1,"relevance":0.1}},{"id":2485789109,"content":"That's correct. This should disincentivize a ton of work being done on tiny projects.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/166#issuecomment-2485789109","commentType":"ISSUE_AUTHOR","score":{"reward":4.104,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":75.14250000000001,"syllables":22,"sentences":2,"score":0.8485749999999999},"multiplier":1,"relevance":0.9}},{"id":2600712586,"content":"I think it might make sense to limit rewards up to the task amount. This should be configurable with a boolean. \r\nIf its a 6 USD task, and a team member gets 100 USD for writing a spec, feels a bit unfair for the contributor who implemented the fix. \r\nAlso i think this can incentivize team members to focus more on saving their time. \r\nDont spin your wheels on tiny tasks.\r\nhttps://github.com/ubiquity/pay.ubq.fi/issues/339#issuecomment-2420930764","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/166","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.46,"formatting":{"content":{"p":{"score":0,"elementCount":5},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":71,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":79.9725880758808,"syllables":114,"sentences":9,"score":0.8002741192411921},"multiplier":1,"relevance":1}},{"id":1863251528,"content":"```suggestion\r\n            \"description\": \"Should the rewards of non-assignees be limited to the task price?\",\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/195#discussion_r1863251528","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -28,6 +28,11 @@\n             \"default\": true,\n             \"type\": \"boolean\"\n           },\n+          \"limitRewards\": {\n+            \"default\": true,\n+            \"description\": \"Should the rewards of non-assignees be limited to the issue reward?\",","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.7}},{"id":1863252535,"content":"```suggestion\r\n          description: \"Should the rewards of non-assignees be limited to the task reward?\",\r\n```\r\nIsn't this redundant?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/195#discussion_r1863252535","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -33,6 +33,10 @@ export const pluginSettingsSchema = T.Object(\n          * If set to false, the plugin runs even if the price label is missing, and will evaluate comments.\n          */\n         requirePriceLabel: T.Boolean({ default: true }),\n+        limitRewards: T.Boolean({\n+          default: true,\n+          description: \"Should the rewards of non-assignees be limited to the issue reward?\",","score":{"reward":1.32,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2469518693,"effect":{"addition":209,"deletion":146},"reward":10.65,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/195"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 20.576 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>10.65</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.46</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>4.146</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>1.32</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/195\" target=\"_blank\" rel=\"noopener\">#195</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+209 -146</td><td>3</td><td>10.65</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/166\" target=\"_blank\" rel=\"noopener\">I think it might make sense to limit rewards up to the task amou&hellip;</a></h6></td><td><details><summary>3.6</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 71&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>1</td><td>1</td><td>4.46</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/166#issuecomment-2481834767\" target=\"_blank\" rel=\"noopener\">@gentlementlegen</a></h6></td><td><details><summary>0.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0.1&#13;  result: 0.14&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.042</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/166#issuecomment-2485789109\" target=\"_blank\" rel=\"noopener\">That's correct. This should disincentivize a ton of work being d&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.9</td><td>3</td><td>4.104</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/195#discussion_r1863251528\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion\"description\": \"Should th&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/195#discussion_r1863252535\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestiondescription: \"Should the re&hellip;</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.32</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_66.json","json":{"whilefoo":{"userId":139262667,"total":25,"task":{"reward":25,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 25 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":3.76,"userId":4975670,"comments":[{"id":2255428480,"content":"@gentlementlegen 0 WXDAI isn't right. It shouldn't display this in the first place. Also I'm unsure how that could have happened at all. Is it for some type of comment?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/66#issuecomment-2255428480","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":90.78852272727275,"syllables":42,"sentences":4,"score":0.6921147727272725},"multiplier":1,"relevance":0}},{"id":2257404028,"content":"I am unsure of how GitHub technically refers to this object/entity from within its API, but when you post any \"review state\" you can associate a comment with it as well. Let's be sure to parse that.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/66#issuecomment-2257404028","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.272,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":72.07326923076926,"syllables":53,"sentences":2,"score":0.8792673076923074},"multiplier":1,"relevance":0.1}},{"id":2195572555,"content":"Seems odd to use `+` to coerce into a number instead of using `Number()`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#pullrequestreview-2195572555","commentType":"PULL_COLLABORATOR","score":{"reward":1.024,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":81.85500000000002,"syllables":16,"sentences":1,"score":0.7814499999999999},"multiplier":1,"relevance":0.8}},{"id":1689069988,"content":"```suggestion\r\n      const totalAfterFee = Number(new Decimal(rewardResult.total).mul(feeRateDecimal));\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#discussion_r1689069988","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -175,14 +179,15 @@ export class PermitGenerationModule implements Module {\n     let permitFeeAmountDecimal = new Decimal(0);\n     for (const [_, rewardResult] of Object.entries(result)) {\n       // accumulate total permit fee amount\n-      const totalAfterFee = +(new Decimal(rewardResult.total).mul(feeRateDecimal));\n+      const totalAfterFee = +new Decimal(rewardResult.total).mul(feeRateDecimal);","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":1,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1689070197,"content":"```suggestion\r\n        rewardResult.task.reward = Number(new Decimal(rewardResult.task.reward).mul(feeRateDecimal).toFixed(2));\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#discussion_r1689070197","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -175,14 +179,15 @@ export class PermitGenerationModule implements Module {\n     let permitFeeAmountDecimal = new Decimal(0);\n     for (const [_, rewardResult] of Object.entries(result)) {\n       // accumulate total permit fee amount\n-      const totalAfterFee = +(new Decimal(rewardResult.total).mul(feeRateDecimal));\n+      const totalAfterFee = +new Decimal(rewardResult.total).mul(feeRateDecimal);\n       permitFeeAmountDecimal = permitFeeAmountDecimal.add(new Decimal(rewardResult.total).minus(totalAfterFee));\n       // subtract fees\n       rewardResult.total = +totalAfterFee.toFixed(2);\n-      if (rewardResult.task) rewardResult.task.reward = +(new Decimal(rewardResult.task.reward).mul(feeRateDecimal).toFixed(2));\n+      if (rewardResult.task)\n+        rewardResult.task.reward = +new Decimal(rewardResult.task.reward).mul(feeRateDecimal).toFixed(2);","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":1,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1689070347,"content":"```suggestion\r\n          if (comment.score) comment.score.reward = Number(new Decimal(comment.score.reward).mul(feeRateDecimal).toFixed(2));\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#discussion_r1689070347","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -175,14 +179,15 @@ export class PermitGenerationModule implements Module {\n     let permitFeeAmountDecimal = new Decimal(0);\n     for (const [_, rewardResult] of Object.entries(result)) {\n       // accumulate total permit fee amount\n-      const totalAfterFee = +(new Decimal(rewardResult.total).mul(feeRateDecimal));\n+      const totalAfterFee = +new Decimal(rewardResult.total).mul(feeRateDecimal);\n       permitFeeAmountDecimal = permitFeeAmountDecimal.add(new Decimal(rewardResult.total).minus(totalAfterFee));\n       // subtract fees\n       rewardResult.total = +totalAfterFee.toFixed(2);\n-      if (rewardResult.task) rewardResult.task.reward = +(new Decimal(rewardResult.task.reward).mul(feeRateDecimal).toFixed(2));\n+      if (rewardResult.task)\n+        rewardResult.task.reward = +new Decimal(rewardResult.task.reward).mul(feeRateDecimal).toFixed(2);\n       if (rewardResult.comments) {\n         for (let comment of rewardResult.comments) {\n-          if (comment.score) comment.score.reward = +(new Decimal(comment.score.reward).mul(feeRateDecimal).toFixed(2));\n+          if (comment.score) comment.score.reward = +new Decimal(comment.score.reward).mul(feeRateDecimal).toFixed(2);","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":1,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":1689070723,"content":"What's up with the formatter?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#discussion_r1689070723","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -51,41 +51,41 @@ jest.mock(\"@supabase/supabase-js\", () => {\n \n // original rewards object before fees are applied\n const resultOriginal: Result = {\n-  \"user1\": {\n-    \"total\": 100,\n-    \"task\": {\n-      \"reward\": 90,\n-      \"multiplier\": 1,\n+  user1: {\n+    total: 100,\n+    task: {\n+      reward: 90,\n+      multiplier: 1,\n     },\n-    \"userId\": 1,\n-    \"comments\": [\n+    userId: 1,\n+    comments: [\n       {\n-        \"content\": \"comment 3\",\n-        \"url\": \"https://github.com/user-org/test-repo/issues/57#issuecomment-2172704421\",\n-        \"type\": CommentType.COMMENTED,\n-        \"score\": {\n-          \"reward\": 10\n-        }\n-      }\n-    ]\n+        content: \"comment 3\",\n+        url: \"https://github.com/user-org/test-repo/issues/57#issuecomment-2172704421\",\n+        type: CommentType.COMMENTED,\n+        score: {\n+          reward: 10,\n+        },\n+      },\n+    ],\n   },\n-  \"user2\": {\n-    \"total\": 11.11,\n-    \"task\": {\n-      \"reward\": 9.99,\n-      \"multiplier\": 1,\n+  user2: {\n+    total: 11.11,\n+    task: {\n+      reward: 9.99,\n+      multiplier: 1,\n     },\n-    \"userId\": 1,\n-    \"comments\": [\n+    userId: 1,\n+    comments: [\n       {\n-        \"content\": \"comment 3\",\n-        \"url\": \"https://github.com/user-org/test-repo/issues/57#issuecomment-2172704421\",\n-        \"type\": CommentType.COMMENTED,\n-        \"score\": {\n-          \"reward\": 1.12\n-        }\n-      }\n-    ]\n+        content: \"comment 3\",\n+        url: \"https://github.com/user-org/test-repo/issues/57#issuecomment-2172704421\",\n+        type: CommentType.COMMENTED,\n+        score: {\n+          reward: 1.12,\n+        },\n+      },\n+    ],\n   },\n };","score":{"reward":0.444,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":87.94500000000002,"syllables":8,"sentences":1,"score":0.7205499999999998},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2195572555,"effect":{"addition":105,"deletion":97},"reward":2.02,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 3.76 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>2.02</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>0.272</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>1.468</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67\" target=\"_blank\" rel=\"noopener\">#67</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+105 -97</td><td>1</td><td>2.02</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/66#issuecomment-2255428480\" target=\"_blank\" rel=\"noopener\">@gentlementlegen 0 WXDAI isn't right. It shouldn't display this &hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/66#issuecomment-2257404028\" target=\"_blank\" rel=\"noopener\">I am unsure of how GitHub technically refers to this object/enti&hellip;</a></h6></td><td><details><summary>2.15</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.15&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.272</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#pullrequestreview-2195572555\" target=\"_blank\" rel=\"noopener\">Seems odd to use &#96;+&#96; to coerce into a number instead of &hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.8</td><td>1</td><td>1.024</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#discussion_r1689069988\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionconst totalAfterFee = Number(ne&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#discussion_r1689070197\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionrewardResult.task.reward = Nu&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#discussion_r1689070347\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionif (comment.score) comment.&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#discussion_r1689070723\" target=\"_blank\" rel=\"noopener\">What's up with the formatter?</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.444</td></tr></tbody></table></details>"},"gentlementlegen":{"total":17.65,"userId":9807008,"comments":[{"id":2255608298,"content":"@0x4007 I think the comment it picked up was https://github.com/ubiquibot/conversation-rewards/pull/67#pullrequestreview-2195572555 but somehow it is broken.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/66#issuecomment-2255608298","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":53.655,"syllables":40,"sentences":2,"score":0.93655},"multiplier":1,"relevance":0}},{"id":2421309341,"content":"We should use the official Octokit plugin to handle retries instead of a manual retry tool.\r\n              actually there is an official octokit plugin [plugin-retry](https://github.com/octokit/plugin-retry.js) that handles retries for all octokit requests - we are already using this in the kernel\r\n_Originally posted by @whilefoo in https://github.com/ubiquibot/conversation-rewards/issues/63#issuecomment-2239255101_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/66","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.09,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":35.333763440860224,"syllables":59,"sentences":3,"score":0.7533376344086022},"multiplier":1,"relevance":1}},{"id":1693711712,"content":"Maybe would be nice to wrap with `{}` to avoid mistakes.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#discussion_r1693711712","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -179,15 +179,16 @@ export class PermitGenerationModule implements Module {\n     let permitFeeAmountDecimal = new Decimal(0);\n     for (const [_, rewardResult] of Object.entries(result)) {\n       // accumulate total permit fee amount\n-      const totalAfterFee = +new Decimal(rewardResult.total).mul(feeRateDecimal);\n+      const totalAfterFee = new Decimal(rewardResult.total).mul(feeRateDecimal).toNumber();\n       permitFeeAmountDecimal = permitFeeAmountDecimal.add(new Decimal(rewardResult.total).minus(totalAfterFee));\n       // subtract fees\n       rewardResult.total = +totalAfterFee.toFixed(2);\n       if (rewardResult.task)\n-        rewardResult.task.reward = +new Decimal(rewardResult.task.reward).mul(feeRateDecimal).toFixed(2);\n+        rewardResult.task.reward = Number(new Decimal(rewardResult.task.reward).mul(feeRateDecimal).toFixed(2));\n       if (rewardResult.comments) {\n-        for (let comment of rewardResult.comments) {\n-          if (comment.score) comment.score.reward = +new Decimal(comment.score.reward).mul(feeRateDecimal).toFixed(2);\n+        for (const comment of rewardResult.comments) {\n+          if (comment.score)\n+            comment.score.reward = Number(new Decimal(comment.score.reward).mul(feeRateDecimal).toFixed(2));","score":{"reward":0.756,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":95.165,"syllables":12,"sentences":1,"score":0.64835},"multiplier":1,"relevance":0.7}},{"id":1693711885,"content":"Since you removed this, what happens on retry, is any comment posted saying the plugin is retrying?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#discussion_r1693711885","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -35,32 +32,11 @@ export class IssueActivity {\n   linkedReviews: Review[] = [];\n \n   async init() {\n-    function fn<T>(func: () => Promise<T>) {\n-      return func();\n-    }\n-    const decoratedFn = retryAsyncUntilDefinedDecorator(fn, {\n-      delay: this._configuration.delayMs,\n-      maxTry: this._configuration.maxAttempts,\n-      async onError(error) {\n-        try {\n-          const content = \"Failed to retrieve activity. Retrying...\";","score":{"reward":1.512,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":70.14470588235295,"syllables":24,"sentences":1,"score":0.8985529411764704},"multiplier":1,"relevance":0.9}},{"id":2252347653,"content":"@whilefoo It must be because I figured out yesterday that if a user has the organization in private, the bot would consider that you are a contributor and not a collaborator. So now that I made it public so I became a COLLABORATOR.\r\nThese tests were not mocked somehow hence the difference now. You can see in the conflicts that I made the required changes to mock all of these so this should not happen anymore.\r\nPS: sorry for the conflicts","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#issuecomment-2252347653","commentType":"PULL_COLLABORATOR","score":{"reward":2.022,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":1,"words":{"wordCount":81,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":66.1031111111111,"syllables":119,"sentences":5,"score":0.938968888888889},"multiplier":1,"relevance":0.6}},{"id":2254333226,"content":"@whilefoo The logic works however the posted message is wrong ([test run here](https://github.com/Meniole/conversation-rewards/issues/6#issuecomment-2254332796)) so you might want to serialize the object.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#issuecomment-2254333226","commentType":"PULL_COLLABORATOR","score":{"reward":2.592,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":64.66285714285716,"syllables":30,"sentences":1,"score":0.9533714285714283},"multiplier":1,"relevance":0.8}},{"id":2254975784,"content":"Seems to work fine: https://github.com/Meniole/conversation-rewards/issues/6#issuecomment-2254974922","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#issuecomment-2254975784","commentType":"PULL_COLLABORATOR","score":{"reward":0.728,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":48.65857142857146,"syllables":25,"sentences":2,"score":0.8865857142857146},"multiplier":1,"relevance":0.4}}],"reviewRewards":[{"reviews":[{"reviewId":2202885920,"effect":{"addition":232,"deletion":250},"reward":4.82,"priority":1},{"reviewId":2203962343,"effect":{"addition":153,"deletion":60},"reward":2.13,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 17.65 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>6.95</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.09</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>7.61</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67\" target=\"_blank\" rel=\"noopener\">#67</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+232 -250</td><td>1</td><td>4.82</td></tr><tr><td>+153 -60</td><td>1</td><td>2.13</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/66\" target=\"_blank\" rel=\"noopener\">We should use the official Octokit plugin to handle retries inst&hellip;</a></h6></td><td><details><summary>2.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>1</td><td>1</td><td>3.09</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/66#issuecomment-2255608298\" target=\"_blank\" rel=\"noopener\">@0x4007 I think the comment it picked up was https://github.com/&hellip;</a></h6></td><td><details><summary>2.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#discussion_r1693711712\" target=\"_blank\" rel=\"noopener\">Maybe would be nice to wrap with &#96;{}&#96; to avoid mistakes.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.756</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#discussion_r1693711885\" target=\"_blank\" rel=\"noopener\">Since you removed this, what happens on retry, is any comment po&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.9</td><td>1</td><td>1.512</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#issuecomment-2252347653\" target=\"_blank\" rel=\"noopener\">@whilefoo It must be because I figured out yesterday that if a u&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 81&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.6</td><td>1</td><td>2.022</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#issuecomment-2254333226\" target=\"_blank\" rel=\"noopener\">@whilefoo The logic works however the posted message is wrong ([&hellip;</a></h6></td><td><details><summary>2.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.592</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/67#issuecomment-2254975784\" target=\"_blank\" rel=\"noopener\">Seems to work fine: https://github.com/Meniole/conversation-rewa&hellip;</a></h6></td><td><details><summary>1.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.728</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_139.json","json":{"whck6":{"userId":6612648,"total":12,"task":{"reward":12,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 12 XP ]</a>&nbsp;</h3><h6>@whck6</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>12</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":12,"userId":4975670,"comments":[{"id":2420290100,"content":"It isn't clear to me why it isn't running. Its finished in 5s\r\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/actions/runs/11391111007/job/31694182036\r\nAs a heads up whck6, the red beta bot uses the most cutting edge versions of our plugins. We do this to catch bugs before we push to production. Thank you for your patience, gentlementlegen should be able to fix it pretty quickly I think.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/139#issuecomment-2420290100","commentType":"ISSUE_AUTHOR","score":{"reward":1.768,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":60,"wordValue":0.1,"result":2.52},"readability":{"fleschKincaid":75.20218918918923,"syllables":102,"sentences":5,"score":0.8479781081081077},"multiplier":1,"relevance":0.2}},{"id":2566345562,"content":"This doesn't make sense. If the purpose of this was to accomodate other LLMs like Anthropic's Claude API, then it should default to the full OpenAI URL, and then when a value is filled it should swap out the relevant parts. I presume this just appends which is useless. \r\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/blob/aeacb16eac5b5526d35d330b357bcd7ba40c93c0/src/configuration/content-evaluator-config.ts#L13","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/139","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.39,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":62.74510869565219,"syllables":108,"sentences":6,"score":0.9725489130434781},"multiplier":1,"relevance":1}},{"id":1804181259,"content":"`i.source`? What is this for?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1804181259","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,7 +10,7 @@ const openAiType = Type.Object(\n     /**\n      * Specific endpoint to send the comments to.\n      */\n-    endpoint: Type.String({ default: \"\" }),\n+    endpoint: Type.String({ default: \"https://api.openai.com/v1\", pattern: /^(https?:\\/\\/[^\\s$.?#].\\S*)$/i.source }),","score":{"reward":0.798,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":1804182611,"content":"```suggestion\r\n    endpoint: Type.String({ default: \"https://api.openai.com/v1\", pattern: /^(https?:\\/\\/[^\\s$.?#].\\S*)$/i }),\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1804182611","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,7 +10,7 @@ const openAiType = Type.Object(\n     /**\n      * Specific endpoint to send the comments to.\n      */\n-    endpoint: Type.String({ default: \"\" }),\n+    endpoint: Type.String({ default: \"https://api.openai.com/v1\", pattern: /^(https?:\\/\\/[^\\s$.?#].\\S*)$/i.source }),","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":2394953671,"content":"You need to also change the logic that applies the url to the request. Test with anthropic api using only the config then you'll understand what I'm saying.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#issuecomment-2394953671","commentType":"PULL_COLLABORATOR","score":{"reward":3.792,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":73.17000000000003,"syllables":42,"sentences":2,"score":0.8682999999999997},"multiplier":1,"relevance":0.8}},{"id":2394999154,"content":"I think so too but not sure why this was implemented in the first place @gentlementlegen @EresDev @whilefoo \nBut ideally it should be configurable like most other implementations. It should allow us to easily switch to anthropic","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#issuecomment-2394999154","commentType":"PULL_COLLABORATOR","score":{"reward":2.63,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":44.00885135135138,"syllables":63,"sentences":2,"score":0.8400885135135138},"multiplier":1,"relevance":0.5}},{"id":2395044877,"content":"Sure different task is fine but anyways this pull isn't complete you need to change the logic how the default value is used. No way this change works and doesn't break the system.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#issuecomment-2395044877","commentType":"PULL_COLLABORATOR","score":{"reward":4.016,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":82.71821428571431,"syllables":44,"sentences":2,"score":0.7728178571428569},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2349619466,"effect":{"addition":1,"deletion":2},"reward":0.06,"priority":2},{"reviewId":2374267061,"effect":{"addition":1618,"deletion":1324},"reward":58.84,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 12 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>⚠️ Your rewards have been limited to the task price of 12 XP.</h6><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>58.9</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.39</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.768</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>11.236</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140\" target=\"_blank\" rel=\"noopener\">#140</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1 -2</td><td>2</td><td>0.06</td></tr><tr><td>+1618 -1324</td><td>2</td><td>58.84</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/139\" target=\"_blank\" rel=\"noopener\">This doesn't make sense. If the purpose of this was to accomodat&hellip;</a></h6></td><td><details><summary>3.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 51&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>1</td><td>1</td><td>4.39</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/139#issuecomment-2420290100\" target=\"_blank\" rel=\"noopener\">It isn't clear to me why it isn't running. Its finished in 5sh&hellip;</a></h6></td><td><details><summary>3.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 60&#13;  wordValue: 0.1&#13;  result: 2.52&#13;</pre></details></td><td>0.2</td><td>2</td><td>1.768</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1804181259\" target=\"_blank\" rel=\"noopener\">&#96;i.source&#96;? What is this for?</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.7</td><td>2</td><td>0.798</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1804182611\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionendpoint: Type.String({ default: &hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#issuecomment-2394953671\" target=\"_blank\" rel=\"noopener\">You need to also change the logic that applies the url to the re&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.8</td><td>2</td><td>3.792</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#issuecomment-2394999154\" target=\"_blank\" rel=\"noopener\">I think so too but not sure why this was implemented in the firs&hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>0.5</td><td>2</td><td>2.63</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#issuecomment-2395044877\" target=\"_blank\" rel=\"noopener\">Sure different task is fine but anyways this pull isn't complete&hellip;</a></h6></td><td><details><summary>2.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.8</td><td>2</td><td>4.016</td></tr></tbody></table></details>"},"gentlementlegen":{"total":12,"userId":9807008,"comments":[{"id":2421281258,"content":"@0x4007 The configuration was evaluated as invalid which is why the plugin didn't run:\r\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/actions/runs/11391111007/job/31694182036#step:3:29 my suspicion is that the `endpoint: ''` is the problem, I'll check.\r\n---\r\nIndeed the configuration gave an empty string for the endpoint, I fixed it here but we might want to fix it everywhere.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/139#issuecomment-2421281258","commentType":"ISSUE_COLLABORATOR","score":{"reward":7.794,"formatting":{"content":{"p":{"score":0,"elementCount":3},"hr":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":48,"wordValue":0.1,"result":2.35},"readability":{"fleschKincaid":57.292564102564114,"syllables":98,"sentences":3,"score":0.9729256410256412},"multiplier":1,"relevance":0.9}},{"id":2421297348,"content":"Somehow I got excluded from the results (my permit got properly generated) and the URL displays at the bottom. I did not do such changes, need to investigate.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/139#issuecomment-2421297348","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.856,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":65.72500000000001,"syllables":42,"sentences":2,"score":0.9427499999999999},"multiplier":1,"relevance":0.4}},{"id":2422679609,"content":"@whck6 Sorry about that, we are experiencing some issues with our RPCs and are actively trying to solve this.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/139#issuecomment-2422679609","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.74,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":62.87631578947371,"syllables":28,"sentences":1,"score":0.971236842105263},"multiplier":1,"relevance":0.2}},{"id":2368121278,"content":"You should fix the tests within\r\ntests/configuration.test.ts [[link](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/blob/1409b0dd7a3b15758236668e3670024c0739a935/tests/configuration.test.ts)] since the default configuration has changed. Do not worry about the other ones.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#pullrequestreview-2368121278","commentType":"PULL_COLLABORATOR","score":{"reward":5.408,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":70.32,"syllables":37,"sentences":4,"score":0.8968},"multiplier":1,"relevance":0.8}},{"id":1789158077,"content":"This should not be removed otherwise the configuration will never be used.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1789158077","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -27,7 +27,6 @@ export class ContentEvaluatorModule implements Module {\n   readonly _configuration: ContentEvaluatorConfiguration | null = configuration.incentives.contentEvaluator;\n   readonly _openAi = new OpenAI({\n     apiKey: OPENAI_API_KEY,\n-    ...(this._configuration?.openAi.endpoint && { baseURL: this._configuration.openAi.endpoint }),","score":{"reward":2.394,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":53.655,"syllables":20,"sentences":1,"score":0.93655},"multiplier":1,"relevance":0.9}},{"id":1789469291,"content":"You can just add\r\n```typescript\r\nbaseURL: this._configuration.openAi.endpoint\r\n```\r\nsince the point of that PR is to always populate the URL. You can even enforce a URL pattern in the cofiguration to make sure that it is at least a valid address.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1789469291","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -27,7 +27,6 @@ export class ContentEvaluatorModule implements Module {\n   readonly _configuration: ContentEvaluatorConfiguration | null = configuration.incentives.contentEvaluator;\n   readonly _openAi = new OpenAI({\n     apiKey: OPENAI_API_KEY,\n-    ...(this._configuration?.openAi.endpoint && { baseURL: this._configuration.openAi.endpoint }),","score":{"reward":3.682,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":76.01966216216218,"syllables":49,"sentences":2,"score":0.8398033783783783},"multiplier":1,"relevance":0.7}},{"id":1789639564,"content":"Not sure of what you mean, this is just an example for usage. Since you removed this code it doesn't work anymore, because no value is passed to the constructor of `OpenAi`.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1789639564","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -27,7 +27,6 @@ export class ContentEvaluatorModule implements Module {\n   readonly _configuration: ContentEvaluatorConfiguration | null = configuration.incentives.contentEvaluator;\n   readonly _openAi = new OpenAI({\n     apiKey: OPENAI_API_KEY,\n-    ...(this._configuration?.openAi.endpoint && { baseURL: this._configuration.openAi.endpoint }),","score":{"reward":3.872,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":79.5575,"syllables":42,"sentences":2,"score":0.804425},"multiplier":1,"relevance":0.8}},{"id":1791161842,"content":"`endpoint` is not referenced anywhere within the code with your change so it is pointless to have it in the configuration. A proper fix would consist in:\r\n- adding a default endpoint value (that part you did)\r\n- removing the condition within the OpenAi constructor (because there is a default)\r\n- add a `pattern` check to make sure that the `endpoint` corresponds to a URL (it's ok if the URL is unreachable, this will stop at runtime)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1791161842","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -27,7 +27,6 @@ export class ContentEvaluatorModule implements Module {\n   readonly _configuration: ContentEvaluatorConfiguration | null = configuration.incentives.contentEvaluator;\n   readonly _openAi = new OpenAI({\n     apiKey: OPENAI_API_KEY,\n-    ...(this._configuration?.openAi.endpoint && { baseURL: this._configuration.openAi.endpoint }),","score":{"reward":6.973,"formatting":{"content":{"p":{"score":0,"elementCount":4},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3}},"result":0.3},"priority":2,"words":{"wordCount":72,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":46.92000000000003,"syllables":105,"sentences":2,"score":0.8692000000000003},"multiplier":1,"relevance":0.95}},{"id":1794293507,"content":"Thank you. Could you add the url pattern check?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1794293507","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -27,7 +27,6 @@ export class ContentEvaluatorModule implements Module {\n   readonly _configuration: ContentEvaluatorConfiguration | null = configuration.incentives.contentEvaluator;\n   readonly _openAi = new OpenAI({\n     apiKey: OPENAI_API_KEY,\n-    ...(this._configuration?.openAi.endpoint && { baseURL: this._configuration.openAi.endpoint }),","score":{"reward":1.308,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":108.26750000000001,"syllables":10,"sentences":2,"score":1},"multiplier":1,"relevance":0.6}},{"id":1794560824,"content":"Something basic like `http[s]:\\/\\/\\S+` should suffice.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1794560824","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -27,7 +27,6 @@ export class ContentEvaluatorModule implements Module {\n   readonly _configuration: ContentEvaluatorConfiguration | null = configuration.incentives.contentEvaluator;\n   readonly _openAi = new OpenAI({\n     apiKey: OPENAI_API_KEY,\n-    ...(this._configuration?.openAi.endpoint && { baseURL: this._configuration.openAi.endpoint }),","score":{"reward":0.67,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":49.48000000000002,"syllables":9,"sentences":1,"score":0.8948000000000002},"multiplier":1,"relevance":0.5}},{"id":1796381231,"content":"This is meant to go in the plugin configuration not here.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1796381231","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -27,7 +27,11 @@ export class ContentEvaluatorModule implements Module {\n   readonly _configuration: ContentEvaluatorConfiguration | null = configuration.incentives.contentEvaluator;\n   readonly _openAi = new OpenAI({\n     apiKey: OPENAI_API_KEY,\n-    ...(this._configuration?.openAi.endpoint && { baseURL: this._configuration.openAi.endpoint }),\n+    ...(this._configuration && {\n+      baseURL: /http[s]:\\/\\/\\S+/.test(this._configuration.openAi.endpoint)","score":{"reward":1.952,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":72.61545454545457,"syllables":16,"sentences":1,"score":0.8738454545454544},"multiplier":1,"relevance":0.8}},{"id":1796429982,"content":"The configuration should check and display errors in needed:\r\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/blob/47e7df86d9d6e94e686b4e78912a580c242ae469/src/configuration/content-evaluator-config.ts#L13","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1796429982","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -27,7 +27,11 @@ export class ContentEvaluatorModule implements Module {\n   readonly _configuration: ContentEvaluatorConfiguration | null = configuration.incentives.contentEvaluator;\n   readonly _openAi = new OpenAI({\n     apiKey: OPENAI_API_KEY,\n-    ...(this._configuration?.openAi.endpoint && { baseURL: this._configuration.openAi.endpoint }),\n+    ...(this._configuration && {\n+      baseURL: /http[s]:\\/\\/\\S+/.test(this._configuration.openAi.endpoint)","score":{"reward":3.038,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":19.100000000000023,"syllables":57,"sentences":3,"score":0.5910000000000002},"multiplier":1,"relevance":0.7}},{"id":1797489454,"content":"```suggestion\r\n    endpoint: Type.String(/http[s]:\\/\\/\\S+/, { default: \"https://api.openai.com/v1\", pattern: \"^https?://[^s/$.?#].*$\" }),\r\n```\r\nPlease check this regex I am not sure it's quite right, and add a related test.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1797489454","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,7 +10,7 @@ const openAiType = Type.Object(\n     /**\n      * Specific endpoint to send the comments to.\n      */\n-    endpoint: Type.String({ default: \"https://api.openai.com/v1\" }),\n+    endpoint: Type.RegExp(/http[s]:\\/\\/\\S+/, { default: \"https://api.openai.com/v1\" }),","score":{"reward":2.528,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":95.02705882352943,"syllables":19,"sentences":1,"score":0.6497294117647057},"multiplier":1,"relevance":0.8}},{"id":1799712050,"content":"I don't think you test because this pattern would not match `https://api.openai.com/v1` but rather `https://api.openai.com` because slashes don't seem to be taken into account if I am not mistaken.\r\nA valid regex could be \r\n```suggestion\r\n    endpoint: Type.String({ default: \"https://api.openai.com/v1\", pattern: /^(https?:\\/\\/[^\\s$.?#].\\S*)$/i.source }),\r\n```\r\nYou should also add some test, I link you the one I did locally\r\n```TypeScript\r\nimport { Value } from \"@sinclair/typebox/value\";\r\nimport {\r\n  ContentEvaluatorConfiguration,\r\n  contentEvaluatorConfigurationType,\r\n} from \"../src/configuration/content-evaluator-config\";\r\ndescribe(\"ContentEvaluatorConfiguration Validation\", () => {\r\n  it(\"should trigger an error when a non-URL value is provided for the endpoint\", () => {\r\n    const invalidConfig: Partial<ContentEvaluatorConfiguration> = {\r\n      openAi: {\r\n        model: \"gpt-4o-2024-08-06\",\r\n        endpoint: \"not-a-valid-url\",\r\n      },\r\n    };\r\n    function assertInvalidConfig() {\r\n      const defaultedConfig = Value.Default(contentEvaluatorConfigurationType, invalidConfig);\r\n      const decodedConfig = Value.Decode(contentEvaluatorConfigurationType, defaultedConfig);\r\n      Value.Check(contentEvaluatorConfigurationType, decodedConfig);\r\n    }\r\n    expect(assertInvalidConfig).toThrow();\r\n  });\r\n  it(\"should pass validation when a valid URL value is provided for the endpoint\", () => {\r\n    const validConfig: Partial<ContentEvaluatorConfiguration> = {\r\n      openAi: {\r\n        model: \"gpt-4o-2024-08-06\",\r\n        endpoint: \"https://api.openai.com/v1\",\r\n      },\r\n    };\r\n    const defaultedConfig = Value.Default(contentEvaluatorConfigurationType, validConfig);\r\n    const decodedConfig = Value.Decode(contentEvaluatorConfigurationType, defaultedConfig);\r\n    const isValid = Value.Check(contentEvaluatorConfigurationType, decodedConfig);\r\n    expect(isValid).toBe(true);\r\n  });\r\n});\r\n```\r\nNext time please add tests / QA to your PR.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1799712050","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,7 +10,7 @@ const openAiType = Type.Object(\n     /**\n      * Specific endpoint to send the comments to.\n      */\n-    endpoint: Type.String({ default: \"\" }),\n+    endpoint: Type.String({ default: \"https://api.openai.com/v1\", pattern: \"/^https?://[^s$?#]+[a-z0-9]$/\" }),","score":{"reward":10.754,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":2}},"result":2},"priority":2,"words":{"wordCount":57,"wordValue":0.1,"result":2.48},"readability":{"fleschKincaid":72.52855263157895,"syllables":71,"sentences":2,"score":0.8747144736842105},"multiplier":1,"relevance":0.95}},{"id":1804187085,"content":"@0x4007 Are you sure this compiles? the required type is a string not a regex.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1804187085","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,7 +10,7 @@ const openAiType = Type.Object(\n     /**\n      * Specific endpoint to send the comments to.\n      */\n-    endpoint: Type.String({ default: \"\" }),\n+    endpoint: Type.String({ default: \"https://api.openai.com/v1\", pattern: /^(https?:\\/\\/[^\\s$.?#].\\S*)$/i.source }),","score":{"reward":1.752,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":92.06250000000001,"syllables":19,"sentences":2,"score":0.6793749999999998},"multiplier":1,"relevance":0.6}},{"id":1804190665,"content":"<img width=\"433\" alt=\"image\" src=\"https://github.com/user-attachments/assets/9e8af02e-c258-4540-ab4c-10359f9d57aa\">","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1804190665","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,7 +10,7 @@ const openAiType = Type.Object(\n     /**\n      * Specific endpoint to send the comments to.\n      */\n-    endpoint: Type.String({ default: \"\" }),\n+    endpoint: Type.String({ default: \"https://api.openai.com/v1\", pattern: /^(https?:\\/\\/[^\\s$.?#].\\S*)$/i.source }),","score":{"reward":1.6,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":78.77220588235295,"syllables":24,"sentences":2,"score":0.8122779411764705},"multiplier":1,"relevance":0.4}},{"id":1804191732,"content":"```suggestion\r\n    endpoint: Type.String({ default: \"https://api.openai.com/v1\", pattern: /^(https?:\\/\\/[^\\s$.?#].\\S*)$/i.source }),\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1804191732","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,7 +10,7 @@ const openAiType = Type.Object(\n     /**\n      * Specific endpoint to send the comments to.\n      */\n-    endpoint: Type.String({ default: \"\" }),\n+    endpoint: Type.String({ default: \"https://api.openai.com/v1\", pattern: /^(https?:\\/\\/[^\\s$.?#].\\S*)$/i }),","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.6}},{"id":1804193554,"content":"`source` converts the regex to its `string` representation: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/source","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1804193554","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -10,7 +10,7 @@ const openAiType = Type.Object(\n     /**\n      * Specific endpoint to send the comments to.\n      */\n-    endpoint: Type.String({ default: \"\" }),\n+    endpoint: Type.String({ default: \"https://api.openai.com/v1\", pattern: /^(https?:\\/\\/[^\\s$.?#].\\S*)$/i.source }),","score":{"reward":2.73,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":31.206666666666678,"syllables":38,"sentences":3,"score":0.7120666666666667},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2350564298,"effect":{"addition":1,"deletion":2},"reward":0.06,"priority":2},{"reviewId":2361897207,"effect":{"addition":5,"deletion":0},"reward":0.1,"priority":2},{"reviewId":2363666669,"effect":{"addition":2,"deletion":6},"reward":0.16,"priority":2},{"reviewId":2366988894,"effect":{"addition":1,"deletion":1},"reward":0.04,"priority":2},{"reviewId":2368121278,"effect":{"addition":39,"deletion":1},"reward":0.8,"priority":2},{"reviewId":2368943478,"effect":{"addition":1830,"deletion":1406},"reward":64.72,"priority":2},{"reviewId":2374275909,"effect":{"addition":0,"deletion":0},"reward":0,"priority":2},{"reviewId":2374282885,"effect":{"addition":1,"deletion":1},"reward":0.04,"priority":2},{"reviewId":2374285965,"effect":{"addition":0,"deletion":0},"reward":0,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 12 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>⚠️ Your rewards have been limited to the task price of 12 XP.</h6><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>9</td><td>65.92</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>10.39</td></tr><tr><td>Review</td><td>Comment</td><td>15</td><td>48.661</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140\" target=\"_blank\" rel=\"noopener\">#140</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1 -2</td><td>2</td><td>0.06</td></tr><tr><td>+5 -0</td><td>2</td><td>0.1</td></tr><tr><td>+2 -6</td><td>2</td><td>0.16</td></tr><tr><td>+1 -1</td><td>2</td><td>0.04</td></tr><tr><td>+39 -1</td><td>2</td><td>0.8</td></tr><tr><td>+1830 -1406</td><td>2</td><td>64.72</td></tr><tr><td>+0 -0</td><td>2</td><td>0</td></tr><tr><td>+1 -1</td><td>2</td><td>0.04</td></tr><tr><td>+0 -0</td><td>2</td><td>0</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/139#issuecomment-2421281258\" target=\"_blank\" rel=\"noopener\">@0x4007 The configuration was evaluated as invalid which is why &hellip;</a></h6></td><td><details><summary>3.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 48&#13;  wordValue: 0.1&#13;  result: 2.35&#13;</pre></details></td><td>0.9</td><td>2</td><td>7.794</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/139#issuecomment-2421297348\" target=\"_blank\" rel=\"noopener\">Somehow I got excluded from the results (my permit got properly &hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.4</td><td>2</td><td>1.856</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/139#issuecomment-2422679609\" target=\"_blank\" rel=\"noopener\">@whck6 Sorry about that, we are experiencing some issues with ou&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.74</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#pullrequestreview-2368121278\" target=\"_blank\" rel=\"noopener\">You should fix the tests withintests/configuration.test.ts [[l&hellip;</a></h6></td><td><details><summary>2.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.8</td><td>2</td><td>5.408</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1789158077\" target=\"_blank\" rel=\"noopener\">This should not be removed otherwise the configuration will neve&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.9</td><td>2</td><td>2.394</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1789469291\" target=\"_blank\" rel=\"noopener\">You can just add&#96;&#96;&#96;typescriptbaseURL: this._conf&hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>0.7</td><td>2</td><td>3.682</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1789639564\" target=\"_blank\" rel=\"noopener\">Not sure of what you mean, this is just an example for usage. Si&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.8</td><td>2</td><td>3.872</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1791161842\" target=\"_blank\" rel=\"noopener\">&#96;endpoint&#96; is not referenced anywhere within the code wi&hellip;</a></h6></td><td><details><summary>2.91</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;  result: 0.3&#13;regex:&#13;  wordCount: 72&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.95</td><td>2</td><td>6.973</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1794293507\" target=\"_blank\" rel=\"noopener\">Thank you. Could you add the url pattern check?</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.6</td><td>2</td><td>1.308</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1794560824\" target=\"_blank\" rel=\"noopener\">Something basic like &#96;http[s]:\\/\\/\\S+&#96; should suffice.</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.5</td><td>2</td><td>0.67</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1796381231\" target=\"_blank\" rel=\"noopener\">This is meant to go in the plugin configuration not here.</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.952</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1796429982\" target=\"_blank\" rel=\"noopener\">The configuration should check and display errors in needed:ht&hellip;</a></h6></td><td><details><summary>1.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.7</td><td>2</td><td>3.038</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1797489454\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionendpoint: Type.String(/http[s]:\\/&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.528</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1799712050\" target=\"_blank\" rel=\"noopener\">I don't think you test because this pattern would not match &#96&hellip;</a></h6></td><td><details><summary>4.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 57&#13;  wordValue: 0.1&#13;  result: 2.48&#13;</pre></details></td><td>0.95</td><td>2</td><td>10.754</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1804187085\" target=\"_blank\" rel=\"noopener\">@0x4007 Are you sure this compiles? the required type is a strin&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.6</td><td>2</td><td>1.752</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1804190665\" target=\"_blank\" rel=\"noopener\">&lt;img width=\"433\" alt=\"image\" src=\"https://github.com/user-att&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.4</td><td>2</td><td>1.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1804191732\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionendpoint: Type.String({ default: &hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.6</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/140#discussion_r1804193554\" target=\"_blank\" rel=\"noopener\">&#96;source&#96; converts the regex to its &#96;string&#96; repr&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.73</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_246.json","json":{"Hephaestus-V":{"userId":168421781,"total":50.913,"task":{"reward":50,"multiplier":1},"comments":[{"id":2751490952,"content":"I guess I've found the possible cause of this issue , do I need to add corresponding tests for the changes too ?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/246#issuecomment-2751490952","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.882,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":76.83227272727274,"syllables":28,"sentences":1,"score":0.8316772727272727},"multiplier":0.25,"relevance":0.9}},{"id":2417469745,"content":"Resolves #246","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327","commentType":"PULL_SPECIFICATION","score":{"reward":0.031,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":77.90500000000002,"syllables":3,"sentences":1,"score":0.8209499999999998},"multiplier":1,"relevance":0.1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 50.913 XP ]</a>&nbsp;</h3><h6>@Hephaestus-V</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.882</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.031</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/246#issuecomment-2751490952\" target=\"_blank\" rel=\"noopener\">I guess I've found the possible cause of this issue , do I need &hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.9</td><td>2</td><td>0.882</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327\" target=\"_blank\" rel=\"noopener\">Resolves #246</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.031</td></tr></tbody></table></details>"},"gentlementlegen":{"total":50,"userId":9807008,"comments":[{"id":2751770512,"content":"@Hephaestus-V To start working on a task, you should either use the `/start` command, or directly link a pull-request to this issue. Having tests with your changes would be ideal.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/246#issuecomment-2751770512","commentType":"ISSUE_AUTHOR","score":{"reward":1.92,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":76.48314516129035,"syllables":42,"sentences":2,"score":0.8351685483870965},"multiplier":1,"relevance":0.4}},{"id":2752125113,"content":"@Hephaestus-V The `wallet` plugin seems to have been deleted by accident, I just restored it, sorry about that. Please try to register your wallet again.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/246#issuecomment-2752125113","commentType":"ISSUE_AUTHOR","score":{"reward":0.872,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":65.55550000000002,"syllables":38,"sentences":2,"score":0.9444449999999998},"multiplier":1,"relevance":0.2}},{"id":2805862823,"content":"_Originally posted by @0x4007 in [#37](https://github.com/ubiquity-os-marketplace/daemon-merging/issues/37#issuecomment-2608650113)_\n## What happened\nThe user got rewards when the reward label was zero.\n## What was expected\nSince the label was zero, the user should have had its rewards capped to zero as well.\n## How to reproduce\n- write a specification\n- time it, price it, and put a priority to `0` which generates a 0 label tag price\n- close the task as resolved\n- notice that the user gets the rewards for the spec","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/246","commentType":"ISSUE_SPECIFICATION","score":{"reward":9.09,"formatting":{"content":{"p":{"score":0,"elementCount":3},"em":{"score":0,"elementCount":1},"h2":{"score":1,"elementCount":3},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":4},"a":{"score":1,"elementCount":1}},"result":4.4},"priority":1,"words":{"wordCount":75,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":61.89200000000001,"syllables":106,"sentences":3,"score":0.98108},"multiplier":1,"relevance":1}},{"id":2015969993,"content":"Could you create related tests?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#discussion_r2015969993","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -45,7 +45,7 @@ export class Processor {\n       return Infinity;\n     }\n     const priceTagReward = getTaskReward(issue);\n-    return priceTagReward || Infinity;\n+    return priceTagReward ?? Infinity;","score":{"reward":0.966,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":100.24000000000002,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":2016669002,"content":"What you can do that's much simpler is that you can throw an error with a warning message. All you need to do is:\n```typescript\nthrow this.context.logger.warn(\"No rewards have been distributed for this task because it was explicitly marked with a Price: 0 label.\");\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#discussion_r2016669002","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -38,29 +38,61 @@ export class GithubCommentModule extends BaseModule {\n     return div.innerHTML;\n   }\n \n-  async getBodyContent(data: Readonly<IssueActivity>, result: Result, stripContent = false): Promise<string> {\n-    const keysToRemove: string[] = [];\n+  private _getZeroPriceWarningContent(): string {\n+    const warningMessage = `# Rewards Summary\\n\\n> [!CAUTION]\\n> No rewards have been distributed for this task because it was explicitly marked with a Price: 0 label.\\n\\n`;","score":{"reward":3.654,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":96.01150000000003,"syllables":29,"sentences":2,"score":0.6398849999999997},"multiplier":1,"relevance":0.9}},{"id":2016950865,"content":"You should be able to achieve the same result just by throwing this, and please use `logger.warn`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#discussion_r2016950865","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -47,6 +47,16 @@ export async function run(context: ContextPlugin) {\n     await commentHandler.postComment(context, result);\n     return result.logMessage.raw;\n   }\n+\n+  const sortedPriceLabels = getSortedPrices(activity.self?.labels);\n+  if (sortedPriceLabels.length > 0 && sortedPriceLabels[0] === 0) {\n+    const result = logger.error(","score":{"reward":2.496,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":84.845,"syllables":20,"sentences":1,"score":0.75155},"multiplier":1,"relevance":0.8}},{"id":2753045099,"content":"Thank you for your first contribution.\nI don't think that is the proper approach, a quick glance at the code tells me that\n```typescript\nreturn priceTagReward || Infinity;\n```\nProbably returns `Infinity` if `priceTagReward` is zero. Changing the `||` to `??` might already help, can your confirm?\nAlso, it is preferable to link a QA with your changes, either by linking a test in your repo, or showing some results.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2753045099","commentType":"PULL_COLLABORATOR","score":{"reward":5.706,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":61,"wordValue":0.1,"result":2.53},"readability":{"fleschKincaid":76.24477459016396,"syllables":83,"sentences":4,"score":0.8375522540983604},"multiplier":1,"relevance":0.9}},{"id":2753341771,"content":"An explicit `Price: 0 USD` is usually set for a task tagged as `Priority: 0 {Regression)` if you want to test it.\r\nWhen there is no price label, by default we do not generate rewards. The behavior can be overridden by setting `requirePriceLabel` to false, and in such case we want `Infinity` indeed.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2753341771","commentType":"PULL_COLLABORATOR","score":{"reward":4.576,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":76.93000000000002,"syllables":61,"sentences":3,"score":0.8306999999999998},"multiplier":1,"relevance":0.8}},{"id":2753419166,"content":"What you can do is `bun run server` that will start you a local instance. Within the `web` folder, you can compile the web UI, then when accessing `http://localhost:4000` you will have a UI allowing you to test. You can change the settings by tweaking `.ubiquity-os.config.yml`.\r\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards?tab=readme-ov-file#how-to-get-started","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2753419166","commentType":"PULL_COLLABORATOR","score":{"reward":7.28,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2},"priority":2,"words":{"wordCount":40,"wordValue":0.1,"result":2.18},"readability":{"fleschKincaid":78.45565789473685,"syllables":80,"sentences":6,"score":0.8154434210526316},"multiplier":1,"relevance":0.7}},{"id":2757207769,"content":"It is okay to manually add the labels to an issue if you want to test it.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2757207769","commentType":"PULL_COLLABORATOR","score":{"reward":1.64,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":80.09764705882354,"syllables":22,"sentences":1,"score":0.7990235294117646},"multiplier":1,"relevance":0.5}},{"id":2757411036,"content":"I tested it, and it works fine, however it creates another problem: we remove users that get 0 reward from the final result comment. Since everyone is capped to `0`, it basically posts an empty message. Something should be changed, not sure if we want to include users with 0 reward back. RFC @0x4007","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2757411036","commentType":"PULL_COLLABORATOR","score":{"reward":5.526,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":53,"wordValue":0.1,"result":2.43},"readability":{"fleschKincaid":72.07304245283022,"syllables":76,"sentences":4,"score":0.8792695754716978},"multiplier":1,"relevance":0.9}},{"id":2757486777,"content":"@0x4007 This would happen for any task marked as \"Regression\", since its price tag will be `0`.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2757486777","commentType":"PULL_COLLABORATOR","score":{"reward":2.156,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":90.13250000000001,"syllables":19,"sentences":1,"score":0.6986749999999999},"multiplier":1,"relevance":0.7}},{"id":2757535260,"content":"@Hephaestus-V Sounds good to me.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2757535260","commentType":"PULL_COLLABORATOR","score":{"reward":0.444,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":87.94500000000002,"syllables":8,"sentences":1,"score":0.7205499999999998},"multiplier":1,"relevance":0.3}},{"id":2757590984,"content":"@Hephaestus-V You can create an issue within your own repo, and manually create a tag `Price: 0 USD`, it should work.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2757590984","commentType":"PULL_COLLABORATOR","score":{"reward":2.172,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":71.78157894736843,"syllables":26,"sentences":1,"score":0.8821842105263157},"multiplier":1,"relevance":0.6}},{"id":2758126708,"content":"Current QA: https://github.com/Meniole/text-conversation-rewards/issues/78#issuecomment-2758080516\r\nI think you should just use `throw context.logger.warn(\"<error message\");` instead. And I think that this check can occur within the pre-checks, which will save the plugin from a useless run because we know that no rewards will be generated.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2758126708","commentType":"PULL_COLLABORATOR","score":{"reward":7.236,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":68.09433333333337,"syllables":72,"sentences":3,"score":0.9190566666666663},"multiplier":1,"relevance":0.9}},{"id":2760238717,"content":"Latest QA: https://github.com/Meniole/text-conversation-rewards/issues/78#issuecomment-2760237968\r\nI am good with the changes, I'll approve once there is a test related to this behavior.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2760238717","commentType":"PULL_COLLABORATOR","score":{"reward":5.12,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":62.837983870967776,"syllables":47,"sentences":2,"score":0.9716201612903222},"multiplier":1,"relevance":0.8}},{"id":2761074292,"content":"I tried running the tests and it was fine. I would advise to:\r\n- make sure bun is up to date (1.2.6)\r\n- delete node_modules and bun.lock\r\n- run `bun install`\r\n- run `bun run test`\r\nLet me know if the issue persists.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2761074292","commentType":"PULL_COLLABORATOR","score":{"reward":4.186,"formatting":{"content":{"p":{"score":0,"elementCount":6},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":4}},"result":0.4},"priority":2,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":94.14562162162164,"syllables":46,"sentences":5,"score":0.6585437837837835},"multiplier":1,"relevance":0.7}},{"id":2761117936,"content":"None of these should be required, except `LOG_LEVEL` where you can set it to `debug`. Worst case scenario the tests you will write will be executed in this pull-request so you can see the results.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2761117936","commentType":"PULL_COLLABORATOR","score":{"reward":2.46,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":85.07411764705884,"syllables":42,"sentences":2,"score":0.7492588235294115},"multiplier":1,"relevance":0.5}},{"id":2761447228,"content":"I didn't realize that you would not be able to see the results as not being a collaborator.\nI would need you to tell me\nYour OS\nThe bun version you are using\nThe exact error you are encountering\nTo see if I can provide you some help.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2761447228","commentType":"PULL_COLLABORATOR","score":{"reward":3.6,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":49,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":71.46954081632654,"syllables":64,"sentences":2,"score":0.8853045918367346},"multiplier":1,"relevance":0.6}},{"id":2763272872,"content":"For the two last errors you should be able to fix these by using the same values as the test configuration found here:\r\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/blob/fe45efc952b3d51306d837c4ca00e06db25f8955/.github/workflows/jest-testing.yml#L19-L20\r\nFor the first one you can ignore it for now and write your tests normally. But now you are able to run the test suite so writing tests should not be a problem.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2763272872","commentType":"PULL_COLLABORATOR","score":{"reward":6.132,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":56,"wordValue":0.1,"result":2.47},"readability":{"fleschKincaid":72.91570270270272,"syllables":104,"sentences":5,"score":0.8708429729729729},"multiplier":1,"relevance":0.7}},{"id":2767872869,"content":"Latest QA:\r\nhttps://github.com/Meniole/text-conversation-rewards/issues/78#issuecomment-2767870246\r\nThank you for the tests!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2767872869","commentType":"PULL_COLLABORATOR","score":{"reward":3.488,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":56.70000000000002,"syllables":30,"sentences":2,"score":0.9670000000000002},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2720348525,"effect":{"addition":1,"deletion":1},"reward":0.04,"priority":2},{"reviewId":2721569605,"effect":{"addition":50,"deletion":18},"reward":1.36,"priority":2},{"reviewId":2722210774,"effect":{"addition":14,"deletion":23},"reward":0.74,"priority":2},{"reviewId":2730924577,"effect":{"addition":161,"deletion":35},"reward":3.92,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 50 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>⚠️ Your rewards have been limited to the task price of 50 XP.</h6><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>4</td><td>6.06</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>9.09</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>2.792</td></tr><tr><td>Review</td><td>Comment</td><td>18</td><td>68.838</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327\" target=\"_blank\" rel=\"noopener\">#327</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1 -1</td><td>2</td><td>0.04</td></tr><tr><td>+50 -18</td><td>2</td><td>1.36</td></tr><tr><td>+14 -23</td><td>2</td><td>0.74</td></tr><tr><td>+161 -35</td><td>2</td><td>3.92</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/246\" target=\"_blank\" rel=\"noopener\">_Originally posted by @0x4007 in [#37](https://github.com/ubiqui&hellip;</a></h6></td><td><details><summary>7.02</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    h2:&#13;      score: 1&#13;      elementCount: 3&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 4.4&#13;regex:&#13;  wordCount: 75&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>1</td><td>1</td><td>9.09</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/246#issuecomment-2751770512\" target=\"_blank\" rel=\"noopener\">@Hephaestus-V To start working on a task, you should either use &hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.4</td><td>2</td><td>1.92</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/246#issuecomment-2752125113\" target=\"_blank\" rel=\"noopener\">@Hephaestus-V The &#96;wallet&#96; plugin seems to have been del&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.872</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#discussion_r2015969993\" target=\"_blank\" rel=\"noopener\">Could you create related tests?</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>2</td><td>0.966</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#discussion_r2016669002\" target=\"_blank\" rel=\"noopener\">What you can do that's much simpler is that you can throw an err&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.9</td><td>2</td><td>3.654</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#discussion_r2016950865\" target=\"_blank\" rel=\"noopener\">You should be able to achieve the same result just by throwing t&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.496</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2753045099\" target=\"_blank\" rel=\"noopener\">Thank you for your first contribution.I don't think that is the&hellip;</a></h6></td><td><details><summary>2.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 61&#13;  wordValue: 0.1&#13;  result: 2.53&#13;</pre></details></td><td>0.9</td><td>2</td><td>5.706</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2753341771\" target=\"_blank\" rel=\"noopener\">An explicit &#96;Price: 0 USD&#96; is usually set for a task tag&hellip;</a></h6></td><td><details><summary>2.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0.8</td><td>2</td><td>4.576</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2753419166\" target=\"_blank\" rel=\"noopener\">What you can do is &#96;bun run server&#96; that will start you &hellip;</a></h6></td><td><details><summary>4.18</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 40&#13;  wordValue: 0.1&#13;  result: 2.18&#13;</pre></details></td><td>0.7</td><td>2</td><td>7.28</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2757207769\" target=\"_blank\" rel=\"noopener\">It is okay to manually add the labels to an issue if you want to&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.5</td><td>2</td><td>1.64</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2757411036\" target=\"_blank\" rel=\"noopener\">I tested it, and it works fine, however it creates another probl&hellip;</a></h6></td><td><details><summary>2.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 53&#13;  wordValue: 0.1&#13;  result: 2.43&#13;</pre></details></td><td>0.9</td><td>2</td><td>5.526</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2757486777\" target=\"_blank\" rel=\"noopener\">@0x4007 This would happen for any task marked as \"Regression\", s&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.156</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2757535260\" target=\"_blank\" rel=\"noopener\">@Hephaestus-V Sounds good to me.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.444</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2757590984\" target=\"_blank\" rel=\"noopener\">@Hephaestus-V You can create an issue within your own repo, and &hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.6</td><td>2</td><td>2.172</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2758126708\" target=\"_blank\" rel=\"noopener\">Current QA: https://github.com/Meniole/text-conversation-rewards&hellip;</a></h6></td><td><details><summary>3.15</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.15&#13;</pre></details></td><td>0.9</td><td>2</td><td>7.236</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2760238717\" target=\"_blank\" rel=\"noopener\">Latest QA: https://github.com/Meniole/text-conversation-rewards/&hellip;</a></h6></td><td><details><summary>2.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.8</td><td>2</td><td>5.12</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2761074292\" target=\"_blank\" rel=\"noopener\">I tried running the tests and it was fine. I would advise to:-&hellip;</a></h6></td><td><details><summary>2.5</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 4&#13;  result: 0.4&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>0.7</td><td>2</td><td>4.186</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2761117936\" target=\"_blank\" rel=\"noopener\">None of these should be required, except &#96;LOG_LEVEL&#96; whe&hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.5</td><td>2</td><td>2.46</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2761447228\" target=\"_blank\" rel=\"noopener\">I didn't realize that you would not be able to see the results a&hellip;</a></h6></td><td><details><summary>2.37</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 49&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>0.6</td><td>2</td><td>3.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2763272872\" target=\"_blank\" rel=\"noopener\">For the two last errors you should be able to fix these by using&hellip;</a></h6></td><td><details><summary>3.47</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 56&#13;  wordValue: 0.1&#13;  result: 2.47&#13;</pre></details></td><td>0.7</td><td>2</td><td>6.132</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2767872869\" target=\"_blank\" rel=\"noopener\">Latest QA:https://github.com/Meniole/text-conversation-rewards&hellip;</a></h6></td><td><details><summary>1.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.8</td><td>2</td><td>3.488</td></tr></tbody></table></details>"},"0x4007":{"total":2.28,"userId":4975670,"comments":[{"id":2757417107,"content":"I think it's a strange edge case that a funded task has 0 rewards across the board. Catch and throw a warning.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2757417107","commentType":"PULL_COLLABORATOR","score":{"reward":2.28,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":99.52771739130438,"syllables":26,"sentences":2,"score":0.6047228260869563},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 2.28 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>2.28</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/327#issuecomment-2757417107\" target=\"_blank\" rel=\"noopener\">I think it's a strange edge case that a funded task has 0 reward&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.6</td><td>2</td><td>2.28</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_84.json","json":{"gentlementlegen":{"userId":9807008,"total":104.51,"task":{"reward":100,"multiplier":1},"comments":[{"id":2473516333,"content":"```diff\r\n! Failed to run comment evaluation. SyntaxError: Unexpected end of JSON input\r\n```\r\n_Originally posted by @ubiquityos[bot] in https://github.com/ubiquity/cloudflare-deploy-action/issues/6#issuecomment-2296724391_\r\nFirst suspect seem to be the answer from OpenAI that seems to be an invalid [JSON output](https://github.com/ubiquibot/conversation-rewards/actions/runs/10455351522/job/28950093653#step:7:113).","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/84","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.51,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":42.77411764705883,"syllables":59,"sentences":2,"score":0.8277411764705883},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 104.51 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.51</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/84\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;diff! Failed to run comment evaluation. SyntaxE&hellip;</a></h6></td><td><details><summary>3.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>1</td><td>1</td><td>4.51</td></tr></tbody></table></details>"},"0x4007":{"total":28.191,"userId":4975670,"comments":[{"id":2248488989,"content":"Definitely use `gpt-4o-2024-08-06`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#pullrequestreview-2248488989","commentType":"PULL_COLLABORATOR","score":{"reward":0.4,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":-48.994999999999976,"syllables":6,"sentences":1,"score":0},"multiplier":1,"relevance":0.8}},{"id":1722659595,"content":"You need to make sure to also include a buffer on top because the amount of tokens that you're sending in is always less than what's being sent out. \nWhat's being sent out has additional tokens that counts against the quota of the whole transaction. Basically the json response itself costs additional tokens.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#discussion_r1722659595","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,11 +113,18 @@ export class ContentEvaluatorModule implements Module {\n     return commentsWithScore;\n   }\n \n+  async _calculateMaxTokens(prompt: string, totalTokenLimit: number = 4096) {\n+    const tokenizer: Tiktoken = encodingForModel(\"gpt-4o\");\n+    const inputTokens = tokenizer.encode(prompt).length;\n+    return Math.max(totalTokenLimit - inputTokens, 0);\n+  }\n+\n   async _evaluateComments(\n     specification: string,\n     comments: { id: number; comment: string }[]\n   ): Promise<RelevancesByOpenAi> {\n     const prompt = this._generatePrompt(specification, comments);\n+    const maxTokens = await this._calculateMaxTokens(prompt);","score":{"reward":5.724,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":56,"wordValue":0.1,"result":2.47},"readability":{"fleschKincaid":64.00976190476193,"syllables":82,"sentences":3,"score":0.9599023809523807},"multiplier":1,"relevance":0.9}},{"id":1722709479,"content":"If I am understanding your code correctly, this reminds me of my first go-around at the implementation. If I recall correctly: I counted the tokens of what I was sending out. However, when you tell ChatGPT that we are using 1000 tokens max, when it replies, its response also counts against the token limit. We can estimate how many tokens will be added to its response, but I don't recall a way to know exactly how much. \r\nRemember that billing works for what comes out as well, not just what goes in, which is why these limits make sense for most use cases for ChatGPT. You will need to estimate how many extra tokens will be included in the output, possibly by counting the amount of comments and tokenizing a dummy array.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#discussion_r1722709479","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,11 +113,18 @@ export class ContentEvaluatorModule implements Module {\n     return commentsWithScore;\n   }\n \n+  async _calculateMaxTokens(prompt: string, totalTokenLimit: number = 4096) {\n+    const tokenizer: Tiktoken = encodingForModel(\"gpt-4o\");\n+    const inputTokens = tokenizer.encode(prompt).length;\n+    return Math.max(totalTokenLimit - inputTokens, 0);\n+  }\n+\n   async _evaluateComments(\n     specification: string,\n     comments: { id: number; comment: string }[]\n   ): Promise<RelevancesByOpenAi> {\n     const prompt = this._generatePrompt(specification, comments);\n+    const maxTokens = await this._calculateMaxTokens(prompt);","score":{"reward":5.202,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":134,"wordValue":0.1,"result":2.38},"readability":{"fleschKincaid":64.84278606965177,"syllables":189,"sentences":6,"score":0.9515721393034824},"multiplier":1,"relevance":0.85}},{"id":1722721691,"content":"My concern is briefly discussed [here](https://community.openai.com/t/can-i-set-max-tokens-for-chatgpt-turbo/81207/13). It has been a long time since I worked on this problem, and the models are always evolving so I am not confident in my knowledge. However if we set max length, perhaps the model will try to pad the reply to fill the full response. I would be most confident if we pre-calculate the token length by encoding a dummy array, unless there is definitive proof otherwise that setting max length will not cause problems. \r\nI realize I didn't quite finish explaining clearly, but we start with 1000 in this example, and the result might be 1200 (200 in the response.)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#discussion_r1722721691","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,11 +113,18 @@ export class ContentEvaluatorModule implements Module {\n     return commentsWithScore;\n   }\n \n+  async _calculateMaxTokens(prompt: string, totalTokenLimit: number = 4096) {\n+    const tokenizer: Tiktoken = encodingForModel(\"gpt-4o\");\n+    const inputTokens = tokenizer.encode(prompt).length;\n+    return Math.max(totalTokenLimit - inputTokens, 0);\n+  }\n+\n   async _evaluateComments(\n     specification: string,\n     comments: { id: number; comment: string }[]\n   ): Promise<RelevancesByOpenAi> {\n     const prompt = this._generatePrompt(specification, comments);\n+    const maxTokens = await this._calculateMaxTokens(prompt);","score":{"reward":7.232,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":110,"wordValue":0.1,"result":2.56},"readability":{"fleschKincaid":70.55575757575761,"syllables":153,"sentences":6,"score":0.8944424242424239},"multiplier":1,"relevance":0.8}},{"id":1722835167,"content":"Generate a dummy response and encode it to estimate the length of the response. I am not sure how many max significant digits exist per element in the array, but you should estimate with a worse case scenario.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#discussion_r1722835167","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,11 +113,18 @@ export class ContentEvaluatorModule implements Module {\n     return commentsWithScore;\n   }\n \n+  async _calculateMaxTokens(prompt: string, totalTokenLimit: number = 4096) {\n+    const tokenizer: Tiktoken = encodingForModel(\"gpt-4o\");\n+    const inputTokens = tokenizer.encode(prompt).length;\n+    return Math.max(totalTokenLimit - inputTokens, 0);\n+  }\n+\n   async _evaluateComments(\n     specification: string,\n     comments: { id: number; comment: string }[]\n   ): Promise<RelevancesByOpenAi> {\n     const prompt = this._generatePrompt(specification, comments);\n+    const maxTokens = await this._calculateMaxTokens(prompt);","score":{"reward":4.11,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":38,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":56.19736842105266,"syllables":59,"sentences":2,"score":0.9619736842105265},"multiplier":1,"relevance":0.75}},{"id":1723607994,"content":"```suggestion\r\n  _calculateMaxTokens(prompt: string, totalTokenLimit: number = 16384) {\r\n```\r\nModel | Description | Context window | Max output tokens | Training data\r\n-- | -- | -- | -- | --\r\ngpt-4o-2024-08-06 | Latest snapshot that supports Structured Outputs | 128,000 tokens | 16,384 tokens | Up to Oct 2023","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#discussion_r1723607994","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,11 +113,28 @@ export class ContentEvaluatorModule implements Module {\n     return commentsWithScore;\n   }\n \n+  /**\n+   * Will try to predict the maximum of tokens expected, to a maximum of totalTokenLimit.\n+   */\n+  _calculateMaxTokens(prompt: string, totalTokenLimit: number = 4096) {","score":{"reward":4.503,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":46.66500000000002,"syllables":46,"sentences":1,"score":0.8666500000000003},"multiplier":1,"relevance":0.95}},{"id":1723608335,"content":"```suggestion\r\n      model: \"gpt-4o-2024-08-06\",\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#discussion_r1723608335","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -112,11 +113,28 @@ export class ContentEvaluatorModule implements Module {\n     return commentsWithScore;\n   }\n \n+  /**\n+   * Will try to predict the maximum of tokens expected, to a maximum of totalTokenLimit.\n+   */\n+  _calculateMaxTokens(prompt: string, totalTokenLimit: number = 4096) {\n+    const tokenizer: Tiktoken = encodingForModel(\"gpt-4o\");\n+    const inputTokens = tokenizer.encode(prompt).length;\n+    return Math.min(inputTokens, totalTokenLimit);\n+  }\n+\n+  _generateDummyResponse(comments: { id: number; comment: string }[]) {\n+    return comments.reduce<Record<string, number>>((acc, curr) => {\n+      return { ...acc, [curr.id]: 0.5 };\n+    }, {});\n+  }\n+\n   async _evaluateComments(\n     specification: string,\n     comments: { id: number; comment: string }[]\n   ): Promise<RelevancesByOpenAi> {\n     const prompt = this._generatePrompt(specification, comments);\n+    const dummyResponse = JSON.stringify(this._generateDummyResponse(comments), null, 2);\n+    const maxTokens = this._calculateMaxTokens(dummyResponse);\n \n     const response: OpenAI.Chat.ChatCompletion = await this._openAi.chat.completions.create({\n       model: \"gpt-4o\",","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2246928670,"effect":{"addition":18,"deletion":9},"reward":0.54,"priority":2},{"reviewId":2248488989,"effect":{"addition":13,"deletion":3},"reward":0.32,"priority":2},{"reviewId":2248506062,"effect":{"addition":4,"deletion":4},"reward":0.16,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 28.191 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>1.02</td></tr><tr><td>Review</td><td>Comment</td><td>7</td><td>27.171</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87\" target=\"_blank\" rel=\"noopener\">#87</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+18 -9</td><td>2</td><td>0.54</td></tr><tr><td>+13 -3</td><td>2</td><td>0.32</td></tr><tr><td>+4 -4</td><td>2</td><td>0.16</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#pullrequestreview-2248488989\" target=\"_blank\" rel=\"noopener\">Definitely use &#96;gpt-4o-2024-08-06&#96;</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.8</td><td>2</td><td>0.4</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#discussion_r1722659595\" target=\"_blank\" rel=\"noopener\">You need to make sure to also include a buffer on top because th&hellip;</a></h6></td><td><details><summary>2.47</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 56&#13;  wordValue: 0.1&#13;  result: 2.47&#13;</pre></details></td><td>0.9</td><td>2</td><td>5.724</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#discussion_r1722709479\" target=\"_blank\" rel=\"noopener\">If I am understanding your code correctly, this reminds me of my&hellip;</a></h6></td><td><details><summary>2.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 134&#13;  wordValue: 0.1&#13;  result: 2.38&#13;</pre></details></td><td>0.85</td><td>2</td><td>5.202</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#discussion_r1722721691\" target=\"_blank\" rel=\"noopener\">My concern is briefly discussed [here](https://community.openai.&hellip;</a></h6></td><td><details><summary>3.56</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 110&#13;  wordValue: 0.1&#13;  result: 2.56&#13;</pre></details></td><td>0.8</td><td>2</td><td>7.232</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#discussion_r1722835167\" target=\"_blank\" rel=\"noopener\">Generate a dummy response and encode it to estimate the length o&hellip;</a></h6></td><td><details><summary>2.13</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 38&#13;  wordValue: 0.1&#13;  result: 2.13&#13;</pre></details></td><td>0.75</td><td>2</td><td>4.11</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#discussion_r1723607994\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion_calculateMaxTokens(prompt: string,&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.95</td><td>2</td><td>4.503</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#discussion_r1723608335\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionmodel: \"gpt-4o-2024-08-06\",&#&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>2</td><td>0</td></tr></tbody></table></details>"},"Keyrxng":{"total":1.992,"userId":106303466,"comments":[{"id":2299776199,"content":"I'm certain that the way they operate is the base model version is always the most up to date. I.E `gpt-4o` is whatever the latest version is. This was the case when I was working on AI tasks a while back and the docs confirm this is still the case but it's been a while and this may be outdated.\r\ngpt-4o, gpt-4o-mini, gpt-4-turbo, gpt-4, and gpt-3.5-turbo point to their respective latest model version.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#issuecomment-2299776199","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.296,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":84,"wordValue":0.1,"result":2.64},"readability":{"fleschKincaid":84.8607142857143,"syllables":107,"sentences":6,"score":0.7513928571428571},"multiplier":0.25,"relevance":0.8}},{"id":2300274563,"content":"I was going to also suggest using `Latest` for the package but that might be too dangerous I feel they move pretty quickly over there and break things often","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#issuecomment-2300274563","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.696,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":63.600714285714304,"syllables":38,"sentences":1,"score":0.963992857142857},"multiplier":0.25,"relevance":0.6}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 1.992 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>2</td><td>1.992</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#issuecomment-2299776199\" target=\"_blank\" rel=\"noopener\">I'm certain that the way they operate is the base model version &hellip;</a></h6></td><td><details><summary>2.64</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 84&#13;  wordValue: 0.1&#13;  result: 2.64&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.296</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/87#issuecomment-2300274563\" target=\"_blank\" rel=\"noopener\">I was going to also suggest using &#96;Latest&#96; for the packa&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.6</td><td>2</td><td>0.696</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-query_15.json","json":{"gentlementlegen":{"userId":9807008,"total":50,"task":{"reward":50,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 50 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"whilefoo":{"total":13.488,"userId":139262667,"comments":[{"id":1799430403,"content":"I think you can just export the result from `createPlugin` because it returns a Hono app instance and you can just [default export](https://hono.dev/docs/getting-started/cloudflare-workers#_2-hello-world)","url":"https://github.com/ubiquity-os-marketplace/command-query/pull/16#discussion_r1799430403","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,25 @@\n+import { createClient } from \"@supabase/supabase-js\";\n+import { createPlugin } from \"@ubiquity-os/ubiquity-os-kernel\";\n+import { ExecutionContext } from \"hono\";\n+import manifest from \"../manifest.json\";\n+import { createAdapters } from \"./adapters\";\n+import { run } from \"./run\";\n+import { SupportedEvents } from \"./types/context\";\n+import { Database } from \"./types/database\";\n+import { Env } from \"./types/env\";\n+import { PluginSettings } from \"./types/plugin-input\";\n+\n+const pluginPromise = createPlugin<PluginSettings, Env, SupportedEvents>(\n+  (context) => {\n+    const supabase = createClient<Database>(context.env.SUPABASE_URL, context.env.SUPABASE_KEY);\n+    return run({ ...context, adapters: createAdapters(supabase, context) });\n+  },\n+  // @ts-expect-error strings cannot be assigned to events\n+  manifest\n+);\n+\n+export default {\n+  async fetch(request: Request, env: Env, context: ExecutionContext) {\n+    return (await pluginPromise).fetch(request, env, context);\n+  },\n+};","score":{"reward":2.616,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":69.14136363636365,"syllables":30,"sentences":1,"score":0.9085863636363635},"multiplier":1,"relevance":0.8}},{"id":1807320786,"content":"I think it should be in the env because it's something that the plugin developer should set, not the plugin user (partner).","url":"https://github.com/ubiquity-os-marketplace/command-query/pull/16#discussion_r1807320786","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,24 +1,12 @@\n-import { EmitterWebhookEvent as WebhookEvent, EmitterWebhookEventName as WebhookEventName } from \"@octokit/webhooks\";\n-import { StandardValidator } from \"typebox-validators\";\n-import { SupportedEvents } from \"./context\";\n import { StaticDecode, Type as T } from \"@sinclair/typebox\";\n-\n-export interface PluginInputs<T extends WebhookEventName = SupportedEvents> {\n-  stateId: string;\n-  eventName: T;\n-  eventPayload: WebhookEvent<T>[\"payload\"];\n-  settings: CommandQuerySettings;\n-  authToken: string;\n-  ref: string;\n-}\n+import { LOG_LEVEL } from \"@ubiquity-os/ubiquity-os-logger\";\n \n export const pluginSettingsSchema = T.Object({\n   /**\n    * Allows any user to query anyone else. If false, only org members can query others.\n    */\n-  allowPublicQuery: T.Boolean({ default: true }),\n+  allowPublicQuery: T.Optional(T.Boolean({ default: true })),\n+  logLevel: T.Optional(T.Enum(LOG_LEVEL, { default: LOG_LEVEL.INFO })),","score":{"reward":1.872,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":62.10739130434784,"syllables":33,"sentences":1,"score":0.9789260869565216},"multiplier":1,"relevance":0.9}},{"id":2411129341,"content":"I will take a look","url":"https://github.com/ubiquity-os-marketplace/command-query/pull/16#issuecomment-2411129341","commentType":"PULL_COLLABORATOR","score":{"reward":0.069,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}},{"id":2412032993,"content":"@gentlementlegen are you running it with your own kernel or production kernel? if you are using your own then you need to set custom public key in the `createPlugin` options parameter","url":"https://github.com/ubiquity-os-marketplace/command-query/pull/16#issuecomment-2412032993","commentType":"PULL_COLLABORATOR","score":{"reward":1.701,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":61.890000000000015,"syllables":46,"sentences":2,"score":0.9810999999999999},"multiplier":1,"relevance":0.7}},{"id":2413026555,"content":"The Hono server automatically reads the env from Cloudflare fetch or from `process.env` if it's run in Node. \r\nI didn't even notice that I'm validating the env from the `process.env` instead of from Hono context.","url":"https://github.com/ubiquity-os-marketplace/command-query/pull/16#issuecomment-2413026555","commentType":"PULL_COLLABORATOR","score":{"reward":2.12,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":66.36500000000001,"syllables":52,"sentences":2,"score":0.9363499999999999},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2366509892,"effect":{"addition":169,"deletion":222},"reward":3.91,"priority":1},{"reviewId":2379424628,"effect":{"addition":68,"deletion":52},"reward":1.2,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-query/pull/16"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 13.488 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>5.11</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>8.378</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-query/pull/16\" target=\"_blank\" rel=\"noopener\">#16</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+169 -222</td><td>1</td><td>3.91</td></tr><tr><td>+68 -52</td><td>1</td><td>1.2</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-query/pull/16#discussion_r1799430403\" target=\"_blank\" rel=\"noopener\">I think you can just export the result from &#96;createPlugin&#9&hellip;</a></h6></td><td><details><summary>2.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.616</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-query/pull/16#discussion_r1807320786\" target=\"_blank\" rel=\"noopener\">I think it should be in the env because it's something that the &hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.9</td><td>1</td><td>1.872</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-query/pull/16#issuecomment-2411129341\" target=\"_blank\" rel=\"noopener\">I will take a look</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.069</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-query/pull/16#issuecomment-2412032993\" target=\"_blank\" rel=\"noopener\">@gentlementlegen are you running it with your own kernel or prod&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.701</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-query/pull/16#issuecomment-2413026555\" target=\"_blank\" rel=\"noopener\">The Hono server automatically reads the env from Cloudflare fetc&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.12</td></tr></tbody></table></details>"},"0x4007":{"total":7.766,"userId":4975670,"comments":[{"id":1799447519,"content":"```suggestion\r\n      \"ubiquity:example\": \"/query @UbiquityOS\",\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-query/pull/16#discussion_r1799447519","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,9 +1,7 @@\n {\n   \"name\": \"Query user\",\n   \"description\": \"Queries a user and retrieves its related information, such as the wallet, the label access control, or the current XP.\",\n-  \"ubiquity:listeners\": [\n-    \"issue_comment.created\"\n-  ],\n+  \"ubiquity:listeners\": [\"issue_comment.created\"],\n   \"commands\": {\n     \"query\": {\n       \"ubiquity:example\": \"/query @ubiquibot\",","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":1,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.3}},{"id":1807065118,"content":"Is this handled elsewhere?","url":"https://github.com/ubiquity-os-marketplace/command-query/pull/16#discussion_r1807065118","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -11,48 +11,4 @@ jobs:\n     permissions: write-all\n \n     steps:\n-      - uses: actions/checkout@v4\n-\n-      - name: Setup node\n-        uses: actions/setup-node@v4\n-        with:\n-          node-version: \"20.10.0\"\n-\n-      - name: Install deps and run configuration update\n-        run: |\n-          yarn install --immutable --immutable-cache --check-cache\n-          yarn tsc --noCheck --project tsconfig.json\n-\n-      - name: Update manifest configuration using GitHub Script\n-        uses: actions/github-script@v7\n-        with:\n-          script: |\n-            const fs = require('fs');\n-            const path = require('path');\n-\n-            const { pluginSettingsSchema } = require('./src/types/plugin-input');\n-\n-            const manifestPath = path.resolve(\"${{ github.workspace }}\", './manifest.json');\n-            const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));\n-\n-            const configuration = JSON.stringify(pluginSettingsSchema);\n-\n-            manifest[\"configuration\"] = JSON.parse(configuration);\n-\n-            const updatedManifest = JSON.stringify(manifest, null, 2)\n-            console.log('Updated manifest:', updatedManifest);\n-            fs.writeFileSync(manifestPath, updatedManifest);\n-\n-      - name: Commit and Push generated types","score":{"reward":0.385,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.7}},{"id":1807065807,"content":"log level doesn't seem like a typical config option. This should be handled in the secrets/env of the plugin instead.","url":"https://github.com/ubiquity-os-marketplace/command-query/pull/16#discussion_r1807065807","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,24 +1,12 @@\n-import { EmitterWebhookEvent as WebhookEvent, EmitterWebhookEventName as WebhookEventName } from \"@octokit/webhooks\";\n-import { StandardValidator } from \"typebox-validators\";\n-import { SupportedEvents } from \"./context\";\n import { StaticDecode, Type as T } from \"@sinclair/typebox\";\n-\n-export interface PluginInputs<T extends WebhookEventName = SupportedEvents> {\n-  stateId: string;\n-  eventName: T;\n-  eventPayload: WebhookEvent<T>[\"payload\"];\n-  settings: CommandQuerySettings;\n-  authToken: string;\n-  ref: string;\n-}\n+import { LOG_LEVEL } from \"@ubiquity-os/ubiquity-os-logger\";\n \n export const pluginSettingsSchema = T.Object({\n   /**\n    * Allows any user to query anyone else. If false, only org members can query others.\n    */\n-  allowPublicQuery: T.Boolean({ default: true }),\n+  allowPublicQuery: T.Optional(T.Boolean({ default: true })),\n+  logLevel: T.Optional(T.Enum(LOG_LEVEL, { default: LOG_LEVEL.INFO })),","score":{"reward":1.755,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":80.30636363636367,"syllables":30,"sentences":2,"score":0.7969363636363633},"multiplier":1,"relevance":0.9}},{"id":1807066273,"content":"What do you need nodejs compatibility for?","url":"https://github.com/ubiquity-os-marketplace/command-query/pull/16#discussion_r1807066273","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,6 +1,9 @@\n name = \"command-query-user\"\n-main = \"src/worker.ts\"\n-compatibility_date = \"2024-01-01\"\n-node_compat = true\n+main = \"src/index.ts\"\n+compatibility_date = \"2024-09-24\"\n+compatibility_flags = [ \"nodejs_compat\" ]","score":{"reward":0.516,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":42.61571428571432,"syllables":13,"sentences":1,"score":0.8261571428571431},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2366539768,"effect":{"addition":169,"deletion":222},"reward":3.91,"priority":1},{"reviewId":2379041450,"effect":{"addition":68,"deletion":52},"reward":1.2,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-query/pull/16"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 7.766 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>5.11</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>2.656</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-query/pull/16\" target=\"_blank\" rel=\"noopener\">#16</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+169 -222</td><td>1</td><td>3.91</td></tr><tr><td>+68 -52</td><td>1</td><td>1.2</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-query/pull/16#discussion_r1799447519\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion\"ubiquity:example\": \"/query @Ub&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.3</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-query/pull/16#discussion_r1807065118\" target=\"_blank\" rel=\"noopener\">Is this handled elsewhere?</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.385</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-query/pull/16#discussion_r1807065807\" target=\"_blank\" rel=\"noopener\">log level doesn't seem like a typical config option. This should&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.9</td><td>1</td><td>1.755</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-query/pull/16#discussion_r1807066273\" target=\"_blank\" rel=\"noopener\">What do you need nodejs compatibility for?</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.516</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_313.json","json":{"gentlementlegen":{"userId":9807008,"total":20.09,"task":{"reward":12,"multiplier":1},"comments":[{"id":2932577253,"content":"_Originally posted by @ubiquity-os in [#173](https://github.com/ubiquity/business-development/issues/173#issuecomment-2737304556)_\n## What happened\nThe run crashed when evaluating URLs for the final result.\n## What was expected\nURLs should not crash the run if they are malformed.\n## How to reproduce\nRun the plugin against the aforementioned issue.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/313","commentType":"ISSUE_SPECIFICATION","score":{"reward":8.09,"formatting":{"content":{"p":{"score":0,"elementCount":4},"em":{"score":0,"elementCount":1},"h2":{"score":1,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":4},"priority":1,"words":{"wordCount":42,"wordValue":0.1,"result":2.23},"readability":{"fleschKincaid":59.68214285714288,"syllables":66,"sentences":3,"score":0.9968214285714287},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 20.09 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>12</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>8.09</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/313\" target=\"_blank\" rel=\"noopener\">_Originally posted by @ubiquity-os in [#173](https://github.com/&hellip;</a></h6></td><td><details><summary>6.23</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    h2:&#13;      score: 1&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 4&#13;regex:&#13;  wordCount: 42&#13;  wordValue: 0.1&#13;  result: 2.23&#13;</pre></details></td><td>1</td><td>1</td><td>8.09</td></tr></tbody></table></details>"},"0x4007":{"total":5.502,"userId":4975670,"comments":[{"id":2738954630,"content":"ubq.fi is an \"invalid url\"? https://github.com/ubiquity-os-marketplace/text-conversation-rewards/actions/runs/13951727256/job/39052734047#step:3:1287","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/313#issuecomment-2738954630","commentType":"ISSUE_COLLABORATOR","score":{"reward":3.69,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":68.58135869565217,"syllables":36,"sentences":4,"score":0.9141864130434783},"multiplier":1,"relevance":0.9}},{"id":2741371563,"content":"Use open router secret \nI deleted open ai secret","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/313#issuecomment-2741371563","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.512,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":56.70000000000002,"syllables":15,"sentences":1,"score":0.9670000000000002},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2701100419,"effect":{"addition":13,"deletion":2},"reward":0.3,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/314"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 5.502 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.3</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>5.202</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/314\" target=\"_blank\" rel=\"noopener\">#314</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+13 -2</td><td>2</td><td>0.3</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/313#issuecomment-2738954630\" target=\"_blank\" rel=\"noopener\">ubq.fi is an \"invalid url\"? https://github.com/ubiquity-os-marke&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.9</td><td>2</td><td>3.69</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/313#issuecomment-2741371563\" target=\"_blank\" rel=\"noopener\">Use open router secret I deleted open ai secret</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.512</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_69.json","json":{"gentlementlegen":{"userId":9807008,"total":32.387,"task":{"reward":25,"multiplier":1},"comments":[{"id":2441925924,"content":"It is trying to forward it but what it received is not a valid command like `/label`. Plugins react only to certain events / inputs.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2441925924","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.05,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":77.45815217391308,"syllables":32,"sentences":2,"score":0.8254184782608692},"multiplier":0.25,"relevance":0.1}},{"id":2442139350,"content":"In the configuration file you gave, you chained plugins so it won't. You need to change it to something like\r\n```yaml\r\nplugins:\r\n  - uses:\r\n    - plugin: http://127.0.0.1:4000\r\n      with:\r\n        labels:\r\n          time:\r\n            - \"Time: <15 Minutes\"\r\n            - \"Time: <1 Hour\"\r\n            - \"Time: <2 Hours\"\r\n            - \"Time: <4 Hours\"\r\n            - \"Time: <1 Day\"\r\n            - \"Time: <1 Week\"\r\n            - \"Time: <2 Weeks\"\r\n            - \"Time: <1 Month\"\r\n          priority:\r\n            - \"Priority: 1 (Normal)\"\r\n            - \"Priority: 2 (Medium)\"\r\n            - \"Priority: 3 (High)\"\r\n            - \"Priority: 4 (Urgent)\"\r\n            - \"Priority: 5 (Emergency)\"\r\n        basePriceMultiplier: 2\r\n        publicAccessControl:\r\n          setLabel: true\r\n          fundExternalClosedIssue: false\r\n  -  uses:\r\n    - plugin: ishowvel/daemon-disqualifier:compute.yml@testing\r\n      with:\r\n        disqualification: \"2 minutes\"\r\n        warning: \"1 minutes\"\r\n        watch:\r\n          optOut:\r\n            - \"repoName\"\r\n            - \"repoName2\"\r\n        eventWhitelist:\r\n          - \"review_requested\"\r\n          - \"ready_for_review\"\r\n          - \"commented\"\r\n          - \"committed\"\r\n  - uses:\r\n    - plugin: http://localhost:4001 # or the URL where the plugin is hosted\r\n      name: start-stop\r\n      id: start-stop-command\r\n      with:\r\n        reviewDelayTolerance: \"3 Days\"\r\n        taskStaleTimeoutDuration: \"30 Days\"\r\n        maxConcurrentTasks: # Default concurrent task limits per role.\r\n          member: 5\r\n          contributor: 3\r\n        startRequiresWallet: true # default is true\r\n        emptyWalletText: \"Please set your wallet address with the /wallet command first and try again.\"\r\n        rolesWithReviewAuthority: [\"MEMBER\", \"OWNER\"]\r\n```\r\nso every plugin is called individually.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2442139350","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.058,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":61.53250000000003,"syllables":42,"sentences":2,"score":0.9846749999999997},"multiplier":0.25,"relevance":0.1}},{"id":2452908011,"content":"It should not, otherwise it means that users can also assign themselves again after disqualification.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2452908011","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.333,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":33.690000000000026,"syllables":28,"sentences":1,"score":0.7369000000000002},"multiplier":0.25,"relevance":0.9}},{"id":2452935803,"content":"No I mean that if no code was changed, it should not allow re-assign with the current implementation.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2452935803","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.36,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":71.78157894736843,"syllables":26,"sentences":1,"score":0.8821842105263157},"multiplier":0.25,"relevance":0.8}},{"id":2463637909,"content":"The `BOT_USER_ID` should match the id of the app your installed in your org @Keyrxng rfc\r\nThis is still relevant since this line is in the codebase:\r\nhttps://github.com/ubiquity-os-marketplace/command-start-stop/blob/00c8675304106cab256c683d09782382c6e0b478/src/handlers/shared/start.ts#L181","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2463637909","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.595,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":80.14248062015508,"syllables":57,"sentences":3,"score":0.7985751937984492},"multiplier":0.25,"relevance":0.7}},{"id":2465999933,"content":"I think it is safe to assume that a bot un-assign action is from our bot, and would cover both cases.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2465999933","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.384,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":84.52318181818181,"syllables":26,"sentences":1,"score":0.7547681818181818},"multiplier":0.25,"relevance":0.8}},{"id":2466535052,"content":"@ariesgun i think you should check for the user type to be a bot instead.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2466535052","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.333,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":84.45000000000003,"syllables":19,"sentences":1,"score":0.7554999999999997},"multiplier":0.25,"relevance":0.9}},{"id":2253034107,"content":"Resolves #69\r\nQA: https://github.com/Meniole/command-start-stop/issues/51\r\n## What are the changes\r\nThe bot was not behaving properly although the codebase was correct, it was in fact only working in the production version because basically the `BOT_USER_ID` was not set properly for the development` version, which I corrected in the environment settings in this repo.\r\nBut reading the codebase I found that you could abuse the system by stacking `/stop` comments which would nullify bot un-assignment count and let you start again. So I changed the logic instead to check by assignment periods and determine what was the reason of un-assign: bot, user, or admin. Otherwise, logic remains unchanged.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/113","commentType":"PULL_SPECIFICATION","score":{"reward":5.274,"formatting":{"content":{"p":{"score":0,"elementCount":4},"h2":{"score":1,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":2},"priority":1,"words":{"wordCount":104,"wordValue":0.1,"result":2.59},"readability":{"fleschKincaid":52.12962831858411,"syllables":176,"sentences":5,"score":0.9212962831858411},"multiplier":1,"relevance":0.9}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 32.387 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr><tr><td>Issue</td><td>Comment</td><td>7</td><td>2.113</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>5.274</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2441925924\" target=\"_blank\" rel=\"noopener\">It is trying to forward it but what it received is not a valid c&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.05</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2442139350\" target=\"_blank\" rel=\"noopener\">In the configuration file you gave, you chained plugins so it wo&hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.058</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2452908011\" target=\"_blank\" rel=\"noopener\">It should not, otherwise it means that users can also assign the&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.333</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2452935803\" target=\"_blank\" rel=\"noopener\">No I mean that if no code was changed, it should not allow re-as&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.36</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2463637909\" target=\"_blank\" rel=\"noopener\">The &#96;BOT_USER_ID&#96; should match the id of the app your in&hellip;</a></h6></td><td><details><summary>2.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.595</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2465999933\" target=\"_blank\" rel=\"noopener\">I think it is safe to assume that a bot un-assign action is from&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.384</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2466535052\" target=\"_blank\" rel=\"noopener\">@ariesgun i think you should check for the user type to be a bot&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.333</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/113\" target=\"_blank\" rel=\"noopener\">Resolves #69QA: https://github.com/Meniole/command-start-stop/&hellip;</a></h6></td><td><details><summary>4.59</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    h2:&#13;      score: 1&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 2&#13;regex:&#13;  wordCount: 104&#13;  wordValue: 0.1&#13;  result: 2.59&#13;</pre></details></td><td>0.9</td><td>1</td><td>5.274</td></tr></tbody></table></details>"},"ishowvel":{"total":0,"userId":186167176,"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/113"}]},"0x4007":{"total":7.534,"userId":4975670,"comments":[{"id":2441800325,"content":"My best guess is that you have a formatting problem in your yml config. Sometimes it's difficult to get the indentations perfectly.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2441800325","commentType":"ISSUE_AUTHOR","score":{"reward":0.832,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":62.74510869565219,"syllables":36,"sentences":2,"score":0.9725489130434781},"multiplier":1,"relevance":0.4}},{"id":2452453845,"content":"Show me the conversation/QA on GitHub so I have context on your problem","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2452453845","commentType":"ISSUE_AUTHOR","score":{"reward":0.441,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":71.76785714285715,"syllables":20,"sentences":1,"score":0.8823214285714285},"multiplier":1,"relevance":0.3}},{"id":2452904673,"content":"It looks like it works. @gentlementlegen rfc","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2452904673","commentType":"ISSUE_AUTHOR","score":{"reward":0.44,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":70.33964285714288,"syllables":11,"sentences":2,"score":0.8966035714285713},"multiplier":1,"relevance":0.5}},{"id":2452912384,"content":"Disqualification and self unassignment are different things","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2452912384","commentType":"ISSUE_AUTHOR","score":{"reward":0.621,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":-5.727142857142809,"syllables":17,"sentences":1,"score":0},"multiplier":1,"relevance":0.9}},{"id":2616924778,"content":"example \nhttps://github.com/ubiquity/ts-template/issues/61#issuecomment-2440188077\nCalling stop should not penalize. If they called stop they should be able to reassign in the future becauss its not a disqualification.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.41,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":53.50225490196081,"syllables":57,"sentences":3,"score":0.9350225490196081},"multiplier":1,"relevance":1}}],"reviewRewards":[{"reviews":[{"reviewId":2524861001,"effect":{"addition":90,"deletion":89},"reward":1.79,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/113"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 7.534 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>1.79</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.41</td></tr><tr><td>Issue</td><td>Comment</td><td>4</td><td>2.334</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/113\" target=\"_blank\" rel=\"noopener\">#113</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+90 -89</td><td>1</td><td>1.79</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69\" target=\"_blank\" rel=\"noopener\">example https://github.com/ubiquity/ts-template/issues/61#issue&hellip;</a></h6></td><td><details><summary>2.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>1</td><td>1</td><td>3.41</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2441800325\" target=\"_blank\" rel=\"noopener\">My best guess is that you have a formatting problem in your yml &hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.832</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2452453845\" target=\"_blank\" rel=\"noopener\">Show me the conversation/QA on GitHub so I have context on your &hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.441</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2452904673\" target=\"_blank\" rel=\"noopener\">It looks like it works. @gentlementlegen rfc</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.44</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2452912384\" target=\"_blank\" rel=\"noopener\">Disqualification and self unassignment are different things</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.621</td></tr></tbody></table></details>"},"ariesgun":{"total":1.971,"userId":10436502,"comments":[{"id":2465466306,"content":"Cannot assign the issue to me anymore.\r\nNot sure if this is what is used in the code, but shouldn't it be \r\n```\r\nrest.user.getByUsername(\"ubiquity-os-beta[bot]\").data.id\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2465466306","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.432,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":92.17119565217394,"syllables":28,"sentences":2,"score":0.6782880434782607},"multiplier":0.25,"relevance":0.9}},{"id":2465831556,"content":"I see.. so for this issue, is it possible to verify if the `BOT_USER_ID` in `dev.vars` is set properly or not?\r\nIf I look inside function, \r\nhttps://github.com/ubiquity-os-marketplace/command-start-stop/blob/00c8675304106cab256c683d09782382c6e0b478/src/handlers/shared/start.ts#L181, \r\nthe most probable root cause is the `event.actorId !== BOT_USER_ID`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2465831556","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.819,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":77.24100000000001,"syllables":68,"sentences":5,"score":0.8275899999999998},"multiplier":0.25,"relevance":0.9}},{"id":2465853715,"content":"Or just check for `[bot]` in the actorname?\r\n![image](https://github.com/user-attachments/assets/e026a8b0-a45a-4907-82b5-edfea56f0838)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2465853715","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.189,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":90.95857142857145,"syllables":9,"sentences":1,"score":0.6904142857142855},"multiplier":0.25,"relevance":0.9}},{"id":2466121080,"content":"If it is agreed to do it this way, (check name for `[bot]` I can make the changes quickly .\r\nCan you assign this task to me again?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2466121080","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.416,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":96.02461538461542,"syllables":30,"sentences":2,"score":0.6397538461538459},"multiplier":0.25,"relevance":0.8}},{"id":2487880016,"content":"@0x4007 , is it possible to start this task?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2487880016","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.115,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":92.965,"syllables":10,"sentences":1,"score":0.67035},"multiplier":0.25,"relevance":0.5}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/113"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 1.971 XP ]</a>&nbsp;</h3><h6>@ariesgun</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>5</td><td>1.971</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2465466306\" target=\"_blank\" rel=\"noopener\">Cannot assign the issue to me anymore.Not sure if this is what&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.432</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2465831556\" target=\"_blank\" rel=\"noopener\">I see.. so for this issue, is it possible to verify if the &#96;&hellip;</a></h6></td><td><details><summary>2.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.819</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2465853715\" target=\"_blank\" rel=\"noopener\">Or just check for &#96;[bot]&#96; in the actorname?![image](ht&hellip;</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.189</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2466121080\" target=\"_blank\" rel=\"noopener\">If it is agreed to do it this way, (check name for &#96;[bot]&#9&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.416</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2487880016\" target=\"_blank\" rel=\"noopener\">@0x4007 , is it possible to start this task?</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.115</td></tr></tbody></table></details>"},"Keyrxng":{"total":2.668,"userId":106303466,"comments":[{"id":2464473235,"content":"`BOT_USER_ID` === `payload.user.type === \"BOT\" && payload.user.login === \"UbiquityOS\"`\r\nIt is the literal ID of the User entity which belongs to the app. Not the `APP_ID` which is the app's identifier.\r\n`rest.user.getByUsername(\"ubiquity-os-beta\").data.id`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2464473235","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.441,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":1,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":76.46090909090911,"syllables":31,"sentences":2,"score":0.8353909090909089},"multiplier":0.25,"relevance":0.9}},{"id":2465783911,"content":"Yeah sorry you are correct it's probably better to use `-beta[bot]` than just `ubiquity-os[bot]` but you get the idea it's user.id of the bot entity","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2465783911","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.432,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":79.75538461538463,"syllables":35,"sentences":2,"score":0.8024461538461537},"multiplier":0.25,"relevance":0.8}},{"id":2465833318,"content":"The cause is likely because we have two bots and so we have two `BOT_USER_ID`s to compare. Perhaps it makes sense to add both bot ids and check the actor.id against both?\r\nThat is just an assumption obviously but to answer the question: TypeBox verifies that the env vars are defined. Whether they reflect our actual bot is another question, we opt'd for the ID over the username a while back although if there is no other clean solution it'll have to do.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2465833318","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.747,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":86,"wordValue":0.1,"result":2.64},"readability":{"fleschKincaid":72.3142093023256,"syllables":119,"sentences":5,"score":0.876857906976744},"multiplier":0.25,"relevance":0.9}},{"id":2465855359,"content":"That's a quick fix I guess yes.\r\nThe original intention behind specifying it's our bot was so that in a partner org where they may have lots of little bots installed that perform actions on tasks and PRs this avoids any interference with our logic.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2465855359","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.6,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":47,"wordValue":0.1,"result":2.33},"readability":{"fleschKincaid":65.98250000000002,"syllables":65,"sentences":2,"score":0.9401749999999999},"multiplier":0.25,"relevance":0.8}},{"id":2466271314,"content":"@ariesgun Sounds to me like it was implied so yeah go ahead with that solution. I can't assign you but you can link the PR and you'll be assigned when someone else sees this","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2466271314","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.448,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":82.815,"syllables":45,"sentences":2,"score":0.77185},"multiplier":0.25,"relevance":0.7}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/113"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 2.668 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>5</td><td>2.668</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2464473235\" target=\"_blank\" rel=\"noopener\">&#96;BOT_USER_ID&#96; === &#96;payload.user.type === \"BOT\" &amp;&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.441</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2465783911\" target=\"_blank\" rel=\"noopener\">Yeah sorry you are correct it's probably better to use &#96;-bet&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.432</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2465833318\" target=\"_blank\" rel=\"noopener\">The cause is likely because we have two bots and so we have two &hellip;</a></h6></td><td><details><summary>2.64</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 86&#13;  wordValue: 0.1&#13;  result: 2.64&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.747</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2465855359\" target=\"_blank\" rel=\"noopener\">That's a quick fix I guess yes.The original intention behind s&hellip;</a></h6></td><td><details><summary>2.33</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 47&#13;  wordValue: 0.1&#13;  result: 2.33&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/69#issuecomment-2466271314\" target=\"_blank\" rel=\"noopener\">@ariesgun Sounds to me like it was implied so yeah go ahead with&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.448</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_279.json","json":{"gentlementlegen":{"userId":9807008,"total":150,"task":{"reward":150,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 150 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>150</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":18.292,"userId":4975670,"comments":[{"id":2732223173,"content":"Yes that sounds correct!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/279#issuecomment-2732223173","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":97.025,"syllables":5,"sentences":1,"score":0.6297499999999999},"multiplier":1,"relevance":0}},{"id":2739812816,"content":"You need to use /stop when you're not working on a task.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/279#issuecomment-2739812816","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":102.53230769230771,"syllables":14,"sentences":1,"score":1},"multiplier":1,"relevance":0}},{"id":2859391952,"content":"$25 flat seems excessive at times\nNew idea is to make line review credit only apply if review is set to approved or request changes. \nRemove the flat $25 reward concept. \nI think this might scale better with smaller/larger sizes proportionally. \nReference rewards:\nhttps://github.com/ubiquity-os-marketplace/text-vector-embeddings/issues/27#issuecomment-2664627267","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/279","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.21,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":44,"wordValue":0.1,"result":2.27},"readability":{"fleschKincaid":55.7482105263158,"syllables":94,"sentences":5,"score":0.957482105263158},"multiplier":1,"relevance":1}},{"id":2003539022,"content":"Aren't defaults always set in the manifest? Meaning we should never set a default in the code?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/311#discussion_r2003539022","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -113,22 +114,57 @@ export class ContentEvaluatorModule extends BaseModule {\n     const commentsWithScore: GithubCommentScore[] = [...comments];\n     const { commentsToEvaluate, prCommentsToEvaluate } = this._splitCommentsByPrompt(commentsWithScore);\n \n-    const relevancesByAi = await this._evaluateComments(\n-      specificationBody,\n-      commentsToEvaluate,\n-      allComments,\n-      prCommentsToEvaluate\n-    );\n+    const relevancesByAi = await retry(\n+      async () => {\n+        const relevances = await this._evaluateComments(\n+          specificationBody,\n+          commentsToEvaluate,\n+          allComments,\n+          prCommentsToEvaluate\n+        );\n \n-    if (Object.keys(relevancesByAi).length !== commentsToEvaluate.length + prCommentsToEvaluate.length) {\n-      throw this.context.logger.error(\"Relevance / Comment length mismatch!\", {\n-        expectedRelevances: commentsToEvaluate.length + prCommentsToEvaluate.length,\n-        receivedRelevances: Object.keys(relevancesByAi).length,\n-        relevancesByAi,\n-        commentsToEvaluate,\n-        prCommentsToEvaluate,\n-      });\n-    }\n+        if (Object.keys(relevances).length !== commentsToEvaluate.length + prCommentsToEvaluate.length) {\n+          throw this.context.logger.error(\"Relevance / Comment length mismatch!\", {\n+            expectedRelevances: commentsToEvaluate.length + prCommentsToEvaluate.length,\n+            receivedRelevances: Object.keys(relevances).length,\n+            relevances,\n+            commentsToEvaluate,\n+            prCommentsToEvaluate,\n+          });\n+        }\n+\n+        return relevances;\n+      },\n+      {\n+        maxRetries: this._configuration?.openAi.maxRetries ?? 3,","score":{"reward":4.152,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":75.50000000000003,"syllables":26,"sentences":2,"score":0.8449999999999998},"multiplier":1,"relevance":0.8}},{"id":2003646665,"content":"You should be able to cast it in the future.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/311#discussion_r2003646665","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -113,22 +114,57 @@ export class ContentEvaluatorModule extends BaseModule {\n     const commentsWithScore: GithubCommentScore[] = [...comments];\n     const { commentsToEvaluate, prCommentsToEvaluate } = this._splitCommentsByPrompt(commentsWithScore);\n \n-    const relevancesByAi = await this._evaluateComments(\n-      specificationBody,\n-      commentsToEvaluate,\n-      allComments,\n-      prCommentsToEvaluate\n-    );\n+    const relevancesByAi = await retry(\n+      async () => {\n+        const relevances = await this._evaluateComments(\n+          specificationBody,\n+          commentsToEvaluate,\n+          allComments,\n+          prCommentsToEvaluate\n+        );\n \n-    if (Object.keys(relevancesByAi).length !== commentsToEvaluate.length + prCommentsToEvaluate.length) {\n-      throw this.context.logger.error(\"Relevance / Comment length mismatch!\", {\n-        expectedRelevances: commentsToEvaluate.length + prCommentsToEvaluate.length,\n-        receivedRelevances: Object.keys(relevancesByAi).length,\n-        relevancesByAi,\n-        commentsToEvaluate,\n-        prCommentsToEvaluate,\n-      });\n-    }\n+        if (Object.keys(relevances).length !== commentsToEvaluate.length + prCommentsToEvaluate.length) {\n+          throw this.context.logger.error(\"Relevance / Comment length mismatch!\", {\n+            expectedRelevances: commentsToEvaluate.length + prCommentsToEvaluate.length,\n+            receivedRelevances: Object.keys(relevances).length,\n+            relevances,\n+            commentsToEvaluate,\n+            prCommentsToEvaluate,\n+          });\n+        }\n+\n+        return relevances;\n+      },\n+      {\n+        maxRetries: this._configuration?.openAi.maxRetries ?? 3,","score":{"reward":1.944,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":95.165,"syllables":12,"sentences":1,"score":0.64835},"multiplier":1,"relevance":0.6}},{"id":2006949408,"content":"Is this right?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/311#discussion_r2006949408","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -56,9 +54,7 @@ export class ReviewIncentivizerModule extends BaseModule {\n         if (linkedPullReviews.reviews && linkedPullReviews.self && username !== linkedPullReviews.self.user.login) {\n           const reviewsByUser = linkedPullReviews.reviews.filter((v) => v.user?.login === username);\n \n-          const reviewBaseReward = reviewsByUser.some((v) => v.state === \"APPROVED\" || v.state === \"CHANGES_REQUESTED\")\n-            ? { reward: this._conclusiveReviewCredit }\n-            : { reward: 0 };\n+          const reviewBaseReward = { reward: 0 };","score":{"reward":0.966,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":119.19000000000003,"syllables":3,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":2742494744,"content":"The related code should be deleted, not just set to 0","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/311#issuecomment-2742494744","commentType":"PULL_COLLABORATOR","score":{"reward":3.132,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":95.68818181818183,"syllables":13,"sentences":1,"score":0.6431181818181817},"multiplier":1,"relevance":0.9}},{"id":2742505248,"content":"Just no flat reward anymore","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/311#issuecomment-2742505248","commentType":"PULL_COLLABORATOR","score":{"reward":1.428,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":66.40000000000003,"syllables":8,"sentences":1,"score":0.9359999999999996},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2698814669,"effect":{"addition":1,"deletion":18},"reward":0.57,"priority":3},{"reviewId":2704900741,"effect":{"addition":44,"deletion":19},"reward":1.89,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/311"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 18.292 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>2.46</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.21</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>0</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>11.622</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/311\" target=\"_blank\" rel=\"noopener\">#311</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1 -18</td><td>3</td><td>0.57</td></tr><tr><td>+44 -19</td><td>3</td><td>1.89</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/279\" target=\"_blank\" rel=\"noopener\">$25 flat seems excessive at timesNew idea is to make line revie&hellip;</a></h6></td><td><details><summary>3.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 44&#13;  wordValue: 0.1&#13;  result: 2.27&#13;</pre></details></td><td>1</td><td>1</td><td>4.21</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/279#issuecomment-2732223173\" target=\"_blank\" rel=\"noopener\">Yes that sounds correct!</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/279#issuecomment-2739812816\" target=\"_blank\" rel=\"noopener\">You need to use /stop when you're not working on a task.</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/311#discussion_r2003539022\" target=\"_blank\" rel=\"noopener\">Aren't defaults always set in the manifest? Meaning we should ne&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.152</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/311#discussion_r2003646665\" target=\"_blank\" rel=\"noopener\">You should be able to cast it in the future.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.944</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/311#discussion_r2006949408\" target=\"_blank\" rel=\"noopener\">Is this right?</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.7</td><td>3</td><td>0.966</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/311#issuecomment-2742494744\" target=\"_blank\" rel=\"noopener\">The related code should be deleted, not just set to 0</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.9</td><td>3</td><td>3.132</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/311#issuecomment-2742505248\" target=\"_blank\" rel=\"noopener\">Just no flat reward anymore</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.428</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_147.json","json":{"jaykayudo":{"userId":58009744,"total":50,"task":{"reward":50,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 50 XP ]</a>&nbsp;</h3><h6>@jaykayudo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"gentlementlegen":{"total":50,"userId":9807008,"comments":[{"id":2401454647,"content":"@0x4007 Does this cover the changes mentioned in https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/143 for the prompt?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147#issuecomment-2401454647","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.59,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":61.07909090909095,"syllables":35,"sentences":2,"score":0.9892090909090905},"multiplier":1,"relevance":0.9}},{"id":2467017300,"content":"@0x4007 We count review comments for the pull-request author now?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147#issuecomment-2467017300","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.68,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":80.30636363636367,"syllables":15,"sentences":1,"score":0.7969363636363633},"multiplier":1,"relevance":0.7}},{"id":2467049853,"content":"It seems you've enabled pull contributors to have rewards\r\nhttps://github.com/ubiquity-os-marketplace/.ubiquity-os/blob/main/.github/.ubiquity-os.config.dev.yml#L227\r\nand disabled issue assignee\r\nhttps://github.com/ubiquity-os-marketplace/.ubiquity-os/blob/main/.github/.ubiquity-os.config.dev.yml#L295","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147#issuecomment-2467049853","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.432,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":53.774500000000046,"syllables":85,"sentences":15,"score":0.9377450000000005},"multiplier":1,"relevance":0.8}},{"id":2409900127,"content":"@jaykayudo You should prove that this prompt improves the results. There are not tests to avoid using the OpenAi api unnecessarily, so everything is mocked. The best way would be to show two results, one with the old prompt and one with the new.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2409900127","commentType":"PULL_COLLABORATOR","score":{"reward":5.148,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":44,"wordValue":0.1,"result":2.27},"readability":{"fleschKincaid":72.73924242424245,"syllables":62,"sentences":3,"score":0.8726075757575755},"multiplier":1,"relevance":0.9}},{"id":2415789175,"content":"@0x4007 Might know best, but ideally I guess what we expect is to see a full run.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2415789175","commentType":"PULL_COLLABORATOR","score":{"reward":1.92,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":90.05058823529413,"syllables":20,"sentences":1,"score":0.6994941176470587},"multiplier":1,"relevance":0.6}},{"id":2425464764,"content":"What kind of information you'd like to see there? There is debug during the whole run but we do not have a dry run capability.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2425464764","commentType":"PULL_COLLABORATOR","score":{"reward":3.052,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":76.50153846153849,"syllables":36,"sentences":2,"score":0.8349846153846151},"multiplier":1,"relevance":0.7}},{"id":2449202778,"content":"@jaykayudo After merge, the prompt build was always failing which is a problem. I reverted this pull-request. Here are the detailed logs\r\n```\r\n\t⚠ Failed to run comment evaluation. SyntaxError: Unterminated string in JSON at position 27\r\n\t⚠ {\r\n\t    \"caller\": \"/home/runner/work/text-conversation-rewards/text-conversation-rewards/dist/index.js:291:6135886\"\r\n\t  }\r\n\t⚠   ↳  JSON.parse (<anonymous>)\r\n\t    ↳  ContentEvaluatorModule._submitPrompt (/home/runner/work/text-conversation-rewards/text-conversation-rewards/dist/index.js:291:5799849)\r\n\t    ↳  process.processTicksAndRejections (node:internal/process/task_queues:95:5)\r\n\t    ↳  async ContentEvaluatorModule._evaluateComments (/home/runner/work/text-conversation-rewards/text-conversation-rewards/dist/index.js:291:5799178)\r\n\t    ↳  async ContentEvaluatorModule._processComment (/home/runner/work/text-conversation-rewards/text-conversation-rewards/dist/index.js:291:5797980)\r\n\t    ↳  async Promise.all (index 1)\r\n\t    ↳  async ContentEvaluatorModule.transform (/home/runner/work/text-conversation-rewards/text-conversation-rewards/dist/index.js:291:5797545)\r\n\t    ↳  async Processor.run (/home/runner/work/text-conversation-rewards/text-conversation-rewards/dist/index.js:291:6133577)\r\n\t    ↳  async run (/home/runner/work/text-conversation-rewards/text-conversation-rewards/dist/index.js:291:6134971)\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2449202778","commentType":"PULL_COLLABORATOR","score":{"reward":3.819,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":77.67072463768118,"syllables":33,"sentences":3,"score":0.8232927536231882},"multiplier":1,"relevance":0.95}},{"id":2452937132,"content":"@0x4007 I think it does because https://github.com/ubiquity-os-marketplace/daemon-disqualifier/pull/39 was merged and this task is priority `2 medium`.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2452937132","commentType":"PULL_COLLABORATOR","score":{"reward":2.71,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":62.74510869565219,"syllables":36,"sentences":2,"score":0.9725489130434781},"multiplier":1,"relevance":0.5}},{"id":1835808092,"content":"My concern about comments to evaluate is here. A line break seems weak to separate comments, which can lead to the result not having the same length as the provided comments, you never had such issue?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#discussion_r1835808092","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -238,28 +238,39 @@ export class ContentEvaluatorModule extends BaseModule {\n     if (!issue?.length) {\n       throw new Error(\"Issue specification comment is missing or empty\");\n     }\n-    return `Instruction: \n-    Go through all the comments first keep them in memory, then start with the following prompt\n-\n-    OUTPUT FORMAT:\n-    {ID: CONNECTION SCORE} For Each record in the EVALUATING SECTION, based on the average value from the CONNECTION SCORE from ALL COMMENTS, TITLE and BODY, one for each comment under evaluation\n-    Global Context:\n-    Specification\n-    \"${issue}\"\n-    ALL COMMENTS:\n-    ${JSON.stringify(allComments, null, 2)}\n-    IMPORTANT CONTEXT:\n-    You have now seen all the comments made by other users, keeping the comments in mind think in what ways comments to be evaluated be connected. The comments that were related to the comment under evaluation might come after or before them in the list of all comments but they would be there in ALL COMMENTS. COULD BE BEFORE OR AFTER, you have diligently search through all the comments in ALL COMMENTS.\n-    START EVALUATING:\n-    ${JSON.stringify(comments, null, 2)}\n-    POST EVALUATION:\n-    THE RESULT FROM THIS SHOULD BE ONLY THE SCORES BASED ON THE FLOATING POINT VALUE CONNECTING HOW CLOSE THE COMMENT IS FROM ALL COMMENTS AND TITLE AND BODY.\n-\n-    Now Assign them scores a float value ranging from 0 to 1, where 0 is spam (lowest value), and 1 is something that's very relevant (Highest Value), here relevance should mean a variety of things, it could be a fix to the issue, it could be a bug in solution, it could a SPAM message, it could be comment, that on its own does not carry weight, but when CHECKED IN ALL COMMENTS, may be a crucial piece of information for debugging and solving the ticket. If YOU THINK ITS NOT RELATED to ALL COMMENTS or TITLE OR ISSUE SPEC, then give it a 0 SCORE.\n-\n-    OUTPUT:\n-    RETURN ONLY A JSON with the ID and the connection score (FLOATING POINT VALUE) with ALL COMMENTS TITLE AND BODY for each comment under evaluation.  RETURN ONLY ONE CONNECTION SCORE VALUE for each comment. Total number of properties in your JSON response should equal exactly ${comments.length}\n-    }`;\n+    const allCommentsMap = allComments.map((value) => `${value.id} - ${value.author}: \"${value.comment}\"`);\n+    const commentsMap = comments.map((value) => `${value.id}: \"${value.comment}\"`);\n+    return `\n+      Evaluate the relevance of GitHub comments to an issue. Provide a JSON object with comment IDs and their relevance scores.\n+      Issue: ${issue}\n+\n+      All comments:\n+      ${allCommentsMap.join(\"\\n\")}\n+\n+      Comments to evaluate:\n+      ${commentsMap.join(\"\\n\")}","score":{"reward":4.716,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":71.06500000000001,"syllables":50,"sentences":2,"score":0.8893499999999999},"multiplier":1,"relevance":0.9}},{"id":2458594062,"content":"@0x4007 I do not want to merge this without testing, it broke all the generation last time we did so. I want to see a real run first.\r\n@jaykayudo Why are the comments not sent on a JSON format anymore? It avoided any ambiguity on the comment content.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2458594062","commentType":"PULL_COLLABORATOR","score":{"reward":4.981,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":48,"wordValue":0.1,"result":2.35},"readability":{"fleschKincaid":78.33000000000001,"syllables":66,"sentences":4,"score":0.8166999999999999},"multiplier":1,"relevance":0.85}},{"id":2463636758,"content":"@0x4007 Why removing the `json` format? It seems to make the prompt very confusing to understand the beginning and end of a comment, at least to me.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2463636758","commentType":"PULL_COLLABORATOR","score":{"reward":3.504,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":73.24769230769233,"syllables":37,"sentences":2,"score":0.8675230769230766},"multiplier":1,"relevance":0.8}},{"id":2466752816,"content":"@jaykayudo please resolve the conflict. Also would like the reasoning for removing the JSON output @0x4007","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2466752816","commentType":"PULL_COLLABORATOR","score":{"reward":2.46,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":55.952500000000015,"syllables":27,"sentences":2,"score":0.9595250000000002},"multiplier":1,"relevance":0.75}},{"id":2467005149,"content":"Then I suppose this can be merged and tested, and reverted like last time if anything goes wrong. @jaykayudo please merge the `dist` file in this branch.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2467005149","commentType":"PULL_COLLABORATOR","score":{"reward":2.568,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":83.0092307692308,"syllables":34,"sentences":2,"score":0.7699076923076921},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151"},{"reviews":[{"reviewId":2425881805,"effect":{"addition":1277,"deletion":1119},"reward":47.92,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 50 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>47.92</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>10.702</td></tr><tr><td>Review</td><td>Comment</td><td>10</td><td>34.878</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179\" target=\"_blank\" rel=\"noopener\">#179</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1277 -1119</td><td>2</td><td>47.92</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147#issuecomment-2401454647\" target=\"_blank\" rel=\"noopener\">@0x4007 Does this cover the changes mentioned in https://github.&hellip;</a></h6></td><td><details><summary>1.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.9</td><td>2</td><td>4.59</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147#issuecomment-2467017300\" target=\"_blank\" rel=\"noopener\">@0x4007 We count review comments for the pull-request author now?</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.68</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147#issuecomment-2467049853\" target=\"_blank\" rel=\"noopener\">It seems you've enabled pull contributors to have rewardshttps&hellip;</a></h6></td><td><details><summary>2.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.8</td><td>2</td><td>4.432</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2409900127\" target=\"_blank\" rel=\"noopener\">@jaykayudo You should prove that this prompt improves the result&hellip;</a></h6></td><td><details><summary>2.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 44&#13;  wordValue: 0.1&#13;  result: 2.27&#13;</pre></details></td><td>0.9</td><td>2</td><td>5.148</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2415789175\" target=\"_blank\" rel=\"noopener\">@0x4007 Might know best, but ideally I guess what we expect is t&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.6</td><td>2</td><td>1.92</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2425464764\" target=\"_blank\" rel=\"noopener\">What kind of information you'd like to see there? There is debug&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.7</td><td>2</td><td>3.052</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2449202778\" target=\"_blank\" rel=\"noopener\">@jaykayudo After merge, the prompt build was always failing whic&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.95</td><td>2</td><td>3.819</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2452937132\" target=\"_blank\" rel=\"noopener\">@0x4007 I think it does because https://github.com/ubiquity-os-m&hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.5</td><td>2</td><td>2.71</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#discussion_r1835808092\" target=\"_blank\" rel=\"noopener\">My concern about comments to evaluate is here. A line break seem&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.9</td><td>2</td><td>4.716</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2458594062\" target=\"_blank\" rel=\"noopener\">@0x4007 I do not want to merge this without testing, it broke al&hellip;</a></h6></td><td><details><summary>2.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 48&#13;  wordValue: 0.1&#13;  result: 2.35&#13;</pre></details></td><td>0.85</td><td>2</td><td>4.981</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2463636758\" target=\"_blank\" rel=\"noopener\">@0x4007 Why removing the &#96;json&#96; format? It seems to make&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.8</td><td>2</td><td>3.504</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2466752816\" target=\"_blank\" rel=\"noopener\">@jaykayudo please resolve the conflict. Also would like the reas&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.75</td><td>2</td><td>2.46</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2467005149\" target=\"_blank\" rel=\"noopener\">Then I suppose this can be merged and tested, and reverted like &hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.6</td><td>2</td><td>2.568</td></tr></tbody></table></details>"},"0x4007":{"total":50,"userId":4975670,"comments":[{"id":2401473639,"content":"Looks like I made a mistake. Yes.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147#issuecomment-2401473639","commentType":"ISSUE_AUTHOR","score":{"reward":1.26,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":106.59678571428573,"syllables":8,"sentences":2,"score":1},"multiplier":1,"relevance":0.7}},{"id":2404130568,"content":"I just removed \n- [Prompt Improvement](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/142#discussion_r1788981713)\nFrom the other spec. And now it's its own task here.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147#issuecomment-2404130568","commentType":"ISSUE_AUTHOR","score":{"reward":5.292,"formatting":{"content":{"p":{"score":0,"elementCount":1},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1.1},"priority":2,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":88.72514705882354,"syllables":22,"sentences":2,"score":0.7127485294117646},"multiplier":1,"relevance":0.9}},{"id":2467045955,"content":"No definitely not","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147#issuecomment-2467045955","commentType":"ISSUE_AUTHOR","score":{"reward":0.32,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":6.390000000000015,"syllables":7,"sentences":1,"score":0.46390000000000015},"multiplier":1,"relevance":0.4}},{"id":2467069823,"content":"Can you fix the config across the orgs? The config syntax isn't really clear to me. I think I asked Claude to consolidate them to be less verbose, and after looking it over, it seemed fine so I implicitly approved it.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147#issuecomment-2467069823","commentType":"ISSUE_AUTHOR","score":{"reward":3.348,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":42,"wordValue":0.1,"result":2.23},"readability":{"fleschKincaid":75.79642857142858,"syllables":58,"sentences":3,"score":0.8420357142857142},"multiplier":1,"relevance":0.6}},{"id":2572088325,"content":"Generally when I write prompts I run them through LLMs to improve the clarity and conciseness (and of course test the results.) This prompt looks raw and can benefit from similar treatment.\r\nEnhance the prompt and test.  \r\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/blob/7fca5d02fd19993406bc9558c556c59b6762b0c9/src/parser/content-evaluator-module.ts#L244-L265","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147","commentType":"ISSUE_SPECIFICATION","score":{"reward":4,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":62.90809523809526,"syllables":89,"sentences":6,"score":0.9709190476190475},"multiplier":1,"relevance":1}},{"id":2401477358,"content":"Please post QA tests comparing results","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2401477358","commentType":"PULL_COLLABORATOR","score":{"reward":1.232,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":73.84500000000001,"syllables":9,"sentences":1,"score":0.8615499999999998},"multiplier":1,"relevance":0.8}},{"id":2415834824,"content":"Let's see scoring before and after","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2415834824","commentType":"PULL_COLLABORATOR","score":{"reward":1.204,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":78.87285714285717,"syllables":10,"sentences":1,"score":0.8112714285714283},"multiplier":1,"relevance":0.7}},{"id":2416087988,"content":"Thanks for this. Could you do a more complex example? This doesnt have enough variety to show any difference","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2416087988","commentType":"PULL_COLLABORATOR","score":{"reward":2.832,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":80.18561403508772,"syllables":27,"sentences":3,"score":0.7981438596491227},"multiplier":1,"relevance":0.8}},{"id":2417894735,"content":"I reviewed the prompt and it doesn't make sense to me why there are redundant comments being passed in on ALL COMMENTS and START EVALUATING\r\nWhat's going on here?\r\nAlso START EVALUATING starts from about halfway through the conversation. \r\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/5\r\nI really think JSON notation is not optimal for a prompt.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2417894735","commentType":"PULL_COLLABORATOR","score":{"reward":7.938,"formatting":{"content":{"p":{"score":0,"elementCount":5},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":52,"wordValue":0.1,"result":2.41},"readability":{"fleschKincaid":61.934464285714284,"syllables":96,"sentences":4,"score":0.9806553571428571},"multiplier":1,"relevance":0.9}},{"id":2418648911,"content":"```\r\n2036458775 - gentlementlegen: \"This can work, but we skyrocket coupling and to me defeat purpose of plugins that should be unaware of each other. If any plugin has to understand the result of a previous plugin, it means these plugins have necessarily to co-exist so basically they become a single plugin with no purpose to split them.\"\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2418648911","commentType":"PULL_COLLABORATOR","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.2}},{"id":2423703857,"content":"Whats with the right arrows in the beginning of each comment?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2423703857","commentType":"PULL_COLLABORATOR","score":{"reward":1.44,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":80.30636363636367,"syllables":15,"sentences":1,"score":0.7969363636363633},"multiplier":1,"relevance":0.6}},{"id":2423712893,"content":"I would remove from array to conform to how the rest of the prompt is. Also clearer divisions of sections consider using headers ###\nLastly i would probably add a note about how we are using github flavored markdown and > indicates a block quote from another comment, and that those should not be considered as part of the scoring of that comment which is quoting another.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2423712893","commentType":"PULL_COLLABORATOR","score":{"reward":5.814,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":65,"wordValue":0.1,"result":2.56},"readability":{"fleschKincaid":47.59826923076926,"syllables":97,"sentences":2,"score":0.8759826923076927},"multiplier":1,"relevance":0.9}},{"id":2425134861,"content":"I think this might need to be changed. Related is somewhat applicable, but we should also consider this scenario: we tend to debug and warn team members about bot related behaviors when we see a problem. I try and clean up those comments later but its tedious. Anyways, there will be several comments discussing the bot problem and technically those are all going to be more \"related\"\nYou need to emphasize the focus on the specification of the issue for being the \"topic\" \nI suppose it could be useful to make a bot debugging capability in the beginning of conversation rewards. Like some type of prescreening function. @gentlementlegen rfc maybe could be interesting","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2425134861","commentType":"PULL_COLLABORATOR","score":{"reward":5.184,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":113,"wordValue":0.1,"result":2.54},"readability":{"fleschKincaid":52.20943215339233,"syllables":181,"sentences":6,"score":0.9220943215339232},"multiplier":1,"relevance":0.8}},{"id":2425530525,"content":"I meant some type of moderation capability that will hide the off topic (based on the specification) comments so that they don't get any credit.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2425530525","commentType":"PULL_COLLABORATOR","score":{"reward":3.094,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":50.29115384615386,"syllables":40,"sentences":1,"score":0.9029115384615386},"multiplier":1,"relevance":0.7}},{"id":2428454012,"content":"Prompt looks decent \r\n```diff\r\n-  - Comments may reference earlier or later comments.\r\n+  - Comments may reference earlier comments.\r\n```\r\nYour pull isn't updated. You should run this and link your GitHub Actions logs for QA.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2428454012","commentType":"PULL_COLLABORATOR","score":{"reward":3.186,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":95.165,"syllables":24,"sentences":2,"score":0.64835},"multiplier":1,"relevance":0.9}},{"id":2435288036,"content":"I already reviewed the latest state of this pull.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2435288036","commentType":"PULL_COLLABORATOR","score":{"reward":0.63,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":75.50000000000003,"syllables":13,"sentences":1,"score":0.8449999999999998},"multiplier":1,"relevance":0.3}},{"id":2439714590,"content":"I think we need to ignore changelog from prettier. Also you should clobber `dist/index.js` and resolve so that this can be merged. @jaykayudo","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2439714590","commentType":"PULL_COLLABORATOR","score":{"reward":2.352,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":76.33712121212123,"syllables":32,"sentences":3,"score":0.8366287878787877},"multiplier":1,"relevance":0.6}},{"id":2452914024,"content":"This is unexpected","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2452914024","commentType":"PULL_COLLABORATOR","score":{"reward":0.09,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":62.79000000000002,"syllables":5,"sentences":1,"score":0.9720999999999997},"multiplier":1,"relevance":0.1}},{"id":2458220537,"content":"@sshivaditya2019 @gentlementlegen  please decide. I think your testing module for this could be useful?\nI think it mostly looks fine at this point. Would be great to get some others to agree because it's a lot to wrangle.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2458220537","commentType":"PULL_COLLABORATOR","score":{"reward":3.252,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":73.29259615384616,"syllables":57,"sentences":4,"score":0.8670740384615384},"multiplier":1,"relevance":0.6}},{"id":2466998720,"content":"JSON is extremely redundant compared to plaintext/markdown. For humans and LLMs JSON is not the most efficient way to express (most) ideas.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2466998720","commentType":"PULL_COLLABORATOR","score":{"reward":2.912,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":62.74510869565219,"syllables":36,"sentences":2,"score":0.9725489130434781},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2397347051,"effect":{"addition":1626,"deletion":1351},"reward":59.54,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151"},{"reviews":[{"reviewId":2416769772,"effect":{"addition":45,"deletion":35},"reward":1.6,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 50 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>⚠️ Your rewards have been limited to the task price of 50 XP.</h6><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>61.14</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4</td></tr><tr><td>Issue</td><td>Comment</td><td>4</td><td>10.22</td></tr><tr><td>Review</td><td>Comment</td><td>15</td><td>41.16</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151\" target=\"_blank\" rel=\"noopener\">#151</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1626 -1351</td><td>2</td><td>59.54</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179\" target=\"_blank\" rel=\"noopener\">#179</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+45 -35</td><td>2</td><td>1.6</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147\" target=\"_blank\" rel=\"noopener\">Generally when I write prompts I run them through LLMs to improv&hellip;</a></h6></td><td><details><summary>3.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>1</td><td>1</td><td>4</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147#issuecomment-2401473639\" target=\"_blank\" rel=\"noopener\">Looks like I made a mistake. Yes.</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.26</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147#issuecomment-2404130568\" target=\"_blank\" rel=\"noopener\">I just removed - [Prompt Improvement](https://github.com/ubiqui&hellip;</a></h6></td><td><details><summary>2.42</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.1&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.9</td><td>2</td><td>5.292</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147#issuecomment-2467045955\" target=\"_blank\" rel=\"noopener\">No definitely not</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.4</td><td>2</td><td>0.32</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/147#issuecomment-2467069823\" target=\"_blank\" rel=\"noopener\">Can you fix the config across the orgs? The config syntax isn't &hellip;</a></h6></td><td><details><summary>2.23</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 42&#13;  wordValue: 0.1&#13;  result: 2.23&#13;</pre></details></td><td>0.6</td><td>2</td><td>3.348</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2401477358\" target=\"_blank\" rel=\"noopener\">Please post QA tests comparing results</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.232</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2415834824\" target=\"_blank\" rel=\"noopener\">Let's see scoring before and after</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.204</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2416087988\" target=\"_blank\" rel=\"noopener\">Thanks for this. Could you do a more complex example? This doesn&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.832</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2417894735\" target=\"_blank\" rel=\"noopener\">I reviewed the prompt and it doesn't make sense to me why there &hellip;</a></h6></td><td><details><summary>3.41</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 52&#13;  wordValue: 0.1&#13;  result: 2.41&#13;</pre></details></td><td>0.9</td><td>2</td><td>7.938</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2418648911\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;2036458775 - gentlementlegen: \"This can work, b&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.2</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2423703857\" target=\"_blank\" rel=\"noopener\">Whats with the right arrows in the beginning of each comment?</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.6</td><td>2</td><td>1.44</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2423712893\" target=\"_blank\" rel=\"noopener\">I would remove from array to conform to how the rest of the prom&hellip;</a></h6></td><td><details><summary>2.56</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 65&#13;  wordValue: 0.1&#13;  result: 2.56&#13;</pre></details></td><td>0.9</td><td>2</td><td>5.814</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2425134861\" target=\"_blank\" rel=\"noopener\">I think this might need to be changed. Related is somewhat appli&hellip;</a></h6></td><td><details><summary>2.54</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 113&#13;  wordValue: 0.1&#13;  result: 2.54&#13;</pre></details></td><td>0.8</td><td>2</td><td>5.184</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2425530525\" target=\"_blank\" rel=\"noopener\">I meant some type of moderation capability that will hide the of&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.7</td><td>2</td><td>3.094</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2428454012\" target=\"_blank\" rel=\"noopener\">Prompt looks decent &#96;&#96;&#96;diff-  - Comments may ref&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.9</td><td>2</td><td>3.186</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2435288036\" target=\"_blank\" rel=\"noopener\">I already reviewed the latest state of this pull.</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.63</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2439714590\" target=\"_blank\" rel=\"noopener\">I think we need to ignore changelog from prettier. Also you shou&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.6</td><td>2</td><td>2.352</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151#issuecomment-2452914024\" target=\"_blank\" rel=\"noopener\">This is unexpected</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.09</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2458220537\" target=\"_blank\" rel=\"noopener\">@sshivaditya2019 @gentlementlegen  please decide. I think your t&hellip;</a></h6></td><td><details><summary>2.15</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.15&#13;</pre></details></td><td>0.6</td><td>2</td><td>3.252</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2466998720\" target=\"_blank\" rel=\"noopener\">JSON is extremely redundant compared to plaintext/markdown. For &hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.912</td></tr></tbody></table></details>"},"Keyrxng":{"total":3.006,"userId":106303466,"comments":[{"id":2449737097,"content":"In my opinion the system message should contain only the instruction and the comments should be sent as the query.\r\nRight now there is no query being sent as `User` to the model, it's just the [system message](https://github.com/ubiquity-os-marketplace/text-conversation-rewards/blob/033da8ad591eaaa0b07a20a1dbd576be13e1bed8/src/parser/content-evaluator-module.ts#L209) which is not really how you are supposed to generate responses.\r\n`messages` or `chatHistory` whatever, needs to be `system > user > assistant > user > ...repeating`. Right now it's just `system` I'm not even sure how we are getting a response back.\r\nPlease checkout [`command-ask`](https://github.com/ubiquity-os-marketplace/command-ask/blob/8ea7b0f328940205b676011e43407fff7d74084a/src/adapters/openai/helpers/completions.ts#L103) as it has multiple completions endpoint methods. Both with multi-step input chat history.\r\nGroundtruths pass in the repo deps as a [stringified JSON object](https://github.com/ubiquity-os-marketplace/command-ask/blob/8ea7b0f328940205b676011e43407fff7d74084a/src/handlers/ground-truths/find-ground-truths.ts#L40) as the query, with the system message being the instruction and example. We should probs do the same here with comments.\r\n`/ask` passes in the user query and fills the system message with chat history and instruction (I've suggested we split this into multi-step too).","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2449737097","commentType":"PULL_CONTRIBUTOR","score":{"reward":3.006,"formatting":{"content":{"p":{"score":0,"elementCount":6},"a":{"score":1,"elementCount":3}},"result":3},"priority":2,"words":{"wordCount":144,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":71.3325,"syllables":203,"sentences":9,"score":0.886675},"multiplier":0.25,"relevance":0.9}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151"},{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 3.006 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>3.006</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2449737097\" target=\"_blank\" rel=\"noopener\">In my opinion the system message should contain only the instruc&hellip;</a></h6></td><td><details><summary>5.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    a:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 3&#13;regex:&#13;  wordCount: 144&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0.9</td><td>2</td><td>3.006</td></tr></tbody></table></details>"},"shiv810":{"total":1.328,"userId":53160903,"comments":[{"id":2458628790,"content":"@jaykayudo, could you share some results for less obvious examples where the relevance is expected to be high? For instance, this [Issue](https://www.github.com/ubiquity-os-marketplace/command-start-stop/issues/14)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2458628790","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.328,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":61.07909090909095,"syllables":35,"sentences":2,"score":0.9892090909090905},"multiplier":0.25,"relevance":0.8}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/151"},{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 1.328 XP ]</a>&nbsp;</h3><h6>@shiv810</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>1.328</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/179#issuecomment-2458628790\" target=\"_blank\" rel=\"noopener\">@jaykayudo, could you share some results for less obvious exampl&hellip;</a></h6></td><td><details><summary>2.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.328</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_72.json","json":{"gentlementlegen":{"userId":9807008,"total":16.56,"task":{"reward":12,"multiplier":1},"comments":[{"id":2431311902,"content":"Make sure to load this in at the top of the file, and to throw an error if its missing instead of potentially having this be invalid when its needed. I generally always make a helper function to load all the environment variables right at runtime start, and throw a detailed error if its missing any.\r\n_Originally posted by @0x4007 in https://github.com/ubiquibot/conversation-rewards/pull/58#discussion_r1691159526_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/72","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.56,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":61,"wordValue":0.1,"result":2.53},"readability":{"fleschKincaid":57.338214285714315,"syllables":109,"sentences":4,"score":0.9733821428571432},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 16.56 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>12</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.56</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/72\" target=\"_blank\" rel=\"noopener\">Make sure to load this in at the top of the file, and to throw a&hellip;</a></h6></td><td><details><summary>3.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 61&#13;  wordValue: 0.1&#13;  result: 2.53&#13;</pre></details></td><td>1</td><td>1</td><td>4.56</td></tr></tbody></table></details>"},"0x4007":{"total":12,"userId":4975670,"comments":[{"id":2395391667,"content":"I think it would be simpler to just filter out at the end if a contributor has a 0 score just remove their link and section of the comment @gentlementlegen","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/72#issuecomment-2395391667","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.972,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":57.945000000000036,"syllables":42,"sentences":1,"score":0.9794500000000004},"multiplier":1,"relevance":0.2}},{"id":2395410882,"content":"Sure but I'm saying add a filter at the very end for edge cases like this.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/72#issuecomment-2395410882","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.64,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":90.05058823529413,"syllables":20,"sentences":1,"score":0.6994941176470587},"multiplier":1,"relevance":0.2}}],"reviewRewards":[{"reviews":[{"reviewId":2347539522,"effect":{"addition":1409,"deletion":320},"reward":34.58,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/131"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 12 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>34.58</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>1.612</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/131\" target=\"_blank\" rel=\"noopener\">#131</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1409 -320</td><td>2</td><td>34.58</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/72#issuecomment-2395391667\" target=\"_blank\" rel=\"noopener\">I think it would be simpler to just filter out at the end if a c&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.972</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/72#issuecomment-2395410882\" target=\"_blank\" rel=\"noopener\">Sure but I'm saying add a filter at the very end for edge cases &hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.64</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_99.json","json":{"koya0":{"userId":161151123,"total":6,"task":{"reward":6,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 6 XP ]</a>&nbsp;</h3><h6>@koya0</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>6</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"gentlementlegen":{"total":6,"userId":9807008,"comments":[{"id":2588519003,"content":"Aggregating errors sounds complex at this time because we usually throw during execution when we encounter any error so only the first one will be thrown. However, the order can be changed so the the price label missing error is thrown first.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/99#issuecomment-2588519003","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.592,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":42,"wordValue":0.1,"result":2.23},"readability":{"fleschKincaid":56.6057142857143,"syllables":64,"sentences":2,"score":0.966057142857143},"multiplier":1,"relevance":0.9}},{"id":2603969233,"content":"QA seems fine: https://github.com/Meniole/command-start-stop/issues/59\nPlease bump `@ubiquity-os/plugin-sdk` to `2.0.2`\nAlso, it appears that a task with no time estimate can be started if it has a price and a priority, I don't know if that's expected.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2603969233","commentType":"PULL_COLLABORATOR","score":{"reward":3.23,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":76.83227272727274,"syllables":56,"sentences":2,"score":0.8316772727272727},"multiplier":1,"relevance":0.85}},{"id":2604945710,"content":"Even though it works fine, I think that returning a string this way is not really clear, programming side. Why not using `AggregateError` class and push all the errors there using the logger, and then throw the whole errors altogether which would be handled directly by the SDK? That would also properly break the flow of the program.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2604945710","commentType":"PULL_COLLABORATOR","score":{"reward":2.826,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":57,"wordValue":0.1,"result":2.48},"readability":{"fleschKincaid":71.78157894736843,"syllables":78,"sentences":3,"score":0.8821842105263157},"multiplier":1,"relevance":0.9}},{"id":2606202001,"content":"You should be able to import it: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2606202001","commentType":"PULL_COLLABORATOR","score":{"reward":1.449,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":35.65929824561405,"syllables":37,"sentences":3,"score":0.7565929824561405},"multiplier":1,"relevance":0.7}},{"id":2608823827,"content":"The formatting is ok. The thing I wanted to avoid is\r\nhttps://github.com/ubiquity-os-marketplace/command-start-stop/pull/125/commits/cb32e3fc58e1a3b695fee9647292dff7d4a273a4#diff-47224fac5bab974df0f6fb9704d6fbb0f06375b3e98285797826104537bda3ccR89\r\nwhere I would prefer to only throw one error and the SDK would handle the display. Because by doing so, what is the linked error stack? I can't edit the comment so I can't see it.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2608823827","commentType":"PULL_COLLABORATOR","score":{"reward":3.408,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":49,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":72.23050000000002,"syllables":92,"sentences":5,"score":0.8776949999999998},"multiplier":1,"relevance":0.8}},{"id":2613768640,"content":"@koya0 could you fix the jest tests? Then I'll be able to merge this.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2613768640","commentType":"PULL_COLLABORATOR","score":{"reward":1.178,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":103.3425,"syllables":17,"sentences":2,"score":1},"multiplier":1,"relevance":0.75}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 6 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>⚠️ Your rewards have been limited to the task price of 6 XP.</h6><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.592</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>12.091</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/99#issuecomment-2588519003\" target=\"_blank\" rel=\"noopener\">Aggregating errors sounds complex at this time because we usuall&hellip;</a></h6></td><td><details><summary>2.23</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 42&#13;  wordValue: 0.1&#13;  result: 2.23&#13;</pre></details></td><td>0.9</td><td>1</td><td>2.592</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2603969233\" target=\"_blank\" rel=\"noopener\">QA seems fine: https://github.com/Meniole/command-start-stop/iss&hellip;</a></h6></td><td><details><summary>3.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.85</td><td>1</td><td>3.23</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2604945710\" target=\"_blank\" rel=\"noopener\">Even though it works fine, I think that returning a string this &hellip;</a></h6></td><td><details><summary>2.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 57&#13;  wordValue: 0.1&#13;  result: 2.48&#13;</pre></details></td><td>0.9</td><td>1</td><td>2.826</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2606202001\" target=\"_blank\" rel=\"noopener\">You should be able to import it: https://developer.mozilla.org/e&hellip;</a></h6></td><td><details><summary>1.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.449</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2608823827\" target=\"_blank\" rel=\"noopener\">The formatting is ok. The thing I wanted to avoid ishttps://gi&hellip;</a></h6></td><td><details><summary>3.37</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 49&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>0.8</td><td>1</td><td>3.408</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2613768640\" target=\"_blank\" rel=\"noopener\">@koya0 could you fix the jest tests? Then I'll be able to merge &hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.75</td><td>1</td><td>1.178</td></tr></tbody></table></details>"},"0x4007":{"total":6,"userId":4975670,"comments":[{"id":2714437532,"content":"- Ideally should aggregate all the potential problems for starting and explain to the user. \r\n- At least the first error should say that there is no price label so this can't be started.\r\n```diff\r\n! This task does not reflect a business priority at the moment. You may start tasks with one of the following labels: Priority: 3 (High), Priority: 4 (Urgent), Priority: 5 (Emergency)\r\n```\r\n_Originally posted by @ubiquity-os[bot] in https://github.com/ubiquity/business-development/issues/93","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/99","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.38,"formatting":{"content":{"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1.2},"priority":1,"words":{"wordCount":40,"wordValue":0.1,"result":2.18},"readability":{"fleschKincaid":58.942499999999995,"syllables":77,"sentences":4,"score":0.989425},"multiplier":1,"relevance":1}},{"id":2563491693,"content":"Aggregated errors QA looks good! \nhttps://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#discussion_r1920911342","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#pullrequestreview-2563491693","commentType":"PULL_COLLABORATOR","score":{"reward":1.182,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":56.76568627450982,"syllables":29,"sentences":3,"score":0.9676568627450982},"multiplier":1,"relevance":0.6}},{"id":1920860758,"content":"What about error aggregation?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#discussion_r1920860758","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -67,6 +67,13 @@ export async function start(\n     throw logger.error(`Skipping '/start' since there is no sender in the context.`);\n   }\n \n+  const labels = issue.labels ?? [];\n+  const priceLabel = labels.find((label: Label) => label.name.startsWith(\"Price: \"));\n+\n+  if (!priceLabel) {\n+    throw logger.error(\"No price label is set to calculate the duration\", { issueNumber: issue.number });","score":{"reward":0.459,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":12.425000000000011,"syllables":9,"sentences":1,"score":0.5242500000000001},"multiplier":1,"relevance":0.9}},{"id":1920884357,"content":"The idea is that I want to avoid the situation where a user steps through every error and loses patience. \nFor example:\n- you must set your wallet before starting the issue\nAnd then they set their wallet and try start again\n- this is not a business priority please start tasks with level 3 priority or higher \nI feel like there were other temporary errors I can't recall at the moment. I figured aggregation would prevent this from happening","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#discussion_r1920884357","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -67,6 +67,13 @@ export async function start(\n     throw logger.error(`Skipping '/start' since there is no sender in the context.`);\n   }\n \n+  const labels = issue.labels ?? [];\n+  const priceLabel = labels.find((label: Label) => label.name.startsWith(\"Price: \"));\n+\n+  if (!priceLabel) {\n+    throw logger.error(\"No price label is set to calculate the duration\", { issueNumber: issue.number });","score":{"reward":2.904,"formatting":{"content":{"p":{"score":0,"elementCount":1},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":1,"words":{"wordCount":79,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":53.74210970464138,"syllables":118,"sentences":3,"score":0.9374210970464137},"multiplier":1,"relevance":0.8}},{"id":1923079050,"content":"I think just worry about the errors in this plugin for now.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#discussion_r1923079050","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -67,6 +67,13 @@ export async function start(\n     throw logger.error(`Skipping '/start' since there is no sender in the context.`);\n   }\n \n+  const labels = issue.labels ?? [];\n+  const priceLabel = labels.find((label: Label) => label.name.startsWith(\"Price: \"));\n+\n+  if (!priceLabel) {\n+    throw logger.error(\"No price label is set to calculate the duration\", { issueNumber: issue.number });","score":{"reward":0.896,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":81.85500000000002,"syllables":16,"sentences":1,"score":0.7814499999999999},"multiplier":1,"relevance":0.7}},{"id":2599357054,"content":"Can you link the thread instead of screenshots? Better to QA when we can use it directly.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2599357054","commentType":"PULL_COLLABORATOR","score":{"reward":0.8,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":88.72514705882354,"syllables":22,"sentences":2,"score":0.7127485294117646},"multiplier":1,"relevance":0.5}},{"id":2604880544,"content":"I suppose that technically speaking all we need is a `Price` label. The `Priority` and `Time` labels are just a way for us to determine a price label.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2604880544","commentType":"PULL_COLLABORATOR","score":{"reward":1.704,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":75.70750000000002,"syllables":35,"sentences":2,"score":0.8429249999999997},"multiplier":1,"relevance":0.8}},{"id":2609020851,"content":"I think don't use `new Error()` because then it prefixes all the messages with \"Error: \" which is redundant and doesn't look good. Obviously the whole thing is an error.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2609020851","commentType":"PULL_COLLABORATOR","score":{"reward":2.088,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":75.42784482758621,"syllables":40,"sentences":2,"score":0.8457215517241379},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2560136981,"effect":{"addition":7,"deletion":7},"reward":0.14,"priority":1},{"reviewId":2563490400,"effect":{"addition":28,"deletion":13},"reward":0.41,"priority":1},{"reviewId":2563491693,"effect":{"addition":233,"deletion":12},"reward":2.45,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 6 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>⚠️ Your rewards have been limited to the task price of 6 XP.</h6><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>3</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.38</td></tr><tr><td>Review</td><td>Comment</td><td>7</td><td>10.033</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125\" target=\"_blank\" rel=\"noopener\">#125</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+7 -7</td><td>1</td><td>0.14</td></tr><tr><td>+28 -13</td><td>1</td><td>0.41</td></tr><tr><td>+233 -12</td><td>1</td><td>2.45</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/99\" target=\"_blank\" rel=\"noopener\">- Ideally should aggregate all the potential problems for starti&hellip;</a></h6></td><td><details><summary>3.38</summary><pre>content:&#13;  content:&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.2&#13;regex:&#13;  wordCount: 40&#13;  wordValue: 0.1&#13;  result: 2.18&#13;</pre></details></td><td>1</td><td>1</td><td>4.38</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#pullrequestreview-2563491693\" target=\"_blank\" rel=\"noopener\">Aggregated errors QA looks good! https://github.com/ubiquity-os&hellip;</a></h6></td><td><details><summary>1.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.6</td><td>1</td><td>1.182</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#discussion_r1920860758\" target=\"_blank\" rel=\"noopener\">What about error aggregation?</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.459</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#discussion_r1920884357\" target=\"_blank\" rel=\"noopener\">The idea is that I want to avoid the situation where a user step&hellip;</a></h6></td><td><details><summary>2.83</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 79&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.904</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#discussion_r1923079050\" target=\"_blank\" rel=\"noopener\">I think just worry about the errors in this plugin for now.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.896</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2599357054\" target=\"_blank\" rel=\"noopener\">Can you link the thread instead of screenshots? Better to QA whe&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.8</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2604880544\" target=\"_blank\" rel=\"noopener\">I suppose that technically speaking all we need is a &#96;Price&&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.8</td><td>1</td><td>1.704</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/125#issuecomment-2609020851\" target=\"_blank\" rel=\"noopener\">I think don't use &#96;new Error()&#96; because then it prefixes&hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.9</td><td>1</td><td>2.088</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_62.json","json":{"gentlementlegen":{"userId":9807008,"total":204.51,"task":{"reward":200,"multiplier":1},"comments":[{"id":2415248691,"content":"I am not sure what the clearest way to express this is, but the idea is that we have \"word count\" currently. I figured a generalized way to approach this was to target symbols instead. \r\nThe way that we count the amount of words is by counting the spaces. \r\nExtending this logic, I figured we could credit sentences by assigning value to punctuation (`!`, `.` etc)\r\nWe can credit paragraphs by assigning value to double line breaks (`\\n\\n`)\r\nDo you see where I am going with this?\r\n---\r\nPerhaps it makes sense to use regex notation instead in the config:\r\n```yml\r\n...\r\n  symbols:\r\n    \"\\s\": 0.1 # word counter\r\n    \"\\.\": 0.5 # sentence counter\r\n    \"!\": 0.5 # sentence counter\r\n    \"\\?\": 0.5 # sentence counter\r\n    \"\\n\\n\": 1 # paragraph counter\r\n```\r\n---\r\nI am mostly happy with this config syntax because it allows us to fairly clearly express, and finely adjust the incentives.\r\n```yml\r\nselect: [ PULL_AUTHOR, PULL_SPECIFICATION ]\r\n  html:\r\n    a: 5\r\n    h1: 1\r\n  symbols: \r\n    spaces: 0.1 # implies words?\r\nselect: [ ISSUE_AUTHOR, ISSUE_CONTRIBUTOR, PULL_CONTRIBUTOR ]\r\n  html:\r\n    a: 5\r\n    h1: 1\r\n  symbols: \r\n    \" \": 0.1 # implies words?\r\n    \".\": 0.5\r\n    \"!\": 0.5\r\n```\r\n_Originally posted by @0x4007 in https://github.com/ubiquity/ubiquibot-config/pull/18#discussion_r1680319560_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/62","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.51,"formatting":{"content":{"p":{"score":0,"elementCount":8},"hr":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":122,"wordValue":0.1,"result":2.47},"readability":{"fleschKincaid":59.971297709923675,"syllables":198,"sentences":7,"score":0.9997129770992368},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 204.51 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>200</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.51</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/62\" target=\"_blank\" rel=\"noopener\">I am not sure what the clearest way to express this is, but the &hellip;</a></h6></td><td><details><summary>3.47</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 8&#13;    hr:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 122&#13;  wordValue: 0.1&#13;  result: 2.47&#13;</pre></details></td><td>1</td><td>1</td><td>4.51</td></tr></tbody></table></details>"},"0x4007":{"total":86.368,"userId":4975670,"comments":[{"id":2237061511,"content":"Hey the regex needs to be improved for the sentences. \nFor example, look when I write \"i.e.\" this is credited as two sentences. \nWe must check for a letter, a period, and a space i guess. So something like `\\w\\.\\s` although I'm just winging it from my phone I'm sure this can be improved. \nIn addition, if there are excited contributors writing !! Then we should only credit it one time. Try and think of edge cases for the regexes. \nConsider that some old school users use double space after a sentence stop. Also we can consider looking for a capitalized character after to indicate a new sentence has started, although this seems less robust potentially in case there are lazy writers in all lowercase.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/62#issuecomment-2237061511","commentType":"ISSUE_COLLABORATOR","score":{"reward":5.508,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":126,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":75.69435064935065,"syllables":178,"sentences":11,"score":0.8430564935064935},"multiplier":1,"relevance":0.9}},{"id":2237784791,"content":"No definitely overkill. Just regex is sufficient.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/62#issuecomment-2237784791","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.106,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":9.91107142857146,"syllables":16,"sentences":2,"score":0.49911071428571463},"multiplier":1,"relevance":0.7}},{"id":2237991994,"content":"I think lets let the partners deal with that problem. For example, if they enable both then they need to do the math and figure out what rewards make sense with the double counting. I suggest that they should only use one or the other, but if they are really pro, they might figure a way to get them both enabled. Lets keep it simple. \r\nI'll probably try some experiments in the near future when its stable.\r\nBut the main benefit of implementing this \"symbols\" section is that we should be able to target any arbitrary pattern, which seems like a generally useful tool.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/62#issuecomment-2237991994","commentType":"ISSUE_COLLABORATOR","score":{"reward":5.232,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":105,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":70.63250000000004,"syllables":147,"sentences":6,"score":0.8936749999999997},"multiplier":1,"relevance":0.8}},{"id":2239173732,"content":"Definitely include in the reward total. Do a regex eval so the partner can pass in any arbitrary pattern.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/62#issuecomment-2239173732","commentType":"ISSUE_COLLABORATOR","score":{"reward":3.276,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":50.25565789473683,"syllables":33,"sentences":2,"score":0.9025565789473683},"multiplier":1,"relevance":0.9}},{"id":2309409783,"content":"What does the personal access token for the directory have to do with the conversation rewards Open AI call?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/62#issuecomment-2309409783","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.086,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":49.518421052631595,"syllables":31,"sentences":1,"score":0.8951842105263159},"multiplier":1,"relevance":0.3}},{"id":1689072355,"content":"```suggestion\r\nHere is a possible valid configuration to enable this plugin. See [these files](./src/configuration/) for more details.\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1689072355","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -46,7 +46,7 @@ Reward formula: `((count * wordValue) * (score * formattingMultiplier) * n) * re\n \n ## Plugin configuration\n \n-Here is a possible valid configuration to enable this plugin.\n+Here is a possible valid configuration to enable this plugin. See [these files](./src/configuration) for more details.","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.6}},{"id":1689073633,"content":"```suggestion\r\n  readonly _configuration: DataPurgeConfiguration | null = configuration.incentives.dataPurge;\r\n```\r\nBad practice. Should just return `null` on some type of failure.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1689073633","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -8,14 +8,14 @@ import { Module, Result } from \"./processor\";\n  * Removes the data in the comments that we do not want to be processed.\n  */\n export class DataPurgeModule implements Module {\n-  readonly _configuration: DataPurgeConfiguration = configuration.incentives.dataPurge;\n+  readonly _configuration: DataPurgeConfiguration | undefined | null = configuration.incentives.dataPurge;","score":{"reward":1.728,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":91.78000000000003,"syllables":13,"sentences":2,"score":0.6821999999999997},"multiplier":1,"relevance":0.8}},{"id":1692502758,"content":"This seems like an incomplete list of HTML entities. I assume that default is `0` so I suppose its fine.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1692502758","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -7,95 +7,100 @@ const type = Type.Union(\n   )\n );\n \n-export const formattingEvaluatorConfigurationType = Type.Object({\n-  /**\n-   * Multipliers applied to different parts of the comment body content\n-   */\n-  multipliers: Type.Array(\n-    Type.Object({\n-      select: Type.Array(type),\n-      formattingMultiplier: Type.Number(),\n-      wordValue: Type.Number(),\n-    }),\n-    {\n-      default: [\n-        {\n-          select: [\"ISSUE_SPECIFICATION\"],\n-          formattingMultiplier: 1,\n-          wordValue: 0.1,\n-        },\n-        {\n-          select: [\"ISSUE_AUTHOR\"],\n-          formattingMultiplier: 1,\n-          wordValue: 0.2,\n-        },\n-        {\n-          select: [\"ISSUE_ASSIGNEE\"],\n-          formattingMultiplier: 0,\n-          wordValue: 0,\n-        },\n-        {\n-          select: [\"ISSUE_COLLABORATOR\"],\n-          formattingMultiplier: 1,\n-          wordValue: 0.1,\n-        },\n-        {\n-          select: [\"ISSUE_CONTRIBUTOR\"],\n-          formattingMultiplier: 0.25,\n-          wordValue: 0.1,\n-        },\n-        {\n-          select: [\"PULL_SPECIFICATION\"],\n-          formattingMultiplier: 0,\n-          wordValue: 0,\n-        },\n-        {\n-          select: [\"PULL_AUTHOR\"],\n-          formattingMultiplier: 2,\n-          wordValue: 0.2,\n-        },\n-        {\n-          select: [\"PULL_ASSIGNEE\"],\n-          formattingMultiplier: 1,\n-          wordValue: 0.1,\n-        },\n-        {\n-          select: [\"PULL_COLLABORATOR\"],\n-          formattingMultiplier: 1,\n-          wordValue: 0.1,\n-        },\n-        {\n-          select: [\"PULL_CONTRIBUTOR\"],\n-          formattingMultiplier: 0.25,\n-          wordValue: 0.1,\n-        },\n-      ],\n-    }\n-  ),\n-  /**\n-   * Attributed score per HTML entity\n-   */\n-  scores: Type.Record(Type.String(), Type.Number(), {\n-    default: {\n-      br: 0,\n-      code: 1,\n-      p: 1,\n-      em: 0,\n-      img: 0,\n-      strong: 0,\n-      blockquote: 0,\n-      h1: 1,\n-      h2: 1,\n-      h3: 1,\n-      h4: 1,\n-      h5: 1,\n-      h6: 1,\n-      a: 1,\n-      li: 1,\n-      td: 1,\n-      hr: 0,\n-    },\n-  }),\n-});\n+const symbolsType = Type.Record(Type.String(), Type.Number(), { minProperties: 1 });\n+\n+export const formattingEvaluatorConfigurationType = Type.Object(\n+  {\n+    /**\n+     * Multipliers applied to different parts of the comment body content\n+     */\n+    multipliers: Type.Array(\n+      Type.Object({\n+        select: Type.Array(type),\n+        formattingMultiplier: Type.Number(),\n+        symbols: symbolsType,\n+        /**\n+         * Attributed score per HTML entity\n+         */\n+        scores: Type.Record(Type.String(), Type.Number(), {\n+          default: {\n+            br: 0,\n+            code: 1,\n+            p: 1,\n+            em: 0,\n+            img: 0,\n+            strong: 0,\n+            blockquote: 0,\n+            h1: 1,\n+            h2: 1,\n+            h3: 1,\n+            h4: 1,\n+            h5: 1,\n+            h6: 1,\n+            a: 1,\n+            li: 1,\n+            td: 1,\n+            hr: 0,","score":{"reward":1.77,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":81.42407894736841,"syllables":26,"sentences":2,"score":0.7857592105263158},"multiplier":1,"relevance":0.5}},{"id":1692503153,"content":"Might be useful to make special aliases for our config to make it more human readable. We can consider this as part of a new task i.e. \"`words`\" maps to \"`\\\\b\\\\w+\\\\b`\"","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1692503153","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -7,95 +7,100 @@ const type = Type.Union(\n   )\n );\n \n-export const formattingEvaluatorConfigurationType = Type.Object({\n-  /**\n-   * Multipliers applied to different parts of the comment body content\n-   */\n-  multipliers: Type.Array(\n-    Type.Object({\n-      select: Type.Array(type),\n-      formattingMultiplier: Type.Number(),\n-      wordValue: Type.Number(),\n-    }),\n-    {\n-      default: [\n-        {\n-          select: [\"ISSUE_SPECIFICATION\"],\n-          formattingMultiplier: 1,\n-          wordValue: 0.1,\n-        },\n-        {\n-          select: [\"ISSUE_AUTHOR\"],\n-          formattingMultiplier: 1,\n-          wordValue: 0.2,\n-        },\n-        {\n-          select: [\"ISSUE_ASSIGNEE\"],\n-          formattingMultiplier: 0,\n-          wordValue: 0,\n-        },\n-        {\n-          select: [\"ISSUE_COLLABORATOR\"],\n-          formattingMultiplier: 1,\n-          wordValue: 0.1,\n-        },\n-        {\n-          select: [\"ISSUE_CONTRIBUTOR\"],\n-          formattingMultiplier: 0.25,\n-          wordValue: 0.1,\n-        },\n-        {\n-          select: [\"PULL_SPECIFICATION\"],\n-          formattingMultiplier: 0,\n-          wordValue: 0,\n-        },\n-        {\n-          select: [\"PULL_AUTHOR\"],\n-          formattingMultiplier: 2,\n-          wordValue: 0.2,\n-        },\n-        {\n-          select: [\"PULL_ASSIGNEE\"],\n-          formattingMultiplier: 1,\n-          wordValue: 0.1,\n-        },\n-        {\n-          select: [\"PULL_COLLABORATOR\"],\n-          formattingMultiplier: 1,\n-          wordValue: 0.1,\n-        },\n-        {\n-          select: [\"PULL_CONTRIBUTOR\"],\n-          formattingMultiplier: 0.25,\n-          wordValue: 0.1,\n-        },\n-      ],\n-    }\n-  ),\n-  /**\n-   * Attributed score per HTML entity\n-   */\n-  scores: Type.Record(Type.String(), Type.Number(), {\n-    default: {\n-      br: 0,\n-      code: 1,\n-      p: 1,\n-      em: 0,\n-      img: 0,\n-      strong: 0,\n-      blockquote: 0,\n-      h1: 1,\n-      h2: 1,\n-      h3: 1,\n-      h4: 1,\n-      h5: 1,\n-      h6: 1,\n-      a: 1,\n-      li: 1,\n-      td: 1,\n-      hr: 0,\n-    },\n-  }),\n-});\n+const symbolsType = Type.Record(Type.String(), Type.Number(), { minProperties: 1 });\n+\n+export const formattingEvaluatorConfigurationType = Type.Object(\n+  {\n+    /**\n+     * Multipliers applied to different parts of the comment body content\n+     */\n+    multipliers: Type.Array(\n+      Type.Object({\n+        select: Type.Array(type),\n+        formattingMultiplier: Type.Number(),\n+        symbols: symbolsType,\n+        /**\n+         * Attributed score per HTML entity\n+         */\n+        scores: Type.Record(Type.String(), Type.Number(), {\n+          default: {\n+            br: 0,\n+            code: 1,\n+            p: 1,\n+            em: 0,\n+            img: 0,\n+            strong: 0,\n+            blockquote: 0,\n+            h1: 1,\n+            h2: 1,\n+            h3: 1,\n+            h4: 1,\n+            h5: 1,\n+            h6: 1,\n+            a: 1,\n+            li: 1,\n+            td: 1,\n+            hr: 0,\n+          },\n+        }),\n+      }),\n+      {\n+        default: [\n+          {\n+            select: [\"ISSUE_SPECIFICATION\"],\n+            formattingMultiplier: 1,\n+            symbols: { \"\\\\b\\\\w+\\\\b\": 0.1 },","score":{"reward":3.206,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":86.42250000000001,"syllables":40,"sentences":4,"score":0.7357749999999998},"multiplier":1,"relevance":0.7}},{"id":1692503579,"content":"Default to `1` on failure?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1692503579","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -164,14 +164,7 @@ export class GithubCommentModule implements Module {\n             <td>\n             <details>\n               <summary>\n-                ${Object.values(commentScore.score?.formatting?.content || {}).reduce((acc, curr) => {\n-                  const multiplier = new Decimal(\n-                    commentScore.score?.formatting\n-                      ? commentScore.score.formatting.formattingMultiplier * commentScore.score.formatting.wordValue\n-                      : 0\n-                  );\n-                  return acc.add(multiplier.mul(curr.score * curr.count));\n-                }, new Decimal(0))}\n+                ${new Decimal(commentScore.score?.reward || 0).div(new Decimal(commentScore.score?.relevance || 0))}","score":{"reward":0.66,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.6}},{"id":1696573858,"content":"I suppose we can do a wildcard select first and then the later config settings can overwrite kind of like CSS behavior?\r\n```yml\r\n        multipliers:\r\n          - select: [ * ]\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696573858","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -65,55 +65,65 @@ with:\n         redeemTask: true\n       dataPurge:\n       formattingEvaluator:\n-        scores:\n-          br: 0\n-          code: 1\n-          p: 1\n-          em: 0\n-          img: 0\n-          strong: 0\n-          blockquote: 0\n-          h1: 1\n-          h2: 1\n-          h3: 1\n-          h4: 1\n-          h5: 1\n-          h6: 1\n-          a: 1\n-          li: 1\n-          td: 1\n-          hr: 0\n         multipliers:\n           - select: [ ISSUE_SPECIFICATION ]","score":{"reward":2.842,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":61.45045454545455,"syllables":32,"sentences":1,"score":0.9854954545454545},"multiplier":1,"relevance":0.7}},{"id":1696576344,"content":"I'm not sure. I'm reviewing all of the property names next to each other and maybe it makes sense to do:\r\n```yml\r\n          - role: [ ISSUE_SPECIFICATION ]\r\n            multiplier: 1\r\n            rewards:\r\n              components: \r\n                words: 0.1\r\n                paragraph: 1\r\n              html: \r\n                code: 5\r\n                img: 5\r\n                a: 5\r\n              regex:\r\n                \"\\\\b\\\\w+\\\\b\": 0.2 # I guess this would mean double crediting words in this example\r\n          - role: [ ISSUE_ASSIGNEE ]\r\n            multiplier: 0\r\n            rewards:\r\n              regex:\r\n                \"\\\\b\\\\w+\\\\b\": 0\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696576344","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -65,55 +65,65 @@ with:\n         redeemTask: true\n       dataPurge:\n       formattingEvaluator:\n-        scores:\n-          br: 0\n-          code: 1\n-          p: 1\n-          em: 0\n-          img: 0\n-          strong: 0\n-          blockquote: 0\n-          h1: 1\n-          h2: 1\n-          h3: 1\n-          h4: 1\n-          h5: 1\n-          h6: 1\n-          a: 1\n-          li: 1\n-          td: 1\n-          hr: 0\n         multipliers:\n           - select: [ ISSUE_SPECIFICATION ]\n             formattingMultiplier: 1\n-            wordValue: 0.1\n+            symbols:\n+              \"\\\\b\\\\w+\\\\b\": 0.1\n+            scores: # Scores can be set for each item differently","score":{"reward":3.492,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":92.17119565217394,"syllables":28,"sentences":2,"score":0.6782880434782607},"multiplier":1,"relevance":0.9}},{"id":1696581118,"content":"I've never seen people writing html comments like this. I don't anticipate this scenario to happen normally.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696581118","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -91,30 +96,43 @@ export class FormattingEvaluatorModule implements Module {\n     const html = this._md.render(comment.content);\n     const temp = new JSDOM(html);\n     if (temp.window.document.body) {\n-      const res = this.classifyTagsWithWordCount(temp.window.document.body);\n+      const res = this.classifyTagsWithWordCount(temp.window.document.body, comment.type);\n       return { formatting: res };\n     } else {\n       throw new Error(`Could not create DOM for comment [${comment}]`);\n     }\n   }\n \n-  _countWords(text: string): number {\n-    return text.trim().split(/\\s+/).length;\n+  _countWords(symbols: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"symbols\"], text: string) {\n+    const counts: { [p: string]: { count: number; multiplier: number } } = {};\n+    for (const [regex, multiplier] of Object.entries(symbols)) {\n+      const match = text.trim().match(new RegExp(regex, \"g\"));\n+      counts[regex] = {\n+        count: match?.length || 1,\n+        multiplier,\n+      };\n+    }\n+    return counts;\n   }\n \n-  classifyTagsWithWordCount(htmlElement: HTMLElement) {\n-    const tagWordCount: Record<string, { count: number; score: number }> = {};\n+  classifyTagsWithWordCount(htmlElement: HTMLElement, commentType: GithubCommentScore[\"type\"]) {\n+    const tagWordCount: Record<\n+      string,\n+      { symbols: { [p: string]: { count: number; multiplier: number } }; score: number }\n+    > = {};\n     const elements = htmlElement.getElementsByTagName(\"*\");\n \n     for (const element of elements) {\n       const tagName = element.tagName.toLowerCase();\n-      const wordCount = this._countWords(element.textContent || \"\");\n+      const wordCount = this._countWords(this._multipliers[commentType].symbols, element.textContent || \"\");","score":{"reward":1.488,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":59.16092105263158,"syllables":31,"sentences":2,"score":0.9916092105263158},"multiplier":1,"relevance":0.4}},{"id":1696583718,"content":"Not sure, perhaps `pattern: ` however I know I had another task somewhere for custom aliases to map to specific regexes so that its more readable in the config. Or we can consider hard coding these inside of the plugin. For example:\r\n```yml\r\nalias: \r\n   \"\\\\b\\\\w+\\\\b\": \"words\"\r\n```\r\nAnd then later in the config we can just do something like\r\n```yml\r\npattern: \r\n   words: 0.1\r\n```\r\nI have a feeling hard coding the common useful ones might be best","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696583718","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -65,55 +65,65 @@ with:\n         redeemTask: true\n       dataPurge:\n       formattingEvaluator:\n-        scores:\n-          br: 0\n-          code: 1\n-          p: 1\n-          em: 0\n-          img: 0\n-          strong: 0\n-          blockquote: 0\n-          h1: 1\n-          h2: 1\n-          h3: 1\n-          h4: 1\n-          h5: 1\n-          h6: 1\n-          a: 1\n-          li: 1\n-          td: 1\n-          hr: 0\n         multipliers:\n           - select: [ ISSUE_SPECIFICATION ]\n             formattingMultiplier: 1\n-            wordValue: 0.1\n+            symbols:","score":{"reward":5.328,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":65,"wordValue":0.1,"result":2.56},"readability":{"fleschKincaid":59.89564102564103,"syllables":96,"sentences":3,"score":0.9989564102564102},"multiplier":1,"relevance":0.8}},{"id":1696609369,"content":"I didn't see this when I authored the first version","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696609369","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -91,30 +96,43 @@ export class FormattingEvaluatorModule implements Module {\n     const html = this._md.render(comment.content);\n     const temp = new JSDOM(html);\n     if (temp.window.document.body) {\n-      const res = this.classifyTagsWithWordCount(temp.window.document.body);\n+      const res = this.classifyTagsWithWordCount(temp.window.document.body, comment.type);\n       return { formatting: res };\n     } else {\n       throw new Error(`Could not create DOM for comment [${comment}]`);\n     }\n   }\n \n-  _countWords(text: string): number {\n-    return text.trim().split(/\\s+/).length;\n+  _countWords(symbols: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"symbols\"], text: string) {\n+    const counts: { [p: string]: { count: number; multiplier: number } } = {};\n+    for (const [regex, multiplier] of Object.entries(symbols)) {\n+      const match = text.trim().match(new RegExp(regex, \"g\"));\n+      counts[regex] = {\n+        count: match?.length || 1,\n+        multiplier,\n+      };\n+    }\n+    return counts;\n   }\n \n-  classifyTagsWithWordCount(htmlElement: HTMLElement) {\n-    const tagWordCount: Record<string, { count: number; score: number }> = {};\n+  classifyTagsWithWordCount(htmlElement: HTMLElement, commentType: GithubCommentScore[\"type\"]) {\n+    const tagWordCount: Record<\n+      string,\n+      { symbols: { [p: string]: { count: number; multiplier: number } }; score: number }\n+    > = {};\n     const elements = htmlElement.getElementsByTagName(\"*\");\n \n     for (const element of elements) {\n       const tagName = element.tagName.toLowerCase();\n-      const wordCount = this._countWords(element.textContent || \"\");\n+      const wordCount = this._countWords(this._multipliers[commentType].symbols, element.textContent || \"\");","score":{"reward":0.696,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":95.68818181818183,"syllables":13,"sentences":1,"score":0.6431181818181817},"multiplier":1,"relevance":0.3}},{"id":1696610070,"content":"I never would select `img` in the config because `a` would always wrap them automatically as a heads up.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696610070","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -91,30 +96,43 @@ export class FormattingEvaluatorModule implements Module {\n     const html = this._md.render(comment.content);\n     const temp = new JSDOM(html);\n     if (temp.window.document.body) {\n-      const res = this.classifyTagsWithWordCount(temp.window.document.body);\n+      const res = this.classifyTagsWithWordCount(temp.window.document.body, comment.type);\n       return { formatting: res };\n     } else {\n       throw new Error(`Could not create DOM for comment [${comment}]`);\n     }\n   }\n \n-  _countWords(text: string): number {\n-    return text.trim().split(/\\s+/).length;\n+  _countWords(symbols: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"symbols\"], text: string) {\n+    const counts: { [p: string]: { count: number; multiplier: number } } = {};\n+    for (const [regex, multiplier] of Object.entries(symbols)) {\n+      const match = text.trim().match(new RegExp(regex, \"g\"));\n+      counts[regex] = {\n+        count: match?.length || 1,","score":{"reward":1.36,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":55.21529411764709,"syllables":27,"sentences":1,"score":0.9521529411764709},"multiplier":1,"relevance":0.4}},{"id":1696613041,"content":"I don't understand your example but if there is a code block inside of an unordered list, then there should be credit for both if the config enabled that. It is important for the partner to config carefully so as to not double dip, right? Or are you suggesting that we build in protection?\r\nThe thing is, as I mentioned in my [other comment](https://github.com/ubiquibot/conversation-rewards/pull/68#discussion_r1696610070), some tags are impossible to target directly, like `img` because they are automatically wrapped inside of `a`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696613041","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -91,30 +96,43 @@ export class FormattingEvaluatorModule implements Module {\n     const html = this._md.render(comment.content);\n     const temp = new JSDOM(html);\n     if (temp.window.document.body) {\n-      const res = this.classifyTagsWithWordCount(temp.window.document.body);\n+      const res = this.classifyTagsWithWordCount(temp.window.document.body, comment.type);\n       return { formatting: res };\n     } else {\n       throw new Error(`Could not create DOM for comment [${comment}]`);\n     }\n   }\n \n-  _countWords(text: string): number {\n-    return text.trim().split(/\\s+/).length;\n+  _countWords(symbols: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"symbols\"], text: string) {\n+    const counts: { [p: string]: { count: number; multiplier: number } } = {};\n+    for (const [regex, multiplier] of Object.entries(symbols)) {\n+      const match = text.trim().match(new RegExp(regex, \"g\"));\n+      counts[regex] = {\n+        count: match?.length || 1,\n+        multiplier,\n+      };\n+    }\n+    return counts;\n   }\n \n-  classifyTagsWithWordCount(htmlElement: HTMLElement) {\n-    const tagWordCount: Record<string, { count: number; score: number }> = {};\n+  classifyTagsWithWordCount(htmlElement: HTMLElement, commentType: GithubCommentScore[\"type\"]) {\n+    const tagWordCount: Record<\n+      string,\n+      { symbols: { [p: string]: { count: number; multiplier: number } }; score: number }\n+    > = {};\n     const elements = htmlElement.getElementsByTagName(\"*\");\n \n     for (const element of elements) {\n       const tagName = element.tagName.toLowerCase();\n-      const wordCount = this._countWords(element.textContent || \"\");\n+      const wordCount = this._countWords(this._multipliers[commentType].symbols, element.textContent || \"\");","score":{"reward":5.64,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":80,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":61.75000000000003,"syllables":118,"sentences":4,"score":0.9824999999999997},"multiplier":1,"relevance":0.6}},{"id":1696827475,"content":"So the strategy is to take the parent or the child element? I suppose the child would be more precise.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696827475","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -91,30 +96,43 @@ export class FormattingEvaluatorModule implements Module {\n     const html = this._md.render(comment.content);\n     const temp = new JSDOM(html);\n     if (temp.window.document.body) {\n-      const res = this.classifyTagsWithWordCount(temp.window.document.body);\n+      const res = this.classifyTagsWithWordCount(temp.window.document.body, comment.type);\n       return { formatting: res };\n     } else {\n       throw new Error(`Could not create DOM for comment [${comment}]`);\n     }\n   }\n \n-  _countWords(text: string): number {\n-    return text.trim().split(/\\s+/).length;\n+  _countWords(symbols: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"symbols\"], text: string) {\n+    const counts: { [p: string]: { count: number; multiplier: number } } = {};\n+    for (const [regex, multiplier] of Object.entries(symbols)) {\n+      const match = text.trim().match(new RegExp(regex, \"g\"));\n+      counts[regex] = {\n+        count: match?.length || 1,\n+        multiplier,\n+      };\n+    }\n+    return counts;\n   }\n \n-  classifyTagsWithWordCount(htmlElement: HTMLElement) {\n-    const tagWordCount: Record<string, { count: number; score: number }> = {};\n+  classifyTagsWithWordCount(htmlElement: HTMLElement, commentType: GithubCommentScore[\"type\"]) {\n+    const tagWordCount: Record<\n+      string,\n+      { symbols: { [p: string]: { count: number; multiplier: number } }; score: number }\n+    > = {};\n     const elements = htmlElement.getElementsByTagName(\"*\");\n \n     for (const element of elements) {\n       const tagName = element.tagName.toLowerCase();\n-      const wordCount = this._countWords(element.textContent || \"\");\n+      const wordCount = this._countWords(this._multipliers[commentType].symbols, element.textContent || \"\");","score":{"reward":1.82,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":82.47500000000001,"syllables":27,"sentences":2,"score":0.7752499999999999},"multiplier":1,"relevance":0.5}},{"id":1696830294,"content":"My goal is to make the config as intuitive as possible, sorry for the runaround.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696830294","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -65,55 +65,65 @@ with:\n         redeemTask: true\n       dataPurge:\n       formattingEvaluator:\n-        scores:\n-          br: 0\n-          code: 1\n-          p: 1\n-          em: 0\n-          img: 0\n-          strong: 0\n-          blockquote: 0\n-          h1: 1\n-          h2: 1\n-          h3: 1\n-          h4: 1\n-          h5: 1\n-          h6: 1\n-          a: 1\n-          li: 1\n-          td: 1\n-          hr: 0\n         multipliers:\n           - select: [ ISSUE_SPECIFICATION ]\n             formattingMultiplier: 1\n-            wordValue: 0.1\n+            symbols:\n+              \"\\\\b\\\\w+\\\\b\": 0.1\n+            scores: # Scores can be set for each item differently","score":{"reward":0.942,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":61.890000000000015,"syllables":23,"sentences":1,"score":0.9810999999999999},"multiplier":1,"relevance":0.3}},{"id":1696830913,"content":"Let's do what was defined in my example config above. \nhttps://github.com/ubiquibot/conversation-rewards/pull/68#discussion_r1696576344","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696830913","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -65,55 +65,65 @@ with:\n         redeemTask: true\n       dataPurge:\n       formattingEvaluator:\n-        scores:\n-          br: 0\n-          code: 1\n-          p: 1\n-          em: 0\n-          img: 0\n-          strong: 0\n-          blockquote: 0\n-          h1: 1\n-          h2: 1\n-          h3: 1\n-          h4: 1\n-          h5: 1\n-          h6: 1\n-          a: 1\n-          li: 1\n-          td: 1\n-          hr: 0\n         multipliers:\n           - select: [ ISSUE_SPECIFICATION ]\n             formattingMultiplier: 1\n-            wordValue: 0.1\n+            symbols:","score":{"reward":3.514,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":52.018333333333345,"syllables":35,"sentences":3,"score":0.9201833333333335},"multiplier":1,"relevance":0.7}},{"id":1721049100,"content":"At least in the config we renamed things accordingly. For example I'm pretty sure we renamed `symbol` to `regex`, so we should do the same in the code here. \nAlso `score` should just sum per instance. For example if we want to award $1 for every paragraph, then `score` for `p` should be `1`. \n`score` is not supposed to be a multiplier. \nHowever in the config I believe we also support a `multiplier` property. This should be separate from `score`.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1721049100","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -56,15 +56,15 @@ export class FormattingEvaluatorModule implements Module {\n         const comment = comments[i];\n         // Count with html elements if any, otherwise just treat it as plain text\n         const { formatting } = this._getFormattingScore(comment);\n-        const multiplierFactor = this._multipliers?.[comment.type] ?? { wordValue: 0, formattingMultiplier: 0 };\n+        const multiplierFactor = this._multipliers?.[comment.type] ?? { multiplier: 0 };\n         const formattingTotal = formatting\n           ? Object.values(formatting).reduce((acc, curr) => {\n               let sum = new Decimal(0);\n               for (const symbol of Object.keys(curr.symbols)) {\n                 sum = sum.add(\n                   new Decimal(curr.symbols[symbol].count)\n                     .mul(curr.symbols[symbol].multiplier)\n-                    .mul(multiplierFactor.formattingMultiplier)\n+                    .mul(multiplierFactor.multiplier)\n                     .mul(curr.score)\n                 );\n               }","score":{"reward":5.886,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":72,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":75.37000000000002,"syllables":103,"sentences":7,"score":0.8462999999999998},"multiplier":1,"relevance":0.9}},{"id":2256100561,"content":"The \"enabled\" properties should be removed","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#issuecomment-2256100561","commentType":"PULL_COLLABORATOR","score":{"reward":0.948,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":59.745000000000005,"syllables":10,"sentences":1,"score":0.9974500000000001},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2195583451,"effect":{"addition":230,"deletion":195},"reward":8.5,"priority":2},{"reviewId":2207055683,"effect":{"addition":223,"deletion":127},"reward":7,"priority":2},{"reviewId":2207071068,"effect":{"addition":0,"deletion":0},"reward":0,"priority":2},{"reviewId":2207466394,"effect":{"addition":5,"deletion":7},"reward":0.24,"priority":2},{"reviewId":2244388842,"effect":{"addition":418,"deletion":237},"reward":13.1,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 86.368 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>5</td><td>28.84</td></tr><tr><td>Issue</td><td>Comment</td><td>5</td><td>16.208</td></tr><tr><td>Review</td><td>Comment</td><td>17</td><td>41.32</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68\" target=\"_blank\" rel=\"noopener\">#68</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+230 -195</td><td>2</td><td>8.5</td></tr><tr><td>+223 -127</td><td>2</td><td>7</td></tr><tr><td>+0 -0</td><td>2</td><td>0</td></tr><tr><td>+5 -7</td><td>2</td><td>0.24</td></tr><tr><td>+418 -237</td><td>2</td><td>13.1</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/62#issuecomment-2237061511\" target=\"_blank\" rel=\"noopener\">Hey the regex needs to be improved for the sentences. For examp&hellip;</a></h6></td><td><details><summary>2.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 126&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>0.9</td><td>2</td><td>5.508</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/62#issuecomment-2237784791\" target=\"_blank\" rel=\"noopener\">No definitely overkill. Just regex is sufficient.</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.106</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/62#issuecomment-2237991994\" target=\"_blank\" rel=\"noopener\">I think lets let the partners deal with that problem. For exampl&hellip;</a></h6></td><td><details><summary>2.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 105&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>0.8</td><td>2</td><td>5.232</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/62#issuecomment-2239173732\" target=\"_blank\" rel=\"noopener\">Definitely include in the reward total. Do a regex eval so the p&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.9</td><td>2</td><td>3.276</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/62#issuecomment-2309409783\" target=\"_blank\" rel=\"noopener\">What does the personal access token for the directory have to do&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.3</td><td>2</td><td>1.086</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1689072355\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionHere is a possible valid configuratio&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.6</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1689073633\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionreadonly _configuration: DataPurgeC&hellip;</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.728</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1692502758\" target=\"_blank\" rel=\"noopener\">This seems like an incomplete list of HTML entities. I assume th&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.5</td><td>2</td><td>1.77</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1692503153\" target=\"_blank\" rel=\"noopener\">Might be useful to make special aliases for our config to make i&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.7</td><td>2</td><td>3.206</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1692503579\" target=\"_blank\" rel=\"noopener\">Default to &#96;1&#96; on failure?</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.6</td><td>2</td><td>0.66</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696573858\" target=\"_blank\" rel=\"noopener\">I suppose we can do a wildcard select first and then the later c&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.842</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696576344\" target=\"_blank\" rel=\"noopener\">I'm not sure. I'm reviewing all of the property names next to ea&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.9</td><td>2</td><td>3.492</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696581118\" target=\"_blank\" rel=\"noopener\">I've never seen people writing html comments like this. I don't &hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.4</td><td>2</td><td>1.488</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696583718\" target=\"_blank\" rel=\"noopener\">Not sure, perhaps &#96;pattern: &#96; however I know I had anoth&hellip;</a></h6></td><td><details><summary>2.56</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 65&#13;  wordValue: 0.1&#13;  result: 2.56&#13;</pre></details></td><td>0.8</td><td>2</td><td>5.328</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696609369\" target=\"_blank\" rel=\"noopener\">I didn't see this when I authored the first version</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.696</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696610070\" target=\"_blank\" rel=\"noopener\">I never would select &#96;img&#96; in the config because &#96;a&&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.4</td><td>2</td><td>1.36</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696613041\" target=\"_blank\" rel=\"noopener\">I don't understand your example but if there is a code block ins&hellip;</a></h6></td><td><details><summary>3.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 80&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.6</td><td>2</td><td>5.64</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696827475\" target=\"_blank\" rel=\"noopener\">So the strategy is to take the parent or the child element? I su&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.5</td><td>2</td><td>1.82</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696830294\" target=\"_blank\" rel=\"noopener\">My goal is to make the config as intuitive as possible, sorry fo&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.942</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696830913\" target=\"_blank\" rel=\"noopener\">Let's do what was defined in my example config above. https://g&hellip;</a></h6></td><td><details><summary>1.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.7</td><td>2</td><td>3.514</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1721049100\" target=\"_blank\" rel=\"noopener\">At least in the config we renamed things accordingly. For exampl&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 72&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.9</td><td>2</td><td>5.886</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#issuecomment-2256100561\" target=\"_blank\" rel=\"noopener\">The \"enabled\" properties should be removed</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.6</td><td>2</td><td>0.948</td></tr></tbody></table></details>"},"whilefoo":{"total":61.954,"userId":139262667,"comments":[{"id":1695764395,"content":"why is there a need for merge? can't you just use `Value.Default(incentivesConfigurationSchema, JSON.parse(program.settings))`?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1695764395","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,27 +1,28 @@\n-import program from \"../parser/command-line\";\n-import { IncentivesConfiguration, incentivesConfigurationSchema, validateIncentivesConfiguration } from \"./incentives\";\n import { Value } from \"@sinclair/typebox/value\";\n import { merge } from \"lodash\";\n+import program from \"../parser/command-line\";\n+import { IncentivesConfiguration, incentivesConfigurationSchema, validateIncentivesConfiguration } from \"./incentives\";\n \n let configuration: IncentivesConfiguration | null = null;\n \n try {\n-  const defaultConf = Value.Create(incentivesConfigurationSchema);\n-  configuration = Value.Decode(incentivesConfigurationSchema, defaultConf);\n+  configuration = Value.Default(incentivesConfigurationSchema, {}) as IncentivesConfiguration;\n } catch (e) {\n   console.error(e);\n }\n \n if (program.settings) {\n-  const settings = merge(configuration, JSON.parse(program.settings));\n+  const settings = merge(\n+    configuration,\n+    Value.Default(incentivesConfigurationSchema, JSON.parse(program.settings)) as IncentivesConfiguration\n+  );","score":{"reward":2.16,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":116.14500000000001,"syllables":12,"sentences":2,"score":1},"multiplier":1,"relevance":0.8}},{"id":1695771108,"content":"```suggestion\r\n         * If set to false, the plugin runs even if the price label is missing, and will evaluate comments.\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1695771108","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -8,37 +8,43 @@ import { githubCommentConfigurationType } from \"./github-comment-config\";\n import { permitGenerationConfigurationType } from \"./permit-generation-configuration\";\n import { userExtractorConfigurationType } from \"./user-extractor-config\";\n \n-export const incentivesConfigurationSchema = T.Object({\n-  /**\n-   * Network ID to run in, default to 100\n-   */\n-  evmNetworkId: T.Number({ default: 100 }),\n-  /**\n-   * The encrypted key to use for permit generation\n-   */\n-  evmPrivateEncrypted: T.String(),\n-  /**\n-   * Reward token for ERC20 permits, default WXDAI for gnosis chain\n-   */\n-  erc20RewardToken: T.String({ default: \"0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d\" }),\n-  incentives: T.Object({\n+export const incentivesConfigurationSchema = T.Object(\n+  {\n     /**\n-     * Optionally specify a file to write the results in\n+     * Network ID to run in, default to 100\n      */\n-    file: T.Optional(T.String()),\n+    evmNetworkId: T.Number({ default: 100 }),\n     /**\n-     * If set to true, the plugin runs even if the price label is missing, and will evaluate comments.\n+     * The encrypted key to use for permit generation\n      */\n-    requirePriceLabel: T.Boolean({ default: true }),\n-    contentEvaluator: T.Union([contentEvaluatorConfigurationType, T.Null()]),\n-    userExtractor: T.Union([userExtractorConfigurationType, T.Null()]),\n-    dataPurge: T.Union([dataPurgeConfigurationType, T.Null()]),\n-    formattingEvaluator: T.Union([formattingEvaluatorConfigurationType, T.Null()]),\n-    permitGeneration: T.Union([permitGenerationConfigurationType, T.Null()]),\n-    githubComment: T.Union([githubCommentConfigurationType, T.Null()]),\n-  }),\n-  dataCollection: dataCollectionConfigurationType,\n-});\n+    evmPrivateEncrypted: T.String(),\n+    /**\n+     * Reward token for ERC20 permits, default WXDAI for gnosis chain\n+     */\n+    erc20RewardToken: T.String({ default: \"0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d\" }),\n+    incentives: T.Object(\n+      {\n+        /**\n+         * Optionally specify a file to write the results in\n+         */\n+        file: T.Optional(T.String()),\n+        /**\n+         * If set to true, the plugin runs even if the price label is missing, and will evaluate comments.","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.7}},{"id":1696435929,"content":"won't this count twice?\r\nfor example:\r\n```\r\n<p>this a <span>test</span> string</p>\r\n```\r\nfor `p` textContent will be `this a test string` and for `span` it will be `test`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696435929","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -91,30 +96,43 @@ export class FormattingEvaluatorModule implements Module {\n     const html = this._md.render(comment.content);\n     const temp = new JSDOM(html);\n     if (temp.window.document.body) {\n-      const res = this.classifyTagsWithWordCount(temp.window.document.body);\n+      const res = this.classifyTagsWithWordCount(temp.window.document.body, comment.type);\n       return { formatting: res };\n     } else {\n       throw new Error(`Could not create DOM for comment [${comment}]`);\n     }\n   }\n \n-  _countWords(text: string): number {\n-    return text.trim().split(/\\s+/).length;\n+  _countWords(symbols: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"symbols\"], text: string) {\n+    const counts: { [p: string]: { count: number; multiplier: number } } = {};\n+    for (const [regex, multiplier] of Object.entries(symbols)) {\n+      const match = text.trim().match(new RegExp(regex, \"g\"));\n+      counts[regex] = {\n+        count: match?.length || 1,\n+        multiplier,\n+      };\n+    }\n+    return counts;\n   }\n \n-  classifyTagsWithWordCount(htmlElement: HTMLElement) {\n-    const tagWordCount: Record<string, { count: number; score: number }> = {};\n+  classifyTagsWithWordCount(htmlElement: HTMLElement, commentType: GithubCommentScore[\"type\"]) {\n+    const tagWordCount: Record<\n+      string,\n+      { symbols: { [p: string]: { count: number; multiplier: number } }; score: number }\n+    > = {};\n     const elements = htmlElement.getElementsByTagName(\"*\");\n \n     for (const element of elements) {\n       const tagName = element.tagName.toLowerCase();\n-      const wordCount = this._countWords(element.textContent || \"\");\n+      const wordCount = this._countWords(this._multipliers[commentType].symbols, element.textContent || \"\");","score":{"reward":2.754,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":92.965,"syllables":20,"sentences":2,"score":0.67035},"multiplier":1,"relevance":0.9}},{"id":1696437913,"content":"shouldn't it multiply by relevance not divide?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696437913","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -164,14 +164,7 @@ export class GithubCommentModule implements Module {\n             <td>\n             <details>\n               <summary>\n-                ${Object.values(commentScore.score?.formatting?.content || {}).reduce((acc, curr) => {\n-                  const multiplier = new Decimal(\n-                    commentScore.score?.formatting\n-                      ? commentScore.score.formatting.formattingMultiplier * commentScore.score.formatting.wordValue\n-                      : 0\n-                  );\n-                  return acc.add(multiplier.mul(curr.score * curr.count));\n-                }, new Decimal(0))}\n+                ${new Decimal(commentScore.score?.reward || 0).div(new Decimal(commentScore.score?.relevance || 1))}","score":{"reward":1.584,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":61.24000000000001,"syllables":13,"sentences":1,"score":0.9875999999999999},"multiplier":1,"relevance":0.8}},{"id":1696468252,"content":"if there's no match shouldn't we set to 0?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696468252","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -91,30 +96,43 @@ export class FormattingEvaluatorModule implements Module {\n     const html = this._md.render(comment.content);\n     const temp = new JSDOM(html);\n     if (temp.window.document.body) {\n-      const res = this.classifyTagsWithWordCount(temp.window.document.body);\n+      const res = this.classifyTagsWithWordCount(temp.window.document.body, comment.type);\n       return { formatting: res };\n     } else {\n       throw new Error(`Could not create DOM for comment [${comment}]`);\n     }\n   }\n \n-  _countWords(text: string): number {\n-    return text.trim().split(/\\s+/).length;\n+  _countWords(symbols: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"symbols\"], text: string) {\n+    const counts: { [p: string]: { count: number; multiplier: number } } = {};\n+    for (const [regex, multiplier] of Object.entries(symbols)) {\n+      const match = text.trim().match(new RegExp(regex, \"g\"));\n+      counts[regex] = {\n+        count: match?.length || 1,","score":{"reward":1.89,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":111.07000000000002,"syllables":11,"sentences":1,"score":1},"multiplier":1,"relevance":0.75}},{"id":1696477227,"content":"In my memory score was basically a reward for each tag, for example if there are 5 p tags and the score in the config is set to 5, then the reward is 25.\r\nIf I understand correctly now symbols/regex is counted inside the tag and multiplied by the multiplier for the symbol and then multiplied by formatting multiplier which is a multiplier that is same for all symbols and tags and then multiplied by score which is like a multiplier that is same for all symbols inside the tag?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696477227","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -55,22 +58,24 @@ export class FormattingEvaluatorModule implements Module {\n         const { formatting } = this._getFormattingScore(comment);\n         const multiplierFactor = this._multipliers?.[comment.type] ?? { wordValue: 0, formattingMultiplier: 0 };\n         const formattingTotal = formatting\n-          ? Object.values(formatting).reduce(\n-              (acc, curr) =>\n-                acc.add(\n-                  new Decimal(curr.score)\n+          ? Object.values(formatting).reduce((acc, curr) => {\n+              let sum = new Decimal(0);\n+              for (const symbol of Object.keys(curr.symbols)) {\n+                sum = sum.add(\n+                  new Decimal(curr.symbols[symbol].count)\n+                    .mul(curr.symbols[symbol].multiplier)\n                     .mul(multiplierFactor.formattingMultiplier)\n-                    .mul(curr.count)\n-                    .mul(multiplierFactor.wordValue)\n-                ),\n-              new Decimal(0)\n-            )\n+                    .mul(curr.score)","score":{"reward":5.559,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":91,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":41.6546978021978,"syllables":128,"sentences":2,"score":0.8165469780219781},"multiplier":1,"relevance":0.85}},{"id":1696478487,"content":"maybe it'd be better to name this `tags` or `tagMultiplier`?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696478487","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -65,55 +65,65 @@ with:\n         redeemTask: true\n       dataPurge:\n       formattingEvaluator:\n-        scores:\n-          br: 0\n-          code: 1\n-          p: 1\n-          em: 0\n-          img: 0\n-          strong: 0\n-          blockquote: 0\n-          h1: 1\n-          h2: 1\n-          h3: 1\n-          h4: 1\n-          h5: 1\n-          h6: 1\n-          a: 1\n-          li: 1\n-          td: 1\n-          hr: 0\n         multipliers:\n           - select: [ ISSUE_SPECIFICATION ]\n             formattingMultiplier: 1\n-            wordValue: 0.1\n+            symbols:\n+              \"\\\\b\\\\w+\\\\b\": 0.1\n+            scores: # Scores can be set for each item differently","score":{"reward":1.526,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":103.70000000000002,"syllables":10,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":1696479782,"content":"I always associate symbols with special characters like ^%$#, so maybe a better name would be `regexes` or `regexMultiplier`?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696479782","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -65,55 +65,65 @@ with:\n         redeemTask: true\n       dataPurge:\n       formattingEvaluator:\n-        scores:\n-          br: 0\n-          code: 1\n-          p: 1\n-          em: 0\n-          img: 0\n-          strong: 0\n-          blockquote: 0\n-          h1: 1\n-          h2: 1\n-          h3: 1\n-          h4: 1\n-          h5: 1\n-          h6: 1\n-          a: 1\n-          li: 1\n-          td: 1\n-          hr: 0\n         multipliers:\n           - select: [ ISSUE_SPECIFICATION ]\n             formattingMultiplier: 1\n-            wordValue: 0.1\n+            symbols:","score":{"reward":2.46,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":63.69500000000001,"syllables":24,"sentences":1,"score":0.96305},"multiplier":1,"relevance":0.75}},{"id":1696485258,"content":"if I want to create a multiplier that's not specific to a particular role, how do I do that?\r\nA cool feature would be to have like default multiplier but it can get overwritten by specific multipliers","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696485258","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -65,55 +65,65 @@ with:\n         redeemTask: true\n       dataPurge:\n       formattingEvaluator:\n-        scores:\n-          br: 0\n-          code: 1\n-          p: 1\n-          em: 0\n-          img: 0\n-          strong: 0\n-          blockquote: 0\n-          h1: 1\n-          h2: 1\n-          h3: 1\n-          h4: 1\n-          h5: 1\n-          h6: 1\n-          a: 1\n-          li: 1\n-          td: 1\n-          hr: 0\n         multipliers:\n           - select: [ ISSUE_SPECIFICATION ]","score":{"reward":4.416,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":38,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":60.65000000000002,"syllables":57,"sentences":2,"score":0.9934999999999998},"multiplier":1,"relevance":0.8}},{"id":1696603893,"content":"Of course people don't write comments in HTML but when markdown gets converted to HTML there might be a scenario where that happens","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696603893","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -91,30 +96,43 @@ export class FormattingEvaluatorModule implements Module {\n     const html = this._md.render(comment.content);\n     const temp = new JSDOM(html);\n     if (temp.window.document.body) {\n-      const res = this.classifyTagsWithWordCount(temp.window.document.body);\n+      const res = this.classifyTagsWithWordCount(temp.window.document.body, comment.type);\n       return { formatting: res };\n     } else {\n       throw new Error(`Could not create DOM for comment [${comment}]`);\n     }\n   }\n \n-  _countWords(text: string): number {\n-    return text.trim().split(/\\s+/).length;\n+  _countWords(symbols: FormattingEvaluatorConfiguration[\"multipliers\"][0][\"symbols\"], text: string) {\n+    const counts: { [p: string]: { count: number; multiplier: number } } = {};\n+    for (const [regex, multiplier] of Object.entries(symbols)) {\n+      const match = text.trim().match(new RegExp(regex, \"g\"));\n+      counts[regex] = {\n+        count: match?.length || 1,\n+        multiplier,\n+      };\n+    }\n+    return counts;\n   }\n \n-  classifyTagsWithWordCount(htmlElement: HTMLElement) {\n-    const tagWordCount: Record<string, { count: number; score: number }> = {};\n+  classifyTagsWithWordCount(htmlElement: HTMLElement, commentType: GithubCommentScore[\"type\"]) {\n+    const tagWordCount: Record<\n+      string,\n+      { symbols: { [p: string]: { count: number; multiplier: number } }; score: number }\n+    > = {};\n     const elements = htmlElement.getElementsByTagName(\"*\");\n \n     for (const element of elements) {\n       const tagName = element.tagName.toLowerCase();\n-      const wordCount = this._countWords(element.textContent || \"\");\n+      const wordCount = this._countWords(this._multipliers[commentType].symbols, element.textContent || \"\");","score":{"reward":3.553,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":73.20000000000002,"syllables":31,"sentences":1,"score":0.8679999999999999},"multiplier":1,"relevance":0.85}},{"id":1721035518,"content":"can you help me grasp how this calculation work?\r\nAt first for every tag (`<a>`), the number of regex matches is counted (each regex has its own multiplier) and has a so called score which is defined in the config.\r\nThen for the calculation, for every regex (symbol) the count is multiplied by the regex multiplier which makes sense, then that is multiplied by a \"general\" multiplier and multiplied by a `score` which is a multiplier for the tag I assume.\r\nI had to read the code a couple of times and it's hard to keep track of all different names for same things, like symbols = regex, score = multiplier for a tag and variables names are confusing such as `wordCount` for regex count","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1721035518","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -56,15 +56,15 @@ export class FormattingEvaluatorModule implements Module {\n         const comment = comments[i];\n         // Count with html elements if any, otherwise just treat it as plain text\n         const { formatting } = this._getFormattingScore(comment);\n-        const multiplierFactor = this._multipliers?.[comment.type] ?? { wordValue: 0, formattingMultiplier: 0 };\n+        const multiplierFactor = this._multipliers?.[comment.type] ?? { multiplier: 0 };\n         const formattingTotal = formatting\n           ? Object.values(formatting).reduce((acc, curr) => {\n               let sum = new Decimal(0);\n               for (const symbol of Object.keys(curr.symbols)) {\n                 sum = sum.add(\n                   new Decimal(curr.symbols[symbol].count)\n                     .mul(curr.symbols[symbol].multiplier)\n-                    .mul(multiplierFactor.formattingMultiplier)\n+                    .mul(multiplierFactor.multiplier)\n                     .mul(curr.score)\n                 );\n               }","score":{"reward":5.778,"formatting":{"content":{"p":{"score":0,"elementCount":4}},"result":0},"priority":2,"words":{"wordCount":121,"wordValue":0.1,"result":2.48},"readability":{"fleschKincaid":58.67009297520664,"syllables":168,"sentences":4,"score":0.9867009297520665},"multiplier":1,"relevance":0.9}},{"id":1723572942,"content":"that was also my understanding but currently in the code it's a multiplier","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1723572942","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -56,15 +56,15 @@ export class FormattingEvaluatorModule implements Module {\n         const comment = comments[i];\n         // Count with html elements if any, otherwise just treat it as plain text\n         const { formatting } = this._getFormattingScore(comment);\n-        const multiplierFactor = this._multipliers?.[comment.type] ?? { wordValue: 0, formattingMultiplier: 0 };\n+        const multiplierFactor = this._multipliers?.[comment.type] ?? { multiplier: 0 };\n         const formattingTotal = formatting\n           ? Object.values(formatting).reduce((acc, curr) => {\n               let sum = new Decimal(0);\n               for (const symbol of Object.keys(curr.symbols)) {\n                 sum = sum.add(\n                   new Decimal(curr.symbols[symbol].count)\n                     .mul(curr.symbols[symbol].multiplier)\n-                    .mul(multiplierFactor.formattingMultiplier)\n+                    .mul(multiplierFactor.multiplier)\n                     .mul(curr.score)\n                 );\n               }","score":{"reward":2.114,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":59.68214285714288,"syllables":22,"sentences":1,"score":0.9968214285714287},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2205832450,"effect":{"addition":437,"deletion":304},"reward":14.82,"priority":2},{"reviewId":2244377191,"effect":{"addition":423,"deletion":244},"reward":13.34,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 61.954 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>28.16</td></tr><tr><td>Review</td><td>Comment</td><td>12</td><td>33.794</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68\" target=\"_blank\" rel=\"noopener\">#68</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+437 -304</td><td>2</td><td>14.82</td></tr><tr><td>+423 -244</td><td>2</td><td>13.34</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1695764395\" target=\"_blank\" rel=\"noopener\">why is there a need for merge? can't you just use &#96;Value.Def&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.16</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1695771108\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion* If set to false, the plugi&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696435929\" target=\"_blank\" rel=\"noopener\">won't this count twice?for example:&#96;&#96;&#96;&lt;p&gt&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.9</td><td>2</td><td>2.754</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696437913\" target=\"_blank\" rel=\"noopener\">shouldn't it multiply by relevance not divide?</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.584</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696468252\" target=\"_blank\" rel=\"noopener\">if there's no match shouldn't we set to 0?</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.75</td><td>2</td><td>1.89</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696477227\" target=\"_blank\" rel=\"noopener\">In my memory score was basically a reward for each tag, for exam&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 91&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.85</td><td>2</td><td>5.559</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696478487\" target=\"_blank\" rel=\"noopener\">maybe it'd be better to name this &#96;tags&#96; or &#96;tagMult&hellip;</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.526</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696479782\" target=\"_blank\" rel=\"noopener\">I always associate symbols with special characters like ^%$#, so&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.75</td><td>2</td><td>2.46</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696485258\" target=\"_blank\" rel=\"noopener\">if I want to create a multiplier that's not specific to a partic&hellip;</a></h6></td><td><details><summary>2.13</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 38&#13;  wordValue: 0.1&#13;  result: 2.13&#13;</pre></details></td><td>0.8</td><td>2</td><td>4.416</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1696603893\" target=\"_blank\" rel=\"noopener\">Of course people don't write comments in HTML but when markdown &hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.85</td><td>2</td><td>3.553</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1721035518\" target=\"_blank\" rel=\"noopener\">can you help me grasp how this calculation work?At first for e&hellip;</a></h6></td><td><details><summary>2.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;  result: 0&#13;regex:&#13;  wordCount: 121&#13;  wordValue: 0.1&#13;  result: 2.48&#13;</pre></details></td><td>0.9</td><td>2</td><td>5.778</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#discussion_r1723572942\" target=\"_blank\" rel=\"noopener\">that was also my understanding but currently in the code it's a &hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.114</td></tr></tbody></table></details>"},"rndquu":{"total":14.68,"userId":119500907,"comments":[{"id":2252137364,"content":"@gentlementlegen Check [this](https://github.com/rndquu-org/test-repo/blob/8c295121fbfe3fb5da691e3288487a246951d5d9/.github/.ubiquibot-config.yml) config and [this](https://github.com/rndquu/conversation-rewards/actions/runs/10107389082/job/27951174446) CI run which outputs:\r\n```\r\nInvalid incentives configuration detected, will revert to defaults.\r\n{\r\n  type: 62,\r\n  schema: { anyOf: [ [Object], [Object] ], [Symbol(TypeBox.Kind)]: 'Union' },\r\n  path: '/incentives/formattingEvaluator',\r\n  value: {\r\n    scores: {\r\n      br: 0,\r\n      code: 1,\r\n      p: 1,\r\n      em: 0,\r\n      img: 0,\r\n      strong: 0,\r\n      blockquote: 0,\r\n      h1: 1,\r\n      h2: 1,\r\n      h3: 1,\r\n      h4: 1,\r\n      h5: 1,\r\n      h6: 1,\r\n      a: 1,\r\n      li: 1,\r\n      td: 1,\r\n      hr: 0\r\n    },\r\n    multipliers: [\r\n      [Object], [Object],\r\n      [Object], [Object],\r\n      [Object], [Object],\r\n      [Object], [Object],\r\n      [Object], [Object]\r\n    ]\r\n  },\r\n  message: 'Expected union value'\r\n}\r\n```\r\nIs this error expected?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#issuecomment-2252137364","commentType":"PULL_COLLABORATOR","score":{"reward":6.56,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":59.68214285714288,"syllables":22,"sentences":1,"score":0.9968214285714287},"multiplier":1,"relevance":0.8}},{"id":2252382408,"content":"@gentlementlegen The `Invalid incentives configuration detected, will revert to defaults.` still persists both for the config from readme file and [this](https://github.com/ubiquibot/conversation-rewards/pull/68#issuecomment-2252274808) one.\r\nCheck [this](https://github.com/rndquu-org/test-repo/blob/adc6156d1255140f2236b9681b243139aa1576be/.github/.ubiquibot-config.yml) config and [this](https://github.com/rndquu/conversation-rewards/actions/runs/10109281547/job/27956860833) CI run with the `Invalid incentives configuration detected` error.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#issuecomment-2252382408","commentType":"PULL_COLLABORATOR","score":{"reward":8.12,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":3}},"result":3},"priority":2,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":78.33000000000001,"syllables":33,"sentences":2,"score":0.8166999999999999},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 14.68 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>2</td><td>14.68</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#issuecomment-2252137364\" target=\"_blank\" rel=\"noopener\">@gentlementlegen Check [this](https://github.com/rndquu-org/test&hellip;</a></h6></td><td><details><summary>3.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.8</td><td>2</td><td>6.56</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#issuecomment-2252382408\" target=\"_blank\" rel=\"noopener\">@gentlementlegen The &#96;Invalid incentives configuration detec&hellip;</a></h6></td><td><details><summary>4.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 3&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.7</td><td>2</td><td>8.12</td></tr></tbody></table></details>"},"Keyrxng":{"total":5.13,"userId":106303466,"comments":[{"id":2291813436,"content":"@gentlementlegen where can I find a working config setup? Is the readme one up to date? I'm getting typebox errors with it the same as [rndquu had](https://github.com/ubiquibot/conversation-rewards/pull/68#issuecomment-2252137364)\r\nI think we should eslint.ignore `README.md` and have the correct indentation etc copy and pasted from a working config in all plugin repos starting from `plugins:` as it has 0 indentation.\r\n```\r\nInvalid incentives configuration detected, will revert to defaults.\r\n{\r\n  type: 62,\r\n  schema: {\r\n    default: null,\r\n    anyOf: [ [Object], [Object] ],\r\n    [Symbol(TypeBox.Kind)]: 'Union'\r\n  },\r\n  path: '/incentives/formattingEvaluator',\r\n  value: {\r\n    multipliers: [\r\n      [Object], [Object],\r\n      [Object], [Object],\r\n      [Object], [Object],\r\n      [Object], [Object],\r\n      [Object], [Object]\r\n    ]\r\n  },\r\n  message: 'Expected union value'\r\n}\r\n```\r\nThe union type is the roles but it seems like the defaults are also throwing looking at this log. I have tried two of the configs from this thread and the one from the readme. I have tried making small adjustments like indentation and using quotes for strings etc but no luck. The [runs](https://github.com/ubq-testing/conversation-rewards/actions/runs/10407007367/job/28822902792) seems to be exiting without error but fails to load any modules. \r\nI'm not 100% on my triage but in my case all the user sees on the issue is `+ Evaluating results. Please wait...` and has no feedback without manually reviewing the logs. Is it something that I am doing wrong?\r\n---\r\n```\r\nPERMIT_FEE_RATE=\"\"\r\nPERMIT_TREASURY_GITHUB_USERNAME=\"\"\r\nPERMIT_ERC20_TOKENS_NO_FEE_WHITELIST=\"\"\r\n```\r\nThese are optional repo secrets right?\r\nand the only required ones are \r\n```\r\nOPENAI_API_KEY\r\nSUPABASE_KEY\r\nSUPABASE_URL\r\nX25519_PRIVATE_KEY\r\n```\r\nI did get feedback when I had missing secrets which is good","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#issuecomment-2291813436","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.952,"formatting":{"content":{"p":{"score":0,"elementCount":7},"hr":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":2}},"result":2},"priority":2,"words":{"wordCount":184,"wordValue":0.1,"result":1.89},"readability":{"fleschKincaid":76.7857971014493,"syllables":249,"sentences":12,"score":0.8321420289855069},"multiplier":0.25,"relevance":0.8}},{"id":2302991247,"content":"- https://github.com/ubq-testing/conversation-rewards/issues/1\r\nThe only feedback on the issue I'm getting is `+ Evaluating results. Please wait...`.\r\nI was reading the wrong step in the run but things appear to be the same for me as before. Using the config you gave me and little feedback on the issue.\r\nAm I the only one that can't run this? @whilefoo could you? \r\nEither I'm stupid af or it's going to be as tricky for partner's to get right as it appears to be for me lol.\r\nWould it be possible to use `T.Enum` instead of `T.Union` considering it's inside a `T.Array` would that work? It might resolve the typebox union error that's happening. I don't think it's a good idea to allow that to remain unresolved. If it prevents errors down the line from being logged especially.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#issuecomment-2302991247","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.512,"formatting":{"content":{"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":1},"p":{"score":0,"elementCount":5},"a":{"score":1,"elementCount":1}},"result":1.1},"priority":2,"words":{"wordCount":134,"wordValue":0.1,"result":2.38},"readability":{"fleschKincaid":78.86797202797204,"syllables":194,"sentences":11,"score":0.8113202797202795},"multiplier":0.25,"relevance":0.7}},{"id":2304210635,"content":"Very weird you'd expect that a fork of your branch, an exact config match and up to date kernel that it would work out-of-the-box.\r\nFor sure another issue to address the typebox issue and improve feedback on the issue for scenarios like the one I've been experiencing.\r\n---\r\nI also have a concern regarding [env vars](https://github.com/gentlementlegen/conversation-rewards/blob/feat/symbol-coefficient/src/types/env-type.ts) in this repo.\r\nIt seems that `env` and `pluginSettings` are out-of-sync. In the new config we pass the privateKey via the org config not repo secrets.\r\nPartner's that want to use this plugin need to use their org config to pass env vars as we don't want them to have to fork this repo. I think `permit_fee` etc is set by us so that makes sense to keep but I'm unsure about the rest but basically can this be cleaned up to what is actually passed via secrets? In another PR if or whatever you think is best","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#issuecomment-2304210635","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.666,"formatting":{"content":{"p":{"score":0,"elementCount":5},"hr":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":160,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":76.55500000000004,"syllables":208,"sentences":8,"score":0.8344499999999997},"multiplier":0.25,"relevance":0.85}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 5.13 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>3</td><td>5.13</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#issuecomment-2291813436\" target=\"_blank\" rel=\"noopener\">@gentlementlegen where can I find a working config setup? Is the&hellip;</a></h6></td><td><details><summary>3.89</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 7&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 184&#13;  wordValue: 0.1&#13;  result: 1.89&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.952</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#issuecomment-2302991247\" target=\"_blank\" rel=\"noopener\">- https://github.com/ubq-testing/conversation-rewards/issues/1&hellip;</a></h6></td><td><details><summary>3.48</summary><pre>content:&#13;  content:&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 1&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.1&#13;regex:&#13;  wordCount: 134&#13;  wordValue: 0.1&#13;  result: 2.38&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.512</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/68#issuecomment-2304210635\" target=\"_blank\" rel=\"noopener\">Very weird you'd expect that a fork of your branch, an exact con&hellip;</a></h6></td><td><details><summary>3.13</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 160&#13;  wordValue: 0.1&#13;  result: 2.13&#13;</pre></details></td><td>0.85</td><td>2</td><td>1.666</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_2.json","json":{"Keyrxng":{"userId":106303466,"total":201.386,"task":{"reward":200,"multiplier":1},"comments":[{"id":2254378933,"content":"@jordan-ae we are in a mission critical stage right now and these tasks you are working have a sense of urgency behind them and we need to be pushing things forward.\r\nWith this in mind, I am going to keep you assigned and I will assign myself too like a little dream team. I'll push things forward with this task while you work on the tests for the other one, this way we have progress and in the end you will still be rewarded for this task\r\nEDIT:\r\nV1 bot kicked you for inactivity but I'll stick to my word above but know that in the future the bot will kick you automatically and someone can jump in and take the reward if they are quicker to a mergeable PR","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/2#issuecomment-2254378933","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.386,"formatting":{"content":{"p":{"score":0,"elementCount":4}},"result":0},"priority":2,"words":{"wordCount":133,"wordValue":0.1,"result":2.39},"readability":{"fleschKincaid":54.337418546365924,"syllables":169,"sentences":3,"score":0.9433741854636593},"multiplier":0.25,"relevance":0.9}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 201.386 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>200</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.386</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/2#issuecomment-2254378933\" target=\"_blank\" rel=\"noopener\">@jordan-ae we are in a mission critical stage right now and thes&hellip;</a></h6></td><td><details><summary>2.39</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;  result: 0&#13;regex:&#13;  wordCount: 133&#13;  wordValue: 0.1&#13;  result: 2.39&#13;</pre></details></td><td>0.9</td><td>2</td><td>1.386</td></tr></tbody></table></details>"},"gentlementlegen":{"total":72.372,"userId":9807008,"comments":[{"id":2146935670,"content":"@0x4007 Seems there has been some issues since we updated the Bot. Here is the link to the error for reference:\r\nhttps://supabase.com/dashboard/project/wfzpewmlyiozupulbuur/editor/28943?sort=created%3Adesc&filter=level%3Aneq%3Ainfo&filter=id%3Aeq%3A983125","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/2#issuecomment-2146935670","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.292,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":65.555,"syllables":62,"sentences":4,"score":0.9444499999999999},"multiplier":1,"relevance":0.2}},{"id":2342362152,"content":"@0x4007 I generated then deleted so users cannot claim twice. You can re-generate for yourself I guess.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/2#issuecomment-2342362152","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.346,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":75.50000000000003,"syllables":26,"sentences":2,"score":0.8449999999999998},"multiplier":1,"relevance":0.1}},{"id":1694222815,"content":"What is it for?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1694222815","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -43,6 +43,8 @@ To configure your Ubiquibot to run this plugin, add the following to the `.ubiqu\n     miscellaneous:\n       maxConcurrentTasks: 3\n       startRequiresWallet: true # default is true\n+      botUsernames:\n+        - ubiquibot[bot]","score":{"reward":0.228,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.2}},{"id":1694583746,"content":"I think for now using `Bot` is okay because it is easy to make a typo or forget about this field. Having the two bots running is a case that should not be happening often, and actually both bots should able not to clash with themselves. I suggest using `Bot` for now and if needed we can start to add extra configuration parameters as you did here.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1694583746","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -43,6 +43,8 @@ To configure your Ubiquibot to run this plugin, add the following to the `.ubiqu\n     miscellaneous:\n       maxConcurrentTasks: 3\n       startRequiresWallet: true # default is true\n+      botUsernames:\n+        - ubiquibot[bot]","score":{"reward":4.592,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":65,"wordValue":0.1,"result":2.56},"readability":{"fleschKincaid":66.40333333333335,"syllables":91,"sentences":3,"score":0.9359666666666665},"multiplier":1,"relevance":0.7}},{"id":1696139709,"content":"Might be better to create the comment with the logger.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696139709","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -21,6 +22,12 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n     throw new Error(\"Issue is a parent issue\");\n   }\n \n+  const hasBeenPreviouslyUnassigned = await checkPreviousAssignments(context, sender);\n+  if (hasBeenPreviouslyUnassigned) {\n+    await addCommentToIssue(context, \"```diff\\n! You were previously unassigned from this task. You cannot reassign yourself.\\n```\");","score":{"reward":1.76,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":86.70500000000001,"syllables":13,"sentences":1,"score":0.7329499999999999},"multiplier":1,"relevance":0.8}},{"id":1697930259,"content":"What does this value correspond to, the `APP_ID`? I think this should not be hardocded.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1697930259","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,59 @@\n+import { Context, IssueEvent } from \"../../types\";\n+\n+const UBIQUIBOT_ID = 113181824;","score":{"reward":2.52,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":90.95857142857145,"syllables":18,"sentences":2,"score":0.6904142857142855},"multiplier":1,"relevance":0.9}},{"id":1698012761,"content":"Got it, but then when we use the plugin within another organization won't this be broken?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1698012761","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,59 @@\n+import { Context, IssueEvent } from \"../../types\";\n+\n+const UBIQUIBOT_ID = 113181824;","score":{"reward":2.752,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":60.19176470588238,"syllables":26,"sentences":1,"score":0.9980823529411762},"multiplier":1,"relevance":0.8}},{"id":1698078096,"content":"Then that would be fine I believe. My concern is when we are installing in a different organization so it doesn't break there, such as when we run our own tests.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1698078096","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,59 @@\n+import { Context, IssueEvent } from \"../../types\";\n+\n+const UBIQUIBOT_ID = 113181824;","score":{"reward":3.388,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":79.5575,"syllables":42,"sentences":2,"score":0.804425},"multiplier":1,"relevance":0.7}},{"id":2254467704,"content":"@Keyrxng If it contains the other PR content no it doesn't. However I think that the other pull-request comments won't be evaluated. No impact on the reward itself.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#issuecomment-2254467704","commentType":"PULL_COLLABORATOR","score":{"reward":1.44,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":76.26924731182795,"syllables":44,"sentences":3,"score":0.8373075268817205},"multiplier":1,"relevance":0.3}},{"id":2254468672,"content":"@Keyrxng Correct. I will review this pull-request instead then.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#issuecomment-2254468672","commentType":"PULL_COLLABORATOR","score":{"reward":0.444,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":83.32000000000004,"syllables":14,"sentences":2,"score":0.7667999999999996},"multiplier":1,"relevance":0.2}},{"id":2314861096,"content":"The README.md does not match the new configuration. Also, `APP_ID` seems to always be required in the configuration, is that something we want? Can't we deduce it from the bot app id itself if not set?\r\nAlso `APP_ID` had to be added to Wrangler secret upload.\r\n---\r\nQA on my repo, seems to work fine\r\nhttps://github.com/Meniole/command-start-stop/issues/9","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#issuecomment-2314861096","commentType":"PULL_COLLABORATOR","score":{"reward":7.686,"formatting":{"content":{"p":{"score":0,"elementCount":4},"hr":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":54,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":79.52857142857145,"syllables":88,"sentences":7,"score":0.8047142857142855},"multiplier":1,"relevance":0.9}},{"id":2315601923,"content":"`APP_ID` represents the installation id of the app within GitHub if I am not mistaken. It is called `UBIQUIBOT_APP_ID` in our org. Also checked the payload and this info is not there. And since this is not an action but a worker I guess it doesn't have the running context of GitHub so cannot figure it out by itself, probably.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#issuecomment-2315601923","commentType":"PULL_COLLABORATOR","score":{"reward":5.024,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":59,"wordValue":0.1,"result":2.51},"readability":{"fleschKincaid":75.71798728813562,"syllables":81,"sentences":4,"score":0.8428201271186438},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2203460694,"effect":{"addition":162,"deletion":17},"reward":3.58,"priority":2},{"reviewId":2206382781,"effect":{"addition":732,"deletion":191},"reward":18.46,"priority":2},{"reviewId":2209219402,"effect":{"addition":71,"deletion":155},"reward":4.52,"priority":2},{"reviewId":2214305433,"effect":{"addition":57,"deletion":7},"reward":1.28,"priority":2},{"reviewId":2271492669,"effect":{"addition":402,"deletion":251},"reward":13.06,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 72.372 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>5</td><td>40.9</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>1.638</td></tr><tr><td>Review</td><td>Comment</td><td>10</td><td>29.834</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19\" target=\"_blank\" rel=\"noopener\">#19</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+162 -17</td><td>2</td><td>3.58</td></tr><tr><td>+732 -191</td><td>2</td><td>18.46</td></tr><tr><td>+71 -155</td><td>2</td><td>4.52</td></tr><tr><td>+57 -7</td><td>2</td><td>1.28</td></tr><tr><td>+402 -251</td><td>2</td><td>13.06</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/2#issuecomment-2146935670\" target=\"_blank\" rel=\"noopener\">@0x4007 Seems there has been some issues since we updated the Bo&hellip;</a></h6></td><td><details><summary>2.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.2</td><td>2</td><td>1.292</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/2#issuecomment-2342362152\" target=\"_blank\" rel=\"noopener\">@0x4007 I generated then deleted so users cannot claim twice. Yo&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.346</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1694222815\" target=\"_blank\" rel=\"noopener\">What is it for?</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.228</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1694583746\" target=\"_blank\" rel=\"noopener\">I think for now using &#96;Bot&#96; is okay because it is easy t&hellip;</a></h6></td><td><details><summary>2.56</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 65&#13;  wordValue: 0.1&#13;  result: 2.56&#13;</pre></details></td><td>0.7</td><td>2</td><td>4.592</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696139709\" target=\"_blank\" rel=\"noopener\">Might be better to create the comment with the logger.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.8</td><td>2</td><td>1.76</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1697930259\" target=\"_blank\" rel=\"noopener\">What does this value correspond to, the &#96;APP_ID&#96;? I thin&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.9</td><td>2</td><td>2.52</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1698012761\" target=\"_blank\" rel=\"noopener\">Got it, but then when we use the plugin within another organizat&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.752</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1698078096\" target=\"_blank\" rel=\"noopener\">Then that would be fine I believe. My concern is when we are ins&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.7</td><td>2</td><td>3.388</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#issuecomment-2254467704\" target=\"_blank\" rel=\"noopener\">@Keyrxng If it contains the other PR content no it doesn't. Howe&hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.3</td><td>2</td><td>1.44</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#issuecomment-2254468672\" target=\"_blank\" rel=\"noopener\">@Keyrxng Correct. I will review this pull-request instead then.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.444</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#issuecomment-2314861096\" target=\"_blank\" rel=\"noopener\">The README.md does not match the new configuration. Also, &#96;A&hellip;</a></h6></td><td><details><summary>3.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 54&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>0.9</td><td>2</td><td>7.686</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#issuecomment-2315601923\" target=\"_blank\" rel=\"noopener\">&#96;APP_ID&#96; represents the installation id of the app withi&hellip;</a></h6></td><td><details><summary>2.51</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 59&#13;  wordValue: 0.1&#13;  result: 2.51&#13;</pre></details></td><td>0.8</td><td>2</td><td>5.024</td></tr></tbody></table></details>"},"gitcoindev":{"total":0.228,"userId":88761781,"comments":[{"id":2146979221,"content":"From the logs I see it failed on creating a label when it already existed:\r\n``` \"response\": {\r\n      \"url\": \"https://api.github.com/repos/ubiquibot/command-start-stop/labels\",\r\n      \"data\": {\r\n        \"errors\": [\r\n          {\r\n            \"code\": \"already_exists\",\r\n            \"field\": \"name\",\r\n            \"resource\": \"Label\"\r\n          }\r\n        ],\r\n        \"message\": \"Validation Failed\",\r\n        \"documentation_url\": \"https://docs.github.com/rest/issues/labels#create-a-label\"\r\n      },\r\n      \"status\": 422,\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/2#issuecomment-2146979221","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.228,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":78.81000000000003,"syllables":20,"sentences":1,"score":0.8118999999999997},"multiplier":0.25,"relevance":0.3}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.228 XP ]</a>&nbsp;</h3><h6>@gitcoindev</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.228</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/2#issuecomment-2146979221\" target=\"_blank\" rel=\"noopener\">From the logs I see it failed on creating a label when it alread&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.228</td></tr></tbody></table></details>"},"jordan-ae":{"total":0.994,"userId":33989423,"comments":[{"id":2310923708,"content":"You are right @Keyrxng I took the weekend off for health reasons didn't see the bug in the script play out. I would have really loved to clean it up unfortunately I saw the thread on sunday night when it was already too late.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/2#issuecomment-2310923708","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.994,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":78.7175,"syllables":56,"sentences":2,"score":0.812825},"multiplier":0.25,"relevance":0.7}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.994 XP ]</a>&nbsp;</h3><h6>@jordan-ae</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.994</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/2#issuecomment-2310923708\" target=\"_blank\" rel=\"noopener\">You are right @Keyrxng I took the weekend off for health reasons&hellip;</a></h6></td><td><details><summary>2.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0.7</td><td>2</td><td>0.994</td></tr></tbody></table></details>"},"0x4007":{"total":65.322,"userId":4975670,"comments":[{"id":2340691551,"content":"@gentlementlegen my permit didn't work for this one, perhaps you can let me know where I can find it.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/2#issuecomment-2340691551","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":76.55500000000004,"syllables":26,"sentences":1,"score":0.8344499999999997},"multiplier":1,"relevance":0}},{"id":2332772795,"content":"_Originally posted by @0x4007 in https://github.com/ubiquibot/plugins-wishlist/issues/7#issuecomment-2146804481_","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/2","commentType":"ISSUE_SPECIFICATION","score":{"reward":1.88,"formatting":{"content":{"p":{"score":0,"elementCount":1},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":35.662499999999994,"syllables":29,"sentences":2,"score":0.756625},"multiplier":1,"relevance":1}},{"id":1694675746,"content":"I think its a lot more robust to use the ID number, not the name. Besides we have at least one planned name change coming up soon i.e. UbiquityOS Superintendent / Kernel","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1694675746","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -43,6 +43,8 @@ To configure your Ubiquibot to run this plugin, add the following to the `.ubiqu\n     miscellaneous:\n       maxConcurrentTasks: 3\n       startRequiresWallet: true # default is true\n+      botUsernames:\n+        - ubiquibot[bot]","score":{"reward":2.88,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":82.39000000000001,"syllables":44,"sentences":4,"score":0.7760999999999999},"multiplier":1,"relevance":0.6}},{"id":1696213579,"content":"To be honest I don't feel that I have sufficient context because I can't even see the README.md in the code changes view. What problem are you trying to solve? \r\nTo ignore all bot activity, yes, use `type === \"Bot\"`\r\nTo select a specific bot or user, you should always use the user ID, not the name.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696213579","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -43,6 +43,8 @@ To configure your Ubiquibot to run this plugin, add the following to the `.ubiqu\n     miscellaneous:\n       maxConcurrentTasks: 3\n       startRequiresWallet: true # default is true\n+      botUsernames:\n+        - ubiquibot[bot]","score":{"reward":4.896,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":57,"wordValue":0.1,"result":2.48},"readability":{"fleschKincaid":82.53967105263159,"syllables":74,"sentences":4,"score":0.7746032894736841},"multiplier":1,"relevance":0.8}},{"id":1696328279,"content":"Then you should identify our bot only by its user ID number.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696328279","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -43,6 +43,8 @@ To configure your Ubiquibot to run this plugin, add the following to the `.ubiqu\n     miscellaneous:\n       maxConcurrentTasks: 3\n       startRequiresWallet: true # default is true\n+      botUsernames:\n+        - ubiquibot[bot]","score":{"reward":1.33,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":67.75500000000001,"syllables":18,"sentences":1,"score":0.9224499999999999},"multiplier":1,"relevance":0.5}},{"id":1698214358,"content":"App ID is the \"user ID\" that will never change. Installation ID is usually secret, and corresponds with each unique organization that the bot is added to. \r\nDoesn't it make sense to load this value from repo secrets instead? `process.env.APP_ID`?\r\n```suggestion\r\nconst APP_ID = getAppId();\r\nfunction getAppId(): number {\r\n  try {\r\n    const appId = JSON.parse(process.env.APP_ID);\r\n    return Number(appId);\r\n  } catch (error) {\r\n    throw new Error(\"APP_ID not parseable\")\r\n  }\r\n}\r\n```\r\nI was just kind of winging this code inside of this GitHub comment but you should check if the value is set, and is a number, before proceeding with the program. Ideally this should be checked upon runtime initialization.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1698214358","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,59 @@\n+import { Context, IssueEvent } from \"../../types\";\n+\n+const UBIQUIBOT_ID = 113181824;","score":{"reward":6.084,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":79,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":64.4334430379747,"syllables":118,"sentences":5,"score":0.9556655696202531},"multiplier":1,"relevance":0.9}},{"id":1731441502,"content":"The original implementation allowed for productive contributors to work on two tasks concurrently. With a starting two task limit:\r\n| Condition                                              | Task Adjustment       | Explanation                                                                                             |\r\n|--------------------------------------------------------|-----------------------|---------------------------------------------------------------------------------------------------------|\r\n| If any reviewer approved the pull                      | +1 task per pull      | It's likely that the pull is good, just waiting on other slow reviewers to confirm.                      |\r\n| If reviewers take longer than 24 hours                 | +1 task per pull      | Don't wait for lazy reviewers to be able to start a new task.                                            |\r\n| If any reviewer requested changes                      | -1 task per pull      | They should focus on addressing the changes as a top priority.                                           |","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1731441502","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -129,16 +116,34 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   return { output: \"Task assigned successfully\" };\n }\n \n+async function fetchUserId(context: Context, username: string) {\n+  try {\n+    const user = await context.octokit.rest.users.getByUsername({ username });\n+    return user.data.id;\n+  } catch (e) {\n+    return null;\n+  }\n+}\n+\n async function handleTaskLimitChecks(username: string, context: Context, maxConcurrentTasks: number, logger: Context[\"logger\"], sender: string) {\n   const openedPullRequests = await getAvailableOpenedPullRequests(context, username);\n   const assignedIssues = await getAssignedIssues(context, username);\n \n   // check for max and enforce max\n-  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks) {\n-    throw logger.error(username === sender ? \"You have reached your max task limit\" : `${username} has reached their max task limit`, {\n+\n+  if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxConcurrentTasks) {","score":{"reward":4.746,"formatting":{"content":{"p":{"score":0,"elementCount":6}},"result":0},"priority":2,"words":{"wordCount":94,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":58.15300000000002,"syllables":144,"sentences":5,"score":0.9815300000000002},"multiplier":1,"relevance":0.7}},{"id":1731703665,"content":"This is tricky. People generally aren't very discipline about changing it to a draft when they are continuing to edit it. What signal will be used to indicate that they are finished? We also can't always rely on them to formally request a new review from the UI. Most contributors will just tag the reviewers to check again. \nI don't think this is going to be viable.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1731703665","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -129,16 +116,34 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   return { output: \"Task assigned successfully\" };\n }\n \n+async function fetchUserId(context: Context, username: string) {\n+  try {\n+    const user = await context.octokit.rest.users.getByUsername({ username });\n+    return user.data.id;\n+  } catch (e) {\n+    return null;\n+  }\n+}\n+\n async function handleTaskLimitChecks(username: string, context: Context, maxConcurrentTasks: number, logger: Context[\"logger\"], sender: string) {\n   const openedPullRequests = await getAvailableOpenedPullRequests(context, username);\n   const assignedIssues = await getAssignedIssues(context, username);\n \n   // check for max and enforce max\n-  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks) {\n-    throw logger.error(username === sender ? \"You have reached your max task limit\" : `${username} has reached their max task limit`, {\n+\n+  if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxConcurrentTasks) {","score":{"reward":5.264,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":70,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":71.71904761904764,"syllables":102,"sentences":6,"score":0.8828095238095236},"multiplier":1,"relevance":0.8}},{"id":2255056414,"content":"No we will run the official instance. Technically people can \"self host\" but in practice people generally pay for convenience (i.e. using the official bot.) I don't think we should make special accommodations for self hosted instances.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#issuecomment-2255056414","commentType":"PULL_COLLABORATOR","score":{"reward":1.662,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":64.42569230769234,"syllables":62,"sentences":5,"score":0.9557430769230766},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2204065595,"effect":{"addition":162,"deletion":17},"reward":3.58,"priority":2},{"reviewId":2209674587,"effect":{"addition":745,"deletion":288},"reward":20.66,"priority":2},{"reviewId":2261009144,"effect":{"addition":387,"deletion":230},"reward":12.34,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 65.322 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>36.58</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>1.88</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0</td></tr><tr><td>Review</td><td>Comment</td><td>7</td><td>26.862</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19\" target=\"_blank\" rel=\"noopener\">#19</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+162 -17</td><td>2</td><td>3.58</td></tr><tr><td>+745 -288</td><td>2</td><td>20.66</td></tr><tr><td>+387 -230</td><td>2</td><td>12.34</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/2\" target=\"_blank\" rel=\"noopener\">_Originally posted by @0x4007 in https://github.com/ubiquibot/pl&hellip;</a></h6></td><td><details><summary>1.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>1</td><td>1</td><td>1.88</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/2#issuecomment-2340691551\" target=\"_blank\" rel=\"noopener\">@gentlementlegen my permit didn't work for this one, perhaps you&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1694675746\" target=\"_blank\" rel=\"noopener\">I think its a lot more robust to use the ID number, not the name&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.6</td><td>2</td><td>2.88</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696213579\" target=\"_blank\" rel=\"noopener\">To be honest I don't feel that I have sufficient context because&hellip;</a></h6></td><td><details><summary>2.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 57&#13;  wordValue: 0.1&#13;  result: 2.48&#13;</pre></details></td><td>0.8</td><td>2</td><td>4.896</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696328279\" target=\"_blank\" rel=\"noopener\">Then you should identify our bot only by its user ID number.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.5</td><td>2</td><td>1.33</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1698214358\" target=\"_blank\" rel=\"noopener\">App ID is the \"user ID\" that will never change. Installation ID &hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 79&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.9</td><td>2</td><td>6.084</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1731441502\" target=\"_blank\" rel=\"noopener\">The original implementation allowed for productive contributors &hellip;</a></h6></td><td><details><summary>2.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;  result: 0&#13;regex:&#13;  wordCount: 94&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.7</td><td>2</td><td>4.746</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1731703665\" target=\"_blank\" rel=\"noopener\">This is tricky. People generally aren't very discipline about ch&hellip;</a></h6></td><td><details><summary>2.6</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 70&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>0.8</td><td>2</td><td>5.264</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#issuecomment-2255056414\" target=\"_blank\" rel=\"noopener\">No we will run the official instance. Technically people can \"se&hellip;</a></h6></td><td><details><summary>2.15</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.15&#13;</pre></details></td><td>0.3</td><td>2</td><td>1.662</td></tr></tbody></table></details>"},"whilefoo":{"total":70.028,"userId":139262667,"comments":[{"id":1696917799,"content":"an if statement would suffice here","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696917799","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,65 @@\n+import { Context, IssueEvent } from \"../../types\";\n+\n+export async function checkPreviousAssignments(context: Context, sender: Context[\"payload\"][\"sender\"]): Promise<boolean> {\n+  const events = await getAssignmentEvents(context);\n+  const senderLogin = sender.login.toLowerCase();\n+  const userAssignments = events.filter((event) => event.assignee?.toLowerCase() === senderLogin);\n+\n+  if (userAssignments.length === 0) {\n+    return false;\n+  }\n+\n+  const unassignedEvents = userAssignments.filter((event) => event.event === \"unassigned\");\n+  const botUnassigned = unassignedEvents.filter((event) => event.actorType === \"Bot\");\n+  const adminUnassigned = unassignedEvents.filter((event) => event.actor?.toLowerCase() !== senderLogin && event.actorType === \"User\");\n+  const userSelfUnassignViaUi = unassignedEvents.filter((event) => event.actor?.toLowerCase() === senderLogin);\n+  return botUnassigned.length > 0 || adminUnassigned.length > 0 || userSelfUnassignViaUi.length > 0;\n+}\n+\n+async function getAssignmentEvents(context: Context) {\n+  const { repository, issue } = context.payload;\n+  try {\n+    const { data } = (await context.octokit.issues.listEventsForTimeline({\n+      owner: repository.owner.login,\n+      repo: repository.name,\n+      issue_number: issue.number,\n+    })) as IssueEvent;\n+\n+    const events = data\n+      .filter((event) => event.event === \"assigned\" || event.event === \"unassigned\")\n+      .map((event) => {\n+        let actor, assignee, createdAt, actorType;\n+\n+        switch (event.event) {","score":{"reward":0.462,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":73.84500000000001,"syllables":9,"sentences":1,"score":0.8615499999999998},"multiplier":1,"relevance":0.3}},{"id":1696937622,"content":"I think it's better to use\r\n```js\r\nawait expect(userStartStop(context as unknown as Context)).rejects.toThrow('This user was unassigned from this task previously. Cannot auto assign');\r\n```\r\nbecause currently if the error is not thrown or error is not Error, the test will just end and you won't now something's wrong. \r\nalso fix this in other places","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696937622","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -279,6 +272,21 @@ describe(\"User start/stop\", () => {\n       }\n     }\n   });\n+\n+  test(\"User can't start an issue if they have previously been unassigned by an admin\", async () => {\n+    const issue = db.issue.findFirst({ where: { id: { equals: 2 } } }) as unknown as Issue;\n+    const sender = db.users.findFirst({ where: { id: { equals: 2 } } }) as unknown as Sender;\n+\n+    const context = createContext(issue, sender, \"/start\");\n+\n+    try {\n+      await userStartStop(context as unknown as Context);\n+    } catch (error) {\n+      if (error instanceof Error) {\n+        expect(error.message).toEqual(\"This user was unassigned from this task previously. Cannot auto assign\");","score":{"reward":4.824,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":78.58096153846155,"syllables":50,"sentences":2,"score":0.8141903846153845},"multiplier":1,"relevance":0.9}},{"id":1696946897,"content":"it would be better to throw an error","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696946897","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,65 @@\n+import { Context, IssueEvent } from \"../../types\";\n+\n+export async function checkPreviousAssignments(context: Context, sender: Context[\"payload\"][\"sender\"]): Promise<boolean> {\n+  const events = await getAssignmentEvents(context);\n+  const senderLogin = sender.login.toLowerCase();\n+  const userAssignments = events.filter((event) => event.assignee?.toLowerCase() === senderLogin);\n+\n+  if (userAssignments.length === 0) {\n+    return false;\n+  }\n+\n+  const unassignedEvents = userAssignments.filter((event) => event.event === \"unassigned\");\n+  const botUnassigned = unassignedEvents.filter((event) => event.actorType === \"Bot\");\n+  const adminUnassigned = unassignedEvents.filter((event) => event.actor?.toLowerCase() !== senderLogin && event.actorType === \"User\");\n+  const userSelfUnassignViaUi = unassignedEvents.filter((event) => event.actor?.toLowerCase() === senderLogin);\n+  return botUnassigned.length > 0 || adminUnassigned.length > 0 || userSelfUnassignViaUi.length > 0;\n+}\n+\n+async function getAssignmentEvents(context: Context) {\n+  const { repository, issue } = context.payload;\n+  try {\n+    const { data } = (await context.octokit.issues.listEventsForTimeline({\n+      owner: repository.owner.login,\n+      repo: repository.name,\n+      issue_number: issue.number,\n+    })) as IssueEvent;\n+\n+    const events = data\n+      .filter((event) => event.event === \"assigned\" || event.event === \"unassigned\")\n+      .map((event) => {\n+        let actor, assignee, createdAt, actorType;\n+\n+        switch (event.event) {\n+          case \"unassigned\":\n+          case \"assigned\":\n+            if (\"actor\" in event && event.actor && \"assignee\" in event && event.assignee) {\n+              actor = event.actor.login;\n+              assignee = event.assignee.login;\n+              createdAt = event.created_at;\n+              actorType = event.actor.type;\n+            }\n+            break;\n+          default:\n+            break;\n+        }\n+\n+        return {\n+          event: event.event,\n+          actor,\n+          actorType,\n+          assignee,\n+          createdAt,\n+        };\n+      });\n+\n+    return events\n+      .filter((event) => event !== undefined)\n+      .sort((a, b) => {\n+        return new Date(a.createdAt || \"\").getTime() - new Date(b.createdAt || \"\").getTime();\n+      });\n+  } catch (error) {\n+    context.logger.error(\"Error while getting assignment events\", { error: error as Error });\n+    return [];","score":{"reward":1.092,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":92.965,"syllables":10,"sentences":1,"score":0.67035},"multiplier":1,"relevance":0.6}},{"id":1696950602,"content":"if an user self unassigns I don't think we should stop him from assigning again.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696950602","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,65 @@\n+import { Context, IssueEvent } from \"../../types\";\n+\n+export async function checkPreviousAssignments(context: Context, sender: Context[\"payload\"][\"sender\"]): Promise<boolean> {\n+  const events = await getAssignmentEvents(context);\n+  const senderLogin = sender.login.toLowerCase();\n+  const userAssignments = events.filter((event) => event.assignee?.toLowerCase() === senderLogin);\n+\n+  if (userAssignments.length === 0) {\n+    return false;\n+  }\n+\n+  const unassignedEvents = userAssignments.filter((event) => event.event === \"unassigned\");\n+  const botUnassigned = unassignedEvents.filter((event) => event.actorType === \"Bot\");\n+  const adminUnassigned = unassignedEvents.filter((event) => event.actor?.toLowerCase() !== senderLogin && event.actorType === \"User\");\n+  const userSelfUnassignViaUi = unassignedEvents.filter((event) => event.actor?.toLowerCase() === senderLogin);","score":{"reward":2.24,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":74.27000000000001,"syllables":22,"sentences":1,"score":0.8573},"multiplier":1,"relevance":0.7}},{"id":1696957342,"content":"I'm not sure if `sender` is always the user who created the comment, I think it's better to use `payload.comment.user.login` - this should be fixed across the whole codebase","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696957342","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,65 @@\n+import { Context, IssueEvent } from \"../../types\";\n+\n+export async function checkPreviousAssignments(context: Context, sender: Context[\"payload\"][\"sender\"]): Promise<boolean> {\n+  const events = await getAssignmentEvents(context);\n+  const senderLogin = sender.login.toLowerCase();","score":{"reward":3.68,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":69.64357142857145,"syllables":36,"sentences":1,"score":0.9035642857142855},"multiplier":1,"relevance":0.8}},{"id":1696963398,"content":"since this function returns a boolean, the name is a bit weird. maybe something like `hasUserBeenUnassigned` or something similar","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696963398","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,65 @@\n+import { Context, IssueEvent } from \"../../types\";\n+\n+export async function checkPreviousAssignments(context: Context, sender: Context[\"payload\"][\"sender\"]): Promise<boolean> {","score":{"reward":2.1,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":70.80000000000003,"syllables":27,"sentences":2,"score":0.8919999999999998},"multiplier":1,"relevance":0.6}},{"id":1702355887,"content":"this logic should be moved to typebox schema\r\nyou can do something like this:\r\n```\r\nT.Transform(T.Union([T.String(), T.Number()]).Decode(val => {\r\n// check if string then parse\r\n// check for NaN\r\n}).Encode(val => {\r\n// opposite \r\n})\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1702355887","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,19 +1,40 @@\n import { Context, IssueEvent } from \"../../types\";\n \n-export async function checkPreviousAssignments(context: Context, sender: Context[\"payload\"][\"sender\"]): Promise<boolean> {\n+function getAppId(context: Context): number {","score":{"reward":2.352,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":71.76785714285715,"syllables":20,"sentences":1,"score":0.8823214285714285},"multiplier":1,"relevance":0.8}},{"id":1702359351,"content":"did you forget to check for error? and above too?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1702359351","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -258,34 +188,45 @@ describe(\"User start/stop\", () => {\n     }));\n \n     const issue = db.issue.findFirst({ where: { id: { equals: 1 } } }) as unknown as Issue;\n-    const sender = db.users.findFirst({ where: { id: { equals: 1 } } }) as unknown as Sender;\n+    const sender = db.users.findFirst({ where: { id: { equals: 1 } } }) as unknown as PayloadSender;\n \n     const context = createContext(issue, sender);\n \n-    context.adapters = createAdapters(getSupabase(), context as unknown as Context);\n+    context.adapters = createAdapters(getSupabase(), context);\n \n-    try {\n-      await userStartStop(context as unknown as Context);\n-    } catch (error) {\n-      if (error instanceof Error) {\n-        expect(error.message).toEqual(\"Too many assigned issues, you have reached your max limit of 3 issues.\");\n-      }\n-    }\n+    await userStartStop(context);","score":{"reward":1.944,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":91.78000000000003,"syllables":13,"sentences":2,"score":0.6821999999999997},"multiplier":1,"relevance":0.9}},{"id":1731061632,"content":"this should be part of the typebox schema, not in a function","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1731061632","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -17,3 +19,25 @@ export function calculateDurations(labels: Label[]): number[] {\n \n   return durations.sort((a, b) => a - b);\n }\n+\n+export function getAppId(context: Context): number {\n+  const {\n+    env: { APP_ID },\n+  } = context;\n+  const APP_ID_TYPE = Type.Union([Type.String(), Type.Number()], { default: APP_ID });\n+\n+  const val = Type.Transform(APP_ID_TYPE)\n+    .Decode((val) => {\n+      if (isNaN(Number(val))) {\n+        throw new Error(\"Invalid APP_ID\");\n+      }\n+      return Number(val);\n+    })\n+    .Encode((encoded) => encoded.toString());","score":{"reward":1.792,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":81.85500000000002,"syllables":16,"sentences":1,"score":0.7814499999999999},"multiplier":1,"relevance":0.7}},{"id":1731417121,"content":"consider creating a helper function that parses the url and also checks for array length","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1731417121","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -198,7 +195,9 @@ export async function getAvailableOpenedPullRequests(context: Context, username:\n \n   for (let i = 0; i < openedPullRequests.length; i++) {\n     const openedPullRequest = openedPullRequests[i];\n-    const reviews = await getAllPullRequestReviews(context, openedPullRequest.number);\n+    const owner = openedPullRequest.html_url.split(\"/\")[3];\n+    const repo = openedPullRequest.html_url.split(\"/\")[4];","score":{"reward":2.17,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":67.53000000000003,"syllables":22,"sentences":1,"score":0.9246999999999997},"multiplier":1,"relevance":0.7}},{"id":1731420452,"content":"check if any ids are null because that means the user doesn't exist (maybe we should throw error if that happens?)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1731420452","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -42,73 +33,69 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n     logger.error(\"Error while getting commit hash\", { error: e as Error });\n   }\n \n-  // check max assigned issues\n-\n-  const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);\n-  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed: `, { openedPullRequests });\n-\n-  const assignedIssues = await getAssignedIssues(context, sender.login);\n-  logger.info(\"Max issue allowed is\", { maxConcurrentTasks });\n-\n-  // check for max and enforce max\n-\n-  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks) {\n-    const log = logger.error(\"Too many assigned issues, you have reached your max limit\", {\n-      assignedIssues: assignedIssues.length,\n-      openedPullRequests: openedPullRequests.length,\n-      maxConcurrentTasks,\n-    });\n-    await addCommentToIssue(context, log?.logMessage.diff as string);\n-    throw new Error(`Too many assigned issues, you have reached your max limit of ${maxConcurrentTasks} issues.`);\n-  }\n-\n   // is it assignable?\n \n   if (issue.state === ISSUE_TYPE.CLOSED) {\n-    throw logger.error(\"This issue is closed, please choose another.\", { issueNumber: issue.number });\n+    throw new Error(logger.error(\"This issue is closed, please choose another.\", { issueNumber: issue.number }).logMessage.raw);\n   }\n \n   const assignees = issue?.assignees ?? [];\n \n   // find out if the issue is already assigned\n   if (assignees.length !== 0) {\n     const isCurrentUserAssigned = !!assignees.find((assignee) => assignee?.login === sender.login);\n-    throw logger.error(\n-      isCurrentUserAssigned ? \"You are already assigned to this task.\" : \"This issue is already assigned. Please choose another unassigned task.\",\n-      { issueNumber: issue.number }\n+    throw new Error(\n+      logger.error(\n+        isCurrentUserAssigned ? \"You are already assigned to this task.\" : \"This issue is already assigned. Please choose another unassigned task.\",\n+        { issueNumber: issue.number }\n+      ).logMessage.raw\n     );\n   }\n \n   teammates.push(sender.login);\n \n+  const toAssign = [];\n   // check max assigned issues\n   for (const user of teammates) {\n-    await handleTaskLimitChecks(user, context, maxConcurrentTasks, logger, sender.login);\n+    if (await handleTaskLimitChecks(user, context, maxConcurrentTasks, logger, sender.login)) {\n+      toAssign.push(user);\n+    }\n+  }\n+\n+  let error: string | null = null;\n+\n+  if (toAssign.length === 0 && teammates.length > 1) {\n+    error = \"All teammates have reached their max task limit. Please close out some tasks before assigning new ones.\";\n+  } else if (toAssign.length === 0) {\n+    error = \"You have reached your max task limit. Please close out some tasks before assigning new ones.\";\n+  }\n+\n+  if (error) {\n+    throw new Error(logger.error(error, { issueNumber: issue.number }).logMessage.raw);\n   }\n \n   // get labels\n   const labels = issue.labels;\n   const priceLabel = labels.find((label: Label) => label.name.startsWith(\"Price: \"));\n \n   if (!priceLabel) {\n-    throw logger.error(\"No price label is set to calculate the duration\", { issueNumber: issue.number });\n+    throw new Error(logger.error(\"No price label is set to calculate the duration\", { issueNumber: issue.number }).logMessage.raw);\n   }\n \n   const duration: number = calculateDurations(labels).shift() ?? 0;\n+  const toAssignIds = toAssign.map(async (u) => await fetchUserId(context, u));","score":{"reward":3.024,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":91.84272727272729,"syllables":27,"sentences":2,"score":0.6815727272727271},"multiplier":1,"relevance":0.8}},{"id":1731423398,"content":"won't this mean if someone has 5 PRs but 2 issues assigned, they can't start a new task? I guess this is open for debate if they should be allowed to start a new task","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1731423398","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -129,16 +116,34 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   return { output: \"Task assigned successfully\" };\n }\n \n+async function fetchUserId(context: Context, username: string) {\n+  try {\n+    const user = await context.octokit.rest.users.getByUsername({ username });\n+    return user.data.id;\n+  } catch (e) {\n+    return null;\n+  }\n+}\n+\n async function handleTaskLimitChecks(username: string, context: Context, maxConcurrentTasks: number, logger: Context[\"logger\"], sender: string) {\n   const openedPullRequests = await getAvailableOpenedPullRequests(context, username);\n   const assignedIssues = await getAssignedIssues(context, username);\n \n   // check for max and enforce max\n-  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks) {\n-    throw logger.error(username === sender ? \"You have reached your max task limit\" : `${username} has reached their max task limit`, {\n+\n+  if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxConcurrentTasks) {","score":{"reward":3.556,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":89.7385810810811,"syllables":43,"sentences":2,"score":0.702614189189189},"multiplier":1,"relevance":0.7}},{"id":1731645372,"content":"We should also do +1 task if the PR author made necessary changes requested by the reviewer but are waiting for reviewer's next review and it's been more than 24 hours.\r\nCurrently the code fetches reviews but that endpoint returns all reviews even multiple reviews from the same person, so we need use only the last review by the same person but also check requested reviews. If a reviewer has requested changes but is being requested for review more than 24 hours, it should be considered +1 task.\r\nI'll make another task for this","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1731645372","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -129,16 +116,34 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   return { output: \"Task assigned successfully\" };\n }\n \n+async function fetchUserId(context: Context, username: string) {\n+  try {\n+    const user = await context.octokit.rest.users.getByUsername({ username });\n+    return user.data.id;\n+  } catch (e) {\n+    return null;\n+  }\n+}\n+\n async function handleTaskLimitChecks(username: string, context: Context, maxConcurrentTasks: number, logger: Context[\"logger\"], sender: string) {\n   const openedPullRequests = await getAvailableOpenedPullRequests(context, username);\n   const assignedIssues = await getAssignedIssues(context, username);\n \n   // check for max and enforce max\n-  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks) {\n-    throw logger.error(username === sender ? \"You have reached your max task limit\" : `${username} has reached their max task limit`, {\n+\n+  if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxConcurrentTasks) {","score":{"reward":6.066,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":97,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":64.4789819587629,"syllables":135,"sentences":4,"score":0.9552101804123709},"multiplier":1,"relevance":0.9}},{"id":1734813312,"content":"I've just realised that this will return an array of promises, you have to call `Promise.all()` to get results","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1734813312","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -83,7 +83,15 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   }\n \n   const duration: number = calculateDurations(labels).shift() ?? 0;\n-  const toAssignIds = toAssign.map(async (u) => await fetchUserId(context, u));\n+  const toAssignIds = toAssign.map(async (u) => {\n+    const userId = await fetchUserId(context, u);\n+\n+    if (!userId) {\n+      throw new Error(logger.error(\"User not found\", { user: u }).logMessage.raw);\n+    }\n+\n+    return userId;\n+  });","score":{"reward":3.54,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":80.68684210526318,"syllables":24,"sentences":1,"score":0.7931315789473682},"multiplier":1,"relevance":1}},{"id":1734816892,"content":"this will just validate it but the transformation won't be done. you need to use `Value.Decode` like above","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1734816892","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -36,6 +36,17 @@ export default {\n         throw new Error(\"Invalid settings provided\");\n       }\n \n+      if (!envConfigValidator.test(env)) {\n+        const errorDetails: string[] = [];\n+        for (const error of envConfigValidator.errors(env)) {\n+          errorDetails.push(`${error.path}: ${error.message}`);\n+        }\n+        return new Response(JSON.stringify({ error: `Bad Request: the environment is invalid. ${errorDetails.join(\"; \")}` }), {\n+          status: 400,\n+          headers: { \"content-type\": \"application/json\" },\n+        });\n+      }","score":{"reward":2.704,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":84.90000000000003,"syllables":24,"sentences":2,"score":0.7509999999999997},"multiplier":1,"relevance":0.8}},{"id":2315552003,"content":"it's tedious for plugin developers to set that so I think we can include it in the SDK. I've looked at the webhook payload but I didn't find any information about app id","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#issuecomment-2315552003","commentType":"PULL_COLLABORATOR","score":{"reward":2.61,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":73.415,"syllables":49,"sentences":2,"score":0.8658499999999999},"multiplier":1,"relevance":0.5}},{"id":2315777458,"content":"I think it represents Github App's unique ID, installation ID is per org/repo","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#issuecomment-2315777458","commentType":"PULL_COLLABORATOR","score":{"reward":1.872,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":56.25000000000003,"syllables":24,"sentences":1,"score":0.9625000000000002},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2207614440,"effect":{"addition":156,"deletion":15},"reward":3.42,"priority":2},{"reviewId":2216459943,"effect":{"addition":124,"deletion":158},"reward":5.64,"priority":2},{"reviewId":2260382308,"effect":{"addition":349,"deletion":242},"reward":11.82,"priority":2},{"reviewId":2266489287,"effect":{"addition":82,"deletion":41},"reward":2.46,"priority":2},{"reviewId":2272403065,"effect":{"addition":18,"deletion":15},"reward":0.66,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 70.028 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>5</td><td>24</td></tr><tr><td>Review</td><td>Comment</td><td>17</td><td>46.028</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19\" target=\"_blank\" rel=\"noopener\">#19</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+156 -15</td><td>2</td><td>3.42</td></tr><tr><td>+124 -158</td><td>2</td><td>5.64</td></tr><tr><td>+349 -242</td><td>2</td><td>11.82</td></tr><tr><td>+82 -41</td><td>2</td><td>2.46</td></tr><tr><td>+18 -15</td><td>2</td><td>0.66</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696917799\" target=\"_blank\" rel=\"noopener\">an if statement would suffice here</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.462</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696937622\" target=\"_blank\" rel=\"noopener\">I think it's better to use&#96;&#96;&#96;jsawait expect(user&hellip;</a></h6></td><td><details><summary>2.15</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.15&#13;</pre></details></td><td>0.9</td><td>2</td><td>4.824</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696946897\" target=\"_blank\" rel=\"noopener\">it would be better to throw an error</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.6</td><td>2</td><td>1.092</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696950602\" target=\"_blank\" rel=\"noopener\">if an user self unassigns I don't think we should stop him from &hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.24</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696957342\" target=\"_blank\" rel=\"noopener\">I'm not sure if &#96;sender&#96; is always the user who created &hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.8</td><td>2</td><td>3.68</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1696963398\" target=\"_blank\" rel=\"noopener\">since this function returns a boolean, the name is a bit weird. &hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.6</td><td>2</td><td>2.1</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1702355887\" target=\"_blank\" rel=\"noopener\">this logic should be moved to typebox schemayou can do somethi&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.352</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1702359351\" target=\"_blank\" rel=\"noopener\">did you forget to check for error? and above too?</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.9</td><td>2</td><td>1.944</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1731061632\" target=\"_blank\" rel=\"noopener\">this should be part of the typebox schema, not in a function</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.7</td><td>2</td><td>1.792</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1731417121\" target=\"_blank\" rel=\"noopener\">consider creating a helper function that parses the url and also&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.17</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1731420452\" target=\"_blank\" rel=\"noopener\">check if any ids are null because that means the user doesn't ex&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.8</td><td>2</td><td>3.024</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1731423398\" target=\"_blank\" rel=\"noopener\">won't this mean if someone has 5 PRs but 2 issues assigned, they&hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>0.7</td><td>2</td><td>3.556</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1731645372\" target=\"_blank\" rel=\"noopener\">We should also do +1 task if the PR author made necessary change&hellip;</a></h6></td><td><details><summary>2.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 97&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.9</td><td>2</td><td>6.066</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1734813312\" target=\"_blank\" rel=\"noopener\">I've just realised that this will return an array of promises, y&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>1</td><td>2</td><td>3.54</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#discussion_r1734816892\" target=\"_blank\" rel=\"noopener\">this will just validate it but the transformation won't be done.&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.704</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#issuecomment-2315552003\" target=\"_blank\" rel=\"noopener\">it's tedious for plugin developers to set that so I think we can&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.5</td><td>2</td><td>2.61</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/19#issuecomment-2315777458\" target=\"_blank\" rel=\"noopener\">I think it represents Github App's unique ID, installation ID is&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.6</td><td>2</td><td>1.872</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_191.json","json":{"gentlementlegen":{"userId":9807008,"total":300,"task":{"reward":300,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 300 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>300</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":65.344,"userId":4975670,"comments":[{"id":2666920507,"content":"We don't reward assignees for their comments because it's too easy to game this. \nWe need to be more precise (right now we allow for rewards on the issue, just not on pull) and check the timestamp of the comments they made. \nThey should receive rewards for their comments while they are not the assignee, and should not receive rewards while they are the assignee. \nWe should cross reference the assignment events (and their associated unassigned events) and then measure every comment and determine whether it was while they are the assignee and while they are not. We should then credit accordingly. \nThis should support the edge case of being assigned and unassigned multiple times. \nI wonder if it makes sense to blanket and just check for the first assignment time and the last unassignment time and exclude rewarding comments from between. It would simplify logic and it may also prevent gamification. \nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/175#issuecomment-2481300459_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/191","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.14,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":154,"wordValue":0.1,"result":2.19},"readability":{"fleschKincaid":59.69168562874253,"syllables":257,"sentences":10,"score":0.9969168562874253},"multiplier":1,"relevance":1}},{"id":1862275220,"content":"```suggestion\r\n                    \"description\": \"Skip comments posted by a user while they are assigned to the issue\",\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1862275220","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -263,7 +263,13 @@\n             \"anyOf\": [\n               {\n                 \"type\": \"object\",\n-                \"properties\": {}\n+                \"properties\": {\n+                  \"skipCommentsWhileAssigned\": {\n+                    \"default\": true,\n+                    \"description\": \"Skip comments posted by a user while it is assigned to the issue\",","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.8}},{"id":1863360473,"content":"```suggestion\r\n    description: \"Do not offer credit to comments posted by a user between the time they were first assigned and last unassigned from the task.\",\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1863360473","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,5 +1,10 @@\n import { Type, Static } from \"@sinclair/typebox\";\n \n-export const dataPurgeConfigurationType = Type.Object({});\n+export const dataPurgeConfigurationType = Type.Object({\n+  skipCommentsWhileAssigned: Type.Boolean({\n+    default: true,\n+    description: \"Skip comments posted by a user while they are assigned to the issue\",","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.85}},{"id":1863364399,"content":"This logic isn't clear to me. \r\n- I see if it doesn't find an unassign event at the end that it will use the last assigned event as the timestamp (which doesn't make sense to me) \r\n- How do we derive the unassign timestamp? \r\n- What if they make it to completion of the task? \r\n- What if their assignment is toggled multiple times? Are we excluding all comments between?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1863364399","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,67 @@\n+import { IssueParams } from \"../start\";\n+import { ContextPlugin } from \"../types/plugin-input\";\n+import { IssueActivity } from \"../issue-activity\";\n+\n+export interface AssignmentPeriod {\n+  assignedAt: string;\n+  unassignedAt: string | null;\n+}\n+\n+export interface UserAssignments {\n+  [username: string]: AssignmentPeriod[];\n+}\n+\n+/*\n+ * Returns the list of assignment periods per user for a given issue.\n+ */\n+export async function getAssignmentPeriods(octokit: ContextPlugin[\"octokit\"], issueParams: IssueParams) {\n+  const events = await octokit.paginate(octokit.rest.issues.listEvents, {\n+    ...issueParams,\n+    per_page: 100,\n+  });\n+\n+  const userAssignments: UserAssignments = {};\n+\n+  events\n+    .filter((event) => [\"assigned\", \"unassigned\"].includes(event.event))\n+    .forEach((event) => {\n+      const username = \"assignee\" in event ? event.assignee?.login : null;\n+      if (!username) return;\n+\n+      if (!userAssignments[username]) {\n+        userAssignments[username] = [];\n+      }\n+\n+      const lastPeriod = userAssignments[username][userAssignments[username].length - 1];\n+\n+      if (event.event === \"assigned\") {\n+        userAssignments[username].push({\n+          assignedAt: event.created_at,\n+          unassignedAt: null,\n+        });\n+      } else if (event.event === \"unassigned\" && lastPeriod && lastPeriod.unassignedAt === null) {\n+        lastPeriod.unassignedAt = event.created_at;","score":{"reward":10.574,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":4}},"result":0.4},"priority":3,"words":{"wordCount":69,"wordValue":0.1,"result":2.59},"readability":{"fleschKincaid":80.02800000000002,"syllables":92,"sentences":5,"score":0.7997199999999998},"multiplier":1,"relevance":0.95}},{"id":1863366742,"content":"We could use linguist-generated to ignore `dist/`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1863366742","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":1.848,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":66.7871428571429,"syllables":11,"sentences":1,"score":0.9321285714285711},"multiplier":1,"relevance":0.7}},{"id":1865519376,"content":"```suggestion\r\ndist/ linguist-generated\r\n```\r\nIt uses the same syntax as .gitignore which I think that implies only the direct children inside of the directory. I targeted the entire directory instead.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1865519376","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1 @@\n+dist/* linguist-generated","score":{"reward":5.738,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":58.12294871794876,"syllables":43,"sentences":3,"score":0.9812294871794875},"multiplier":1,"relevance":0.85}},{"id":1865519975,"content":"```suggestion\r\n      skipCommentsWhileAssigned: all\r\n```\r\nThis is valid right?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1865519975","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -99,7 +99,8 @@ with:\n           relevance: 1\n     userExtractor:\n       redeemTask: true\n-    dataPurge: {}\n+    dataPurge:\n+      skipCommentsWhileAssigned: \"all\"","score":{"reward":1.092,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":97.025,"syllables":5,"sentences":1,"score":0.6297499999999999},"multiplier":1,"relevance":0.7}},{"id":1865520656,"content":"The description probably should explain the difference between all of the options for the LLM.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1865520656","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -270,9 +270,23 @@\n                 \"type\": \"object\",\n                 \"properties\": {\n                   \"skipCommentsWhileAssigned\": {\n-                    \"default\": true,\n-                    \"description\": \"Skip comments posted by a user while they are assigned to the issue\",\n-                    \"type\": \"boolean\"\n+                    \"default\": \"all\",\n+                    \"description\": \"Do not offer credit to comments posted by a user between the time they were first assigned and last unassigned from the task.\",","score":{"reward":3.744,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":56.25000000000003,"syllables":24,"sentences":1,"score":0.9625000000000002},"multiplier":1,"relevance":0.8}},{"id":1865524720,"content":"According to the example, you should do double star\r\n```suggestion\r\ndist/** linguist-generated\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1865524720","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1 @@\n+dist/* linguist-generated","score":{"reward":2.43,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":66.10000000000002,"syllables":14,"sentences":1,"score":0.9389999999999997},"multiplier":1,"relevance":0.75}},{"id":1865545903,"content":"```\r\ndescription:\r\n  \"Configures how user comments are included in the rewards calculation when they are assigned to a GitHub issue:\r\n  - 'all': Excludes all comments made between the first assignment start and the last assignment end, discouraging gaming by unassigning and commenting for rewards.\r\n  - 'exact': Excludes only comments made during precise assignment periods, targeting times when the user is actively assigned.\r\n  - 'none': Includes all comments, regardless of assignment status or timing.\"\r\n```\r\n  chatgpt version","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1865545903","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -4,7 +4,7 @@ export const dataPurgeConfigurationType = Type.Object({\n   skipCommentsWhileAssigned: Type.Union([Type.Literal(\"all\"), Type.Literal(\"exact\"), Type.Literal(\"none\")], {\n     default: \"all\",\n     description:\n-      \"Do not offer credit to comments posted by a user between the time they were first assigned and last unassigned from the task.\",\n+      \"Determines the comments posted by a user to include in the final rewards. 'all': excludes comments between first and last assignment. 'exact': excludes comments during the exact assignment periods. 'none': includes every comment.\",","score":{"reward":0.837,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":77.90500000000002,"syllables":3,"sentences":1,"score":0.8209499999999998},"multiplier":1,"relevance":0.9}},{"id":2506228522,"content":"@gentlementlegen how is this looking? This is really useful for non coding related tasks so I would like to use this soon.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#issuecomment-2506228522","commentType":"PULL_COLLABORATOR","score":{"reward":2.376,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":72.61545454545457,"syllables":32,"sentences":2,"score":0.8738454545454544},"multiplier":1,"relevance":0.4}},{"id":2507603177,"content":"I just saw QA and I think that we should not credit [this middle one](https://github.com/Meniole/text-conversation-rewards/issues/31#issuecomment-2490447996). \r\nI think as per the spec, it can incentivize gaming the system. We should just consider the first assign and last unassign and then any comments in the middle we can exclude. Perhaps this can be in the config if its not too complicated, with this behavior being on by default. \r\nI can also imagine situations where contributors complain about being disqualified and then get reassigned and are credited for complaining, even if a small amount (due to relevance) it seems wrong.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#issuecomment-2507603177","commentType":"PULL_COLLABORATOR","score":{"reward":12.555,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":97,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":65.04090721649486,"syllables":140,"sentences":5,"score":0.9495909278350514},"multiplier":1,"relevance":0.9}},{"id":2507800964,"content":"Can you make a toggle for it? If it's simple then it would be nice to have. But if it's not simple then it's not essential.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#issuecomment-2507800964","commentType":"PULL_COLLABORATOR","score":{"reward":4.62,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":97.83712643678163,"syllables":34,"sentences":3,"score":0.6216287356321837},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2468291680,"effect":{"addition":106,"deletion":5},"reward":3.33,"priority":3},{"reviewId":2469677159,"effect":{"addition":195,"deletion":143},"reward":10.14,"priority":3},{"reviewId":2472186370,"effect":{"addition":46,"deletion":12},"reward":1.74,"priority":3},{"reviewId":2472226453,"effect":{"addition":3,"deletion":3},"reward":0.18,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 65.344 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>4</td><td>15.39</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.14</td></tr><tr><td>Review</td><td>Comment</td><td>12</td><td>45.814</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199\" target=\"_blank\" rel=\"noopener\">#199</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+106 -5</td><td>3</td><td>3.33</td></tr><tr><td>+195 -143</td><td>3</td><td>10.14</td></tr><tr><td>+46 -12</td><td>3</td><td>1.74</td></tr><tr><td>+3 -3</td><td>3</td><td>0.18</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/191\" target=\"_blank\" rel=\"noopener\">We don't reward assignees for their comments because it's too ea&hellip;</a></h6></td><td><details><summary>3.19</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 154&#13;  wordValue: 0.1&#13;  result: 2.19&#13;</pre></details></td><td>1</td><td>1</td><td>4.14</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1862275220\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion\"description\": \"S&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.8</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1863360473\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestiondescription: \"Do not offer credit&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.85</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1863364399\" target=\"_blank\" rel=\"noopener\">This logic isn't clear to me. - I see if it doesn't find an un&hellip;</a></h6></td><td><details><summary>2.99</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 4&#13;  result: 0.4&#13;regex:&#13;  wordCount: 69&#13;  wordValue: 0.1&#13;  result: 2.59&#13;</pre></details></td><td>0.95</td><td>3</td><td>10.574</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1863366742\" target=\"_blank\" rel=\"noopener\">We could use linguist-generated to ignore &#96;dist/&#96;</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.848</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1865519376\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestiondist/ linguist-generated&#96;&#96;&&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.85</td><td>3</td><td>5.738</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1865519975\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionskipCommentsWhileAssigned: all&hellip;</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.092</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1865520656\" target=\"_blank\" rel=\"noopener\">The description probably should explain the difference between a&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.744</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1865524720\" target=\"_blank\" rel=\"noopener\">According to the example, you should do double star&#96;&#96;&&hellip;</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.75</td><td>3</td><td>2.43</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#discussion_r1865545903\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;description:\"Configures how user comments a&hellip;</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.9</td><td>3</td><td>0.837</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#issuecomment-2506228522\" target=\"_blank\" rel=\"noopener\">@gentlementlegen how is this looking? This is really useful for &hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.4</td><td>3</td><td>2.376</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#issuecomment-2507603177\" target=\"_blank\" rel=\"noopener\">I just saw QA and I think that we should not credit [this middle&hellip;</a></h6></td><td><details><summary>3.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 97&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.9</td><td>3</td><td>12.555</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/199#issuecomment-2507800964\" target=\"_blank\" rel=\"noopener\">Can you make a toggle for it? If it's simple then it would be ni&hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.62</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_91.json","json":{"gentlementlegen":{"userId":9807008,"total":50,"task":{"reward":50,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 50 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":10.586,"userId":4975670,"comments":[{"id":2878235946,"content":"1. I should be able to set this as `Urgent`. But if I try to set a `Time` label, it should not apply a `Price` label. It shouldn't add `Price` labels but it should allow us to add any labels we want (except for `Price` labels.) \n2. It should throw a `Warning` because `Caution` should be reserved for internal problems that we need to triage. My vision is to automatically file issues when `Caution` is thrown, so any user input error should be `Warning`\n_Originally posted by @ubiquity-os in https://github.com/ubiquity/ubiquity-dollar/issues/982#issuecomment-2681788475_","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/91","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.91,"formatting":{"content":{"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1.2},"priority":1,"words":{"wordCount":80,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":65.65000000000002,"syllables":134,"sentences":6,"score":0.9434999999999998},"multiplier":1,"relevance":1}},{"id":2736699151,"content":"Yeah because we need to let everybody know that they need to set pricing on the child issues. \nMaybe it can be a note?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/98#issuecomment-2736699151","commentType":"PULL_COLLABORATOR","score":{"reward":2.436,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":85.38,"syllables":31,"sentences":2,"score":0.7462000000000001},"multiplier":1,"relevance":0.6}},{"id":2738492378,"content":"I think warning probably makes more sense because the bot is undoing the users action.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/98#issuecomment-2738492378","commentType":"PULL_COLLABORATOR","score":{"reward":2.48,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":67.53000000000003,"syllables":22,"sentences":1,"score":0.9246999999999997},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2708763893,"effect":{"addition":33,"deletion":5},"reward":0.76,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/98"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 10.586 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.76</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.91</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>4.916</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/98\" target=\"_blank\" rel=\"noopener\">#98</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+33 -5</td><td>2</td><td>0.76</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/91\" target=\"_blank\" rel=\"noopener\">1. I should be able to set this as &#96;Urgent&#96;. But if I tr&hellip;</a></h6></td><td><details><summary>3.83</summary><pre>content:&#13;  content:&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.2&#13;regex:&#13;  wordCount: 80&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>1</td><td>1</td><td>4.91</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/98#issuecomment-2736699151\" target=\"_blank\" rel=\"noopener\">Yeah because we need to let everybody know that they need to set&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.6</td><td>2</td><td>2.436</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/98#issuecomment-2738492378\" target=\"_blank\" rel=\"noopener\">I think warning probably makes more sense because the bot is und&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.8</td><td>2</td><td>2.48</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_5.json","json":{"gentlementlegen":{"userId":9807008,"total":104.65,"task":{"reward":100,"multiplier":1},"comments":[{"id":2305402144,"content":"`assistive-pricing` does not run long tasks and requires to be quite reactive as it handles commands from user, that should preferably receive quick feedback. When running through Actions, it takes ~1 minutes per command to be handled, which is not ideal\r\nThanks to https://github.com/ubiquity/ubiquibot-kernel/issues/39 we should be able to run plugins as workers, making them instantaneous.\r\nThus this plugin should be transformed from Action to Worker inside of Cloudflare.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/5","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.65,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":67,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":60.33975000000002,"syllables":113,"sentences":4,"score":0.9966024999999997},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 104.65 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.65</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/5\" target=\"_blank\" rel=\"noopener\">&#96;assistive-pricing&#96; does not run long tasks and requires&hellip;</a></h6></td><td><details><summary>3.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 67&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>1</td><td>1</td><td>4.65</td></tr></tbody></table></details>"},"gitcoindev":{"total":7.306,"userId":88761781,"comments":[{"id":1609296983,"content":"I read about https://developers.cloudflare.com/workers/configuration/compatibility-dates/ , perhaps this should be always set to the date when the pull request was opened? I am just thinking out loud here. Do you have any opinion on that?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#discussion_r1609296983","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -0,0 +1,6 @@\n+name = \"ubiquibot-assistive-pricing\"\n+main = \"src/worker.ts\"\n+compatibility_date = \"2024-01-01\"","score":{"reward":0.658,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":67.58500000000001,"syllables":62,"sentences":5,"score":0.9241499999999999},"multiplier":0.25,"relevance":0.7}},{"id":2123895399,"content":"Hi @gentlementlegen there is a small commit needed for knip workflow that removes superflous steps. See comment from @rndquu  https://github.com/ubiquity/rpc-handler/pull/13#issuecomment-2123006059 . This does not touch any of your changes, I will add this commit to the pull request.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#issuecomment-2123895399","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.485,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":73.77989130434786,"syllables":66,"sentences":4,"score":0.8622010869565214},"multiplier":0.25,"relevance":0.5}},{"id":2123901442,"content":"My bad - I checked and you pulled latest changes already, thank you!\r\nI also checked on a local workspace \r\n✂️  Excellent, Knip found no issues.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#issuecomment-2123901442","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.104,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":1,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":78.33000000000001,"syllables":33,"sentences":2,"score":0.8166999999999999},"multiplier":0.25,"relevance":0.2}},{"id":2123978604,"content":"@gentlementlegen I checked out the pr workspace, and I am able to test locally with jest.\r\nWould you mind adding to `README.md` steps needed to execute and test the worker locally including supabase setup, if needed? I set supabase `.dev.vars` to my instance but I see `{\"error\":\"Error: null is not a valid content type\"}` when I connect to worker started with `yarn worker` command and I am not sure what I am missing and what to expect. Perhaps adding this info would make life easier to anyone who would work on the plugin afterwards. I also see cypress is still a placeholder, will it be used in this repository?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#issuecomment-2123978604","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.756,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":97,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":64.16874226804126,"syllables":141,"sentences":5,"score":0.9583125773195874},"multiplier":0.25,"relevance":0.9}},{"id":2124417677,"content":"@gentlementlegen thank you for adding the example, I am approving the pull request from my side.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#issuecomment-2124417677","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.123,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":53.120000000000005,"syllables":26,"sentences":1,"score":0.9312},"multiplier":0.25,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2070150807,"effect":{"addition":337,"deletion":169},"reward":5.06,"priority":1},{"reviewId":2071802854,"effect":{"addition":6,"deletion":6},"reward":0.12,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 7.306 XP ]</a>&nbsp;</h3><h6>@gitcoindev</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>5.18</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>2.126</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6\" target=\"_blank\" rel=\"noopener\">#6</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+337 -169</td><td>1</td><td>5.06</td></tr><tr><td>+6 -6</td><td>1</td><td>0.12</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#discussion_r1609296983\" target=\"_blank\" rel=\"noopener\">I read about https://developers.cloudflare.com/workers/configura&hellip;</a></h6></td><td><details><summary>2.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.658</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#issuecomment-2123895399\" target=\"_blank\" rel=\"noopener\">Hi @gentlementlegen there is a small commit needed for knip work&hellip;</a></h6></td><td><details><summary>3.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.485</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#issuecomment-2123901442\" target=\"_blank\" rel=\"noopener\">My bad - I checked and you pulled latest changes already, thank &hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.104</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#issuecomment-2123978604\" target=\"_blank\" rel=\"noopener\">@gentlementlegen I checked out the pr workspace, and I am able t&hellip;</a></h6></td><td><details><summary>2.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 97&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.756</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#issuecomment-2124417677\" target=\"_blank\" rel=\"noopener\">@gentlementlegen thank you for adding the example, I am approvin&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.123</td></tr></tbody></table></details>"},"whilefoo":{"total":6.67,"userId":139262667,"comments":[{"id":1610659723,"content":"also check that it's a POST method","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#discussion_r1610659723","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,32 @@\n+import { Value } from \"@sinclair/typebox/value\";\n+import { run } from \"./run\";\n+import { Env } from \"./types/env\";\n+import { assistivePricingSettingsSchema } from \"./types/plugin-input\";\n+\n+export default {\n+  async fetch(request: Request, env: Env): Promise<Response> {\n+    try {\n+      const contentType = request.headers.get(\"content-type\");\n+      if (contentType !== \"application/json\") {","score":{"reward":0.819,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":92.965,"syllables":10,"sentences":1,"score":0.67035},"multiplier":1,"relevance":0.9}},{"id":1610660752,"content":"why was this removed?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#discussion_r1610660752","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -42,20 +41,3 @@ export function calculateLabelValue(label: string): number {\n   if (label.toLowerCase().includes(\"month\")) return 5 + (number - 1) * 8;\n   return 0;\n }\n-\n-export function calculateDurations(labels: Label[]): number[] {","score":{"reward":0.364,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":97.025,"syllables":5,"sentences":1,"score":0.6297499999999999},"multiplier":1,"relevance":0.7}},{"id":1611450924,"content":"hmm that's weird","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#discussion_r1611450924","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -42,20 +41,3 @@ export function calculateLabelValue(label: string): number {\n   if (label.toLowerCase().includes(\"month\")) return 5 + (number - 1) * 8;\n   return 0;\n }\n-\n-export function calculateDurations(labels: Label[]): number[] {","score":{"reward":0.057,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}}],"reviewRewards":[{"reviews":[{"reviewId":2072385655,"effect":{"addition":337,"deletion":169},"reward":5.06,"priority":1},{"reviewId":2073581068,"effect":{"addition":37,"deletion":0},"reward":0.37,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 6.67 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>5.43</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>1.24</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6\" target=\"_blank\" rel=\"noopener\">#6</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+337 -169</td><td>1</td><td>5.06</td></tr><tr><td>+37 -0</td><td>1</td><td>0.37</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#discussion_r1610659723\" target=\"_blank\" rel=\"noopener\">also check that it's a POST method</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.819</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#discussion_r1610660752\" target=\"_blank\" rel=\"noopener\">why was this removed?</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.364</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/6#discussion_r1611450924\" target=\"_blank\" rel=\"noopener\">hmm that's weird</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.057</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_69.json","json":{"gentlementlegen":{"userId":9807008,"total":202.25,"task":{"reward":200,"multiplier":1},"comments":[{"id":2276091258,"content":"Resolves #69\r\nQA:\r\n- https://github.com/Meniole/daemon-pricing/issues/9 (worker run)\r\n- https://github.com/Meniole/daemon-pricing/actions/runs/12822891264 (action run)","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72","commentType":"PULL_SPECIFICATION","score":{"reward":2.25,"formatting":{"content":{"p":{"score":0,"elementCount":4},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2.2},"priority":1,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":61.24000000000001,"syllables":39,"sentences":3,"score":0.9875999999999999},"multiplier":1,"relevance":0.6}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 202.25 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>200</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>2.25</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72\" target=\"_blank\" rel=\"noopener\">Resolves #69QA:- https://github.com/Meniole/daemon-pricing/i&hellip;</a></h6></td><td><details><summary>2.89</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2.2&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.6</td><td>1</td><td>2.25</td></tr></tbody></table></details>"},"whilefoo":{"total":60.684,"userId":139262667,"comments":[{"id":2605749632,"content":"Hmm that's weird. I didn't get any credit for my comments in the PR, @gentlementlegen got only task reward and no comments, and @0x4007 got only issue specification\nEDIT: I guess it only processed the last PR, it should be fixed in #218","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/69#issuecomment-2605749632","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":65.55750000000002,"syllables":63,"sentences":2,"score":0.9444249999999998},"multiplier":1,"relevance":0}},{"id":2607650216,"content":"Oh yes, different repo","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/69#issuecomment-2607650216","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":54.72500000000002,"syllables":7,"sentences":1,"score":0.9472500000000003},"multiplier":1,"relevance":0}},{"id":1921635926,"content":"this isn't in `envSchema` - I think it was removed","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#discussion_r1921635926","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -48,10 +52,14 @@ jobs:\n             SUPABASE_URL\n             SUPABASE_KEY\n             ${{ secrets.KERNEL_PUBLIC_KEY && secrets.KERNEL_PUBLIC_KEY != '' && 'KERNEL_PUBLIC_KEY' || '' }}\n+            CLOUDFLARE_ACCOUNT_ID\n+            ACTION_REF\n         env:\n           SUPABASE_URL: ${{ secrets.SUPABASE_URL }}\n           SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}","score":{"reward":3.052,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":103.70000000000002,"syllables":10,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":1921636362,"content":"This octokit is using installation token which is scoped to an org or a repo so this will work only if the plugin and repo that triggered the event are in the same organization, no?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#discussion_r1921636362","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -4,14 +4,51 @@ import { LogLevel } from \"@ubiquity-os/ubiquity-os-logger\";\n import type { ExecutionContext } from \"hono\";\n import manifest from \"../manifest.json\";\n import { run } from \"./run\";\n-import { SupportedEvents } from \"./types/context\";\n+import { Context, SupportedEvents } from \"./types/context\";\n import { Env, envSchema } from \"./types/env\";\n import { AssistivePricingSettings, pluginSettingsSchema } from \"./types/plugin-input\";\n \n+async function startAction(context: Context, inputs: Record<string, unknown>) {\n+  const { octokit, payload, logger, env } = context;\n+\n+  if (!payload.repository.owner) {\n+    throw logger.fatal(\"Owner is missing from payload\", { payload });\n+  }\n+\n+  if (!env.ACTION_REF) {\n+    throw logger.fatal(\"ACTION_REF is missing from the environment\");\n+  }\n+\n+  const regex = /^([\\w-]+)\\/([\\w.-]+)@([\\w./-]+)$/;\n+\n+  const match = RegExp(regex).exec(env.ACTION_REF);\n+\n+  if (!match) {\n+    throw logger.fatal(\"The ACTION_REF is not in the proper format (owner/repo@ref)\");\n+  }\n+\n+  const [, owner, repo, ref] = match;\n+\n+  await octokit.rest.actions.createWorkflowDispatch({\n+    owner,\n+    repo,\n+    inputs,\n+    ref,\n+    workflow_id: \"compute.yml\",\n+  });","score":{"reward":9.216,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":45.61857142857143,"syllables":52,"sentences":1,"score":0.8561857142857143},"multiplier":1,"relevance":0.9}},{"id":1921637179,"content":"```suggestion\r\n          ACTION_REF: ${{ github.context.repository }}@${{ github.context.ref_name }}\r\n```\r\njust a suggestion","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#discussion_r1921637179","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -48,10 +52,14 @@ jobs:\n             SUPABASE_URL\n             SUPABASE_KEY\n             ${{ secrets.KERNEL_PUBLIC_KEY && secrets.KERNEL_PUBLIC_KEY != '' && 'KERNEL_PUBLIC_KEY' || '' }}\n+            CLOUDFLARE_ACCOUNT_ID\n+            ACTION_REF\n         env:\n           SUPABASE_URL: ${{ secrets.SUPABASE_URL }}\n           SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}\n           KERNEL_PUBLIC_KEY: ${{ secrets.KERNEL_PUBLIC_KEY }}\n+          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\n+          ACTION_REF: ${{ env.ACTION_REF }}","score":{"reward":1.44,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":62.79000000000002,"syllables":5,"sentences":1,"score":0.9720999999999997},"multiplier":1,"relevance":0.8}},{"id":1921637811,"content":"this workflow should run after updated manifest instead of `push` like other plugins","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#discussion_r1921637811","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":3.192,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":53.655,"syllables":20,"sentences":1,"score":0.93655},"multiplier":1,"relevance":0.6}},{"id":1922837570,"content":"I think it's not ideal because it also won't work for third party plugins but we haven't figured out a better way so I guess it's fine for now","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#discussion_r1922837570","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -4,14 +4,51 @@ import { LogLevel } from \"@ubiquity-os/ubiquity-os-logger\";\n import type { ExecutionContext } from \"hono\";\n import manifest from \"../manifest.json\";\n import { run } from \"./run\";\n-import { SupportedEvents } from \"./types/context\";\n+import { Context, SupportedEvents } from \"./types/context\";\n import { Env, envSchema } from \"./types/env\";\n import { AssistivePricingSettings, pluginSettingsSchema } from \"./types/plugin-input\";\n \n+async function startAction(context: Context, inputs: Record<string, unknown>) {\n+  const { octokit, payload, logger, env } = context;\n+\n+  if (!payload.repository.owner) {\n+    throw logger.fatal(\"Owner is missing from payload\", { payload });\n+  }\n+\n+  if (!env.ACTION_REF) {\n+    throw logger.fatal(\"ACTION_REF is missing from the environment\");\n+  }\n+\n+  const regex = /^([\\w-]+)\\/([\\w.-]+)@([\\w./-]+)$/;\n+\n+  const match = RegExp(regex).exec(env.ACTION_REF);\n+\n+  if (!match) {\n+    throw logger.fatal(\"The ACTION_REF is not in the proper format (owner/repo@ref)\");\n+  }\n+\n+  const [, owner, repo, ref] = match;\n+\n+  await octokit.rest.actions.createWorkflowDispatch({\n+    owner,\n+    repo,\n+    inputs,\n+    ref,\n+    workflow_id: \"compute.yml\",\n+  });","score":{"reward":7.084,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":68.2309090909091,"syllables":41,"sentences":1,"score":0.9176909090909091},"multiplier":1,"relevance":0.7}},{"id":1922839636,"content":"I think the difference between `github.repository` and `GITHUB_REPOSITORY` is that the first can't be accessed in the shell and it's interpolated when the plugin is run and the second is injected into the shell as env.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#discussion_r1922839636","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -48,10 +52,14 @@ jobs:\n             SUPABASE_URL\n             SUPABASE_KEY\n             ${{ secrets.KERNEL_PUBLIC_KEY && secrets.KERNEL_PUBLIC_KEY != '' && 'KERNEL_PUBLIC_KEY' || '' }}\n+            CLOUDFLARE_ACCOUNT_ID\n+            ACTION_REF\n         env:\n           SUPABASE_URL: ${{ secrets.SUPABASE_URL }}\n           SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}\n           KERNEL_PUBLIC_KEY: ${{ secrets.KERNEL_PUBLIC_KEY }}\n+          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}\n+          ACTION_REF: ${{ env.ACTION_REF }}","score":{"reward":6.456,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":59.84500000000003,"syllables":47,"sentences":1,"score":0.9984500000000003},"multiplier":1,"relevance":0.6}},{"id":2591012749,"content":"Yeah I was also thinking about making the payloads the same in actions and workers, Action plugins were added later and it only supports strings and not objects so that's why the worker still has objects\r\nI like to avoid that approach but if there's no other way then it's fine. What is the problem that you're trying to solve by mixing actions and workers?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2591012749","commentType":"PULL_COLLABORATOR","score":{"reward":6.74,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":69,"wordValue":0.1,"result":2.59},"readability":{"fleschKincaid":60.24358695652174,"syllables":91,"sentences":2,"score":0.9975641304347826},"multiplier":1,"relevance":0.5}},{"id":2593930155,"content":"Maybe what we need to do is move away from Cloudflare because it doesn't have Node and has low time limits. If we use another platform (Azure?) that has decent start-up time, has Node and higher time limits then we wouldn't even need to use Actions.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2593930155","commentType":"PULL_COLLABORATOR","score":{"reward":9.344,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":49,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":83.21176870748302,"syllables":62,"sentences":3,"score":0.7678823129251698},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2561092822,"effect":{"addition":79,"deletion":30},"reward":4.36,"priority":4},{"reviewId":2563126248,"effect":{"addition":90,"deletion":20},"reward":4.4,"priority":4},{"reviewId":2563126983,"effect":{"addition":0,"deletion":0},"reward":0,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72"},{"reviews":[{"reviewId":2558488243,"effect":{"addition":11,"deletion":28},"reward":1.56,"priority":4}],"url":"https://github.com/ubiquity-os/ubiquity-os-kernel/pull/233"},{"reviews":[{"reviewId":2558471672,"effect":{"addition":26,"deletion":70},"reward":3.84,"priority":4}],"url":"https://github.com/ubiquity-os/plugin-sdk/pull/51"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 60.684 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>5</td><td>14.16</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>0</td></tr><tr><td>Review</td><td>Comment</td><td>8</td><td>46.524</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72\" target=\"_blank\" rel=\"noopener\">#72</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+79 -30</td><td>4</td><td>4.36</td></tr><tr><td>+90 -20</td><td>4</td><td>4.4</td></tr><tr><td>+0 -0</td><td>4</td><td>0</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os/ubiquity-os-kernel/pull/233\" target=\"_blank\" rel=\"noopener\">#233</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+11 -28</td><td>4</td><td>1.56</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os/plugin-sdk/pull/51\" target=\"_blank\" rel=\"noopener\">#51</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+26 -70</td><td>4</td><td>3.84</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/69#issuecomment-2605749632\" target=\"_blank\" rel=\"noopener\">Hmm that's weird. I didn't get any credit for my comments in the&hellip;</a></h6></td><td><details><summary>2.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/69#issuecomment-2607650216\" target=\"_blank\" rel=\"noopener\">Oh yes, different repo</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#discussion_r1921635926\" target=\"_blank\" rel=\"noopener\">this isn't in &#96;envSchema&#96; - I think it was removed</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.7</td><td>4</td><td>3.052</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#discussion_r1921636362\" target=\"_blank\" rel=\"noopener\">This octokit is using installation token which is scoped to an o&hellip;</a></h6></td><td><details><summary>2.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.9</td><td>4</td><td>9.216</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#discussion_r1921637179\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionACTION_REF: ${{ github.cont&hellip;</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.8</td><td>4</td><td>1.44</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#discussion_r1921637811\" target=\"_blank\" rel=\"noopener\">this workflow should run after updated manifest instead of &#96;&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.6</td><td>4</td><td>3.192</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#discussion_r1922837570\" target=\"_blank\" rel=\"noopener\">I think it's not ideal because it also won't work for third part&hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.7</td><td>4</td><td>7.084</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#discussion_r1922839636\" target=\"_blank\" rel=\"noopener\">I think the difference between &#96;github.repository&#96; and &&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.6</td><td>4</td><td>6.456</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2591012749\" target=\"_blank\" rel=\"noopener\">Yeah I was also thinking about making the payloads the same in a&hellip;</a></h6></td><td><details><summary>2.59</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 69&#13;  wordValue: 0.1&#13;  result: 2.59&#13;</pre></details></td><td>0.5</td><td>4</td><td>6.74</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2593930155\" target=\"_blank\" rel=\"noopener\">Maybe what we need to do is move away from Cloudflare because it&hellip;</a></h6></td><td><details><summary>2.37</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 49&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>0.8</td><td>4</td><td>9.344</td></tr></tbody></table></details>"},"0x4007":{"total":24.964,"userId":4975670,"comments":[{"id":2766868412,"content":"- Change this back to a cloudflare worker \n- Move the logic to change the price labels if base rate is changed to a separate GitHub action. It is the only reason why this is deployed as an action but it's too slow, especially for a feature used multiple times a day.\nCode duplication is okay if necessary.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/69","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.44,"formatting":{"content":{"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":1,"words":{"wordCount":57,"wordValue":0.1,"result":2.48},"readability":{"fleschKincaid":65.84473684210528,"syllables":82,"sentences":3,"score":0.9415526315789472},"multiplier":1,"relevance":1}},{"id":2591880961,"content":"Well we can make this just a Worker and then make a different plugin that handles only base rate changes as an Action.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2591880961","commentType":"PULL_COLLABORATOR","score":{"reward":6.496,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":73.1421739130435,"syllables":30,"sentences":1,"score":0.868578260869565},"multiplier":1,"relevance":0.8}},{"id":2591918348,"content":"Perhaps the telegram bridge can be used as reference but I'm skeptical it's the best implementation of a dual runtime plugin.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2591918348","commentType":"PULL_COLLABORATOR","score":{"reward":4.1,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":51.07260869565218,"syllables":36,"sentences":1,"score":0.9107260869565218},"multiplier":1,"relevance":0.5}},{"id":2597450881,"content":"Sounds like you made a hybrid plugin. If it works then that's a good solution for the original spec, just more sophisticated than what was on the original requirements.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2597450881","commentType":"PULL_COLLABORATOR","score":{"reward":5.832,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":61.890000000000015,"syllables":46,"sentences":2,"score":0.9810999999999999},"multiplier":1,"relevance":0.6}},{"id":2597477455,"content":"Can you write an example config of before and after these changes? It will give me more perspective.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2597477455","commentType":"PULL_COLLABORATOR","score":{"reward":4.788,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":80.20000000000003,"syllables":25,"sentences":2,"score":0.7979999999999997},"multiplier":1,"relevance":0.7}},{"id":2597481771,"content":"I was replying to this specifically.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2597481771","commentType":"PULL_COLLABORATOR","score":{"reward":0.308,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":45.64500000000001,"syllables":11,"sentences":1,"score":0.8564500000000002},"multiplier":1,"relevance":0.1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72"},{"url":"https://github.com/ubiquity-os/ubiquity-os-kernel/pull/233"},{"url":"https://github.com/ubiquity-os/plugin-sdk/pull/51"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 24.964 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.44</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>21.524</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/69\" target=\"_blank\" rel=\"noopener\">- Change this back to a cloudflare worker - Move the logic to c&hellip;</a></h6></td><td><details><summary>2.68</summary><pre>content:&#13;  content:&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 57&#13;  wordValue: 0.1&#13;  result: 2.48&#13;</pre></details></td><td>1</td><td>1</td><td>3.44</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2591880961\" target=\"_blank\" rel=\"noopener\">Well we can make this just a Worker and then make a different pl&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.8</td><td>4</td><td>6.496</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2591918348\" target=\"_blank\" rel=\"noopener\">Perhaps the telegram bridge can be used as reference but I'm ske&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.5</td><td>4</td><td>4.1</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2597450881\" target=\"_blank\" rel=\"noopener\">Sounds like you made a hybrid plugin. If it works then that's a &hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.6</td><td>4</td><td>5.832</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2597477455\" target=\"_blank\" rel=\"noopener\">Can you write an example config of before and after these change&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.7</td><td>4</td><td>4.788</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2597481771\" target=\"_blank\" rel=\"noopener\">I was replying to this specifically.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.308</td></tr></tbody></table></details>"},"Keyrxng":{"total":2.064,"userId":106303466,"comments":[{"id":2593952785,"content":"1. I like it because CF can be temperamental at times and is v restrictive because of env and limits.\r\n2. I thought we used CF and leverage actions to keep overheads to a bare minimum, ideally, cost free? Wouldn't Azure incur costs (even if subsidised when partnered with MS)? And if so then maybe just a paid CF plan might be the fix","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2593952785","commentType":"PULL_CONTRIBUTOR","score":{"reward":2.064,"formatting":{"content":{"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"p":{"score":0,"elementCount":2}},"result":0.2},"priority":4,"words":{"wordCount":63,"wordValue":0.1,"result":2.55},"readability":{"fleschKincaid":74.02017857142857,"syllables":87,"sentences":4,"score":0.8597982142857142},"multiplier":0.25,"relevance":0.6}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72"},{"url":"https://github.com/ubiquity-os/ubiquity-os-kernel/pull/233"},{"url":"https://github.com/ubiquity-os/plugin-sdk/pull/51"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 2.064 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>2.064</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/72#issuecomment-2593952785\" target=\"_blank\" rel=\"noopener\">1. I like it because CF can be temperamental at times and is v r&hellip;</a></h6></td><td><details><summary>2.75</summary><pre>content:&#13;  content:&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 63&#13;  wordValue: 0.1&#13;  result: 2.55&#13;</pre></details></td><td>0.6</td><td>4</td><td>2.064</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_100.json","json":{"gentlementlegen":{"userId":9807008,"total":156.588,"task":{"reward":150,"multiplier":1},"comments":[{"id":2516426873,"content":"I think this is related to `daemon-pricing` plugin due to the following:\nhttps://github.com/ubiquity-os-marketplace/daemon-pricing/blob/development/src/types/plugin-input.ts#L22\nWe have a system to block contributors from starting tasks already. However we don't have a fine grained control over it, it's only a boolean to allow outside contributors.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2516426873","commentType":"ISSUE_ASSIGNEE","score":{"reward":2.808,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":42,"wordValue":0.1,"result":2.23},"readability":{"fleschKincaid":56.465775862068995,"syllables":93,"sentences":4,"score":0.9646577586206899},"multiplier":0.25,"relevance":0.9}},{"id":2516458544,"content":"No this one is a restriction for who can actually start the task. The checks happen [here](https://github.com/ubiquity-os-marketplace/command-start-stop/blob/44fd7087b3009896ec28ad608ea479d34fff6a97/src/handlers/shared/start.ts#L135).","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2516458544","commentType":"ISSUE_ASSIGNEE","score":{"reward":2.1,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":88.72514705882354,"syllables":22,"sentences":2,"score":0.7127485294117646},"multiplier":0.25,"relevance":1}},{"id":2516564742,"content":"@rndquu It is possible, but the idea about having it handled in the labels is because you have a visual feedback on the labels showing that it is \"Collaborator only\" so it was less confusing for users. @0x4007 rfc","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2516564742","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.68,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":61.2271153846154,"syllables":58,"sentences":2,"score":0.9877288461538459},"multiplier":0.25,"relevance":0.8}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 156.588 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>150</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>6.588</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2516426873\" target=\"_blank\" rel=\"noopener\">I think this is related to &#96;daemon-pricing&#96; plugin due t&hellip;</a></h6></td><td><details><summary>3.23</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 42&#13;  wordValue: 0.1&#13;  result: 2.23&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.808</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2516458544\" target=\"_blank\" rel=\"noopener\">No this one is a restriction for who can actually start the task&hellip;</a></h6></td><td><details><summary>2.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>1</td><td>3</td><td>2.1</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2516564742\" target=\"_blank\" rel=\"noopener\">@rndquu It is possible, but the idea about having it handled in &hellip;</a></h6></td><td><details><summary>2.15</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.15&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.68</td></tr></tbody></table></details>"},"rndquu":{"total":62.473,"userId":119500907,"comments":[{"id":2516430621,"content":"Isn't it a permission setting for who can set a label?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2516430621","commentType":"ISSUE_AUTHOR","score":{"reward":2.688,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":81.85500000000002,"syllables":16,"sentences":1,"score":0.7814499999999999},"multiplier":1,"relevance":0.7}},{"id":2516558512,"content":"If we move current github issue to https://github.com/ubiquity-os-marketplace/daemon-pricing and implement a fine grained control there (via adding allowed roles to label description?) then in the end the https://github.com/ubiquity-os-marketplace/command-start-stop would be responsible for assigning a user (i.e. [here](https://github.com/ubiquity-os-marketplace/command-start-stop/blob/44fd7087b3009896ec28ad608ea479d34fff6a97/src/handlers/shared/start.ts#L135) it'll have to check allowed roles instead of a label description).\r\nDon't you think that we should simply remove [collaboratorOnly](https://github.com/ubiquity-os-marketplace/.ubiquity-os/blob/ab848101a14fd7dd9759f6a69f5fdaf4de062e78/.github/.ubiquity-os.config.dev.yml#L349) from the config and implement fine grained access control in the https://github.com/ubiquity-os-marketplace/command-start-stop plugin?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2516558512","commentType":"ISSUE_AUTHOR","score":{"reward":23.004,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":4}},"result":4},"priority":3,"words":{"wordCount":70,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":57.18000000000001,"syllables":156,"sentences":8,"score":0.9718000000000001},"multiplier":1,"relevance":0.9}},{"id":2516708632,"content":"Nobody reads label descriptions. For me https://github.com/ubiquity-os-marketplace/daemon-pricing should be responsible for pricing while https://github.com/ubiquity-os-marketplace/command-start-stop should be responsible for starting and stopping tasks, so the \"start issue access control\" feature fits better in https://github.com/ubiquity-os-marketplace/command-start-stop.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2516708632","commentType":"ISSUE_AUTHOR","score":{"reward":16.632,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":3}},"result":3},"priority":3,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":47.41700000000003,"syllables":98,"sentences":5,"score":0.8741700000000003},"multiplier":1,"relevance":0.9}},{"id":2714778800,"content":"There's the [requiredLabelsToStart](https://github.com/ubiquity/.ubiquity-os/blob/cde4662181090201af15fa2412b8fe2c60dc7f31/.github/.ubiquity-os.config.yml#L18) property which works this way:\r\n1. User prints the `/start` command\r\n2. https://github.com/ubiquity-os-marketplace/command-start-stop plugin checks that if the github issue (which user wants to self assign) contains at least 1 label from the `requiredLabelsToStart` config property then the plugin allows self assigning a github issue\r\nWe need a more sophisticated control over that parameter and want to support these use cases:\r\n1. Collaborators (i.e. organization members) should be allowed to self assign only high priority tasks with longer time estimates\r\n2. Outside contributors should be allowed to self assign only low priority tasks with lower time estimates\r\nWhat should be done:\r\n1. Refactor the https://github.com/ubiquity-os-marketplace/command-start-stop plugin to support specific roles for specific labels\r\n2. Add unit tests for the features\r\nExpected config (example):\r\n```\r\n        requiredLabelsToStart:\r\n          time:\r\n            - name: \"Time: <1 Hour\"\r\n              roles:\r\n              \t- MEMBER\r\n                - OUTSIDE_CONTRIBUTOR\r\n            - name: \"Time: <2 Hours\"\r\n              roles:\r\n              \t- MEMBER\r\n                - OUTSIDE_CONTRIBUTOR\r\n            - name: \"Time: <4 Hours\"\r\n              roles:\r\n                - MEMBER\r\n            - name: \"Time: <1 Day\"\r\n              roles:\r\n                - MEMBER\r\n            - name: \"Time: <1 Week\"\r\n              roles:\r\n                - MEMBER\r\n          priority:\r\n            - name: \"Priority: 1 (Normal)\"\r\n              roles:\r\n                - OUTSIDE_CONTRIBUTOR\r\n            - name: \"Priority: 2 (Medium)\"\r\n               roles:\r\n                 - OUTSIDE_CONTRIBUTOR\r\n            - name: \"Priority: 3 (High)\"\r\n              roles:\r\n                - MEMBER\r\n            - name: \"Priority: 4 (Urgent)\"\r\n              roles:\r\n                - MEMBER\r\n            - name: \"Priority: 5 (Emergency)\"\r\n              roles:\r\n                - MEMBER\r\n```\r\nP.S. Not sure if the `OUTSIDE_CONTRIBUTOR` role exists in the github API but there should be something similar","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100","commentType":"ISSUE_SPECIFICATION","score":{"reward":6.22,"formatting":{"content":{"p":{"score":0,"elementCount":11},"ol":{"score":0,"elementCount":3},"li":{"score":0.1,"elementCount":6},"a":{"score":1,"elementCount":2}},"result":2.6},"priority":1,"words":{"wordCount":136,"wordValue":0.1,"result":2.36},"readability":{"fleschKincaid":44.420584415584415,"syllables":255,"sentences":7,"score":0.8442058441558441},"multiplier":1,"relevance":1}},{"id":2508126396,"content":"@gentlementlegen What's the difference between `member` and `contributor` roles? `member` exists in the organization's team while `contributor` is someone who once commited into one of the organization repositories?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/107#pullrequestreview-2508126396","commentType":"PULL_COLLABORATOR","score":{"reward":4.389,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":27.69384615384618,"syllables":51,"sentences":2,"score":0.6769384615384618},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2508126396,"effect":{"addition":248,"deletion":70},"reward":9.54,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/107"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 62.473 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>9.54</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>6.22</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>42.324</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>4.389</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/107\" target=\"_blank\" rel=\"noopener\">#107</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+248 -70</td><td>3</td><td>9.54</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100\" target=\"_blank\" rel=\"noopener\">There's the [requiredLabelsToStart](https://github.com/ubiquity/&hellip;</a></h6></td><td><details><summary>4.96</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 11&#13;    ol:&#13;      score: 0&#13;      elementCount: 3&#13;    li:&#13;      score: 0.1&#13;      elementCount: 6&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2.6&#13;regex:&#13;  wordCount: 136&#13;  wordValue: 0.1&#13;  result: 2.36&#13;</pre></details></td><td>1</td><td>1</td><td>6.22</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2516430621\" target=\"_blank\" rel=\"noopener\">Isn't it a permission setting for who can set a label?</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.688</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2516558512\" target=\"_blank\" rel=\"noopener\">If we move current github issue to https://github.com/ubiquity-o&hellip;</a></h6></td><td><details><summary>6.6</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 4&#13;  result: 4&#13;regex:&#13;  wordCount: 70&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>0.9</td><td>3</td><td>23.004</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2516708632\" target=\"_blank\" rel=\"noopener\">Nobody reads label descriptions. For me https://github.com/ubiqu&hellip;</a></h6></td><td><details><summary>4.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 3&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.9</td><td>3</td><td>16.632</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/107#pullrequestreview-2508126396\" target=\"_blank\" rel=\"noopener\">@gentlementlegen What's the difference between &#96;member&#96; &hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.389</td></tr></tbody></table></details>"},"0x4007":{"total":15.666,"userId":4975670,"comments":[{"id":2517080486,"content":"I think the recognized roles are:\r\n- COLLABORATOR\r\n- CONTRIBUTOR\r\nOnly collaborators can set labels but with the `/allow` command we should be able to whitelist specific collaborators to set specific labels. This is intended to designate project managers to set `priority` and technical talent to set `time`.\r\nAs I recall this was intended only to serve as \"backend metadata/storage\" so that we can have the system read the description associated with the label, and it will affect its behavior, because yes I agree nobody under normal circumstances reads the label descriptions.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2517080486","commentType":"ISSUE_COLLABORATOR","score":{"reward":9.234,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":3,"words":{"wordCount":88,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":29.011666666666684,"syllables":154,"sentences":3,"score":0.6901166666666668},"multiplier":1,"relevance":0.9}},{"id":2535532258,"content":"I just reviewed all four and it looks like you've got in the last word on all of them, and you're waiting on the reviewers. Perhaps we can improve this capability by checking if the assignee is the last commenter on each thread.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2535532258","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.87,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":71.19750000000002,"syllables":60,"sentences":2,"score":0.8880249999999998},"multiplier":1,"relevance":0.1}},{"id":2539320211,"content":"I think getting the last word in on all open review threads PLUS a 24 hour timeout is a clear indication that the reviewers are lagging and the contributor should not be penalized. \r\nMy only concern is when the assignee \"resolves\" all the threads without actually solving the problems. But I suppose that it will be increasingly more difficult for them to hack \"more concurrent assignment slots\" with this strategy beyond the standard 2 slots.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2539320211","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.002,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":75,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":51.74000000000001,"syllables":115,"sentences":3,"score":0.9174000000000001},"multiplier":1,"relevance":0.1}},{"id":2548194502,"content":"The opposite should be done","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2548194502","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.39,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":83.32000000000004,"syllables":7,"sentences":1,"score":0.7667999999999996},"multiplier":1,"relevance":0.2}},{"id":2548247236,"content":"Yes","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2548247236","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.054,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":1,"wordValue":0.1,"result":0.14},"readability":{"fleschKincaid":121.22000000000003,"syllables":1,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}},{"id":2548256774,"content":"We should stick with one word per definition and as I understand on the api it's only collaborator not member.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/107#issuecomment-2548256774","commentType":"PULL_COLLABORATOR","score":{"reward":4.116,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":56.6057142857143,"syllables":32,"sentences":1,"score":0.966057142857143},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/107"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 15.666 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>5</td><td>11.55</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>4.116</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2517080486\" target=\"_blank\" rel=\"noopener\">I think the recognized roles are:- COLLABORATOR- CONTRIBUTOR&hellip;</a></h6></td><td><details><summary>2.83</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 88&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.9</td><td>3</td><td>9.234</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2535532258\" target=\"_blank\" rel=\"noopener\">I just reviewed all four and it looks like you've got in the las&hellip;</a></h6></td><td><details><summary>2.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.87</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2539320211\" target=\"_blank\" rel=\"noopener\">I think getting the last word in on all open review threads PLUS&hellip;</a></h6></td><td><details><summary>2.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 75&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.1</td><td>3</td><td>1.002</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2548194502\" target=\"_blank\" rel=\"noopener\">The opposite should be done</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.39</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/100#issuecomment-2548247236\" target=\"_blank\" rel=\"noopener\">Yes</a></h6></td><td><details><summary>0.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0.1&#13;  result: 0.14&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.054</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/107#issuecomment-2548256774\" target=\"_blank\" rel=\"noopener\">We should stick with one word per definition and as I understand&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.116</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_110.json","json":{"gentlementlegen":{"userId":9807008,"total":27.84,"task":{"reward":25,"multiplier":1},"comments":[{"id":2334999207,"content":"@Keyrxng this is not implemented and definitely needed since we had weird bots and comments lately. Would there be other cases except than hidden? I don't know what happens for deleted comments.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/110#issuecomment-2334999207","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.62,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":72.61545454545457,"syllables":48,"sentences":3,"score":0.8738454545454544},"multiplier":0.25,"relevance":1}},{"id":2349091252,"content":"I went through the REST API from top to bottom and it seems that there is not way to know if a comment was minimized through the REST API but only through GraphQl calls, see also: https://github.com/orgs/community/discussions/9175\r\nSadly this will imply more complex changes: either we create a GraphQl query that we run for each comment, which is slow and network intensive but would require least changes, or instead we switch the whole fetching to GraphQl which is way cleaner and more efficient but requires heavy code modifications.\r\nGraphQl reference:\r\n```gql\r\nquery commentDetails($owner: String!, $repo: String!, $issue_number: Int!) {\r\n  repository(owner: $owner, name: $repo) {\r\n    issueOrPullRequest(number: $issue_number) {\r\n      ... on Issue {\r\n        comments(first: 100) {\r\n          nodes {\r\n            id\r\n            isMinimized\r\n          }\r\n        }\r\n      }\r\n      ... on PullRequest {\r\n        comments(first: 100) {\r\n          nodes {\r\n            id\r\n            isMinimized\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/110#issuecomment-2349091252","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.17,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":89,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":58.03000000000003,"syllables":132,"sentences":3,"score":0.9803000000000003},"multiplier":0.25,"relevance":1}},{"id":2349209812,"content":"It appears so, also GraphQl allows for much more complex queries which I believe is the reason why they don't try to implement it back in REST. We might benefit from using GraphQl more often in our plugins I guess.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/110#issuecomment-2349209812","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.552,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":72.53969512195123,"syllables":55,"sentences":2,"score":0.8746030487804878},"multiplier":0.25,"relevance":0.8}},{"id":2071175517,"content":"Resolves #110 \r\nQA: https://github.com/Meniole/conversation-rewards/issues/13#issuecomment-2349298501","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/119","commentType":"PULL_SPECIFICATION","score":{"reward":0.498,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":37.54519230769233,"syllables":25,"sentences":2,"score":0.7754519230769233},"multiplier":1,"relevance":0.3}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 27.84 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>2.342</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.498</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/110#issuecomment-2334999207\" target=\"_blank\" rel=\"noopener\">@Keyrxng this is not implemented and definitely needed since we &hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>1</td><td>1</td><td>0.62</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/110#issuecomment-2349091252\" target=\"_blank\" rel=\"noopener\">I went through the REST API from top to bottom and it seems that&hellip;</a></h6></td><td><details><summary>3.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 89&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>1</td><td>1</td><td>1.17</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/110#issuecomment-2349209812\" target=\"_blank\" rel=\"noopener\">It appears so, also GraphQl allows for much more complex queries&hellip;</a></h6></td><td><details><summary>2.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.552</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/119\" target=\"_blank\" rel=\"noopener\">Resolves #110 QA: https://github.com/Meniole/conversation-rewa&hellip;</a></h6></td><td><details><summary>1.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.498</td></tr></tbody></table></details>"},"Keyrxng":{"total":6.296,"userId":106303466,"comments":[{"id":2335000437,"content":"Lmao I wrote about deleted comments at first too and thought nah that's stupid. But yeah for sure a simple test that after a comment is posted then deleted that it is actually removed from the API results is a good thing to check, I'm glad you brought it up.\r\nI think all of the reasons you can hide a comment might be grouped under `hidden` which would make things easier","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/110#issuecomment-2335000437","commentType":"ISSUE_AUTHOR","score":{"reward":2.916,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":72,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":79.07500000000002,"syllables":88,"sentences":3,"score":0.8092499999999998},"multiplier":1,"relevance":0.9}},{"id":2503066132,"content":"As the title states, we need to ensure that any comments which are marked as `hidden` should be deemed as not suitable for rewards.\r\nThis is because there will be scenarios where a comment is posted and for a number of reasons it would be marked as hidden symbolizing that it's irrelevant in some way to the discussion at hand.\r\nI am uncertain if this is implemented at the moment, @gentlementlegen you would know best","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/110","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.38,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":1,"words":{"wordCount":75,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":63.020000000000024,"syllables":105,"sentences":3,"score":0.9697999999999998},"multiplier":1,"relevance":1}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/119"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 6.296 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.38</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.916</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/110\" target=\"_blank\" rel=\"noopener\">As the title states, we need to ensure that any comments which a&hellip;</a></h6></td><td><details><summary>2.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 75&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>1</td><td>1</td><td>3.38</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/110#issuecomment-2335000437\" target=\"_blank\" rel=\"noopener\">Lmao I wrote about deleted comments at first too and thought nah&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 72&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.9</td><td>1</td><td>2.916</td></tr></tbody></table></details>"},"0x4007":{"total":5.315,"userId":4975670,"comments":[{"id":2349200782,"content":"It feels like the GitHub team gave up on REST and left it in production for backwards compatibility now that we are getting into the more esoteric features.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/110#issuecomment-2349200782","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.603,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":48.49357142857144,"syllables":43,"sentences":1,"score":0.8849357142857144},"multiplier":1,"relevance":0.7}},{"id":1759675896,"content":"I'm surprised its not included in some type. Perhaps you can find the correct type?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/119#discussion_r1759675896","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -2,7 +2,9 @@ import { RestEndpointMethodTypes } from \"@octokit/rest\";\n \n export type GitHubIssue = RestEndpointMethodTypes[\"issues\"][\"get\"][\"response\"][\"data\"];\n export type GitHubPullRequest = RestEndpointMethodTypes[\"pulls\"][\"get\"][\"response\"][\"data\"];\n-export type GitHubIssueComment = RestEndpointMethodTypes[\"issues\"][\"listComments\"][\"response\"][\"data\"][0];\n+export type GitHubIssueComment = RestEndpointMethodTypes[\"issues\"][\"listComments\"][\"response\"][\"data\"][0] & {\n+  isMinimized?: boolean;","score":{"reward":1.224,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":92.965,"syllables":20,"sentences":2,"score":0.67035},"multiplier":1,"relevance":0.8}},{"id":1759676473,"content":"Why not make these single line functions? \r\n```typescript\r\n http.get(\"https://api.github.com/repos/ubiquibot/comment-incentives/issues/22/timeline\", () => HttpResponse.json(issueTimelineGet)\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/119#discussion_r1759676473","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -38,12 +44,18 @@ export const handlers = [\n   http.get(\"https://api.github.com/repos/ubiquibot/comment-incentives/issues/22/comments\", () => {\n     return HttpResponse.json(issue22CommentsGet);\n   }),\n+  http.get(\"https://api.github.com/repos/Meniole/conversation-rewards/issues/13/events\", () => {\n+    return HttpResponse.json(issue13EventsGet);\n+  }),\n   http.get(\"https://api.github.com/repos/ubiquity/work.ubq.fi/issues/69/comments\", () => {\n     return HttpResponse.json(issue69CommentsGet);\n   }),\n   http.get(\"https://api.github.com/repos/ubiquibot/comment-incentives/issues/25/comments\", () => {\n     return HttpResponse.json(issue25CommentsGet);\n   }),\n+  http.get(\"https://api.github.com/repos/Meniole/conversation-rewards/issues/13/comments\", () => {\n+    return HttpResponse.json(issue13CommentsGet);\n+  }),\n   http.get(\"https://api.github.com/repos/ubiquibot/comment-incentives/issues/22/timeline\", () => {\n     return HttpResponse.json(issueTimelineGet);\n   }),","score":{"reward":0.498,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":90.95857142857145,"syllables":9,"sentences":1,"score":0.6904142857142855},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2304387099,"effect":{"addition":196,"deletion":3},"reward":1.99,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/119"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 5.315 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>1.99</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.603</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>1.722</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/119\" target=\"_blank\" rel=\"noopener\">#119</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+196 -3</td><td>1</td><td>1.99</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/110#issuecomment-2349200782\" target=\"_blank\" rel=\"noopener\">It feels like the GitHub team gave up on REST and left it in pro&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.603</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/119#discussion_r1759675896\" target=\"_blank\" rel=\"noopener\">I'm surprised its not included in some type. Perhaps you can fin&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.8</td><td>1</td><td>1.224</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/119#discussion_r1759676473\" target=\"_blank\" rel=\"noopener\">Why not make these single line functions? &#96;&#96;&#96;types&hellip;</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.498</td></tr></tbody></table></details>"},"whilefoo":{"total":3.28,"userId":139262667,"comments":[{"id":1759730655,"content":"Is it not possible to query all comments at once for isMinimized?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/119#discussion_r1759730655","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,18 @@\n+import { GitHubIssueComment } from \"../github-types\";\n+import { getOctokitInstance } from \"../octokit\";\n+import { IssueComment } from \"@octokit/graphql-schema\";\n+import { QUERY_COMMENT_DETAILS } from \"../types/requests\";\n+\n+export async function getMinimizedCommentStatus(comments: GitHubIssueComment[]) {\n+  const octokit = getOctokitInstance();\n+\n+  for (const comment of comments) {\n+    const commentData = await octokit.graphql<{ node?: IssueComment }>(QUERY_COMMENT_DETAILS, {\n+      node_id: comment.node_id,\n+    });\n+    // For each comment we add the 'isMinimized' info, which corresponds to a collapsed comment\n+    if (commentData.node) {\n+      comment.isMinimized = commentData.node.isMinimized;\n+    }\n+  }","score":{"reward":1.08,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":60.70500000000001,"syllables":19,"sentences":1,"score":0.9929499999999999},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2304439835,"effect":{"addition":196,"deletion":3},"reward":1.99,"priority":1},{"reviewId":2310121756,"effect":{"addition":12,"deletion":9},"reward":0.21,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/119"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 3.28 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>2.2</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>1.08</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/119\" target=\"_blank\" rel=\"noopener\">#119</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+196 -3</td><td>1</td><td>1.99</td></tr><tr><td>+12 -9</td><td>1</td><td>0.21</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/119#discussion_r1759730655\" target=\"_blank\" rel=\"noopener\">Is it not possible to query all comments at once for isMinimized?</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.8</td><td>1</td><td>1.08</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_247.json","json":{"whilefoo":{"userId":139262667,"total":55.606,"task":{"reward":50,"multiplier":1},"comments":[{"id":2609838089,"content":"I can't set labels even though I'm a member of the org","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/247#issuecomment-2609838089","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":89.89642857142859,"syllables":17,"sentences":1,"score":0.7010357142857141},"multiplier":1,"relevance":0}},{"id":2610019949,"content":"Yeah it's something @rndquu is trying to fix but we still haven't found a solution\n1 hour","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/247#issuecomment-2610019949","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":80.68684210526318,"syllables":24,"sentences":1,"score":0.7931315789473682},"multiplier":1,"relevance":0}},{"id":2806799110,"content":"Now that https://github.com/ubiquity-os/plugin-sdk/pull/51 is merged, the Web UI doesn't work because the SDK expects the payload in new unified format (previously Action format). The UI needs to be modified to create a dummy payload with unified format.\nAnother thing I noticed is that when you run the UI in dev mode and it's running on port `5173` and the API is running on port `4000`, there are CORS errors which need to be fixed.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/247","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.57,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":73,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":71.50798780487806,"syllables":111,"sentences":4,"score":0.8849201219512195},"multiplier":1,"relevance":1}},{"id":2298282585,"content":"Resolves #247 \r\n- Fix CORS\r\n- Change payload to the new unified format","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/248","commentType":"PULL_SPECIFICATION","score":{"reward":1.036,"formatting":{"content":{"p":{"score":0,"elementCount":3},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":1,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":72.61545454545457,"syllables":16,"sentences":1,"score":0.8738454545454544},"multiplier":1,"relevance":0.7}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 55.606 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.57</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>0</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>1.036</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/247\" target=\"_blank\" rel=\"noopener\">Now that https://github.com/ubiquity-os/plugin-sdk/pull/51 is me&hellip;</a></h6></td><td><details><summary>3.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 73&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>1</td><td>1</td><td>4.57</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/247#issuecomment-2609838089\" target=\"_blank\" rel=\"noopener\">I can't set labels even though I'm a member of the org</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/247#issuecomment-2610019949\" target=\"_blank\" rel=\"noopener\">Yeah it's something @rndquu is trying to fix but we still haven'&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0</td><td>2</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/248\" target=\"_blank\" rel=\"noopener\">Resolves #247 - Fix CORS- Change payload to the new unified &hellip;</a></h6></td><td><details><summary>1.17</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.036</td></tr></tbody></table></details>"},"0x4007":{"total":4.83,"userId":4975670,"comments":[{"id":2609742162,"content":"@shiv810 can you fix this?\n```\n```\n@whilefoo can you set a time label when you create issues?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/247#issuecomment-2609742162","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.142,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":92.965,"syllables":20,"sentences":2,"score":0.67035},"multiplier":1,"relevance":0.7}},{"id":2609902073,"content":"That is strange. I confirmed you are a member of the organization too. Perhaps we should make a slash command for authors to be able to set time labels no matter what their association is. \nWhat is your time estimate?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/247#issuecomment-2609902073","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.184,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":40,"wordValue":0.1,"result":2.18},"readability":{"fleschKincaid":76.13000000000001,"syllables":57,"sentences":4,"score":0.8386999999999999},"multiplier":1,"relevance":0.4}},{"id":2610775622,"content":"```\n```\n@shiv810  again here","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/247#issuecomment-2610775622","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.504,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":90.99000000000004,"syllables":4,"sentences":1,"score":0.6900999999999996},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/248"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 4.83 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>3</td><td>4.83</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/247#issuecomment-2609742162\" target=\"_blank\" rel=\"noopener\">@shiv810 can you fix this?&#96;&#96;&#96;&#96;&#96;&#96;@whil&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.7</td><td>2</td><td>2.142</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/247#issuecomment-2609902073\" target=\"_blank\" rel=\"noopener\">That is strange. I confirmed you are a member of the organizatio&hellip;</a></h6></td><td><details><summary>2.18</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 40&#13;  wordValue: 0.1&#13;  result: 2.18&#13;</pre></details></td><td>0.4</td><td>2</td><td>2.184</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/247#issuecomment-2610775622\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;&#96;&#96;&#96;@shiv810  again here</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.6</td><td>2</td><td>0.504</td></tr></tbody></table></details>"},"gentlementlegen":{"total":15.428,"userId":9807008,"comments":[{"id":2614804369,"content":"The code looks fine thanks for the update, just curious on why do you need CORS to run on a local setup? Is your browser denying the requests when you use it locally?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/248#issuecomment-2614804369","commentType":"PULL_COLLABORATOR","score":{"reward":1.476,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":79.85113636363639,"syllables":43,"sentences":2,"score":0.8014886363636361},"multiplier":1,"relevance":0.3}},{"id":2615088758,"content":"Works fine\r\n<img width=\"928\" alt=\"image\" src=\"https://github.com/user-attachments/assets/6fc4f5ab-20a7-4a47-a370-4c23e9fae466\" />\r\nBy default the UI is at http://localhost:4000/ on GET and the API at http://localhost:4000/ for POST which is why I never got the CORS problem I suppose. Not sure how you got two different ports because it is explicitly set:\r\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/blob/d5d24fc8e47491fd89bc936401a51958c59d9af5/src/web/api/index.ts#L125-L130\r\nand this file both serves the frontend and the backend logic.\r\nEdit: I guess that you were running the server and using the frontend served by Vite in dev mode. I tried that setup, so the FE would be on http://localhost:5173/ and the preflight ran fine.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/248#issuecomment-2615088758","commentType":"PULL_COLLABORATOR","score":{"reward":13.392,"formatting":{"content":{"p":{"score":0,"elementCount":6},"a":{"score":1,"elementCount":4}},"result":4},"priority":2,"words":{"wordCount":91,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":72.70674418604652,"syllables":176,"sentences":7,"score":0.8729325581395347},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2574772383,"effect":{"addition":19,"deletion":9},"reward":0.56,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/248"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 15.428 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.56</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>14.868</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/248\" target=\"_blank\" rel=\"noopener\">#248</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+19 -9</td><td>2</td><td>0.56</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/248#issuecomment-2614804369\" target=\"_blank\" rel=\"noopener\">The code looks fine thanks for the update, just curious on why d&hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.3</td><td>2</td><td>1.476</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/248#issuecomment-2615088758\" target=\"_blank\" rel=\"noopener\">Works fine&lt;img width=\"928\" alt=\"image\" src=\"https://github.&hellip;</a></h6></td><td><details><summary>6.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    a:&#13;      score: 1&#13;      elementCount: 4&#13;  result: 4&#13;regex:&#13;  wordCount: 91&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.8</td><td>2</td><td>13.392</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_276.json","json":{"gentlementlegen":{"userId":9807008,"total":104.176,"task":{"reward":100,"multiplier":1},"comments":[{"id":2727196868,"content":"I like the idea but I think links would be credited still because the link within the comment (e.g. `note[1]`) would probably count as a link. Actually I think that footnotes themselves are already excluded (their content is not evaluated), the rewards are because of these footnotes link in the spec itself.\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/blob/b9189bd8af038e750c4e9843a6b4599f25809298/src/parser/data-purge-module.ts#L65\nOne idea could be to ignore links redirecting to the same url as the issue they are written on?\nProbably all the footnotes will be excluded.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276#issuecomment-2727196868","commentType":"ISSUE_ASSIGNEE","score":{"reward":4.176,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":78,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":66.87375,"syllables":145,"sentences":8,"score":0.9312625},"multiplier":0.25,"relevance":0.9}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 104.176 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>4.176</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276#issuecomment-2727196868\" target=\"_blank\" rel=\"noopener\">I like the idea but I think links would be credited still becaus&hellip;</a></h6></td><td><details><summary>3.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 78&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.9</td><td>4</td><td>4.176</td></tr></tbody></table></details>"},"whilefoo":{"total":9.828,"userId":139262667,"comments":[{"id":2664167000,"content":"Since all deduplication notes start with `⚠ xx% possible duplicate` and annotate with `xx% similar to issue`, we can target that to avoid removing author's footnotes (I wonder if the plugin clashes with author's footnotes). \nAnother option is to enclose plugin's footnotes with `` and ``.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276#issuecomment-2664167000","commentType":"ISSUE_COLLABORATOR","score":{"reward":9.828,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":38,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":53.97105263157897,"syllables":60,"sentences":2,"score":0.9397105263157897},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/308"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 9.828 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>9.828</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276#issuecomment-2664167000\" target=\"_blank\" rel=\"noopener\">Since all deduplication notes start with &#96;⚠ xx% possible dup&hellip;</a></h6></td><td><details><summary>2.13</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 38&#13;  wordValue: 0.1&#13;  result: 2.13&#13;</pre></details></td><td>0.9</td><td>4</td><td>9.828</td></tr></tbody></table></details>"},"0x4007":{"total":42.792,"userId":4975670,"comments":[{"id":2664190299,"content":"Possible duplicate I think we could change to say something like like possibly related. \nI think the 0 prefix or something similar could be a good indicator. \nI always like metadata as well.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276#issuecomment-2664190299","commentType":"ISSUE_AUTHOR","score":{"reward":9.216,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":57.23363636363638,"syllables":54,"sentences":3,"score":0.9723363636363638},"multiplier":1,"relevance":0.9}},{"id":2728368358,"content":"Footnotes can be distinguished against normal links surely. Lets take a step back and think about it. \nThe portion inside the body should be a hash link to the same page the comment is written on. The footnote may have a normal link that goes to an external source which we should reward. \nIf we check the revision history and see who wrote it, we can assign credit accordingly. If the bot wrote something, then no credit is generated. etc.\nTruly I think that seeing who wrote what is the most robust solution. We should definitely be doing this.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276#issuecomment-2728368358","commentType":"ISSUE_AUTHOR","score":{"reward":13.08,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":99,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":76.03363636363639,"syllables":140,"sentences":9,"score":0.8396636363636361},"multiplier":1,"relevance":1}},{"id":2728388065,"content":"If this is the only exception lets allow it to be a problem but only map it to `/rewrite` instead of including the time label change. Alternatively we can adjust the prompt to make absolutely minimal changes to the spec, which I think is a good idea either way. If it leaves some of the original authored content then this is perfectly valid!\n---\nFootnotes in the source code when I write them looks like this:\n```md\nMy footnote\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276#issuecomment-2728388065","commentType":"ISSUE_AUTHOR","score":{"reward":12.964,"formatting":{"content":{"h2":{"score":1,"elementCount":1},"p":{"score":0,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":74,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":65.73047297297298,"syllables":107,"sentences":4,"score":0.9426952702702702},"multiplier":1,"relevance":0.7}},{"id":2728390363,"content":"test","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276#issuecomment-2728390363","commentType":"ISSUE_AUTHOR","score":{"reward":0.072,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":1,"wordValue":0.1,"result":0.14},"readability":{"fleschKincaid":121.22000000000003,"syllables":1,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}},{"id":2728390769,"content":"You taught me something new, I didn't realize that we only need a single ^","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276#issuecomment-2728390769","commentType":"ISSUE_AUTHOR","score":{"reward":1.8,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":78.81000000000003,"syllables":20,"sentences":1,"score":0.8118999999999997},"multiplier":1,"relevance":0.3}},{"id":2856322698,"content":"We use footnote links for `/annotate` and issue deduplication\nExcessive credit is being given to the author of the comment with any of those generated footnotes\nhttps://github.com/ubiquity-os-marketplace/command-wallet/issues/47#issuecomment-2661604653\nDo not count deduplicated footnotes.  I suppose we can target the `0` prefix in the footnote ID but it also makes me think we should think of a more robust targeting system for the future.  For now regex footnotes with ids starting with that - should be fine to remove from the content during preprocessing.  \nIn the near future, we should actually prefix the generated footnotes with something more precise like `dedupe-` or `no-credit` or even better, check the diff and only offer credit if the user wrote the link, not a bot.  \nIf we can identify who wrote what, then we can extremely precisely reward credit where its due.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.34,"formatting":{"content":{"p":{"score":0,"elementCount":1},"br":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":131,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":52.49032051282052,"syllables":220,"sentences":6,"score":0.9249032051282051},"multiplier":1,"relevance":1}}],"reviewRewards":[{"reviews":[{"reviewId":2689291918,"effect":{"addition":28,"deletion":5},"reward":1.32,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/308"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 42.792 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>1.32</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.34</td></tr><tr><td>Issue</td><td>Comment</td><td>5</td><td>37.132</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/308\" target=\"_blank\" rel=\"noopener\">#308</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+28 -5</td><td>4</td><td>1.32</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276\" target=\"_blank\" rel=\"noopener\">We use footnote links for &#96;/annotate&#96; and issue deduplic&hellip;</a></h6></td><td><details><summary>3.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    br:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 131&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>1</td><td>1</td><td>4.34</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276#issuecomment-2664190299\" target=\"_blank\" rel=\"noopener\">Possible duplicate I think we could change to say something like&hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.9</td><td>4</td><td>9.216</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276#issuecomment-2728368358\" target=\"_blank\" rel=\"noopener\">Footnotes can be distinguished against normal links surely. Lets&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 99&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>1</td><td>4</td><td>13.08</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276#issuecomment-2728388065\" target=\"_blank\" rel=\"noopener\">If this is the only exception lets allow it to be a problem but &hellip;</a></h6></td><td><details><summary>3.61</summary><pre>content:&#13;  content:&#13;    h2:&#13;      score: 1&#13;      elementCount: 1&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 74&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.7</td><td>4</td><td>12.964</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276#issuecomment-2728390363\" target=\"_blank\" rel=\"noopener\">test</a></h6></td><td><details><summary>0.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0.1&#13;  result: 0.14&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.072</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/276#issuecomment-2728390769\" target=\"_blank\" rel=\"noopener\">You taught me something new, I didn't realize that we only need &hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.3</td><td>4</td><td>1.8</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_31.json","json":{"gentlementlegen":{"userId":9807008,"total":150,"task":{"reward":150,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 150 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>150</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":16.591,"userId":4975670,"comments":[{"id":2334936734,"content":"Requires price label to be a funded task. I suppose this should be configurable, with the default being off.\r\n_Originally posted by @0x4007 in https://github.com/ubiquity/ubiquibot-kernel/issues/43#issuecomment-2148880396_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/31","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.41,"formatting":{"content":{"p":{"score":0,"elementCount":2},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":53.889852941176486,"syllables":58,"sentences":4,"score":0.9388985294117649},"multiplier":1,"relevance":1}},{"id":1632609123,"content":"`requirePriceLabel` has less cognitive overhead. Default to `true` in case the property doesn't exist.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32#discussion_r1632609123","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -42,3 +42,81 @@ Be sure to review all `*.test.*` files for implementation details.\n ```\n \n Reward formula: `((count * wordValue) * (score * formattingMultiplier) * n) * relevance + task.reward = total`\n+\n+## Plugin configuration\n+\n+Here is a possible valid configuration to enable this plugin.\n+\n+\n+```yaml\n+plugin: ubiquibot/conversation-rewards\n+with:\n+    evmNetworkId: 100\n+    evmPrivateEncrypted: \"encrypted-key\"\n+    incentives:\n+      enabled: true","score":{"reward":3.834,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":63.57596153846157,"syllables":21,"sentences":2,"score":0.9642403846153843},"multiplier":1,"relevance":0.9}},{"id":1632623409,"content":"I think we should rename this property to `roles`, `targets`, or `affects`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32#discussion_r1632623409","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -42,3 +42,82 @@ Be sure to review all `*.test.*` files for implementation details.\n ```\n \n Reward formula: `((count * wordValue) * (score * formattingMultiplier) * n) * relevance + task.reward = total`\n+\n+## Plugin configuration\n+\n+Here is a possible valid configuration to enable this plugin.\n+\n+\n+```yaml\n+plugin: ubiquibot/conversation-rewards\n+with:\n+    evmNetworkId: 100\n+    evmPrivateEncrypted: \"encrypted-key\"\n+    incentives:\n+      enabled: true\n+      generateOnMissingPriceLabel: false\n+      contentEvaluator:\n+        enabled: true\n+      userExtractor:\n+        enabled: true\n+        redeemTask: true\n+      dataPurge:\n+        enabled: true\n+      formattingEvaluator:\n+        enabled: true\n+        scores:\n+          br: 0\n+          code: 1\n+          p: 1\n+          em: 0\n+          img: 0\n+          strong: 0\n+          blockquote: 0\n+          h1: 1\n+          h2: 1\n+          h3: 1\n+          h4: 1\n+          h5: 1\n+          h6: 1\n+          a: 1\n+          li: 1\n+          td: 1\n+          hr: 0\n+        multipliers:\n+          - type: [ ISSUE, ISSUER, SPECIFICATION ]","score":{"reward":2.627,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":84.90000000000003,"syllables":12,"sentences":1,"score":0.7509999999999997},"multiplier":1,"relevance":0.85}}],"reviewRewards":[{"reviews":[{"reviewId":2106678361,"effect":{"addition":186,"deletion":37},"reward":6.69,"priority":3},{"reviewId":2106699937,"effect":{"addition":1,"deletion":0},"reward":0.03,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 16.591 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>6.72</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.41</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>6.461</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32\" target=\"_blank\" rel=\"noopener\">#32</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+186 -37</td><td>3</td><td>6.69</td></tr><tr><td>+1 -0</td><td>3</td><td>0.03</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/31\" target=\"_blank\" rel=\"noopener\">Requires price label to be a funded task. I suppose this should &hellip;</a></h6></td><td><details><summary>2.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>1</td><td>1</td><td>3.41</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32#discussion_r1632609123\" target=\"_blank\" rel=\"noopener\">&#96;requirePriceLabel&#96; has less cognitive overhead. Default&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.9</td><td>3</td><td>3.834</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32#discussion_r1632623409\" target=\"_blank\" rel=\"noopener\">I think we should rename this property to &#96;roles&#96;, &#96;&hellip;</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.85</td><td>3</td><td>2.627</td></tr></tbody></table></details>"},"rndquu":{"total":8.187,"userId":119500907,"comments":[{"id":2106896087,"content":"[Works](https://github.com/rndquu-org/test-repo/issues/55) fine","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32#pullrequestreview-2106896087","commentType":"PULL_COLLABORATOR","score":{"reward":1.467,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":120.20500000000001,"syllables":2,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2106896087,"effect":{"addition":187,"deletion":37},"reward":6.72,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 8.187 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>6.72</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>1.467</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32\" target=\"_blank\" rel=\"noopener\">#32</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+187 -37</td><td>3</td><td>6.72</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32#pullrequestreview-2106896087\" target=\"_blank\" rel=\"noopener\">[Works](https://github.com/rndquu-org/test-repo/issues/55) fine</a></h6></td><td><details><summary>1.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.467</td></tr></tbody></table></details>"},"whilefoo":{"total":11.205,"userId":139262667,"comments":[{"id":1632306155,"content":"FYI you don't need to add T.Optional if you set default value","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32#discussion_r1632306155","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -25,6 +25,10 @@ export const incentivesConfigurationSchema = T.Object({\n      * Optionally specify a file to write the results in\n      */\n     file: T.Optional(T.String()),\n+    /**\n+     * If set to true, the plugin runs even if the price label is missing, and will evaluate comments.\n+     */\n+    generateOnMissingPriceLabel: T.Optional(T.Boolean({ default: false })),","score":{"reward":3.36,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":90.95857142857145,"syllables":18,"sentences":2,"score":0.6904142857142855},"multiplier":1,"relevance":0.8}},{"id":1632306543,"content":"add `generateOnMissingPriceLabel` to the example","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32#discussion_r1632306543","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -42,3 +42,81 @@ Be sure to review all `*.test.*` files for implementation details.\n ```\n \n Reward formula: `((count * wordValue) * (score * formattingMultiplier) * n) * relevance + task.reward = total`\n+\n+## Plugin configuration\n+\n+Here is a possible valid configuration to enable this plugin.\n+\n+\n+```yaml\n+plugin: ubiquibot/conversation-rewards\n+with:\n+    evmNetworkId: 100\n+    evmPrivateEncrypted: \"encrypted-key\"\n+    incentives:\n+      enabled: true","score":{"reward":1.155,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2106237244,"effect":{"addition":186,"deletion":37},"reward":6.69,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 11.205 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>6.69</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>4.515</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32\" target=\"_blank\" rel=\"noopener\">#32</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+186 -37</td><td>3</td><td>6.69</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32#discussion_r1632306155\" target=\"_blank\" rel=\"noopener\">FYI you don't need to add T.Optional if you set default value</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.36</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/32#discussion_r1632306543\" target=\"_blank\" rel=\"noopener\">add &#96;generateOnMissingPriceLabel&#96; to the example</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.155</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_97.json","json":{"shiv810":{"userId":53160903,"total":300,"task":{"reward":300,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 300 XP ]</a>&nbsp;</h3><h6>@shiv810</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>300</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":172.361,"userId":4975670,"comments":[{"id":2308709200,"content":"Made it a week to guarantee a good job. This is a core feature that needs to work at least as well as before.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2308709200","commentType":"ISSUE_AUTHOR","score":{"reward":4.158,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":95.955,"syllables":28,"sentences":2,"score":0.64045},"multiplier":1,"relevance":0.7}},{"id":2322744898,"content":"Seems like test with known samples is a good next step here.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2322744898","commentType":"ISSUE_AUTHOR","score":{"reward":3.24,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":103.00500000000001,"syllables":13,"sentences":1,"score":1},"multiplier":1,"relevance":0.8}},{"id":2336566194,"content":"Unfortunately you or I would just have to manually check old completed tasks and see their rewards. None in particular come to mind, but I would pay attention to those posted by \"ubiquibot\" instead of \"ubiquity-os\" as those used an older version of conversation rewards that seemed more accurate. \nIt is under the \"formatting score\" or \"quantitative scoring\" section. You might be able to search for these keywords in the codebase. I am mobile so pointing to code is not feasible. @gentlementlegen perhaps you can help with this point.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2336566194","commentType":"ISSUE_AUTHOR","score":{"reward":9.207,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":90,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":59.07000000000002,"syllables":141,"sentences":6,"score":0.9907000000000002},"multiplier":1,"relevance":0.9}},{"id":2340237317,"content":"@gentlementlegen Really nice to see this finally working as expected. Except the revision hash in the metadata is undefined. This should be fixed!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2340237317","commentType":"ISSUE_AUTHOR","score":{"reward":3.69,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":51.92289855072465,"syllables":40,"sentences":3,"score":0.9192289855072465},"multiplier":1,"relevance":0.6}},{"id":2341544129,"content":"Great idea except if temp is set too low I know it repeats and crashes. I'm pretty sure I played with these settings in my original implementation (see the repo called comment-incentives)\nI'm pretty sure it's implemented this way. I know for a fact in my original implementation I had them all evaluate in one shot.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2341544129","commentType":"ISSUE_AUTHOR","score":{"reward":7.824,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":60,"wordValue":0.1,"result":2.52},"readability":{"fleschKincaid":62.45500000000004,"syllables":88,"sentences":3,"score":0.9754499999999996},"multiplier":1,"relevance":0.8}},{"id":2343021301,"content":"@gentlementlegen","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2343021301","commentType":"ISSUE_AUTHOR","score":{"reward":0.042,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":1,"wordValue":0.1,"result":0.14},"readability":{"fleschKincaid":-217.17999999999998,"syllables":5,"sentences":1,"score":0},"multiplier":1,"relevance":0.1}},{"id":2345291513,"content":"I see. Given the extended context windows of the latest models, perhaps we should do it all in one shot?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2345291513","commentType":"ISSUE_AUTHOR","score":{"reward":3.822,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":82.47500000000001,"syllables":27,"sentences":2,"score":0.7752499999999999},"multiplier":1,"relevance":0.7}},{"id":2345512607,"content":"Context window is too long these days I am pretty sure it will be fine","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2345512607","commentType":"ISSUE_AUTHOR","score":{"reward":2.628,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":90.09000000000002,"syllables":18,"sentences":1,"score":0.6990999999999998},"multiplier":1,"relevance":0.6}},{"id":2346694304,"content":"Claude says the second comment is the most on topic which the GPTs disagree with. Thats a red flag. Also, there is a way to instruct GPT to return a JSON using headers, or some property name in the SDK. Don't specify in the prompt. I generally think that GPT is smarter but for massive context I've seen Claude do better on some tasks specifically related to coding.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2346694304","commentType":"ISSUE_AUTHOR","score":{"reward":8.802,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":70,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":75.39357142857143,"syllables":97,"sentences":5,"score":0.8460642857142857},"multiplier":1,"relevance":0.9}},{"id":2346760702,"content":"Unfortunately we need @gentlementlegen playground feature to fine tune conversation reward config and the LLM details. \r\nThey have been cooking it up for a few days now.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2346760702","commentType":"ISSUE_AUTHOR","score":{"reward":4.767,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":52.13250000000002,"syllables":45,"sentences":2,"score":0.9213250000000002},"multiplier":1,"relevance":0.7}},{"id":2346903718,"content":"Then we need to adjust our prompt","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2346903718","commentType":"ISSUE_AUTHOR","score":{"reward":1.62,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":103.04428571428575,"syllables":8,"sentences":1,"score":1},"multiplier":1,"relevance":0.6}},{"id":2348190942,"content":"Regarding your prompt, I feel like it could be useful context for the LLM to know who is posting which comment. The issue author is most likely to remain on topic and to guide the conversation I think. We can eventually iterate the prompt to accommodate this?\nAnother idea to enhance the accuracy is to generate embeddings and then sort how on topic each comment is, and then finally assigning a descending floating point score to each by asking the LLM to do so. \nBasically the embeddings can sort the order and then the LLM can finely score each, and it knows that it must be in descending order. \nAccording to the embedding criteria I [posted about](https://github.com/ubiquibot/generate-vector-embeddings/issues/8#issuecomment-2338875005) we could also use anomaly detection and basically set them aside as off topic, and not score them. \nI also feel like we could replace word count with the summarized points of comments. The idea is that it can potentially cut through the noise (verbose explanations) and credit for the salient points/ideas only. This needs more research though.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2348190942","commentType":"ISSUE_AUTHOR","score":{"reward":10.368,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":176,"wordValue":0.1,"result":1.97},"readability":{"fleschKincaid":58.16338383838385,"syllables":268,"sentences":9,"score":0.9816338383838386},"multiplier":1,"relevance":0.9}},{"id":2362121589,"content":"For vague specs which happen occasionally, we are to share research and concerns on here. We all get credited for it. \nSome recent observations:\n1. We are very likely going to entirely remove the word counter feature and instead generate embeddings and understand how much value a comment adds to solving the problem. \n2. We need to change the code to emphasize crediting per HTML tag and then the meaning of the comment with embeddings instead of word count. \n3. We still need to test how far we can get regarding vector embeddings and how well it solves our problem.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2362121589","commentType":"ISSUE_AUTHOR","score":{"reward":10.233,"formatting":{"content":{"p":{"score":0,"elementCount":1},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3}},"result":0.3},"priority":3,"words":{"wordCount":97,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":60.68008247422682,"syllables":145,"sentences":5,"score":0.9931991752577318},"multiplier":1,"relevance":0.9}},{"id":2363145914,"content":"My peer suggested some search engine results related algorithm. I'm asking him now to clarify which. This should help us see how on topic it is for the specification. We could consider adding this as one of several dimensions we evaluate the comments by. \nStarting to wonder if sub plugins are realistic, or just make npm modules (or if we should just use something like git modules)\nChatGPT is recommending me:\nThis seems a lot more interesting compared to word count but we should test. \nThe idea is that we can develop a proprietary algorithm that combines several strategies. Ideally we should make a playground that we can plugin these different modules and run tests against live GitHub issues to tweak it \nStrategy ideas:\n1. HTML elements counter\n2. Word counter ❌\n3. Flesch\n4. Something search engine algo related\n5. LLM judge (we do this now for relevance scoring)\n6. Generate concise summary and calculate compression ratio\n@gentlementlegen","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2363145914","commentType":"ISSUE_AUTHOR","score":{"reward":9.558,"formatting":{"content":{"p":{"score":0,"elementCount":1},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":6}},"result":0.6},"priority":3,"words":{"wordCount":153,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":47.52058823529413,"syllables":248,"sentences":7,"score":0.8752058823529413},"multiplier":1,"relevance":0.9}},{"id":2365057139,"content":"My peer got back to me regarding the search engine recommendation\r\n---\r\n**TF-IDF (Term Frequency-Inverse Document Frequency)** is a classic algorithm used in search and information retrieval to evaluate how important a word is to a document relative to a collection of documents (often referred to as a \"corpus\"). It helps identify which terms are most relevant to the context of a specific document.\r\n### **In the Context of Your Goals: Evaluating GitHub Comments**\r\nGiven your objective to measure the value of GitHub comments in relation to problem-solving, TF-IDF could be a useful tool to assess the relevance and informational density of individual comments with respect to the overall issue or conversation.\r\nHere's how TF-IDF might be applied in your scenario:\r\n#### **1. How TF-IDF Works**\r\n- **Term Frequency (TF):** Measures how frequently a term appears in a comment. Higher frequencies suggest that the term is more important within that comment.\r\n```math\r\n  \\[\r\n  \\text{TF}(t, d) = \\frac{\\text{Number of times term } t \\text{ appears in document } d}{\\text{Total number of terms in document } d}\r\n  \\]\r\n```\r\n- **Inverse Document Frequency (IDF):** Measures how unique a term is across all comments or documents. Terms that appear frequently across many comments are considered less important.\r\n```math\r\n  \\[\r\n  \\text{IDF}(t) = \\log \\left(\\frac{\\text{Total number of documents}}{\\text{Number of documents containing term } t}\\right)\r\n  \\]\r\n```\r\n- **TF-IDF Score:** Combines the two to assign a weight to each term in a comment:\r\n```math\r\n  \\[\r\n  \\text{TF-IDF}(t, d) = \\text{TF}(t, d) \\times \\text{IDF}(t)\r\n  \\]\r\n```\r\n#### **2. Applying TF-IDF to Evaluate Comment Relevance:**\r\n- **Identifying Key Terms in Comments:**\r\n  - TF-IDF will highlight terms in each comment that are not just common but are also distinctive in the context of the overall issue. This helps identify comments with unique and relevant insights.\r\n- **Assessing Relevance to the Issue Description:**\r\n  - By comparing the TF-IDF scores of words in a comment to those in the issue description, you can measure how closely a comment aligns with the core problem. Comments with terms that have high TF-IDF relevance scores relative to the issue description are more likely to be valuable.\r\n- **Filtering Out Low-Value Contributions:**\r\n  - Comments that consist primarily of high-TF but low-IDF terms (e.g., generic phrases or filler words) can be identified as less valuable. This is particularly useful for identifying verbose comments from junior developers that lack unique insights.\r\n#### **3. Enhancing Your Continuum-Based Scoring System:**\r\n- **Weighted Relevance Scores:** Use TF-IDF scores to assign a relevance weight to each comment, allowing you to rank comments on a continuum of importance rather than using binary relevance.\r\n- **Combining with Other Metrics:** Integrate TF-IDF scores with other continuous metrics (e.g., semantic similarity, readability) to create a comprehensive scoring system that reflects both the specificity and value of a comment.\r\n#### **Practical Steps for Implementation:**\r\n1. **Preprocess the Data:** Tokenize the comments and issue descriptions, remove stop words, and normalize the text (e.g., lowercase conversion).\r\n2. **Calculate TF-IDF:** Apply TF-IDF to generate relevance scores for each comment.\r\n3. **Score Aggregation:** Aggregate the TF-IDF scores to quantify each comment’s overall contribution to solving the issue.\r\n### **Benefits for Your Goals:**\r\n- **Objective Measurement of Relevance:** TF-IDF provides a quantitative way to gauge how closely comments relate to the problem at hand.\r\n- **Filtering Out Noise:** Helps distinguish between high-value contributions and generic or off-topic comments.\r\n- **Complementary to Other Techniques:** Can be combined with PageRank, readability scores, or semantic similarity measures for a more holistic evaluation.\r\nUsing TF-IDF will give you an effective way to measure the informational value and relevance of comments, aligning well with your goal of continuum-based scoring. Let me know if you’d like to dive deeper into any specific aspect of this approach!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2365057139","commentType":"ISSUE_AUTHOR","score":{"reward":24.072,"formatting":{"content":{"p":{"score":0,"elementCount":16},"hr":{"score":0,"elementCount":1},"h3":{"score":1,"elementCount":2},"h4":{"score":1,"elementCount":4},"ul":{"score":0,"elementCount":9},"li":{"score":0.1,"elementCount":17},"ol":{"score":0,"elementCount":1}},"result":7.7},"priority":3,"words":{"wordCount":475,"wordValue":0.1,"result":0.23},"readability":{"fleschKincaid":48.2601052631579,"syllables":797,"sentences":29,"score":0.882601052631579},"multiplier":1,"relevance":0.8}},{"id":2366257968,"content":"Credibility score we can adjust to the author no matter their position/relationship with the organization.\nThe spec author generally has the clearest vision on the task so if what is commented aligns with them (i.e. they agree) then more credit should be offered (this of course is only in the context of funded tasks) \nReactions we usually have a very limited amount of but I think reactions from author and core team could be a positive indicator. \nIf we can attribute block quotes that can be interesting. The problem there is that I generally comment from mobile and block quotes can be inconvenient but sometimes I make sure to do in order to enhance clarity. I would be more curious to experiment with attributing block quote crediting.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2366257968","commentType":"ISSUE_AUTHOR","score":{"reward":7.464,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":129,"wordValue":0.1,"result":2.42},"readability":{"fleschKincaid":55.65558139534886,"syllables":202,"sentences":7,"score":0.9565558139534887},"multiplier":1,"relevance":0.8}},{"id":2368483639,"content":"Sure yes let's try. \nI have a feeling it might make sense to prototype strategies with a command line tool and then live test against real examples before we fully integrate it into our system. \nSome strategies might prove to be bad and it would be unfortunate to invest in building and integrating them and then scrapping them right away.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2368483639","commentType":"ISSUE_AUTHOR","score":{"reward":6.846,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":61,"wordValue":0.1,"result":2.53},"readability":{"fleschKincaid":64.15076502732244,"syllables":88,"sentences":3,"score":0.9584923497267757},"multiplier":1,"relevance":0.7}},{"id":2377726454,"content":"Conversation rewards plug-in is designed to run on GitHub actions. This is because we need to generate a virtual dom for every comment which can take anywhere between 100 and 500 ms in my testing long ago. \nFor long issues and linked pulls you can imagine that the rendering time can be quite substantial. With Cloudflare workers we are limited to ~500 ms as I recall. \nWe essentially have no limits for GitHub actions (6 hours per job, 20 concurrent jobs allowed, unlimited per day)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2377726454","commentType":"ISSUE_AUTHOR","score":{"reward":7.119,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":86,"wordValue":0.1,"result":2.64},"readability":{"fleschKincaid":65.4281627906977,"syllables":126,"sentences":5,"score":0.945718372093023},"multiplier":1,"relevance":0.7}},{"id":2377871079,"content":"### Scoring Criteria to Incorporate\n- [ ] Topic-Comment-Alignment\n- [ ] User Engagement \n- [ ] Flesch-Kincaid Clarity\n- [x] LLM Judge\n- [x] HTML Elements Counter","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2377871079","commentType":"ISSUE_AUTHOR","score":{"reward":9.18,"formatting":{"content":{"h3":{"score":1,"elementCount":1},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":5}},"result":1.5},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":13.897368421052647,"syllables":39,"sentences":1,"score":0.5389736842105265},"multiplier":1,"relevance":0.9}},{"id":2377929450,"content":"I think what might make the most sense for next steps:\n1. We consider this more of a research task where the primary rewards are for our comments here\n2. We break off the sub strategies into separate small priced tasks \n3. We reduce the time estimate on this to something like 1 day (not sure how long it took you to make the prompt and implement the changes) in order to reduce the code credit. This is because the original vision here was to batch everything in this pull but I realize that we ended up coming up with several seemingly viable strategies, so it makes sense to make multiple tasks.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2377929450","commentType":"ISSUE_AUTHOR","score":{"reward":8.4,"formatting":{"content":{"p":{"score":0,"elementCount":1},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3}},"result":0.3},"priority":3,"words":{"wordCount":109,"wordValue":0.1,"result":2.56},"readability":{"fleschKincaid":35.095481651376176,"syllables":150,"sentences":2,"score":0.7509548165137617},"multiplier":1,"relevance":0.8}},{"id":2377932960,"content":"I guess our plugins are down but I anticipated 300 USD price.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2377932960","commentType":"ISSUE_AUTHOR","score":{"reward":1.92,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":81.85500000000002,"syllables":16,"sentences":1,"score":0.7814499999999999},"multiplier":1,"relevance":0.5}},{"id":2394932159,"content":"Sure you can make a normal priority task for it","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2394932159","commentType":"ISSUE_AUTHOR","score":{"reward":1.32,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":86.70500000000001,"syllables":13,"sentences":1,"score":0.7329499999999999},"multiplier":1,"relevance":0.4}},{"id":2485097937,"content":"Qualitative and quantitative analysis have unexpected results according to how I implemented in v1. Research, and refine. \n_Originally posted by @0x4007 in https://github.com/ubiquibot/command-start-stop/issues/14#issuecomment-2308672581_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.14,"formatting":{"content":{"p":{"score":0,"elementCount":1},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":34.38852272727274,"syllables":64,"sentences":4,"score":0.7438852272727274},"multiplier":1,"relevance":1}},{"id":2332346274,"content":"Consider using o1-mini? I have access to it now from our org key. I am not sure if it is better for this kind of task. I am under the impression that it is more impressive when passing in minimal information/context. \nGiven that we are passing in all the context, maybe 4o is superior. \nAlso you need to program it to respond with json (not via the prompt, but by passing in the config to the openai object)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123#pullrequestreview-2332346274","commentType":"PULL_COLLABORATOR","score":{"reward":6.909,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":80,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":75.91916666666668,"syllables":111,"sentences":6,"score":0.8408083333333332},"multiplier":1,"relevance":0.7}},{"id":1767892964,"content":"Why do you prefix instruction? \nThis is handled via the api you write it as the assistant message. \nThen we can pass in user message after as the \"input\"\nPerhaps that will lead to better results. I've always been mindful of this in my implementations.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123#discussion_r1767892964","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -172,14 +183,36 @@ export class ContentEvaluatorModule implements Module {\n     }\n   }\n \n-  _generatePrompt(issue: string, comments: { id: number; comment: string }[]) {\n+  _generatePrompt(\n+    issue: string,\n+    allComments: { id: number; comment: string; author: string }[],\n+    comments: { id: number; comment: string; author: string }[]\n+  ) {\n     if (!issue?.length) {\n       throw new Error(\"Issue specification comment is missing or empty\");\n     }\n-    return `I need to evaluate the relevance of GitHub contributors' comments to a specific issue specification. Specifically, I'm interested in how much each comment helps to further define the issue specification or contributes new information or research relevant to the issue. Please provide a float between 0 and 1 to represent the degree of relevance. A score of 1 indicates that the comment is entirely relevant and adds significant value to the issue, whereas a score of 0 indicates no relevance or added value. A stringified JSON is given below that contains the specification and contributors' comments. Each comment in the JSON has a unique ID and comment content. \\n\\n\\`\\`\\`\\n${JSON.stringify(\n-      { specification: issue, comments: comments }\n-    )}\\n\\`\\`\\`\\n\\n\\nTo what degree are each of the comments in the conversation relevant and valuable to further defining the issue specification? Please reply with ONLY a JSON where each key is the comment ID given in JSON above, and the value is a float number between 0 and 1 corresponding to the comment. The float number should represent the degree of relevance and added value of the comment to the issue. The total number of properties in your JSON response should equal exactly ${\n-      comments.length\n-    }.`;\n+\n+    return `Instruction: ","score":{"reward":7.803,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":46,"wordValue":0.1,"result":2.31},"readability":{"fleschKincaid":75.61902173913046,"syllables":65,"sentences":4,"score":0.8438097826086954},"multiplier":1,"relevance":0.9}},{"id":2378005412,"content":"I don't think it has a limit I just quickly made from my phone and dm you key on telegram.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123#issuecomment-2378005412","commentType":"PULL_COLLABORATOR","score":{"reward":1.116,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":84.8057142857143,"syllables":25,"sentences":1,"score":0.751942857142857},"multiplier":1,"relevance":0.2}},{"id":2378054582,"content":"Okay 4o maybe is best","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123#issuecomment-2378054582","commentType":"PULL_COLLABORATOR","score":{"reward":0.621,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":100.24000000000002,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}},{"id":2379912248,"content":"Well you also spelled related wrong but yeah you can fix the merge conflict and your spelling. Needs to pass CI before merging.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123#issuecomment-2379912248","commentType":"PULL_COLLABORATOR","score":{"reward":2.94,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":88.49293478260873,"syllables":29,"sentences":2,"score":0.7150706521739127},"multiplier":1,"relevance":0.5}},{"id":2381135831,"content":"It's not stable. Needs exponential backoff","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123#issuecomment-2381135831","commentType":"PULL_COLLABORATOR","score":{"reward":1.602,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":58.25392857142859,"syllables":12,"sentences":2,"score":0.9825392857142858},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2317146383,"effect":{"addition":49,"deletion":16},"reward":1.95,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 172.361 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>1.95</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.14</td></tr><tr><td>Issue</td><td>Comment</td><td>22</td><td>146.28</td></tr><tr><td>Review</td><td>Comment</td><td>6</td><td>20.991</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123\" target=\"_blank\" rel=\"noopener\">#123</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+49 -16</td><td>3</td><td>1.95</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97\" target=\"_blank\" rel=\"noopener\">Qualitative and quantitative analysis have unexpected results ac&hellip;</a></h6></td><td><details><summary>2.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>1</td><td>1</td><td>3.14</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2308709200\" target=\"_blank\" rel=\"noopener\">Made it a week to guarantee a good job. This is a core feature t&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.158</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2322744898\" target=\"_blank\" rel=\"noopener\">Seems like test with known samples is a good next step here.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.24</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2336566194\" target=\"_blank\" rel=\"noopener\">Unfortunately you or I would just have to manually check old com&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 90&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.9</td><td>3</td><td>9.207</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2340237317\" target=\"_blank\" rel=\"noopener\">@gentlementlegen Really nice to see this finally working as expe&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.6</td><td>3</td><td>3.69</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2341544129\" target=\"_blank\" rel=\"noopener\">Great idea except if temp is set too low I know it repeats and c&hellip;</a></h6></td><td><details><summary>2.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 60&#13;  wordValue: 0.1&#13;  result: 2.52&#13;</pre></details></td><td>0.8</td><td>3</td><td>7.824</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2343021301\" target=\"_blank\" rel=\"noopener\">@gentlementlegen</a></h6></td><td><details><summary>0.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0.1&#13;  result: 0.14&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.042</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2345291513\" target=\"_blank\" rel=\"noopener\">I see. Given the extended context windows of the latest models, &hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.822</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2345512607\" target=\"_blank\" rel=\"noopener\">Context window is too long these days I am pretty sure it will b&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.6</td><td>3</td><td>2.628</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2346694304\" target=\"_blank\" rel=\"noopener\">Claude says the second comment is the most on topic which the GP&hellip;</a></h6></td><td><details><summary>2.6</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 70&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>0.9</td><td>3</td><td>8.802</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2346760702\" target=\"_blank\" rel=\"noopener\">Unfortunately we need @gentlementlegen playground feature to fin&hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.767</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2346903718\" target=\"_blank\" rel=\"noopener\">Then we need to adjust our prompt</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.62</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2348190942\" target=\"_blank\" rel=\"noopener\">Regarding your prompt, I feel like it could be useful context fo&hellip;</a></h6></td><td><details><summary>2.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 176&#13;  wordValue: 0.1&#13;  result: 1.97&#13;</pre></details></td><td>0.9</td><td>3</td><td>10.368</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2362121589\" target=\"_blank\" rel=\"noopener\">For vague specs which happen occasionally, we are to share resea&hellip;</a></h6></td><td><details><summary>2.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;  result: 0.3&#13;regex:&#13;  wordCount: 97&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.9</td><td>3</td><td>10.233</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2363145914\" target=\"_blank\" rel=\"noopener\">My peer suggested some search engine results related algorithm. &hellip;</a></h6></td><td><details><summary>2.8</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 6&#13;  result: 0.6&#13;regex:&#13;  wordCount: 153&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.9</td><td>3</td><td>9.558</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2365057139\" target=\"_blank\" rel=\"noopener\">My peer got back to me regarding the search engine recommendatio&hellip;</a></h6></td><td><details><summary>7.93</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 16&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    h3:&#13;      score: 1&#13;      elementCount: 2&#13;    h4:&#13;      score: 1&#13;      elementCount: 4&#13;    ul:&#13;      score: 0&#13;      elementCount: 9&#13;    li:&#13;      score: 0.1&#13;      elementCount: 17&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 7.7&#13;regex:&#13;  wordCount: 475&#13;  wordValue: 0.1&#13;  result: 0.23&#13;</pre></details></td><td>0.8</td><td>3</td><td>24.072</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2366257968\" target=\"_blank\" rel=\"noopener\">Credibility score we can adjust to the author no matter their po&hellip;</a></h6></td><td><details><summary>2.42</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 129&#13;  wordValue: 0.1&#13;  result: 2.42&#13;</pre></details></td><td>0.8</td><td>3</td><td>7.464</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2368483639\" target=\"_blank\" rel=\"noopener\">Sure yes let's try. I have a feeling it might make sense to pro&hellip;</a></h6></td><td><details><summary>2.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 61&#13;  wordValue: 0.1&#13;  result: 2.53&#13;</pre></details></td><td>0.7</td><td>3</td><td>6.846</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2377726454\" target=\"_blank\" rel=\"noopener\">Conversation rewards plug-in is designed to run on GitHub action&hellip;</a></h6></td><td><details><summary>2.64</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 86&#13;  wordValue: 0.1&#13;  result: 2.64&#13;</pre></details></td><td>0.7</td><td>3</td><td>7.119</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2377871079\" target=\"_blank\" rel=\"noopener\">### Scoring Criteria to Incorporate- [ ] Topic-Comment-Alignmen&hellip;</a></h6></td><td><details><summary>2.93</summary><pre>content:&#13;  content:&#13;    h3:&#13;      score: 1&#13;      elementCount: 1&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 5&#13;  result: 1.5&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.9</td><td>3</td><td>9.18</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2377929450\" target=\"_blank\" rel=\"noopener\">I think what might make the most sense for next steps:1. We con&hellip;</a></h6></td><td><details><summary>2.86</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;  result: 0.3&#13;regex:&#13;  wordCount: 109&#13;  wordValue: 0.1&#13;  result: 2.56&#13;</pre></details></td><td>0.8</td><td>3</td><td>8.4</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2377932960\" target=\"_blank\" rel=\"noopener\">I guess our plugins are down but I anticipated 300 USD price.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.92</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2394932159\" target=\"_blank\" rel=\"noopener\">Sure you can make a normal priority task for it</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.32</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123#pullrequestreview-2332346274\" target=\"_blank\" rel=\"noopener\">Consider using o1-mini? I have access to it now from our org key&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 80&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.7</td><td>3</td><td>6.909</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123#discussion_r1767892964\" target=\"_blank\" rel=\"noopener\">Why do you prefix instruction? This is handled via the api you &hellip;</a></h6></td><td><details><summary>2.31</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 46&#13;  wordValue: 0.1&#13;  result: 2.31&#13;</pre></details></td><td>0.9</td><td>3</td><td>7.803</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123#issuecomment-2378005412\" target=\"_blank\" rel=\"noopener\">I don't think it has a limit I just quickly made from my phone a&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.2</td><td>3</td><td>1.116</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123#issuecomment-2378054582\" target=\"_blank\" rel=\"noopener\">Okay 4o maybe is best</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.621</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123#issuecomment-2379912248\" target=\"_blank\" rel=\"noopener\">Well you also spelled related wrong but yeah you can fix the mer&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.5</td><td>3</td><td>2.94</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123#issuecomment-2381135831\" target=\"_blank\" rel=\"noopener\">It's not stable. Needs exponential backoff</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.602</td></tr></tbody></table></details>"},"gentlementlegen":{"total":47.391,"userId":9807008,"comments":[{"id":2336567676,"content":"We don't give credit for the image itself but apply a different value and multiplier based on the html entities, like `<img/>`.\r\nThe configuration object is located [here](https://github.com/ubiquibot/conversation-rewards/blob/56175197f8a13e14698cac9314f2903dd8b27c28/src/configuration/formatting-evaluator-config.ts#L21), and the multiplier would be applied [here](https://github.com/ubiquibot/conversation-rewards/blob/90bc3a86118b9fe065d2a89e105022ec77d30e81/src/parser/formatting-evaluator-module.ts#L130).","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2336567676","commentType":"ISSUE_COLLABORATOR","score":{"reward":14.067,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2},"priority":3,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":56.1296428571429,"syllables":55,"sentences":2,"score":0.9612964285714289},"multiplier":1,"relevance":0.9}},{"id":2345236647,"content":"Depends what is meant by \"all together\". Now it is all together, but by user, not all comment from the whole issue / PR in one block. Original implementation was the same except that there was a batch of 10 attemps averaged.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2345236647","commentType":"ISSUE_COLLABORATOR","score":{"reward":6.744,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":67.09504065040652,"syllables":61,"sentences":3,"score":0.9290495934959349},"multiplier":1,"relevance":0.8}},{"id":2345507484,"content":"If that enhances precision and gives more context for better results it is nice, however I wonder if we would easily burst through the max tokens doing so for long reviews.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2345507484","commentType":"ISSUE_COLLABORATOR","score":{"reward":5.187,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":55.292580645161294,"syllables":44,"sentences":1,"score":0.952925806451613},"multiplier":1,"relevance":0.7}},{"id":2358866956,"content":"@sshivaditya2019 Could you elaborate on your issue? also it would help if you open a PR as a draft so we can see what's going on.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2358866956","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.326,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":80.33250000000004,"syllables":36,"sentences":2,"score":0.7966749999999996},"multiplier":1,"relevance":0.2}},{"id":2359868422,"content":"@sshivaditya2019 You can see in the pull-request you linked that tests are passing successfully, my best is some problem in your local setup. Maybe you have some environment variables missing, or some configuration problems?\r\nIf the permit URL is missing it is probably because permits failed to generate. I don't know if you have more detailed errors, but as long as it works on your linked pull-request you shouldn't need to worry much about your local tests.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2359868422","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.017,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":81,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":64.08125000000001,"syllables":117,"sentences":4,"score":0.9591874999999999},"multiplier":1,"relevance":0.1}},{"id":2359908139,"content":"To check them locally, you will need to use your own OpenAI key to get ChatGpt to run. What I do on my side is have a local Jest test that allows me to run it on any issue. Please check out [this Gist](https://gist.github.com/gentlementlegen/f0fc52967415e820f72fd842640e5246) it might help you.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2359908139","commentType":"ISSUE_COLLABORATOR","score":{"reward":3.618,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":48,"wordValue":0.1,"result":2.35},"readability":{"fleschKincaid":93.65750000000001,"syllables":55,"sentences":3,"score":0.6634249999999998},"multiplier":1,"relevance":0.3}},{"id":2361450379,"content":"The problem is that this tests runs on real data which is subject to change. What could be done is including this test but excluding it from the test run. However, there is [this issue](https://github.com/ubiquibot/conversation-rewards/issues/102) that should eventually get that covered, didn't have time to look into it.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2361450379","commentType":"ISSUE_COLLABORATOR","score":{"reward":5.016,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":49,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":79.75870748299323,"syllables":64,"sentences":3,"score":0.8024129251700677},"multiplier":1,"relevance":0.4}},{"id":2363190196,"content":"`conversation-rewards` already supports modules within itself that you can enable / disable to change the final output. You can do as many transforming modules as you want and enable / disable them through the configuration.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2363190196","commentType":"ISSUE_COLLABORATOR","score":{"reward":5.76,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":37.25750000000002,"syllables":58,"sentences":2,"score":0.7725750000000002},"multiplier":1,"relevance":0.8}},{"id":2384610800,"content":"@0x4007 I noticed the comment reward tends to be truncated a lot. Maybe we should look into optimizing the contents somehow.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2384610800","commentType":"ISSUE_COLLABORATOR","score":{"reward":4.656,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":67.2632142857143,"syllables":32,"sentences":2,"score":0.927367857142857},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/123"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 47.391 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>9</td><td>47.391</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2336567676\" target=\"_blank\" rel=\"noopener\">We don't give credit for the image itself but apply a different &hellip;</a></h6></td><td><details><summary>4.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.9</td><td>3</td><td>14.067</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2345236647\" target=\"_blank\" rel=\"noopener\">Depends what is meant by \"all together\". Now it is all together,&hellip;</a></h6></td><td><details><summary>2.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.8</td><td>3</td><td>6.744</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2345507484\" target=\"_blank\" rel=\"noopener\">If that enhances precision and gives more context for better res&hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.7</td><td>3</td><td>5.187</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2358866956\" target=\"_blank\" rel=\"noopener\">@sshivaditya2019 Could you elaborate on your issue? also it woul&hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.2</td><td>3</td><td>1.326</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2359868422\" target=\"_blank\" rel=\"noopener\">@sshivaditya2019 You can see in the pull-request you linked that&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 81&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.1</td><td>3</td><td>1.017</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2359908139\" target=\"_blank\" rel=\"noopener\">To check them locally, you will need to use your own OpenAI key &hellip;</a></h6></td><td><details><summary>3.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 48&#13;  wordValue: 0.1&#13;  result: 2.35&#13;</pre></details></td><td>0.3</td><td>3</td><td>3.618</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2361450379\" target=\"_blank\" rel=\"noopener\">The problem is that this tests runs on real data which is subjec&hellip;</a></h6></td><td><details><summary>3.37</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 49&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>0.4</td><td>3</td><td>5.016</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2363190196\" target=\"_blank\" rel=\"noopener\">&#96;conversation-rewards&#96; already supports modules within i&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.8</td><td>3</td><td>5.76</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2384610800\" target=\"_blank\" rel=\"noopener\">@0x4007 I noticed the comment reward tends to be truncated a lot&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.656</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_233.json","json":{"gentlementlegen":{"userId":9807008,"total":53.125,"task":{"reward":50,"multiplier":1},"comments":[{"id":2571544417,"content":"@0x4007 I think we could implement the same changes that were made in `command-start-stop` regarding the user status fetching so that personal repositories are also considered.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/233#issuecomment-2571544417","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.06,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":42.71600000000004,"syllables":41,"sentences":1,"score":0.8271600000000003},"multiplier":0.25,"relevance":1}},{"id":2271885648,"content":"Resolves #233\r\nQA: https://github.com/Meniole/text-conversation-rewards/issues/47#issuecomment-2585589224 (user has write access only to the repository and is not part of the organization)","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237","commentType":"PULL_SPECIFICATION","score":{"reward":2.065,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":40.42094827586209,"syllables":52,"sentences":2,"score":0.8042094827586209},"multiplier":1,"relevance":0.7}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 53.125 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.06</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>2.065</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/233#issuecomment-2571544417\" target=\"_blank\" rel=\"noopener\">@0x4007 I think we could implement the same changes that were ma&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>1</td><td>2</td><td>1.06</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237\" target=\"_blank\" rel=\"noopener\">Resolves #233QA: https://github.com/Meniole/text-conversation-&hellip;</a></h6></td><td><details><summary>2.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.7</td><td>1</td><td>2.065</td></tr></tbody></table></details>"},"0x4007":{"total":14.696,"userId":4975670,"comments":[{"id":2567338154,"content":"Time can be adjusted as I'm unsure its correct.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/233#issuecomment-2567338154","commentType":"ISSUE_AUTHOR","score":{"reward":0.22,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":86.70500000000001,"syllables":13,"sentences":1,"score":0.7329499999999999},"multiplier":1,"relevance":0.1}},{"id":2585689805,"content":"I have mixed feelings on automatic assignment on pull merge. \nThis may create an incentive to not self assign and collect comment rewards.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/233#issuecomment-2585689805","commentType":"ISSUE_AUTHOR","score":{"reward":0.412,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":66.42336956521743,"syllables":35,"sentences":2,"score":0.9357663043478257},"multiplier":1,"relevance":0.1}},{"id":2765517746,"content":"The logic to look up the user's status in a repository doesn't seem compatible with personal orgs and this should be loosened up and/or fixed for personal orgs. \r\nhttps://github.com/0x4007/0x4007/issues/5#issuecomment-2567336718","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/233","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.74,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":66.40166666666669,"syllables":60,"sentences":3,"score":0.9359833333333332},"multiplier":1,"relevance":1}},{"id":2545377360,"content":"Looks great but can improve with my comment","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237#pullrequestreview-2545377360","commentType":"PULL_COLLABORATOR","score":{"reward":0.364,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":92.965,"syllables":10,"sentences":1,"score":0.67035},"multiplier":1,"relevance":0.2}},{"id":1912396708,"content":"Have you figured out why GitHub has different systems of distinction? I don't understand why some APIs return different values.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237#discussion_r1912396708","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,44 @@\n+import { ContextPlugin } from \"../types/plugin-input\";\n+\n+export const ADMIN_ROLES = [\"admin\", \"owner\", \"billing_manager\"];\n+export const COLLABORATOR_ROLES = [\"write\", \"member\", \"collaborator\"];","score":{"reward":1.56,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":55.17750000000001,"syllables":35,"sentences":2,"score":0.951775},"multiplier":1,"relevance":0.4}},{"id":1912397050,"content":"Missed opportunity for type casting the return value in the function typing using the `is` operator in typescript. I forget the correct term to refer to this but I would look into it.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237#discussion_r1912397050","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,44 @@\n+import { ContextPlugin } from \"../types/plugin-input\";\n+\n+export const ADMIN_ROLES = [\"admin\", \"owner\", \"billing_manager\"];\n+export const COLLABORATOR_ROLES = [\"write\", \"member\", \"collaborator\"];\n+\n+function isAdminRole(role: string) {\n+  return ADMIN_ROLES.includes(role.toLowerCase());\n+}\n+\n+function isCollaboratorRole(role: string) {\n+  return COLLABORATOR_ROLES.includes(role.toLowerCase());\n+}","score":{"reward":4.016,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":55.763750000000016,"syllables":51,"sentences":2,"score":0.9576375000000001},"multiplier":1,"relevance":0.8}},{"id":2585645515,"content":"Telegram payload is probably a reference to the telegram bridge which has nothing to do with this code, right? Looks like there's some overstepping of adding too much context from other repo code @shiv810 please look into this \nI think we should also encourage the bot to be more concise. Long comments are never fun to read. \nWhat about implementing a reranker to filter out irrelevant content","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237#issuecomment-2585645515","commentType":"PULL_COLLABORATOR","score":{"reward":2.004,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":68,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":61.435882352941206,"syllables":103,"sentences":4,"score":0.9856411764705879},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2545377360,"effect":{"addition":103,"deletion":16},"reward":2.38,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 14.696 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>2.38</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.74</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>0.632</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>7.944</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237\" target=\"_blank\" rel=\"noopener\">#237</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+103 -16</td><td>2</td><td>2.38</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/233\" target=\"_blank\" rel=\"noopener\">The logic to look up the user's status in a repository doesn't s&hellip;</a></h6></td><td><details><summary>2.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>1</td><td>1</td><td>3.74</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/233#issuecomment-2567338154\" target=\"_blank\" rel=\"noopener\">Time can be adjusted as I'm unsure its correct.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.22</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/233#issuecomment-2585689805\" target=\"_blank\" rel=\"noopener\">I have mixed feelings on automatic assignment on pull merge. Th&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.1</td><td>2</td><td>0.412</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237#pullrequestreview-2545377360\" target=\"_blank\" rel=\"noopener\">Looks great but can improve with my comment</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.2</td><td>2</td><td>0.364</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237#discussion_r1912396708\" target=\"_blank\" rel=\"noopener\">Have you figured out why GitHub has different systems of distinc&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.4</td><td>2</td><td>1.56</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237#discussion_r1912397050\" target=\"_blank\" rel=\"noopener\">Missed opportunity for type casting the return value in the func&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.8</td><td>2</td><td>4.016</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237#issuecomment-2585645515\" target=\"_blank\" rel=\"noopener\">Telegram payload is probably a reference to the telegram bridge &hellip;</a></h6></td><td><details><summary>2.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 68&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>0.3</td><td>2</td><td>2.004</td></tr></tbody></table></details>"},"Keyrxng":{"total":0.342,"userId":106303466,"comments":[{"id":2593729464,"content":"That was one of the first things shiv added into my V1 build but I see recent updates via their current open PR, perhaps it's been improved 👍🏻","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237#issuecomment-2593729464","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.342,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":72.66500000000002,"syllables":35,"sentences":1,"score":0.8733499999999998},"multiplier":0.25,"relevance":0.3}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.342 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>0.342</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237#issuecomment-2593729464\" target=\"_blank\" rel=\"noopener\">That was one of the first things shiv added into my V1 build but&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.3</td><td>2</td><td>0.342</td></tr></tbody></table></details>"},"shiv810":{"total":0.66,"userId":53160903,"comments":[{"id":2594418154,"content":"I can add `maxCompletionToken` param to the api call, that should limit the response length. Altrenate, would be switch to `gpt-4o`.\r\nWe already have voyage reranker, I'll check.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237#issuecomment-2594418154","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.66,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":81.76666666666668,"syllables":37,"sentences":3,"score":0.7823333333333332},"multiplier":0.25,"relevance":0.6}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.66 XP ]</a>&nbsp;</h3><h6>@shiv810</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>0.66</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/237#issuecomment-2594418154\" target=\"_blank\" rel=\"noopener\">I can add &#96;maxCompletionToken&#96; param to the api call, th&hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.6</td><td>2</td><td>0.66</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_230.json","json":{"shiv810":{"userId":53160903,"total":300,"task":{"reward":300,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 300 XP ]</a>&nbsp;</h3><h6>@shiv810</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>300</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":67.415,"userId":4975670,"comments":[{"id":2639130155,"content":"Maybe we'll need to tweak the code review incentive. Seems a bit high? \nI think we need to make sure that linguist generated ignored files are NOT included in line count \ngentlementlegen got credit for reviewing 9000 added lines but the net result is there was only 6000 added so something might be wrong there too. Also they only left one review but got credited twice. \nI think when merging you get credited for code review again which might not be correct.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/230#issuecomment-2639130155","commentType":"ISSUE_AUTHOR","score":{"reward":1.974,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":83,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":75.82696385542172,"syllables":112,"sentences":5,"score":0.8417303614457827},"multiplier":1,"relevance":0.2}},{"id":2651966910,"content":"Hey guys @shiv810 @gentlementlegen we don't have any information displayed on this in the scoring summary? That should have been a requirement! How do we know if its even working now?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/230#issuecomment-2651966910","commentType":"ISSUE_AUTHOR","score":{"reward":5.952,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":69.10833333333336,"syllables":48,"sentences":3,"score":0.9089166666666664},"multiplier":1,"relevance":0.8}},{"id":2652584184,"content":"This should be prioritized","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/230#issuecomment-2652584184","commentType":"ISSUE_AUTHOR","score":{"reward":1.155,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.7}},{"id":2764140868,"content":"This seems a lot more interesting compared to word count but we should test. \r\n_Originally posted by @0x4007 in https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/97#issuecomment-2363145914_\r\nWe can use an npm package to do most of the work, but I think that tweaking the weighting of the output of this module might take time to get right, which is why I made the time 4 hours instead of something like 1 hour. \r\nAs an extension of this, if it is successful, then we can consider removing word counting from the scoring criteria, and instead use the amount of html tags as a proxy for comment length. \r\nFor example, a comment with many list items, images, and links is more likely to be \"longer\" than a comment without. This may place the emphasis on higher Flesch Reading Ease (more easily understandable) and useful elements (images, links) vs writing verbose comments with low information density etc.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/230","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.16,"formatting":{"content":{"p":{"score":0,"elementCount":5},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":147,"wordValue":0.1,"result":2.26},"readability":{"fleschKincaid":52.33958333333335,"syllables":241,"sentences":6,"score":0.9233958333333335},"multiplier":1,"relevance":1}},{"id":2582449223,"content":"Do you have any QA?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#pullrequestreview-2582449223","commentType":"PULL_COLLABORATOR","score":{"reward":0.414,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.2}},{"id":2585758847,"content":"Seems mostly fine. Small tweaks requested but not show stopping","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#pullrequestreview-2585758847","commentType":"PULL_COLLABORATOR","score":{"reward":1.62,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":91.78000000000003,"syllables":13,"sentences":2,"score":0.6821999999999997},"multiplier":1,"relevance":0.5}},{"id":1934703990,"content":"I'm not sure of the best approach for score weighting. But I have a feeling that we will remove word counter and have html tag counting plus this flesch kincaid scoring cover the \"quantitative\" scoring","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1934703990","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -61,6 +61,26 @@ const rewardsType = Type.Object(\n \n export const formattingEvaluatorConfigurationType = Type.Object(\n   {\n+    /**\n+     * Configuration for readability scoring using Flesch-Kincaid\n+     */\n+    readabilityScoring: Type.Object(\n+      {\n+        enabled: Type.Boolean({\n+          default: true,\n+          description: \"Enable Flesch-Kincaid readability scoring\",\n+        }),\n+        weight: Type.Number({\n+          default: 0.3,","score":{"reward":6.264,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":73.415,"syllables":49,"sentences":2,"score":0.8658499999999999},"multiplier":1,"relevance":0.8}},{"id":1936738339,"content":"@gentlementlegen we will need to run some tests to tweak the following:\n1. Remove word counter\n2. Remove ^0.85 exponent\n3. Increase weight of readability scoring\n4. Decrease weight of html formatting scoring \nHope to run on historical comments and try to get similar results. I wish there was an algorithm we could make to automatically calibrate new changes to be similar to old scoring.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1936738339","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -61,6 +61,26 @@ const rewardsType = Type.Object(\n \n export const formattingEvaluatorConfigurationType = Type.Object(\n   {\n+    /**\n+     * Configuration for readability scoring using Flesch-Kincaid\n+     */\n+    readabilityScoring: Type.Object(\n+      {\n+        enabled: Type.Boolean({\n+          default: true,\n+          description: \"Enable Flesch-Kincaid readability scoring\",\n+        }),\n+        weight: Type.Number({\n+          default: 0.3,","score":{"reward":9.99,"formatting":{"content":{"p":{"score":0,"elementCount":1},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":4}},"result":0.4},"priority":3,"words":{"wordCount":62,"wordValue":0.1,"result":2.54},"readability":{"fleschKincaid":46.67768817204302,"syllables":102,"sentences":3,"score":0.8667768817204302},"multiplier":1,"relevance":0.9}},{"id":1936738606,"content":"Isn't 60 kind of low? How did you come to this number @shiv810","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1936738606","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -40,6 +41,11 @@ export class FormattingEvaluatorModule extends BaseModule {\n \n   constructor(context: ContextPlugin) {\n     super(context);\n+    this._readabilityConfig = this._configuration?.readabilityScoring ?? {\n+      enabled: true,\n+      weight: 0.3,\n+      idealScore: 60,","score":{"reward":3.171,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":109.08714285714288,"syllables":15,"sentences":2,"score":1},"multiplier":1,"relevance":0.7}},{"id":1936739283,"content":"@shiv810 i agree with `targetReadabilityScore` please fix","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1936739283","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -61,6 +61,26 @@ const rewardsType = Type.Object(\n \n export const formattingEvaluatorConfigurationType = Type.Object(\n   {\n+    /**\n+     * Configuration for readability scoring using Flesch-Kincaid\n+     */\n+    readabilityScoring: Type.Object(\n+      {\n+        enabled: Type.Boolean({\n+          default: true,\n+          description: \"Enable Flesch-Kincaid readability scoring\",\n+        }),\n+        weight: Type.Number({\n+          default: 0.3,\n+          description: \"Weight of readability score in the total formatting score\",\n+        }),\n+        idealScore: Type.Number({","score":{"reward":1.422,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":102.045,"syllables":7,"sentences":1,"score":1},"multiplier":1,"relevance":0.6}},{"id":1936786284,"content":"\"60.0–50.0\t10th to 12th grade\tFairly difficult to read.\" In the context of the other descriptions I think this is the best choice, yes.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1936786284","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -40,6 +41,11 @@ export class FormattingEvaluatorModule extends BaseModule {\n \n   constructor(context: ContextPlugin) {\n     super(context);\n+    this._readabilityConfig = this._configuration?.readabilityScoring ?? {\n+      enabled: true,\n+      weight: 0.3,\n+      idealScore: 60,","score":{"reward":5.136,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":93.45041666666668,"syllables":34,"sentences":4,"score":0.6654958333333332},"multiplier":1,"relevance":0.8}},{"id":1938419162,"content":"If it's not too complicated then yes sounds like a good idea","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1938419162","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -61,6 +61,26 @@ const rewardsType = Type.Object(\n \n export const formattingEvaluatorConfigurationType = Type.Object(\n   {\n+    /**\n+     * Configuration for readability scoring using Flesch-Kincaid\n+     */\n+    readabilityScoring: Type.Object(\n+      {\n+        enabled: Type.Boolean({\n+          default: true,\n+          description: \"Enable Flesch-Kincaid readability scoring\",\n+        }),\n+        weight: Type.Number({\n+          default: 0.3,","score":{"reward":1.596,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":89.51692307692309,"syllables":16,"sentences":1,"score":0.704830769230769},"multiplier":1,"relevance":0.4}},{"id":2622935992,"content":"That's pretty intense\r\nIn the future you need to link a pull immediately after starting.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#issuecomment-2622935992","commentType":"PULL_COLLABORATOR","score":{"reward":1.476,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":58.4075,"syllables":25,"sentences":1,"score":0.984075},"multiplier":1,"relevance":0.3}},{"id":2623849126,"content":"I thought the scoring should be normalized 0-100 \nWhy not use another implementation from npm packages?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#issuecomment-2623849126","commentType":"PULL_COLLABORATOR","score":{"reward":3.06,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":55.21529411764709,"syllables":27,"sentences":1,"score":0.9521529411764709},"multiplier":1,"relevance":0.6}},{"id":2626396117,"content":"The spec says ease is normalized 0-100. Perhaps the implementation you did is not correct. \nFor clarification I got the idea from ChatGPT and never implemented this idea before so I don't know for sure, but I think a hallucination is unlikely. \n---\nI just noticed you did normalize the scores sorry for missing that earlier. \nI just hope the implementation is correct. It is unexpected that you did it custom.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#issuecomment-2626396117","commentType":"PULL_COLLABORATOR","score":{"reward":9.765,"formatting":{"content":{"h2":{"score":1,"elementCount":1},"p":{"score":0,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":72,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":64.22999999999999,"syllables":111,"sentences":6,"score":0.9577000000000001},"multiplier":1,"relevance":0.7}},{"id":2626475970,"content":"Permit html? \nWe don't run this on bot comments so it's not applicable.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#issuecomment-2626475970","commentType":"PULL_COLLABORATOR","score":{"reward":2.22,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":86.42250000000001,"syllables":20,"sentences":2,"score":0.7357749999999998},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2582446284,"effect":{"addition":193,"deletion":6},"reward":5.97,"priority":3},{"reviewId":2585758216,"effect":{"addition":51,"deletion":18},"reward":2.07,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 67.415 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>8.04</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.16</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>9.081</td></tr><tr><td>Review</td><td>Comment</td><td>12</td><td>46.134</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254\" target=\"_blank\" rel=\"noopener\">#254</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+193 -6</td><td>3</td><td>5.97</td></tr><tr><td>+51 -18</td><td>3</td><td>2.07</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/230\" target=\"_blank\" rel=\"noopener\">This seems a lot more interesting compared to word count but we &hellip;</a></h6></td><td><details><summary>3.26</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 147&#13;  wordValue: 0.1&#13;  result: 2.26&#13;</pre></details></td><td>1</td><td>1</td><td>4.16</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/230#issuecomment-2639130155\" target=\"_blank\" rel=\"noopener\">Maybe we'll need to tweak the code review incentive. Seems a bit&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 83&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.2</td><td>3</td><td>1.974</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/230#issuecomment-2651966910\" target=\"_blank\" rel=\"noopener\">Hey guys @shiv810 @gentlementlegen we don't have any information&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.8</td><td>3</td><td>5.952</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/230#issuecomment-2652584184\" target=\"_blank\" rel=\"noopener\">This should be prioritized</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.155</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#pullrequestreview-2582449223\" target=\"_blank\" rel=\"noopener\">Do you have any QA?</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.414</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#pullrequestreview-2585758847\" target=\"_blank\" rel=\"noopener\">Seems mostly fine. Small tweaks requested but not show stopping</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.62</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1934703990\" target=\"_blank\" rel=\"noopener\">I'm not sure of the best approach for score weighting. But I hav&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.8</td><td>3</td><td>6.264</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1936738339\" target=\"_blank\" rel=\"noopener\">@gentlementlegen we will need to run some tests to tweak the fol&hellip;</a></h6></td><td><details><summary>2.94</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 4&#13;  result: 0.4&#13;regex:&#13;  wordCount: 62&#13;  wordValue: 0.1&#13;  result: 2.54&#13;</pre></details></td><td>0.9</td><td>3</td><td>9.99</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1936738606\" target=\"_blank\" rel=\"noopener\">Isn't 60 kind of low? How did you come to this number @shiv810</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.171</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1936739283\" target=\"_blank\" rel=\"noopener\">@shiv810 i agree with &#96;targetReadabilityScore&#96; please fix</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.422</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1936786284\" target=\"_blank\" rel=\"noopener\">\"60.0–50.0\t10th to 12th grade\tFairly difficult to read.\" In the &hellip;</a></h6></td><td><details><summary>1.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.8</td><td>3</td><td>5.136</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1938419162\" target=\"_blank\" rel=\"noopener\">If it's not too complicated then yes sounds like a good idea</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.596</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#issuecomment-2622935992\" target=\"_blank\" rel=\"noopener\">That's pretty intenseIn the future you need to link a pull imm&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.476</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#issuecomment-2623849126\" target=\"_blank\" rel=\"noopener\">I thought the scoring should be normalized 0-100 Why not use an&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.6</td><td>3</td><td>3.06</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#issuecomment-2626396117\" target=\"_blank\" rel=\"noopener\">The spec says ease is normalized 0-100. Perhaps the implementati&hellip;</a></h6></td><td><details><summary>3.61</summary><pre>content:&#13;  content:&#13;    h2:&#13;      score: 1&#13;      elementCount: 1&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 72&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.7</td><td>3</td><td>9.765</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#issuecomment-2626475970\" target=\"_blank\" rel=\"noopener\">Permit html? We don't run this on bot comments so it's not appl&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.5</td><td>3</td><td>2.22</td></tr></tbody></table></details>"},"gentlementlegen":{"total":55.698,"userId":9807008,"comments":[{"id":2639332471,"content":"I had warned about this, I guess the testing files got evaluated (the json) which contain thousand of lines. It means we should add all the json files in the tests to the linguist. For the line count, 9 thousand seems to be the total of addition and deletion. And for the two reviews it seems so indeed.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/230#issuecomment-2639332471","commentType":"ISSUE_COLLABORATOR","score":{"reward":3.684,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":58,"wordValue":0.1,"result":2.49},"readability":{"fleschKincaid":82.72094827586209,"syllables":75,"sentences":4,"score":0.7727905172413791},"multiplier":1,"relevance":0.4}},{"id":2652581744,"content":"It doesn't appear so, it could be added within the `formatting` column probably.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/230#issuecomment-2652581744","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.898,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":76.50153846153849,"syllables":18,"sentences":1,"score":0.8349846153846151},"multiplier":1,"relevance":0.7}},{"id":1938414594,"content":"You can run as many times with different parameters as you want locally I guess. To test without changing the code itself, word count can be set to 0, exponent to 1, and change the values of the html elements. Eventually I suppose they could be removed from the codebase as well.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1938414594","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -61,6 +61,26 @@ const rewardsType = Type.Object(\n \n export const formattingEvaluatorConfigurationType = Type.Object(\n   {\n+    /**\n+     * Configuration for readability scoring using Flesch-Kincaid\n+     */\n+    readabilityScoring: Type.Object(\n+      {\n+        enabled: Type.Boolean({\n+          default: true,\n+          description: \"Enable Flesch-Kincaid readability scoring\",\n+        }),\n+        weight: Type.Number({\n+          default: 0.3,","score":{"reward":7.392,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":52,"wordValue":0.1,"result":2.41},"readability":{"fleschKincaid":67.22243589743591,"syllables":75,"sentences":3,"score":0.9277756410256408},"multiplier":1,"relevance":0.8}},{"id":1944237033,"content":"I am curious, how come this is the only result that got changed by introducing the new scoring module?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1944237033","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -473,7 +473,7 @@ describe(\"Modules tests\", () => {\n         total: 400,\n       },\n       whilefoo: {\n-        total: 36.336,\n+        total: 45.168,","score":{"reward":3.33,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":58.42368421052632,"syllables":29,"sentences":1,"score":0.9842368421052632},"multiplier":1,"relevance":0.6}},{"id":1944251187,"content":"My question is, why is this the only test of the whole testing suite that has changes within the result after introducing the new module? Shouldn't more tests be affected?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1944251187","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -473,7 +473,7 @@ describe(\"Modules tests\", () => {\n         total: 400,\n       },\n       whilefoo: {\n-        total: 36.336,\n+        total: 45.168,","score":{"reward":5.103,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":71.02508064516131,"syllables":44,"sentences":2,"score":0.8897491935483869},"multiplier":1,"relevance":0.7}},{"id":2635593847,"content":"@shiv810 It seems to be the test just timed out, you can increase timeout limits, and restart the tests. Usually happens when a slow network has been picked up.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#issuecomment-2635593847","commentType":"PULL_COLLABORATOR","score":{"reward":2.061,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":81.26232758620691,"syllables":38,"sentences":2,"score":0.7873767241379309},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2588478420,"effect":{"addition":193,"deletion":6},"reward":5.97,"priority":3},{"reviewId":2597874781,"effect":{"addition":759,"deletion":83},"reward":25.26,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 55.698 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>31.23</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>6.582</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>17.886</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254\" target=\"_blank\" rel=\"noopener\">#254</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+193 -6</td><td>3</td><td>5.97</td></tr><tr><td>+759 -83</td><td>3</td><td>25.26</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/230#issuecomment-2639332471\" target=\"_blank\" rel=\"noopener\">I had warned about this, I guess the testing files got evaluated&hellip;</a></h6></td><td><details><summary>2.49</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 58&#13;  wordValue: 0.1&#13;  result: 2.49&#13;</pre></details></td><td>0.4</td><td>3</td><td>3.684</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/230#issuecomment-2652581744\" target=\"_blank\" rel=\"noopener\">It doesn't appear so, it could be added within the &#96;formatti&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.898</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1938414594\" target=\"_blank\" rel=\"noopener\">You can run as many times with different parameters as you want &hellip;</a></h6></td><td><details><summary>2.41</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 52&#13;  wordValue: 0.1&#13;  result: 2.41&#13;</pre></details></td><td>0.8</td><td>3</td><td>7.392</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1944237033\" target=\"_blank\" rel=\"noopener\">I am curious, how come this is the only result that got changed &hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.6</td><td>3</td><td>3.33</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#discussion_r1944251187\" target=\"_blank\" rel=\"noopener\">My question is, why is this the only test of the whole testing s&hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.7</td><td>3</td><td>5.103</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/254#issuecomment-2635593847\" target=\"_blank\" rel=\"noopener\">@shiv810 It seems to be the test just timed out, you can increas&hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.3</td><td>3</td><td>2.061</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_42.json","json":{"hhio618":{"userId":1272158,"total":25,"task":{"reward":25,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 25 XP ]</a>&nbsp;</h3><h6>@hhio618</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":2.61,"userId":4975670,"comments":[{"id":2512517264,"content":"This message should be removed. It's unnecessary because in the timeline they clearly are unassigned. \n```diff\n# You have been unassigned from the task\n```\nAlso in the assigned table, it says \"registered wallet\"\nThis should be changed to \"beneficiary\".","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/42","commentType":"ISSUE_SPECIFICATION","score":{"reward":2.45,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":1,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":51.70795698924732,"syllables":53,"sentences":3,"score":0.9170795698924732},"multiplier":1,"relevance":1}}],"reviewRewards":[{"reviews":[{"reviewId":2290828793,"effect":{"addition":1,"deletion":7},"reward":0.16,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/45"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 2.61 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.16</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>2.45</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/45\" target=\"_blank\" rel=\"noopener\">#45</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1 -7</td><td>2</td><td>0.16</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/42\" target=\"_blank\" rel=\"noopener\">This message should be removed. It's unnecessary because in the &hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>1</td><td>1</td><td>2.45</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_29.json","json":{"gentlementlegen":{"userId":9807008,"total":55.149,"task":{"reward":50,"multiplier":1},"comments":[{"id":2212584715,"content":"@Sadaf-A Please provide an update.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/29#issuecomment-2212584715","commentType":"ISSUE_AUTHOR","score":{"reward":0.077,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":73.84500000000001,"syllables":9,"sentences":1,"score":0.8615499999999998},"multiplier":1,"relevance":0.1}},{"id":2329600062,"content":"The current bot would display:\r\n```\r\n+ Evaluating results. Please wait...\r\n```\r\nwhile the content is being processed. However, it would post a second comment with the result. In this version ideally it would just post the comment once, and update it with the final result.\r\nTasks to be carried out:\r\n- display a waiting message when the workflow starts\r\n- update that same comment with the final result\r\n- add related tests\r\nExample run\r\nhttps://github.com/ubiquibot/conversation-rewards/issues/25#issuecomment-2143805099","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/29","commentType":"ISSUE_SPECIFICATION","score":{"reward":5.01,"formatting":{"content":{"p":{"score":0,"elementCount":8},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1.3},"priority":1,"words":{"wordCount":65,"wordValue":0.1,"result":2.56},"readability":{"fleschKincaid":60.76200000000003,"syllables":116,"sentences":5,"score":0.9923799999999997},"multiplier":1,"relevance":1}},{"id":1959047121,"content":"Resolves #29","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52","commentType":"PULL_SPECIFICATION","score":{"reward":0.062,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":77.90500000000002,"syllables":3,"sentences":1,"score":0.8209499999999998},"multiplier":1,"relevance":0.2}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 55.149 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.01</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.077</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.062</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/29\" target=\"_blank\" rel=\"noopener\">The current bot would display:&#96;&#96;&#96;+ Evaluating re&hellip;</a></h6></td><td><details><summary>3.86</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 8&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.3&#13;regex:&#13;  wordCount: 65&#13;  wordValue: 0.1&#13;  result: 2.56&#13;</pre></details></td><td>1</td><td>1</td><td>5.01</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/29#issuecomment-2212584715\" target=\"_blank\" rel=\"noopener\">@Sadaf-A Please provide an update.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.077</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52\" target=\"_blank\" rel=\"noopener\">Resolves #29</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.062</td></tr></tbody></table></details>"},"0x4007":{"total":12.546,"userId":4975670,"comments":[{"id":2219589014,"content":"Mixed feelings funding this task. We should only be working on v2","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/29#issuecomment-2219589014","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.63,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":87.94500000000002,"syllables":16,"sentences":2,"score":0.7205499999999998},"multiplier":1,"relevance":0.5}},{"id":2222308519,"content":"@gentlementlegen v2 doesn't load the pull comments.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/29#issuecomment-2222308519","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.693,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":61.24000000000001,"syllables":13,"sentences":1,"score":0.9875999999999999},"multiplier":1,"relevance":0.7}},{"id":1671635823,"content":"What's this for","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#discussion_r1671635823","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -35,7 +35,7 @@\n     // \"types\": [],                                      /* Specify type package names to be included without being referenced in a source file. */\n     // \"allowUmdGlobalAccess\": true,                     /* Allow accessing UMD globals from modules. */\n     // \"moduleSuffixes\": [],                             /* List of file name suffixes to search when resolving a module. */\n-     \"allowImportingTsExtensions\": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */\n+    \"allowImportingTsExtensions\": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */","score":{"reward":0.114,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.2}},{"id":1671977929,"content":"It seems to make more sense to write all the logic inside of typescript scripts. You can use the tsx runtime. \nThis is the reason why I thought this might be a v1 bot change. It doesn't make sense to me to mix GitHub actions logic as part of the bot given that we don't seem to do this anywhere else that I've seen. \nhttps://github.com/ubiquibot/conversation-rewards/issues/29#issuecomment-2219609081","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#discussion_r1671977929","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -30,6 +30,30 @@ jobs:\n       NFT_CONTRACT_ADDRESS: ${{ secrets.NFT_CONTRACT_ADDRESS }}\n \n     steps:\n+      - name: Post starting comment to issue\n+        uses: actions/github-script@v7\n+        id: post-comment\n+        with:\n+          github-token: ${{ inputs.authToken }}\n+          script: |\n+            const comment_body = '\\`\\`\\`diff\\n+ Evaluating results. Please wait...';\n+            const obj = ${{ inputs.eventPayload }}\n+            if (obj.issue && \"${{ inputs.eventName }}\" === \"issues.closed\") {","score":{"reward":3.528,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":67,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":82.8403354978355,"syllables":101,"sentences":6,"score":0.771596645021645},"multiplier":1,"relevance":0.8}},{"id":1672131387,"content":"Let's try this approach then. I understand now.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#discussion_r1672131387","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -30,6 +30,30 @@ jobs:\n       NFT_CONTRACT_ADDRESS: ${{ secrets.NFT_CONTRACT_ADDRESS }}\n \n     steps:\n+      - name: Post starting comment to issue\n+        uses: actions/github-script@v7\n+        id: post-comment\n+        with:\n+          github-token: ${{ inputs.authToken }}\n+          script: |\n+            const comment_body = '\\`\\`\\`diff\\n+ Evaluating results. Please wait...';\n+            const obj = ${{ inputs.eventPayload }}\n+            if (obj.issue && \"${{ inputs.eventName }}\" === \"issues.closed\") {","score":{"reward":0.408,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":89.46750000000003,"syllables":12,"sentences":2,"score":0.7053249999999998},"multiplier":1,"relevance":0.4}},{"id":2219590522,"content":"Polling is a possibility given the long max run time \nIt may even be the most robust way to post a timeout error message","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#issuecomment-2219590522","commentType":"PULL_COLLABORATOR","score":{"reward":1.498,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":55.57500000000003,"syllables":36,"sentences":1,"score":0.9557500000000003},"multiplier":1,"relevance":0.7}},{"id":2220054506,"content":"I don't understand your comment but just poll for like 30 minutes and then can write an error if the permits comment is not found.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#issuecomment-2220054506","commentType":"PULL_COLLABORATOR","score":{"reward":1.095,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":73.06807692307696,"syllables":33,"sentences":1,"score":0.8693192307692305},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2168060657,"effect":{"addition":327,"deletion":81},"reward":4.08,"priority":1},{"reviewId":2168612106,"effect":{"addition":25,"deletion":25},"reward":0.5,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 12.546 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>4.58</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>1.323</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>6.643</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52\" target=\"_blank\" rel=\"noopener\">#52</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+327 -81</td><td>1</td><td>4.08</td></tr><tr><td>+25 -25</td><td>1</td><td>0.5</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/29#issuecomment-2219589014\" target=\"_blank\" rel=\"noopener\">Mixed feelings funding this task. We should only be working on v2</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.63</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/29#issuecomment-2222308519\" target=\"_blank\" rel=\"noopener\">@gentlementlegen v2 doesn't load the pull comments.</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.693</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#discussion_r1671635823\" target=\"_blank\" rel=\"noopener\">What's this for</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.114</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#discussion_r1671977929\" target=\"_blank\" rel=\"noopener\">It seems to make more sense to write all the logic inside of typ&hellip;</a></h6></td><td><details><summary>3.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 67&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>0.8</td><td>1</td><td>3.528</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#discussion_r1672131387\" target=\"_blank\" rel=\"noopener\">Let's try this approach then. I understand now.</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.408</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#issuecomment-2219590522\" target=\"_blank\" rel=\"noopener\">Polling is a possibility given the long max run time It may eve&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.498</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#issuecomment-2220054506\" target=\"_blank\" rel=\"noopener\">I don't understand your comment but just poll for like 30 minute&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.5</td><td>1</td><td>1.095</td></tr></tbody></table></details>"},"rndquu":{"total":9.829,"userId":119500907,"comments":[{"id":1672184896,"content":"@gentlementlegen This was really useful, at least I used this step to get real input data for running the plugin locally. Perhaps we could keep it?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#discussion_r1672184896","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -38,8 +62,5 @@ jobs:\n         with:\n           node-version: \"20.10.0\"\n \n-      - run: ${{ toJSON(inputs) }}\n-        shell: cat {0}","score":{"reward":1.568,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":63.486153846153854,"syllables":40,"sentences":2,"score":0.9651384615384615},"multiplier":1,"relevance":0.7}},{"id":1672188315,"content":"@gentlementlegen Right now this package writes all of the log entries in the `logs` table of our supabase instance, correct?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#discussion_r1672188315","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,5 @@\n+import { Logs } from \"@ubiquity-dao/ubiquibot-logger\";","score":{"reward":0.915,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":53.97105263157897,"syllables":30,"sentences":1,"score":0.9397105263157897},"multiplier":1,"relevance":0.5}},{"id":1672212362,"content":"This is not super clear that `process.env.COMMENT_ID` is taken from [compute.yml](https://github.com/ubiquibot/conversation-rewards/pull/52/files#diff-786f3dda14e85b9321efd6100c191f3da5b32c5411f6aa3c43f0f20b9a7bb363R52) and should not be set manually but I can't make up a more explicit solution","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#discussion_r1672212362","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -23,6 +23,7 @@ interface SortedTasks {\n export class GithubCommentModule implements Module {\n   private readonly _configuration: GithubCommentConfiguration = configuration.incentives.githubComment;\n   private readonly _debugFilePath = \"./output.html\";\n+  private _lastCommentId: number | null = process.env.COMMENT_ID ? Number(process.env.COMMENT_ID) : null;","score":{"reward":3.096,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":80.33250000000004,"syllables":36,"sentences":2,"score":0.7966749999999996},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2168953524,"effect":{"addition":333,"deletion":87},"reward":4.2,"priority":1},{"reviewId":2171133984,"effect":{"addition":5,"deletion":0},"reward":0.05,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 9.829 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>4.25</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>5.579</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52\" target=\"_blank\" rel=\"noopener\">#52</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+333 -87</td><td>1</td><td>4.2</td></tr><tr><td>+5 -0</td><td>1</td><td>0.05</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#discussion_r1672184896\" target=\"_blank\" rel=\"noopener\">@gentlementlegen This was really useful, at least I used this st&hellip;</a></h6></td><td><details><summary>1.74</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 26&#13;  wordValue: 0.1&#13;  result: 1.74&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.568</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#discussion_r1672188315\" target=\"_blank\" rel=\"noopener\">@gentlementlegen Right now this package writes all of the log en&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.5</td><td>1</td><td>0.915</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/52#discussion_r1672212362\" target=\"_blank\" rel=\"noopener\">This is not super clear that &#96;process.env.COMMENT_ID&#96; is&hellip;</a></h6></td><td><details><summary>2.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.9</td><td>1</td><td>3.096</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_153.json","json":{"gentlementlegen":{"userId":9807008,"total":53.58,"task":{"reward":50,"multiplier":1},"comments":[{"id":2577065978,"content":"> @0x4007 The reason why you get no reward is because you omitted `<p>` in the new configuration so it gets ignored: https://github.com/ubiquity-os-marketplace/text-conversation-rewards/actions/runs/11203088619/job/31139941933#step:7:303\r\nWhat about default? Its supposed to credit 0 for p tags, but credit ~0.1 per word by default.\r\n_Originally posted by @0x4007 in https://github.com/ubiquity-os/ubiquity-os-kernel/issues/80#issuecomment-2396821994_\r\nDepends on #143","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/153","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.58,"formatting":{"content":{"p":{"score":0,"elementCount":3},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":64.42569230769234,"syllables":62,"sentences":5,"score":0.9557430769230766},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 53.58 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.58</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/153\" target=\"_blank\" rel=\"noopener\">&gt; @0x4007 The reason why you get no reward is because you omi&hellip;</a></h6></td><td><details><summary>2.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>1</td><td>1</td><td>3.58</td></tr></tbody></table></details>"},"0x4007":{"total":2.544,"userId":4975670,"comments":[{"id":2363812928,"content":"Changes seem fine but perhaps this is linked to the wrong task","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/157#pullrequestreview-2363812928","commentType":"PULL_COLLABORATOR","score":{"reward":0.81,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":103.00500000000001,"syllables":13,"sentences":1,"score":1},"multiplier":1,"relevance":0.6}},{"id":1797620887,"content":"Most of the changes except for this file seem to be around dealing with GitHub comment length limits I don't understand this pull in the context of the linked task","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/157#discussion_r1797620887","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":0.744,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":63.47967741935486,"syllables":41,"sentences":1,"score":0.9652032258064515},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2363812928,"effect":{"addition":82,"deletion":17},"reward":0.99,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/157"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 2.544 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.99</td></tr><tr><td>Review</td><td>Comment</td><td>2</td><td>1.554</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/157\" target=\"_blank\" rel=\"noopener\">#157</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+82 -17</td><td>1</td><td>0.99</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/157#pullrequestreview-2363812928\" target=\"_blank\" rel=\"noopener\">Changes seem fine but perhaps this is linked to the wrong task</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.81</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/157#discussion_r1797620887\" target=\"_blank\" rel=\"noopener\">Most of the changes except for this file seem to be around deali&hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.744</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_daemon-pricing_8.json","json":{"gentlementlegen":{"userId":9807008,"total":204.82,"task":{"reward":200,"multiplier":1},"comments":[{"id":2348400153,"content":"The check the payload signature, the plugin needs to read `UBIQUIBOT_PUBLIC_KEY` which should be fed through the environment. It currently crashes because the value is not set within the worker.\r\n### Tasks to be carried out\r\n- add the environment variable within the deployment step\r\n- add checks for environment validity\r\n- display errors and return them to the kernel","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/8","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.82,"formatting":{"content":{"p":{"score":0,"elementCount":4},"h3":{"score":1,"elementCount":1},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3}},"result":1.3},"priority":1,"words":{"wordCount":55,"wordValue":0.1,"result":2.46},"readability":{"fleschKincaid":54.404848484848515,"syllables":87,"sentences":3,"score":0.9440484848484851},"multiplier":1,"relevance":1}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 204.82 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>200</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.82</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/8\" target=\"_blank\" rel=\"noopener\">The check the payload signature, the plugin needs to read &#96;U&hellip;</a></h6></td><td><details><summary>3.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    h3:&#13;      score: 1&#13;      elementCount: 1&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;  result: 1.3&#13;regex:&#13;  wordCount: 55&#13;  wordValue: 0.1&#13;  result: 2.46&#13;</pre></details></td><td>1</td><td>1</td><td>4.82</td></tr></tbody></table></details>"},"0x4007":{"total":20.812,"userId":4975670,"comments":[{"id":2168622325,"content":"I think you should set time labels as well. You have authority on the ubiquibot org.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/8#issuecomment-2168622325","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.636,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":77.1025,"syllables":23,"sentences":2,"score":0.8289749999999999},"multiplier":1,"relevance":0.1}},{"id":2173773889,"content":"Where","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2173773889","commentType":"PULL_COLLABORATOR","score":{"reward":0.072,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":1,"wordValue":0.1,"result":0.14},"readability":{"fleschKincaid":121.22000000000003,"syllables":1,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}},{"id":2173824460,"content":"I added it to this repository's secrets.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2173824460","commentType":"PULL_COLLABORATOR","score":{"reward":1.584,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":61.24000000000001,"syllables":13,"sentences":1,"score":0.9875999999999999},"multiplier":1,"relevance":0.4}},{"id":2173874166,"content":"[UBIQUIBOT_PUBLIC_KEY.pem.zip](https://github.com/user-attachments/files/15874308/UBIQUIBOT_PUBLIC_KEY.pem.zip)","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2173874166","commentType":"PULL_COLLABORATOR","score":{"reward":3.24,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":-47.97999999999996,"syllables":9,"sentences":3,"score":0},"multiplier":1,"relevance":0.6}},{"id":2173880623,"content":"Also I realized this is going to be a problem. How will we handle key rotation?","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2173880623","commentType":"PULL_COLLABORATOR","score":{"reward":5.024,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":82.39000000000001,"syllables":22,"sentences":2,"score":0.7760999999999999},"multiplier":1,"relevance":0.8}},{"id":2174253517,"content":"I think we can plan for annual minimum but quarterly seems prudent. I suppose we should support clear errors for invalid keys.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2174253517","commentType":"PULL_COLLABORATOR","score":{"reward":5.6,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":68.77000000000002,"syllables":33,"sentences":2,"score":0.9122999999999998},"multiplier":1,"relevance":0.7}},{"id":2175487013,"content":"I think never keep any pull on hold. Merge and then we make a new task to make necessary adjustments later. We never know how long it will take to get the new stuff done.\r\nMore thoughts on this philosophy [here](https://github.com/ubiquibot/plugins-wishlist/issues/20).","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2175487013","commentType":"PULL_COLLABORATOR","score":{"reward":4.656,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":89.13368902439025,"syllables":52,"sentences":4,"score":0.7086631097560975},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 20.812 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.636</td></tr><tr><td>Review</td><td>Comment</td><td>6</td><td>20.176</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/issues/8#issuecomment-2168622325\" target=\"_blank\" rel=\"noopener\">I think you should set time labels as well. You have authority o&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.636</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2173773889\" target=\"_blank\" rel=\"noopener\">Where</a></h6></td><td><details><summary>0.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0.1&#13;  result: 0.14&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.072</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2173824460\" target=\"_blank\" rel=\"noopener\">I added it to this repository's secrets.</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.4</td><td>4</td><td>1.584</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2173874166\" target=\"_blank\" rel=\"noopener\">[UBIQUIBOT_PUBLIC_KEY.pem.zip](https://github.com/user-attachmen&hellip;</a></h6></td><td><details><summary>1.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.6</td><td>4</td><td>3.24</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2173880623\" target=\"_blank\" rel=\"noopener\">Also I realized this is going to be a problem. How will we handl&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.8</td><td>4</td><td>5.024</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2174253517\" target=\"_blank\" rel=\"noopener\">I think we can plan for annual minimum but quarterly seems prude&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.7</td><td>4</td><td>5.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2175487013\" target=\"_blank\" rel=\"noopener\">I think never keep any pull on hold. Merge and then we make a ne&hellip;</a></h6></td><td><details><summary>3.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.3</td><td>4</td><td>4.656</td></tr></tbody></table></details>"},"whilefoo":{"total":22.864,"userId":139262667,"comments":[{"id":2173862477,"content":"the public key will be hardcoded in the SDK","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2173862477","commentType":"PULL_COLLABORATOR","score":{"reward":2.424,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":94.30000000000001,"syllables":11,"sentences":1,"score":0.6569999999999999},"multiplier":1,"relevance":0.6}},{"id":2174251609,"content":"the SDK will be a package that the plugins import and use to setup a HTTP server (worker), the public key of the kernel will be in the SDK but it can also be [overriden](https://github.com/ubiquibot/sdk/blob/037daf38f5d52cfab8d80f997b0d68e54c3d5315/src/server.ts#L34) when using the SDK.\r\nIf the keypair changes we can publish a new version, but a problem will be because plugins won't update to the next version immediately. I assume key changes will be rare so it's fine for now.","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2174251609","commentType":"PULL_COLLABORATOR","score":{"reward":16.632,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":77,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":67.61709956709959,"syllables":103,"sentences":3,"score":0.9238290043290042},"multiplier":1,"relevance":0.9}},{"id":2176457009,"content":"I agree, let's merge and I will open a new PR when SDK is ready","url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2176457009","commentType":"PULL_COLLABORATOR","score":{"reward":1.848,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":90.13250000000001,"syllables":19,"sentences":1,"score":0.6986749999999999},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"reviews":[{"reviewId":2125936812,"effect":{"addition":43,"deletion":6},"reward":1.96,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 22.864 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>1.96</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>20.904</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9\" target=\"_blank\" rel=\"noopener\">#9</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+43 -6</td><td>4</td><td>1.96</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2173862477\" target=\"_blank\" rel=\"noopener\">the public key will be hardcoded in the SDK</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.6</td><td>4</td><td>2.424</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2174251609\" target=\"_blank\" rel=\"noopener\">the SDK will be a package that the plugins import and use to set&hellip;</a></h6></td><td><details><summary>3.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 77&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.9</td><td>4</td><td>16.632</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/daemon-pricing/pull/9#issuecomment-2176457009\" target=\"_blank\" rel=\"noopener\">I agree, let's merge and I will open a new PR when SDK is ready</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.3</td><td>4</td><td>1.848</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_8.json","json":{"jordan-ae":{"userId":33989423,"total":200,"task":{"reward":200,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 200 XP ]</a>&nbsp;</h3><h6>@jordan-ae</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>200</td></tr></tbody></table></details>"},"Keyrxng":{"total":122.572,"userId":106303466,"comments":[{"id":2228519175,"content":"@0x4007\r\nDo you have default values in mind off the top of your head? \r\nE.g: \r\n`admin === no limit`\r\n`member === 10`\r\n`contributor === 2`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2228519175","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.82,"formatting":{"content":{"p":{"score":0,"elementCount":6}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":106.24666666666668,"syllables":18,"sentences":3,"score":1},"multiplier":0.25,"relevance":1}},{"id":2325300184,"content":"@0x4007 Was just about to start reviews, I think it should be ready now","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2325300184","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.28,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":89.89642857142859,"syllables":17,"sentences":1,"score":0.7010357142857141},"multiplier":0.25,"relevance":0.4}},{"id":2325304294,"content":"I'm not sure what feature it is your a talking about. This issue focuses on improving the max assignable tasks based on the user's org role. `teams` is working and not being worked on, once this task is closed as complete task limits will be more dynamic than the flat rate of 3(i think) it is right now\r\nIf it's this feature, then the PR had some troubles with merging in latest changes but looks like all has been resolved","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2325304294","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":1.494,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":83,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":71.72923694779116,"syllables":105,"sentences":3,"score":0.8827076305220883},"multiplier":0.25,"relevance":0.9}},{"id":2346514051,"content":"Pretty sure that's intended, the PR author doesn't get rewarded for their own comments on their own PR otherwise a contributor could game the system easily. The PR author is rewarded for comments on the issue separate from the PR comments.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2346514051","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":61.063662790697705,"syllables":63,"sentences":2,"score":0.9893633720930229},"multiplier":0.25,"relevance":0}},{"id":2351804294,"content":"Pretty sure I didn't claim from the first, can't find a tx for 179 so safe to assume I didn't","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2351804294","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":91.53347826086959,"syllables":25,"sentences":1,"score":0.6846652173913041},"multiplier":0.25,"relevance":0}},{"id":2206744643,"content":"I think what's happening is that the try catch blocks are not hitting because `sender 1` is an admin and does not have more than 10 issues assigned as only 8 exist.\r\nIf I am mistaken, please use a const and store the error string from inside the catch block and then check your expect case at the bottom of the test body outside of the catch","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#pullrequestreview-2206744643","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.312,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":66,"wordValue":0.1,"result":2.57},"readability":{"fleschKincaid":66.94909090909093,"syllables":83,"sentences":2,"score":0.9305090909090907},"multiplier":0.25,"relevance":0.8}},{"id":2278292617,"content":"Tests still failing too it appears. Managing okay jordan?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#pullrequestreview-2278292617","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.162,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":61.26750000000001,"syllables":15,"sentences":2,"score":0.9873249999999999},"multiplier":0.25,"relevance":0.3}},{"id":1678426035,"content":"This should be passed in via the config settings","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1678426035","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -1,12 +1,19 @@\n import { Context } from \"./types/context\";\n import { userStartStop } from \"./handlers/user-start-stop\";\n import { Env, PluginInputs } from \"./types\";\n-\n import { Octokit } from \"@octokit/rest\";\n import { createClient } from \"@supabase/supabase-js\";\n import { createAdapters } from \"./adapters\";\n import { Logs } from \"@ubiquity-dao/ubiquibot-logger\";\n \n+export type UserRole = \"admin\" | \"member\" | \"contributor\";\n+\n+export const maxTask: Record<UserRole, number> = {","score":{"reward":0.45,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":94.30000000000001,"syllables":11,"sentences":1,"score":0.6569999999999999},"multiplier":0.25,"relevance":0.9}},{"id":1678426916,"content":"<del>here</del> this is how you'd extract the configurable `maxTasks` object","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1678426916","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -1,17 +1,19 @@\n+import { maxTask, UserRole } from \"../../plugin\";\n import { Context, ISSUE_TYPE, Label } from \"../../types\";\n import { isParentIssue, getAvailableOpenedPullRequests, getAssignedIssues, addAssignees, addCommentToIssue } from \"../../utils/issue\";\n import { calculateDurations } from \"../../utils/shared\";\n-import { isUserMember } from \"./check-org-member\";\n import { checkTaskStale } from \"./check-task-stale\";\n import { generateAssignmentComment } from \"./generate-assignment-comment\";\n+import { getUserRole } from \"./get-user-role\";\n import structuredMetadata from \"./structured-metadata\";\n import { assignTableComment } from \"./table\";\n \n export async function start(context: Context, issue: Context[\"payload\"][\"issue\"], sender: Context[\"payload\"][\"sender\"]) {\n   const { logger, config } = context;\n-  const { maxConcurrentTasks } = config.miscellaneous;","score":{"reward":0.528,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":67.75500000000001,"syllables":18,"sentences":1,"score":0.9224499999999999},"multiplier":0.25,"relevance":0.8}},{"id":1678429667,"content":"Why don't you just return the role?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1678429667","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -0,0 +1,28 @@\n+import { Context } from \"../../types\";\n+\n+export async function getUserRole(context: Context, user: string): Promise<string> {\n+  const orgLogin = context.payload.organization?.login;\n+\n+  if (!orgLogin) {\n+    throw new Error(\"Organization login not found in context payload.\");\n+  }\n+\n+  try {\n+    const response = await context.octokit.orgs.getMembershipForUser({\n+      org: orgLogin,\n+      username: user,\n+    });\n+\n+    const role = response.data.role;\n+\n+    if (role === \"admin\") {","score":{"reward":0.322,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":92.965,"syllables":10,"sentences":1,"score":0.67035},"multiplier":0.25,"relevance":0.7}},{"id":1678453131,"content":"You shouldn't need to cast the value later if you annotated the return type as `Promise<UserRole>` here","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1678453131","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -0,0 +1,28 @@\n+import { Context } from \"../../types\";\n+\n+export async function getUserRole(context: Context, user: string): Promise<string> {","score":{"reward":0.656,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":80.09764705882354,"syllables":22,"sentences":1,"score":0.7990235294117646},"multiplier":0.25,"relevance":0.8}},{"id":1678455977,"content":"This would probably be a dynamic union based on the keys of the passed in settings or a type which contains the pre-defined roles and can be extended","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1678455977","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -1,12 +1,19 @@\n import { Context } from \"./types/context\";\n import { userStartStop } from \"./handlers/user-start-stop\";\n import { Env, PluginInputs } from \"./types\";\n-\n import { Octokit } from \"@octokit/rest\";\n import { createClient } from \"@supabase/supabase-js\";\n import { createAdapters } from \"./adapters\";\n import { Logs } from \"@ubiquity-dao/ubiquibot-logger\";\n \n+export type UserRole = \"admin\" | \"member\" | \"contributor\";","score":{"reward":0.84,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":63.62758620689657,"syllables":39,"sentences":1,"score":0.9637241379310343},"multiplier":0.25,"relevance":0.7}},{"id":1686446410,"content":"How do we handle the case if no role is found? Can we provide some feedback to the user that they haven't configured this role? Do we then default to the lowest default role?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1686446410","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -13,7 +12,8 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   const { taskStaleTimeoutDuration } = config.timers;\n   const assignee = context.payload.issue.user.login;\n   const userRole = (await getUserRole(context, assignee)) as UserRole;\n-  const maxConcurrentTasks = maxTask[userRole];\n+  const { maxConcurrentTasks } = config.miscellaneous;\n+  const maxTask = maxConcurrentTasks.find(({ role }) => role.toLowerCase() === userRole)?.limit as number;","score":{"reward":1.008,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":78.9704761904762,"syllables":48,"sentences":3,"score":0.810295238095238},"multiplier":0.25,"relevance":0.8}},{"id":1686448869,"content":"I think this might prohibit role extension since this is a literal union of three items when it could potentially be something else","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1686448869","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -13,6 +13,10 @@ export interface PluginInputs<T extends SupportedEventsU = SupportedEventsU, TU\n \n const ONE_DAY = 24 * 60 * 60 * 1000;\n \n+const userRoleSchema = T.Union([T.Literal(\"Admin\"), T.Literal(\"Member\"), T.Literal(\"Contributor\")]);","score":{"reward":0.714,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":47.39434782608697,"syllables":37,"sentences":1,"score":0.8739434782608697},"multiplier":0.25,"relevance":0.7}},{"id":1686453603,"content":"These defaults are good and should kick in if the user does not inset any role info into their config.\r\nI think I'd raise \"member\" to 10 as that's the core contributor/team members and they'd likely be on par with how many issues an admin can take too realistically but @gentlementlegen can confirm these figures.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1686453603","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -24,10 +28,33 @@ export const startStopSchema = T.Object({\n   ),\n   miscellaneous: T.Object(\n     {\n-      maxConcurrentTasks: T.Number(),\n       startRequiresWallet: T.Boolean(),\n+      maxConcurrentTasks: T.Array(\n+        T.Object({\n+          role: userRoleSchema,\n+          limit: T.Integer(),\n+        })\n+      ),\n     },\n-    { default: { maxConcurrentTasks: 3, startRequiresWallet: true } }\n+    {\n+      default: {\n+        maxConcurrentTasks: [","score":{"reward":1.28,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":59,"wordValue":0.1,"result":2.51},"readability":{"fleschKincaid":53.5772457627119,"syllables":86,"sentences":2,"score":0.9357724576271189},"multiplier":0.25,"relevance":0.8}},{"id":1686477725,"content":"What happens if I add a role into my config like \"newbie\" or \"gilded\" and my org has it too, would this produce a runtime error because `userRoleSchema` only supports the three you've listed?\r\n[this](https://docs.github.com/en/enterprise-cloud@latest/admin/overview/setting-up-a-trial-of-github-enterprise-cloud) trial would allow proper QA as it allows you to create custom roles as an enterprise otherwise unit tests would suffice\r\n[This endpoint](https://docs.github.com/en/rest/orgs/organization-roles?apiVersion=2022-11-28#get-all-organization-roles-for-an-organization) returns the roles that an organization has and the response schema shows how varied it might be. Consider this, and extend the typebox schemas so that they are fully extendable","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1686477725","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -24,10 +28,33 @@ export const startStopSchema = T.Object({\n   ),\n   miscellaneous: T.Object(\n     {\n-      maxConcurrentTasks: T.Number(),\n       startRequiresWallet: T.Boolean(),\n+      maxConcurrentTasks: T.Array(\n+        T.Object({\n+          role: userRoleSchema,","score":{"reward":2.664,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":2}},"result":2},"priority":2,"words":{"wordCount":88,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":52.08439393939395,"syllables":130,"sentences":3,"score":0.9208439393939395},"multiplier":0.25,"relevance":0.9}},{"id":1686619543,"content":"Yeah but keep in mind those only take affect if the user inputs no role definitions. If they define three custom roles and the role returned is not one of the three this should be handled via logging feedback and then finding the lowest limit in the config and applying that.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1686619543","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -13,7 +12,8 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   const { taskStaleTimeoutDuration } = config.timers;\n   const assignee = context.payload.issue.user.login;\n   const userRole = (await getUserRole(context, assignee)) as UserRole;\n-  const maxConcurrentTasks = maxTask[userRole];\n+  const { maxConcurrentTasks } = config.miscellaneous;\n+  const maxTask = maxConcurrentTasks.find(({ role }) => role.toLowerCase() === userRole)?.limit as number;","score":{"reward":1.078,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":63.17602941176473,"syllables":71,"sentences":2,"score":0.9682397058823526},"multiplier":0.25,"relevance":0.7}},{"id":1687235585,"content":"@gentlementlegen are you suggesting that for this iteration @jordan-ae should define each pre-defined role as you say which was similar to how he had originally and any future custom role logic can refactor things later but for now be explicit and define each role?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1687235585","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -13,6 +13,10 @@ export interface PluginInputs<T extends SupportedEventsU = SupportedEventsU, TU\n \n const ONE_DAY = 24 * 60 * 60 * 1000;\n \n+const userRoleSchema = T.String();","score":{"reward":0.816,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":46,"wordValue":0.1,"result":2.31},"readability":{"fleschKincaid":20.371086956521765,"syllables":76,"sentences":1,"score":0.6037108695652177},"multiplier":0.25,"relevance":0.6}},{"id":1688331938,"content":"Most if not all other octokit calls are wrapped with a try catch, let's keep this one wrapped too","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1688331938","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -2,19 +2,26 @@ import { Context } from \"../../types\";\n \n export async function getUserRole(context: Context, user: string): Promise<string> {\n   const orgLogin = context.payload.organization?.login;\n+  const { config } = context;\n+  const { maxConcurrentTasks } = config.miscellaneous;\n \n   if (!orgLogin) {\n     throw new Error(\"Organization login not found in context payload.\");\n   }\n \n-  try {","score":{"reward":0.63,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":89.24500000000003,"syllables":23,"sentences":1,"score":0.7075499999999997},"multiplier":0.25,"relevance":0.7}},{"id":1688332700,"content":"I think we can return `matchingUser` and `minLimitTask` which gives us the limit too","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1688332700","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -2,19 +2,26 @@ import { Context } from \"../../types\";\n \n export async function getUserRole(context: Context, user: string): Promise<string> {\n   const orgLogin = context.payload.organization?.login;\n+  const { config } = context;\n+  const { maxConcurrentTasks } = config.miscellaneous;\n \n   if (!orgLogin) {\n     throw new Error(\"Organization login not found in context payload.\");\n   }\n \n-  try {\n-    const response = await context.octokit.orgs.getMembershipForUser({\n-      org: orgLogin,\n-      username: user,\n-    });\n+  const response = await context.octokit.orgs.getMembershipForUser({\n+    org: orgLogin,\n+    username: user,\n+  });\n \n-    return response.data.role;\n-  } catch (error) {\n-    return \"contributor\";\n+  const matchingUser = maxConcurrentTasks.find(({ role }) => role.toLowerCase() === response.data.role);\n+\n+  if (matchingUser) {\n+    //chech if the current user role matches any of those defined in the config\n+    return matchingUser.role;","score":{"reward":0.496,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":95.955,"syllables":14,"sentences":1,"score":0.64045},"multiplier":0.25,"relevance":0.8}},{"id":1688333737,"content":"this isn't needed as you are doing this inside `getUserRole()` already, you can take the `limit` from the function return data","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1688333737","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -13,7 +13,7 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   const assignee = context.payload.issue.user.login;\n   const userRole = await getUserRole(context, assignee);\n   const { maxConcurrentTasks } = config.miscellaneous;\n-  const maxTask = maxConcurrentTasks.find(({ role }) => role.toLowerCase() === userRole)?.limit as number;\n+  const maxTask = maxConcurrentTasks.find(({ role }) => role.toLowerCase() === userRole.toLowerCase())?.limit as number;","score":{"reward":0.644,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":76.55500000000004,"syllables":26,"sentences":1,"score":0.8344499999999997},"multiplier":0.25,"relevance":0.7}},{"id":1688334625,"content":"this should be something like `maxTasks.limit` or however you decide to name the `getUserRole()` return var","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1688334625","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -48,7 +48,7 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n \n   // check for max and enforce max\n \n-  if (assignedIssues.length - openedPullRequests.length >= maxTask) {\n+  if (assignedIssues.length - openedPullRequests.length >= 3) {","score":{"reward":0.592,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":71.76785714285715,"syllables":20,"sentences":1,"score":0.8823214285714285},"multiplier":0.25,"relevance":0.8}},{"id":1688336492,"content":"I'm sure I received the exact same advice from someone early on in the team too, I have a clear memory of it but can't find the comment 😂","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1688336492","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -0,0 +1,28 @@\n+import { Context } from \"../../types\";\n+\n+export async function getUserRole(context: Context, user: string): Promise<string> {\n+  const orgLogin = context.payload.organization?.login;\n+\n+  if (!orgLogin) {\n+    throw new Error(\"Organization login not found in context payload.\");\n+  }\n+\n+  try {\n+    const response = await context.octokit.orgs.getMembershipForUser({\n+      org: orgLogin,\n+      username: user,\n+    });\n+\n+    const role = response.data.role;\n+\n+    if (role === \"admin\") {","score":{"reward":0.36,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":69.22500000000004,"syllables":38,"sentences":1,"score":0.9077499999999996},"multiplier":0.25,"relevance":0.3}},{"id":1696375308,"content":"This doesn't feel right.\r\n`sender === 1 === \"ubiquity\" === \"admin\"`\r\nIf sender is an admin and they are sending the `/start` command then the error below should match the config value which is `10`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1696375308","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -195,51 +195,41 @@ describe(\"User start/stop\", () => {\n     }\n   });\n \n-  test(\"User can't start another issue if they have reached the max limit\", async () => {\n-    jest.mock(\"../src/utils/issue\", () => ({\n-      getAvailableOpenedPullRequests: jest.fn().mockResolvedValue([\n-        {\n-          number: 1,\n-          reviews: [\n-            {\n-              state: \"APPROVED\",\n-            },\n-          ],\n-        },\n-        {\n-          number: 2,\n-          reviews: [\n-            {\n-              state: \"APPROVED\",\n-            },\n-          ],\n-        },\n-        {\n-          number: 3,\n-          reviews: [\n-            {\n-              state: \"APPROVED\",\n-            },\n-          ],\n-        },\n-      ]),\n-    }));\n+  test(\"should return the role with the smallest task limit if user role is not defined in config\", async () => {\n \n-    const issue = db.issue.findFirst({ where: { id: { equals: 1 } } }) as unknown as Issue;\n+    const issue = db.issue.findFirst({ where: { id: { equals: 8 } } }) as unknown as Issue;\n     const sender = db.users.findFirst({ where: { id: { equals: 1 } } }) as unknown as Sender;\n \n     const context = createContext(issue, sender);\n \n-    context.adapters = createAdapters(getSupabase(), context as unknown as Context);\n+    context.adapters = createAdapters(getSupabase(), context);\n \n     try {\n-      await userStartStop(context as unknown as Context);\n+      await userStartStop(context);\n     } catch (error) {\n       if (error instanceof Error) {\n         expect(error.message).toEqual(\"Too many assigned issues, you have reached your max limit of 3 issues.\");\n       }\n     }\n   });\n+\n+  test(\"should set maxLimits to 5 if the user is a member\", async () => {\n+\n+    const issue = db.issue.findFirst({ where: { id: { equals: 7 } } }) as unknown as Issue;\n+    const sender = db.users.findFirst({ where: { id: { equals: 1 } } }) as unknown as Sender;","score":{"reward":0.88,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":83.46583333333336,"syllables":35,"sentences":2,"score":0.7653416666666664},"multiplier":0.25,"relevance":0.8}},{"id":1696383223,"content":"You have created two new issues which are currently assigned to users who only exist here, I can't find mention of them anywhere else. If that is the case then how can they have reached their max assigned tasks?\r\nIf the issue is already assigned when someone calls `/start` on it (and you have loaded these new issues into your tests) then shouldn't it be handled with `This task is already assigned. Please choose another task.`?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1696383223","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -382,6 +372,24 @@ async function setupTests() {\n     owner: \"ubiquity\",\n     repo: \"test-repo\",\n   });\n+\n+  db.issue.create({\n+    ...issueTemplate,\n+    id: 7,\n+    assignee: {","score":{"reward":1.296,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":68,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":76.83421568627453,"syllables":86,"sentences":3,"score":0.8316578431372547},"multiplier":0.25,"relevance":0.8}},{"id":1696383961,"content":"How can this error be a max limit of `3` when the sender here is an admin?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1696383961","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -195,51 +195,41 @@ describe(\"User start/stop\", () => {\n     }\n   });\n \n-  test(\"User can't start another issue if they have reached the max limit\", async () => {\n-    jest.mock(\"../src/utils/issue\", () => ({\n-      getAvailableOpenedPullRequests: jest.fn().mockResolvedValue([\n-        {\n-          number: 1,\n-          reviews: [\n-            {\n-              state: \"APPROVED\",\n-            },\n-          ],\n-        },\n-        {\n-          number: 2,\n-          reviews: [\n-            {\n-              state: \"APPROVED\",\n-            },\n-          ],\n-        },\n-        {\n-          number: 3,\n-          reviews: [\n-            {\n-              state: \"APPROVED\",\n-            },\n-          ],\n-        },\n-      ]),\n-    }));\n+  test(\"should return the role with the smallest task limit if user role is not defined in config\", async () => {\n \n-    const issue = db.issue.findFirst({ where: { id: { equals: 1 } } }) as unknown as Issue;\n+    const issue = db.issue.findFirst({ where: { id: { equals: 8 } } }) as unknown as Issue;\n     const sender = db.users.findFirst({ where: { id: { equals: 1 } } }) as unknown as Sender;\n \n     const context = createContext(issue, sender);\n \n-    context.adapters = createAdapters(getSupabase(), context as unknown as Context);\n+    context.adapters = createAdapters(getSupabase(), context);\n \n     try {\n-      await userStartStop(context as unknown as Context);\n+      await userStartStop(context);\n     } catch (error) {\n       if (error instanceof Error) {\n         expect(error.message).toEqual(\"Too many assigned issues, you have reached your max limit of 3 issues.\");","score":{"reward":0.624,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":84.845,"syllables":20,"sentences":1,"score":0.75155},"multiplier":0.25,"relevance":0.8}},{"id":1696387618,"content":"We could move this outside of the try block so that we always return something from this function instead of throwing an error, which is the intent of this line anyway.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1696387618","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -0,0 +1,32 @@\n+import { Context } from \"../../types\";\n+\n+interface MatchingUserProps {\n+  role: string;\n+  limit: number;\n+}\n+\n+export async function getUserRole(context: Context, user: string): Promise<MatchingUserProps> {\n+  const orgLogin = context.payload.organization?.login;\n+  const { config, logger } = context;\n+  const { maxConcurrentTasks } = config.miscellaneous;\n+\n+  try {\n+    const response = await context.octokit.orgs.getMembershipForUser({\n+      org: orgLogin as string,\n+      username: user,\n+    });\n+\n+    const matchingUser = maxConcurrentTasks.find(({ role }) => role.toLowerCase() === response.data.role);\n+\n+    if (matchingUser) {\n+      //chech if the current user role matches any of those defined in the config\n+      return matchingUser;\n+    } else {\n+      //return the role with the smallest task limit\n+      return maxConcurrentTasks.reduce((minTask, currentTask) => (currentTask.limit < minTask.limit ? currentTask : minTask));","score":{"reward":0.868,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":58.021612903225815,"syllables":43,"sentences":1,"score":0.9802161290322582},"multiplier":0.25,"relevance":0.7}},{"id":1696389517,"content":"I think @gentlementlegen means to update the user entities inside the `user-get.json` so they are loaded in the db and then pull the user from the db here and return only the role","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1696389517","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -16,6 +16,20 @@ export const handlers = [\n     }\n     return HttpResponse.json(item);\n   }),\n+  //get member\n+  http.get(\"https://api.github.com/orgs/:org/memberships/:username\", ({ params: { username } }) => {","score":{"reward":0.882,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":55.38625000000003,"syllables":45,"sentences":1,"score":0.9538625000000003},"multiplier":0.25,"relevance":0.7}},{"id":1696422071,"content":"As far as I can tell you have removed the new issues you created and have created two new users in the DB that have no assigned issues, so they'll pass your validation checks.\r\nIf there is a config limit of 10 for admins, then there would need to be at least ten issues right? Or we could lower the limit we test with and then have logs that we use `expect()` on and confirm the input/output/outcome specifically so there is no doubt","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1696422071","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -382,6 +372,24 @@ async function setupTests() {\n     owner: \"ubiquity\",\n     repo: \"test-repo\",\n   });\n+\n+  db.issue.create({\n+    ...issueTemplate,\n+    id: 7,\n+    assignee: {","score":{"reward":1.344,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":85,"wordValue":0.1,"result":2.64},"readability":{"fleschKincaid":71.5801960784314,"syllables":107,"sentences":3,"score":0.884198039215686},"multiplier":0.25,"relevance":0.8}},{"id":1697964044,"content":"@gentlementlegen I think it's best that @jordan-ae also does as I was advised by whilefoo in my PR. My implementing of the tests in this way above was poor and should not be used.\r\n@jordan-ae you don't have to change any other tests just the new ones that you are adding/refactoring make sure they use the below format.\r\n```ts\r\nconst {config} = context\r\nconst adminLimit = config.maxTasks[0].limit\r\nawait expect(userStartStop(context)).rejects.toThrow(`Too many assigned issues, you have reached your max limit of ${adminLimit} issues.`);\r\n```\r\n[my pr for reference](https://github.com/ubiquibot/command-start-stop/pull/19/commits/5d487fb3d14cb369c9f47cde5fc3fde9715168a6#diff-12cd00a89af03f1fc6f74460b886289151edce062c60319b0c58fb8465558ed6)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1697964044","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -208,12 +209,12 @@ describe(\"User start/stop\", () => {\n       await userStartStop(context);\n     } catch (error) {\n       if (error instanceof Error) {\n-        expect(error.message).toEqual(\"Too many assigned issues, you have reached your max limit of 3 issues.\");\n+        expect(error.message).toEqual(\"Too many assigned issues, you have reached your max limit of 2 issues.\");","score":{"reward":1.568,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":67,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":76.19195895522388,"syllables":90,"sentences":4,"score":0.8380804104477612},"multiplier":0.25,"relevance":0.7}},{"id":1705438732,"content":"My mistake @gentlementlegen I think this may have been me, still forming the habit\r\n@jordan-ae variables don't play into it, the logger takes the log and creates 4 versions of it, one of them is `diff` which is how the bot comments most of the time.\r\n```ts\r\nawait addCommentToIssue(context, log?.logMessage.diff as string);\r\n```\r\nis the correct pattern","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1705438732","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -37,21 +38,18 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   // check max assigned issues\n \n   const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);\n-  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed: ${JSON.stringify(openedPullRequests)}`);\n+  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed`, {\n+    openedPullRequests: openedPullRequests.map((i) => i.html_url),\n+  });\n \n   const assignedIssues = await getAssignedIssues(context, sender.login);\n-  logger.info(\"Max issue allowed is\", { maxConcurrentTasks });\n+  logger.info(\"Max issues allowed is\", { limit: maxTask.limit, assigned: assignedIssues.length });\n \n   // check for max and enforce max\n \n-  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks) {\n-    const log = logger.error(\"Too many assigned issues, you have reached your max limit\", {\n-      assignedIssues: assignedIssues.length,\n-      openedPullRequests: openedPullRequests.length,\n-      maxConcurrentTasks,\n-    });\n-    await addCommentToIssue(context, log?.logMessage.diff as string);\n-    throw new Error(`Too many assigned issues, you have reached your max limit of ${maxConcurrentTasks} issues.`);\n+  if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxTask.limit) {\n+    await addCommentToIssue(context, \"```diff\\n! Too many assigned issues, you have reached your max limit.\\n```\");","score":{"reward":1.064,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":69.8113235294118,"syllables":67,"sentences":2,"score":0.901886764705882},"multiplier":0.25,"relevance":0.7}},{"id":1714675216,"content":"You raise a valid concern, but isn’t this approach actually preferable? Without this check, someone could bypass the task limit simply by opening multiple PRs. Essentially, this would make the limit meaningless.\r\nConsider this math-simplified scenario in reality they'd have a limit of 11 with 0 issues and 6 PRs.\r\n`maxLimit = 5`\r\n`assignedIssues = 0`\r\n`openPRs = 6`\r\nThe calculation would be `0 - 6 == -6` > `-6 + 5 == -1` > `-1 >= 5`. And for every new task, a new PR which means unlimited tasks.\r\nSo, with each additional PR, the max limit would increase, defeating the purpose of having a limit at all. This check ensures that the task limit is enforced properly, preventing such loopholes.\r\nI could imagine a situation where a user starts a task, then opens a PR with some \"filler\" commits just to hold their place, or for some other strategic reason. This check helps prevent that kind of workaround.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1714675216","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -37,21 +38,19 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   // check max assigned issues\n \n   const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);\n-  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed: ${JSON.stringify(openedPullRequests)}`);\n+  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed`, {\n+    openedPullRequests: openedPullRequests.map((pr) => pr.html_url),\n+  });\n \n   const assignedIssues = await getAssignedIssues(context, sender.login);\n-  logger.info(\"Max issue allowed is\", { maxConcurrentTasks });\n+  logger.info(\"Max issues allowed is\", { limit: maxTask.limit, assigned: assignedIssues.length });\n \n   // check for max and enforce max\n \n-  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks) {\n-    const log = logger.error(\"Too many assigned issues, you have reached your max limit\", {\n-      assignedIssues: assignedIssues.length,\n-      openedPullRequests: openedPullRequests.length,\n-      maxConcurrentTasks,\n-    });\n+  if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxTask.limit) {","score":{"reward":1.2,"formatting":{"content":{"p":{"score":0,"elementCount":8}},"result":0},"priority":2,"words":{"wordCount":139,"wordValue":0.1,"result":2.33},"readability":{"fleschKincaid":63.08765107913672,"syllables":213,"sentences":10,"score":0.9691234892086328},"multiplier":0.25,"relevance":0.8}},{"id":1714677291,"content":"no I guess not. Is it redundant or is it adding redundancy to the search API? Do we trust it 100% to return what we query and shouldn't validate it? I hadn't thought of this really until you posed the question\r\nThis function is looking for issues not PRs so if anything `is:issue` should be added no, can we do `is:issue` yeah?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1714677291","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -1,26 +1,32 @@\n import { Context } from \"../types/context\";\n-import { Issue, ISSUE_TYPE, PullRequest, Review } from \"../types/payload\";\n+import { GitHubIssueSearch, Review } from \"../types/payload\";\n import { getLinkedPullRequests, GetLinkedResults } from \"./get-linked-prs\";\n \n export function isParentIssue(body: string) {\n   const parentPattern = /-\\s+\\[( |x)\\]\\s+#\\d+/;\n   return body.match(parentPattern);\n }\n \n-export async function getAssignedIssues(context: Context, username: string): Promise<Issue[]> {\n+export async function getAssignedIssues(context: Context, username: string): Promise<GitHubIssueSearch[\"items\"]> {\n   const payload = context.payload;\n \n   try {\n-    return await context.octokit.paginate(\n-      context.octokit.issues.listForRepo,\n-      {\n-        owner: payload.repository.owner.login,\n-        repo: payload.repository.name,\n-        state: ISSUE_TYPE.OPEN,\n+    return await context.octokit\n+      .paginate(context.octokit.search.issuesAndPullRequests, {\n+        q: `org:${payload.repository.owner.login} assignee:${username} is:open`,\n         per_page: 100,\n-      },\n-      ({ data: issues }) => issues.filter((issue: Issue) => !issue.pull_request && issue.assignee && issue.assignee.login === username)\n-    );\n+        order: \"desc\",\n+        sort: \"created\",\n+      })\n+      .then((issues) =>\n+        issues.filter((issue) => {","score":{"reward":1.092,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":62,"wordValue":0.1,"result":2.54},"readability":{"fleschKincaid":81.94120967741938,"syllables":80,"sentences":4,"score":0.7805879032258062},"multiplier":0.25,"relevance":0.7}},{"id":1714680875,"content":"You mean from a core team perspective I figure? In this case we could \r\n- bypass the check all together\r\n- have org member checks configurable\r\n- factor it into the config settings when defining `MEMBER` and have it be like 20-odds which seems reasonable\r\n- ...\r\n---\r\nalso @gentlementlegen this only applies to using the `/start` command, we can still self-assign via UI and auto-assign via opening a PR directly, but don't tell anyone 🤐 \r\n^ with the above said, would it make sense to add this check into `task-xp-guard` and run this on `issues.assigned` and that way it cannot bypassed with the above workarounds?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1714680875","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -37,21 +38,19 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   // check max assigned issues\n \n   const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);\n-  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed: ${JSON.stringify(openedPullRequests)}`);\n+  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed`, {\n+    openedPullRequests: openedPullRequests.map((pr) => pr.html_url),\n+  });\n \n   const assignedIssues = await getAssignedIssues(context, sender.login);\n-  logger.info(\"Max issue allowed is\", { maxConcurrentTasks });\n+  logger.info(\"Max issues allowed is\", { limit: maxTask.limit, assigned: assignedIssues.length });\n \n   // check for max and enforce max\n \n-  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks) {\n-    const log = logger.error(\"Too many assigned issues, you have reached your max limit\", {\n-      assignedIssues: assignedIssues.length,\n-      openedPullRequests: openedPullRequests.length,\n-      maxConcurrentTasks,\n-    });\n+  if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxTask.limit) {","score":{"reward":1.536,"formatting":{"content":{"p":{"score":0,"elementCount":7},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":4},"hr":{"score":0,"elementCount":1}},"result":0.4},"priority":2,"words":{"wordCount":98,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":51.094659863945594,"syllables":142,"sentences":3,"score":0.9109465986394559},"multiplier":0.25,"relevance":0.8}},{"id":1714694200,"content":"In my experience, contributor's within the first 3-5 months likely cannot efficiently manage more than two or three concurrent tasks anyway. After this code review moves a lot faster and it is no longer such an issue for them, at least was the case for me and all I've seen since I started\r\nIt was an intentional feature but it's being improved vis-a-vis `automated-merging`, review incentives etc. I'd personally rather see a contributor take a PR from 0 - 100 before moving on to the next task.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1714694200","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -37,21 +38,19 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   // check max assigned issues\n \n   const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);\n-  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed: ${JSON.stringify(openedPullRequests)}`);\n+  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed`, {\n+    openedPullRequests: openedPullRequests.map((pr) => pr.html_url),\n+  });\n \n   const assignedIssues = await getAssignedIssues(context, sender.login);\n-  logger.info(\"Max issue allowed is\", { maxConcurrentTasks });\n+  logger.info(\"Max issues allowed is\", { limit: maxTask.limit, assigned: assignedIssues.length });\n \n   // check for max and enforce max\n \n-  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks) {\n-    const log = logger.error(\"Too many assigned issues, you have reached your max limit\", {\n-      assignedIssues: assignedIssues.length,\n-      openedPullRequests: openedPullRequests.length,\n-      maxConcurrentTasks,\n-    });\n+  if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxTask.limit) {","score":{"reward":1.19,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":92,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":55.24528985507247,"syllables":131,"sentences":3,"score":0.9524528985507247},"multiplier":0.25,"relevance":0.7}},{"id":1716616815,"content":"`is:issue` in this query for issues as we were asked by gentlementlegen","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1716616815","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -1,26 +1,32 @@\n import { Context } from \"../types/context\";\n-import { Issue, ISSUE_TYPE, PullRequest, Review } from \"../types/payload\";\n+import { GitHubIssueSearch, Review } from \"../types/payload\";\n import { getLinkedPullRequests, GetLinkedResults } from \"./get-linked-prs\";\n \n export function isParentIssue(body: string) {\n   const parentPattern = /-\\s+\\[( |x)\\]\\s+#\\d+/;\n   return body.match(parentPattern);\n }\n \n-export async function getAssignedIssues(context: Context, username: string): Promise<Issue[]> {\n+export async function getAssignedIssues(context: Context, username: string): Promise<GitHubIssueSearch[\"items\"]> {\n   const payload = context.payload;\n \n   try {\n-    return await context.octokit.paginate(\n-      context.octokit.issues.listForRepo,\n-      {\n-        owner: payload.repository.owner.login,\n-        repo: payload.repository.name,\n-        state: ISSUE_TYPE.OPEN,\n+    return await context.octokit\n+      .paginate(context.octokit.search.issuesAndPullRequests, {\n+        q: `org:${payload.repository.owner.login} assignee:${username} is:open`,","score":{"reward":0.434,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":64.9245454545455,"syllables":17,"sentences":1,"score":0.9507545454545451},"multiplier":0.25,"relevance":0.7}},{"id":1716617335,"content":"`is:pr` here too","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1716617335","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -127,37 +133,28 @@ export async function addAssignees(context: Context, issueNo: number, assignees:\n   }\n }\n \n-export async function getAllPullRequests(context: Context, state: \"open\" | \"closed\" | \"all\" = \"open\") {\n-  const payload = context.payload;\n+export async function getAllPullRequests(context: Context, state: \"open\" | \"closed\" | \"all\" = \"open\", username: string) {\n+  const { payload } = context;\n \n   try {\n-    return (await context.octokit.paginate(context.octokit.rest.pulls.list, {\n-      owner: payload.repository.owner.login,\n-      repo: payload.repository.name,\n-      state,\n+    return (await context.octokit.paginate(context.octokit.search.issuesAndPullRequests, {\n+      q: `org:${payload.repository.owner.login} author:${username} state:${state}`,","score":{"reward":0.112,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":120.20500000000001,"syllables":2,"sentences":1,"score":1},"multiplier":0.25,"relevance":0.7}},{"id":1718628048,"content":"If using a Record here the string is our `userRole` and it's value could be the limit instead of `{limit: 0}`. Finding the limit could also be direct access instead of using `find()`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1718628048","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -27,37 +26,25 @@ export const startStopSchema = T.Object({\n   miscellaneous: T.Object(\n     {\n       startRequiresWallet: T.Boolean(),\n-      maxConcurrentTasks: T.Array(\n+      maxConcurrentTasks: T.Record(","score":{"reward":0.944,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":73.17000000000003,"syllables":42,"sentences":2,"score":0.8682999999999997},"multiplier":0.25,"relevance":0.8}},{"id":1718733969,"content":"It seems you have lowercased `role` and then capitalize it to index `maxConcurrentTasks` in the this line.\r\nWe don't know how a partner would define their roles so it makes sense to normalize the octokit returned role and the config roles. Preferably using the `T.Tranform().Decode().Encode()` method mentioned previously and like you have for the octokit response as-is","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1718733969","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -21,11 +21,10 @@ export async function getUserRoleAndTaskLimit(context: Context, user: string): P\n       username: user,\n     });\n \n-    const matchedTask = Object.entries(maxConcurrentTasks).find(\n-      ([role]) => role.toLowerCase() === response.data.role.toLowerCase()\n-    );\n+    const role = response.data.role.toLowerCase();\n+    const limit = maxConcurrentTasks[role.charAt(0).toUpperCase() + role.slice(1)];","score":{"reward":1.44,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":56,"wordValue":0.1,"result":2.47},"readability":{"fleschKincaid":59.47761904761907,"syllables":85,"sentences":3,"score":0.9947761904761907},"multiplier":0.25,"relevance":0.9}},{"id":1718854827,"content":"```ts\r\nconst role = response.data.role.toLowerCase();\r\nconst limit = maxConcurrentTasks[role.charAt(0).toUpperCase() + role.slice(1)]\r\n```\r\nYou make `role` lowercase and then you capitalize the first letter and use it to index `maxConcurrentTasks` which might not match how the partner has defined their roles in the config as they may be lowercase\r\nI'd suggest using the method we discussed [here](https://github.com/ubiquibot/command-start-stop/pull/9#issuecomment-2290370173) to handle decoding or whichever method you think is right","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1718854827","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -21,11 +21,10 @@ export async function getUserRoleAndTaskLimit(context: Context, user: string): P\n       username: user,\n     });\n \n-    const matchedTask = Object.entries(maxConcurrentTasks).find(\n-      ([role]) => role.toLowerCase() === response.data.role.toLowerCase()\n-    );\n+    const role = response.data.role.toLowerCase();\n+    const limit = maxConcurrentTasks[role.charAt(0).toUpperCase() + role.slice(1)];","score":{"reward":1.664,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":53,"wordValue":0.1,"result":2.43},"readability":{"fleschKincaid":31.726792452830225,"syllables":76,"sentences":1,"score":0.7172679245283022},"multiplier":0.25,"relevance":0.8}},{"id":1719052097,"content":"You have defined defaults as being capitalized but how do we guarantee that the role defined in the config by partners is uppercase or lowercase and whatever the octokit response is going to be?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1719052097","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -21,11 +21,10 @@ export async function getUserRoleAndTaskLimit(context: Context, user: string): P\n       username: user,\n     });\n \n-    const matchedTask = Object.entries(maxConcurrentTasks).find(\n-      ([role]) => role.toLowerCase() === response.data.role.toLowerCase()\n-    );\n+    const role = response.data.role.toLowerCase();\n+    const limit = maxConcurrentTasks[role.charAt(0).toUpperCase() + role.slice(1)];","score":{"reward":0.992,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":37.960294117647095,"syllables":54,"sentences":1,"score":0.779602941176471},"multiplier":0.25,"relevance":0.8}},{"id":1732535949,"content":"What is the reason behind using `Static` vs the original `StaticDecode`?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1732535949","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -23,12 +25,21 @@ export const startStopSchema = T.Object({\n   ),\n   miscellaneous: T.Object(\n     {\n-      maxConcurrentTasks: T.Number(),\n-      startRequiresWallet: T.Boolean(),\n+      startRequiresWallet: T.Boolean({ default: true }}),\n+      maxConcurrentTasks: T.Record(T.String(), T.Integer(), { default: { admin: 20, member: 10, contributor: 2 } }),\n     },\n-    { default: { maxConcurrentTasks: 3, startRequiresWallet: true } }\n+    {\n+      default: {}\n+        maxConcurrentTasks: {\n+          admin: 20,\n+          member: 10,\n+          contributor: 2,\n+        },\n+        startRequiresWallet: true,\n+      },\n+    }\n   ),\n });\n \n-export type StartStopSettings = StaticDecode<typeof startStopSchema>;\n-export const startStopSettingsValidator = new StandardValidator(startStopSchema);\n+export type StartStopSettings = Static<typeof startStopSchema>;","score":{"reward":0.378,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":56.70000000000002,"syllables":15,"sentences":1,"score":0.9670000000000002},"multiplier":0.25,"relevance":0.7}},{"id":1734568568,"content":"Is this `Static` import needed?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1734568568","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -1,5 +1,5 @@\n import { SupportedEvents, SupportedEventsU } from \"./context\";\n-import { StaticDecode, Type as T } from \"@sinclair/typebox\";\n+import { Static, StaticDecode, Type as T } from \"@sinclair/typebox\";","score":{"reward":0.182,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":97.025,"syllables":5,"sentences":1,"score":0.6297499999999999},"multiplier":0.25,"relevance":0.7}},{"id":1734569155,"content":"is this used anywhere? The literals differ from the typebox defaults so if it's used sync them up otherwise remove it","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1734569155","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -13,6 +13,8 @@ export interface PluginInputs<T extends SupportedEventsU = SupportedEventsU, TU\n \n const ONE_DAY = 24 * 60 * 60 * 1000;\n \n+const userRoleSchema = T.Union([T.Literal(\"Admin\"), T.Literal(\"Member\"), T.Literal(\"Contributor\"), T.String()]);","score":{"reward":0.7,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":68.77000000000002,"syllables":33,"sentences":2,"score":0.9122999999999998},"multiplier":0.25,"relevance":0.7}},{"id":1738070593,"content":"One hyphen is grammatically correct while two is usually code-like isn't? I also removed the other escapes because it made the comment unreadable","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1738070593","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -42,5 +42,8 @@ export async function startStopTask(inputs: PluginInputs, env: Env) {\n }\n \n function sanitizeMetadata(obj: LogReturn[\"metadata\"]): string {\n-  return JSON.stringify(obj, null, 2).replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/--/g, \"&#45;&#45;\");\n+  return JSON.stringify(obj, null, 2)\n+    .replace(/</g, \"&lt;\")\n+    .replace(/>/g, \"&gt;\")\n+    .replace(/--/g, \"&#45;&#45;\")","score":{"reward":0.648,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":48.63550000000001,"syllables":43,"sentences":2,"score":0.8863550000000001},"multiplier":0.25,"relevance":0.6}},{"id":1742566622,"content":"these checks can be removed since we process checks for each user now in `handleTaskLimitChecks()`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1742566622","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -33,6 +36,21 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n     logger.error(\"Error while getting commit hash\", { error: e as Error });\n   }\n \n+  // check max assigned issues\n+  const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);","score":{"reward":0.56,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":89.89642857142859,"syllables":17,"sentences":1,"score":0.7010357142857141},"multiplier":0.25,"relevance":0.8}},{"id":1742569522,"content":"same here","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1742569522","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -33,6 +36,21 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n     logger.error(\"Error while getting commit hash\", { error: e as Error });\n   }\n \n+  // check max assigned issues\n+  const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);\n+  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed`, {\n+    openedPullRequests: openedPullRequests.map((pr) => pr.html_url),\n+  });\n+\n+  const assignedIssues = await getAssignedIssues(context, sender.login);","score":{"reward":0.112,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":120.20500000000001,"syllables":2,"sentences":1,"score":1},"multiplier":0.25,"relevance":0.7}},{"id":1742569677,"content":"same here","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1742569677","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -33,6 +36,21 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n     logger.error(\"Error while getting commit hash\", { error: e as Error });\n   }\n \n+  // check max assigned issues\n+  const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);\n+  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed`, {\n+    openedPullRequests: openedPullRequests.map((pr) => pr.html_url),\n+  });\n+\n+  const assignedIssues = await getAssignedIssues(context, sender.login);\n+  logger.info(\"Max issues allowed is\", { limit: maxTask.limit, assigned: assignedIssues.length });\n+\n+  // check for max and enforce max\n+\n+  if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxTask.limit) {\n+    throw new Error(`Too many assigned issues, you have reached your max limit of ${maxTask.limit} issues.`);","score":{"reward":0.112,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":120.20500000000001,"syllables":2,"sentences":1,"score":1},"multiplier":0.25,"relevance":0.7}},{"id":1742636398,"content":"all of these checks should have been removed. Look at the logic inside the `handleTaskLimitChecks` function which we fire for each user. This is because we now support team assignments so we need to process for each user individually not just the command invoker.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1742636398","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -36,18 +36,12 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n     logger.error(\"Error while getting commit hash\", { error: e as Error });\n   }\n \n-  // check max assigned issues\n-  const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);\n-  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed`, {\n-    openedPullRequests: openedPullRequests.map((pr) => pr.html_url),\n-  });\n-\n   const assignedIssues = await getAssignedIssues(context, sender.login);\n   logger.info(\"Max issues allowed is\", { limit: maxTask.limit, assigned: assignedIssues.length });\n \n   // check for max and enforce max\n \n-  if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxTask.limit) {\n+  if (assignedIssues.length  >= maxTask.limit) {\n     throw new Error(`Too many assigned issues, you have reached your max limit of ${maxTask.limit} issues.`);","score":{"reward":1.278,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":72.2727131782946,"syllables":61,"sentences":3,"score":0.8772728682170541},"multiplier":0.25,"relevance":0.9}},{"id":1742636807,"content":"I'm pretty sure this can be removed as well as this is part of the checks function too","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1742636807","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -36,18 +36,12 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n     logger.error(\"Error while getting commit hash\", { error: e as Error });\n   }\n \n-  // check max assigned issues\n-  const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);\n-  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed`, {\n-    openedPullRequests: openedPullRequests.map((pr) => pr.html_url),\n-  });\n-\n   const assignedIssues = await getAssignedIssues(context, sender.login);","score":{"reward":0.602,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":89.5921052631579,"syllables":22,"sentences":1,"score":0.7040789473684209},"multiplier":0.25,"relevance":0.7}},{"id":1747849668,"content":"You have passed in the task limit for the `sender` for each call to this function essentially applying the same limit to all assignees in a team scenario as opposed to moving the call to `getUserRoleAndTaskLimit` into the checks function itself","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1747849668","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -57,7 +59,7 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   const toAssign = [];\n   // check max assigned issues\n   for (const user of teammates) {\n-    if (await handleTaskLimitChecks(user, context, maxConcurrentTasks, logger, sender.login)) {\n+    if (await handleTaskLimitChecks(user, context, maxTask.limit, logger, sender.login)) {","score":{"reward":1.224,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":47.94230769230769,"syllables":55,"sentences":1,"score":0.879423076923077},"multiplier":0.25,"relevance":0.9}},{"id":1747850411,"content":"We shouldn't need to optionally access the `LogReturn` object anymore, I double checked your logger version and it's up to date so this shouldn't be needed","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1747850411","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -141,12 +143,19 @@ async function handleTaskLimitChecks(username: string, context: Context, maxConc\n   // check for max and enforce max\n \n   if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxConcurrentTasks) {\n-    const log = logger.error(username === sender ? \"You have reached your max task limit\" : `${username} has reached their max task limit`, {\n-      assignedIssues: assignedIssues.length,\n-      openedPullRequests: openedPullRequests.length,\n-      maxConcurrentTasks,\n-    });\n-    await addCommentToIssue(context, log?.logMessage.diff as string);\n+    if (username !== sender) {\n+      const logMessage = `${username} has reached their max task limit`;\n+      const log = logger.error(logMessage, {\n+        assignedIssues: assignedIssues.length,\n+        openedPullRequests: openedPullRequests.length,\n+        maxConcurrentTasks,\n+      });\n+    \n+      if (log?.logMessage?.diff) {","score":{"reward":0.812,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":63.600714285714304,"syllables":38,"sentences":1,"score":0.963992857142857},"multiplier":0.25,"relevance":0.7}},{"id":1748933822,"content":"It's preferred to use an if-else-throw or find an alternative guaranteed way to obtain the organization name as opposed to casting like this","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1748933822","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -0,0 +1,33 @@\n+import { Context } from \"../../types\";\n+\n+interface MatchingUserProps {\n+  role: string;\n+  limit: number;\n+}\n+\n+export async function getUserRoleAndTaskLimit(context: Context, user: string): Promise<MatchingUserProps> {\n+  const orgLogin = context.payload.organization?.login;\n+  const { config, logger } = context;\n+  const { maxConcurrentTasks } = config;\n+\n+  const smallestTask = Object.entries(maxConcurrentTasks).reduce(\n+    (minTask, [role, limit]) => (limit < minTask.limit ? { role, limit } : minTask),\n+    { role: \"\", limit: Infinity } as MatchingUserProps\n+  );\n+\n+  try {\n+    const response = await context.octokit.orgs.getMembershipForUser({\n+      org: orgLogin as string,","score":{"reward":0.896,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":53.54500000000003,"syllables":39,"sentences":1,"score":0.9354500000000003},"multiplier":0.25,"relevance":0.8}},{"id":2228514968,"content":"I will review this today @jordan-ae","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2228514968","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.084,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":78.87285714285717,"syllables":10,"sentences":1,"score":0.8112714285714283},"multiplier":0.25,"relevance":0.2}},{"id":2228659061,"content":"+1 to the above comments.\r\nI'd also keep in mind that [custom roles](https://docs.github.com/en/organizations/managing-peoples-access-to-your-organization-with-roles/roles-in-an-organization) can be defined within an org so it should be able to cover those too","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2228659061","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.232,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":81.26232758620691,"syllables":38,"sentences":2,"score":0.7873767241379309},"multiplier":0.25,"relevance":0.7}},{"id":2228916516,"content":"Ubiquity tends to use the pre-defined roles. \r\nYeah just I'd just pass in an iterable type and parse whatever it defines, you don't need to know the roles/limits as you write the code if the config does the heavy lifting\r\nIt's best to add defaults into `plugin-input.ts` though and I'm sure @0x4007 can help in defining those","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2228916516","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.312,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":62,"wordValue":0.1,"result":2.54},"readability":{"fleschKincaid":63.47967741935486,"syllables":82,"sentences":2,"score":0.9652032258064515},"multiplier":0.25,"relevance":0.8}},{"id":2229521048,"content":"@gentlementlegen re: https://github.com/ubiquibot/command-start-stop/pull/9#issuecomment-2229372569 \r\nAre we sticking with Knip in CI when it's error prone like this? I know rndquu has mentioned it before also\r\nIf we are then are we just manually ignoring the erroneous problem files?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2229521048","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.808,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":60.16999999999999,"syllables":74,"sentences":3,"score":0.9983000000000001},"multiplier":0.25,"relevance":0.4}},{"id":2229548387,"content":"@jordan-ae one thing I had trouble with building plugins at first is the mental model. While Ubiquity is currently the primary user of the bot and it's plugins, we are not the intended demographic for either.\r\nPlugins are built with the \"Partner\" and their needs in mind which is why configurability needs to be handled in such a way that it's either real easy (on/off or a specific value(s)) or we handle it elegantly under-the-hood.\r\n0x4007 plans to have complete configurability right down to the `/<cmd>` string without affecting plugin execution. So when it's things that can be arbitrary like labels or roles you need to think \"how can I handle all possibilities?\" otherwise we impose standards onto partners which could make the plugin less attractive.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2229548387","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.232,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":133,"wordValue":0.1,"result":2.39},"readability":{"fleschKincaid":53.93733709273184,"syllables":205,"sentences":6,"score":0.9393733709273184},"multiplier":0.25,"relevance":0.8}},{"id":2242860687,"content":"It does make sense yeah you have the right approach now. The code is starting to look acceptable, it would be good to see some QA of the changes in action but if not definitely some unit tests covering the added configurables\r\nQA might be difficult here without an enterprise trial for custom roles. Also I have an alt GH account I use for this sort of live QA because if your the only member of your test org it's hard to test various roles etc","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2242860687","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.19,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":87,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":61.68275862068967,"syllables":119,"sentences":3,"score":0.9831724137931033},"multiplier":0.25,"relevance":0.7}},{"id":2243929876,"content":"@jordan-ae given the above comment what to do is:\r\n- add default support for the other pre-defines such as `billing_manager`\r\n- assume the roles will always be non-null and will only use the pre-defined roles\r\n- if the role returned by the function call doesn't match any from the config then apply the lowest value limit from the config and log feedback\r\nprovide QA by either extending the unit tests or manually as I have done before with an alt account on test issues with your org and applying the various predefined roles to the alt, whichever is easier for you","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2243929876","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.168,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3}},"result":0.3},"priority":2,"words":{"wordCount":102,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":-16.95970588235292,"syllables":145,"sentences":1,"score":0},"multiplier":0.25,"relevance":0.8}},{"id":2245681369,"content":"@jordan-ae typically we'd expect to see a live action demo of a plugin and the changes made via a link to one of your org issues showing it in action especially if unit tests aren't included but usually both are\r\nFor something like this manually, I'd assign my alt account roles and max the tasks and screenshot logs showing the role and it being declined because of x assigned tasks then I'd link the issue/comment for each role I was testing.\r\nAutomated you could leverage the mock db and make a setup function to create the amount of assigned tasks needed for each role, so long as they exist in the db assigned before you call `start()` then tests should pass. (not a how-to but a general approach as some http handlers may need updated)\r\nBelow is a QA link for an open PR of mine for reference\r\nhttps://github.com/ubq-testing/command-start-stop/issues/5#issuecomment-2243867870","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2245681369","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.616,"formatting":{"content":{"p":{"score":0,"elementCount":5},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":154,"wordValue":0.1,"result":2.19},"readability":{"fleschKincaid":47.4956325301205,"syllables":230,"sentences":4,"score":0.874956325301205},"multiplier":0.25,"relevance":0.8}},{"id":2246185860,"content":"Look at this [run](https://github.com/ubiquibot/command-start-stop/actions/runs/10064886988/job/27822946199?pr=9) it shows why the tests are failing. You need to include a http handler that covers that endpoint so that we mock the response in tests.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2246185860","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.392,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":90.09000000000002,"syllables":36,"sentences":2,"score":0.6990999999999998},"multiplier":0.25,"relevance":0.8}},{"id":2254375268,"content":"@jordan-ae I'm unsure what exactly is holding you back whether it's still the same error or if you are further on from that point now.\r\nI am happy to help if you can give more info. I have previously been in the same boat and what I did was went and took a look at other PRs in the same repo which might be making similar changes.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2254375268","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.972,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":70,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":76.79738095238096,"syllables":88,"sentences":3,"score":0.8320261904761904},"multiplier":0.25,"relevance":0.6}},{"id":2260889114,"content":"While manually QA-ing I noticed issues with fetching assigned issues and fetching pull reviews. As to save time I have opened https://github.com/ubq-test-jordan/command-start-stop/pull/21 which resolves these issues and updates the tests accordingly","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2260889114","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.488,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":67.73928571428571,"syllables":62,"sentences":3,"score":0.9226071428571428},"multiplier":0.25,"relevance":0.8}},{"id":2290370173,"content":"@jordan-ae I believe @gentlementlegen was referring to using `T.Transform(SCHEMA).Decode((val) => {}).Encode((val) => {}`. Examples can be found within the Typebox docs and throughout various plugins but here is a [recent](https://github.com/ubiquibot/crypto-faucet-plugin/blob/574d9129f6d016ad1641562214d55071fc94589a/src/types/plugin-inputs.ts#L39) one I wrote. The approach you used is not typically how we'd decode. \r\nFurther, I believe you could of just added the `new Set(taskRoles)` into `getUserRoleAndTaskLimit()` and achieve the same effect that your decode function has.\r\n@gentlementlegen am I correct in the above? Also how should we handle duplicates if they exist? Check their values and default to the lowest and post a comment that's what we did and which items are duplicated? I feel throwing an error is not great and we could handle it more elegantly","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2290370173","commentType":"PULL_CONTRIBUTOR","score":{"reward":2.034,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":113,"wordValue":0.1,"result":2.54},"readability":{"fleschKincaid":66.72113384955753,"syllables":168,"sentences":8,"score":0.9327886615044246},"multiplier":0.25,"relevance":0.9}},{"id":2320518368,"content":"@jordan-ae what I tend to do after something like this or if there has been lots of changes/time since the last QA is, I reproduce live QA testing that old features are not broken and the new ones work as expected via test issues. \r\nI'd appreciate if you could do that too, showing that `/start` and `/stop` work as expected and your new `maxTask` in action. It takes a little longer but it's always quicker than having to double back to fix things and then produce the QA anyway.\r\nLooking at the jest run it looks like tests are failing because the endpoint it's trying to hit is missing the repo name `/repos/ubiquity//pulls/1/reviews`. Log the DB entity and confirm the url is correct if it's not fix where the test issue is created otherwise there may be an issue in splitting the url. Ping me on tg if you need help","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2320518368","commentType":"PULL_CONTRIBUTOR","score":{"reward":1.104,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":153,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":74.2348529411765,"syllables":193,"sentences":6,"score":0.857651470588235},"multiplier":0.25,"relevance":0.8}},{"id":2324901284,"content":"Unsure based on just that image. The kernel would have logged something if it was related to fetching the manifest which is the only thing I can think of if the kernel is processing an event from github and passing it to the worker. I can only suggest adding logs throughout in order to find where the fault is","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2324901284","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.96,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":59,"wordValue":0.1,"result":2.51},"readability":{"fleschKincaid":70.72757062146894,"syllables":81,"sentences":3,"score":0.8927242937853106},"multiplier":0.25,"relevance":0.6}},{"id":2325309827,"content":"ping me on tg if you need a hand","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2325309827","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.162,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":113.10000000000002,"syllables":9,"sentences":1,"score":1},"multiplier":0.25,"relevance":0.3}},{"id":2327360869,"content":"It's a talent in and of itself to know when to ask for help but in all cases I'll never feel like you are bugging me dude, I'd rather you popped up than pulled your hair out for days.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2327360869","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.426,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":42,"wordValue":0.1,"result":2.23},"readability":{"fleschKincaid":69.53357142857145,"syllables":47,"sentences":1,"score":0.9046642857142855},"multiplier":0.25,"relevance":0.3}},{"id":2327510122,"content":"Shoot me a msg on TG whenever, happy to help.\r\nAll tests passing locally? CI still seems to be failing still for some reason","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2327510122","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.51,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":85.91500000000002,"syllables":32,"sentences":3,"score":0.7408499999999998},"multiplier":0.25,"relevance":0.5}},{"id":2329499305,"content":"@jordan-ae can you push this forward","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2329499305","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.126,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":90.95857142857145,"syllables":9,"sentences":1,"score":0.6904142857142855},"multiplier":0.25,"relevance":0.3}},{"id":2336432358,"content":"Removed items from my review because #35 addresses the double comment posting (due to the catch-all), logReturn etc. \r\nNot sure why the error has changed in the tests in this PR for when the `APP_ID` is not set vs `development` but I'll correct anything in #35","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2336432358","commentType":"PULL_CONTRIBUTOR","score":{"reward":0.876,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":46,"wordValue":0.1,"result":2.31},"readability":{"fleschKincaid":73.1421739130435,"syllables":60,"sentences":2,"score":0.868578260869565},"multiplier":0.25,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2178723436,"effect":{"addition":0,"deletion":0},"reward":0,"priority":2},{"reviewId":2191401032,"effect":{"addition":35,"deletion":24},"reward":1.18,"priority":2},{"reviewId":2192693421,"effect":{"addition":5,"deletion":6},"reward":0.22,"priority":2},{"reviewId":2194428208,"effect":{"addition":21,"deletion":13},"reward":0.68,"priority":2},{"reviewId":2194435488,"effect":{"addition":0,"deletion":0},"reward":0,"priority":2},{"reviewId":2206744643,"effect":{"addition":199,"deletion":113},"reward":6.24,"priority":2},{"reviewId":2209273233,"effect":{"addition":99,"deletion":27},"reward":2.52,"priority":2},{"reviewId":2221142903,"effect":{"addition":594,"deletion":296},"reward":17.8,"priority":2},{"reviewId":2234513337,"effect":{"addition":8,"deletion":8},"reward":0.32,"priority":2},{"reviewId":2240745615,"effect":{"addition":42,"deletion":43},"reward":1.7,"priority":2},{"reviewId":2240914725,"effect":{"addition":14,"deletion":23},"reward":0.74,"priority":2},{"reviewId":2262801540,"effect":{"addition":12,"deletion":16},"reward":0.56,"priority":2},{"reviewId":2266084545,"effect":{"addition":4,"deletion":5},"reward":0.18,"priority":2},{"reviewId":2271377174,"effect":{"addition":319,"deletion":167},"reward":9.72,"priority":2},{"reviewId":2278292617,"effect":{"addition":431,"deletion":198},"reward":12.58,"priority":2},{"reviewId":2278408613,"effect":{"addition":1,"deletion":7},"reward":0.16,"priority":2},{"reviewId":2287302872,"effect":{"addition":22,"deletion":26},"reward":0.96,"priority":2},{"reviewId":2288363967,"effect":{"addition":136,"deletion":91},"reward":4.54,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 122.572 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>18</td><td>60.1</td></tr><tr><td>Issue</td><td>Comment</td><td>5</td><td>2.594</td></tr><tr><td>Review</td><td>Comment</td><td>67</td><td>59.878</td></tr></tbody></table></details>"},"0x4007":{"total":81.456,"userId":4975670,"comments":[{"id":2229632622,"content":"Not sure about member, I guess will just set to 5\r\nAlso I realize that I didn't specify, but ideally this should check every task across the organization. i.e. an external contributor is assigned on a task in repo `a` and `b` and tries to self assign in repo `c` but it should reject.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2229632622","commentType":"ISSUE_AUTHOR","score":{"reward":6.18,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":53,"wordValue":0.1,"result":2.43},"readability":{"fleschKincaid":68.88058962264155,"syllables":78,"sentences":4,"score":0.9111941037735845},"multiplier":1,"relevance":1}},{"id":2325293580,"content":"@Keyrxng @gentlementlegen  isn't this implemented already? I saw The error yesterday when testing team assigns.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2325293580","commentType":"ISSUE_AUTHOR","score":{"reward":2.56,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":45.377500000000026,"syllables":29,"sentences":2,"score":0.8537750000000003},"multiplier":1,"relevance":0.8}},{"id":2325302167,"content":"Why are we rebuilding the feature if its already built and apparently working","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2325302167","commentType":"ISSUE_AUTHOR","score":{"reward":1.96,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":50.470769230769264,"syllables":22,"sentences":1,"score":0.9047076923076927},"multiplier":1,"relevance":0.7}},{"id":2325304197,"content":"Bad example but I can't find the example from my phone now","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2325304197","commentType":"ISSUE_AUTHOR","score":{"reward":0.81,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":83.0092307692308,"syllables":17,"sentences":1,"score":0.7699076923076921},"multiplier":1,"relevance":0.3}},{"id":2346092310,"content":"I think check the length of the to-be-posted comment and if it exceeds the limit, you should only post the essentials (the permit link) along with a warning that explains its a truncated output","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2346092310","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":57.49500000000003,"syllables":48,"sentences":1,"score":0.9749500000000003},"multiplier":1,"relevance":0}},{"id":2346096129,"content":"Sounds good enough for now. That notice I added is also useful so that we know there wasn't a bug.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2346096129","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":91.43464285714288,"syllables":26,"sentences":2,"score":0.6856535714285712},"multiplier":1,"relevance":0}},{"id":2346673906,"content":"If they don't deliver on the task then they don't receive the task price reward. \r\nWe want to disincentivize long reviews. We prefer contributors who ship high quality code, while achieving the full specification with minimal review time.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2346673906","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":40,"wordValue":0.1,"result":2.18},"readability":{"fleschKincaid":55.82666666666668,"syllables":65,"sentences":3,"score":0.9582666666666668},"multiplier":1,"relevance":0}},{"id":2348518293,"content":"They are claimable but coincidently I need to top up the wallet will do so asap","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2348518293","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":68.9825,"syllables":23,"sentences":1,"score":0.910175},"multiplier":1,"relevance":0}},{"id":2350861898,"content":"I set up a new wallet and moved all the funds so I decided to regenerate using the latest wallet. I suppose if you already claimed from the first, then you should obviously not claim from the second!","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2350861898","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":38,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":69.55526315789477,"syllables":53,"sentences":2,"score":0.9044473684210523},"multiplier":1,"relevance":0}},{"id":2405472093,"content":"The old version has the ability to set limits. \nBased on the contributor level (collaborator, admin etc) we should be able to configure limits. \nBlock start if they are assigned to more than X tasks. \nThis is useful for new people who self assign a ton of tasks and of course can't handle all of them so just blocks progress.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.2,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":61,"wordValue":0.1,"result":2.53},"readability":{"fleschKincaid":72.08411885245904,"syllables":86,"sentences":4,"score":0.8791588114754095},"multiplier":1,"relevance":1}},{"id":2299797954,"content":"I'm assuming that Infinity works","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#pullrequestreview-2299797954","commentType":"PULL_COLLABORATOR","score":{"reward":0.462,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":45.64500000000001,"syllables":11,"sentences":1,"score":0.8564500000000002},"multiplier":1,"relevance":0.3}},{"id":1696212332,"content":"Is this a real key? 👀","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1696212332","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -17,8 +17,9 @@ type Sender = Context[\"payload\"][\"sender\"];\n \n const octokit = jest.requireActual(\"@octokit/rest\");\n \n-const url = process.env.SUPABASE_URL;\n-const key = process.env.SUPABASE_KEY;\n+const url = \"https://sbxscxthunnhozvgtshx.supabase.co\";\n+const key =\n+  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNieHNjeHRodW5uaG96dmd0c2h4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTE0Nzg2MDcsImV4cCI6MjAyNzA1NDYwN30.-DstUzIspsRlLQPHR1da6nY5GBBs5I4Wd0jlK5zFzyU\";","score":{"reward":0.966,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":119.69750000000002,"syllables":5,"sentences":2,"score":1},"multiplier":1,"relevance":0.7}},{"id":1717768551,"content":"I didn't scrutinize the code because I'm mobile but I can tell a little story about v1\n---\nWe had this problem where contributors would self assign a ton of tasks and then block progress. So we made a limit of how many open tasks can be actively assigned. \nThen we realized that our review team was actually causing the delays, so we decided that after a 24 hour grace period of pending review, we would lift the limit by one. \nHowever if a reviewer requested changes on any pull, then the limit is reduced again, which forces the contributor to focus on the open pulls instead of starting new tasks. \nAt a high level, we realized that delays can happen on both the contributor and reviewer side. This system seemed to work quite well in old v1, and we should reimplement.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1717768551","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -37,21 +38,19 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   // check max assigned issues\n \n   const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);\n-  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed: ${JSON.stringify(openedPullRequests)}`);\n+  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed`, {\n+    openedPullRequests: openedPullRequests.map((pr) => pr.html_url),\n+  });\n \n   const assignedIssues = await getAssignedIssues(context, sender.login);\n-  logger.info(\"Max issue allowed is\", { maxConcurrentTasks });\n+  logger.info(\"Max issues allowed is\", { limit: maxTask.limit, assigned: assignedIssues.length });\n \n   // check for max and enforce max\n \n-  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks) {\n-    const log = logger.error(\"Too many assigned issues, you have reached your max limit\", {\n-      assignedIssues: assignedIssues.length,\n-      openedPullRequests: openedPullRequests.length,\n-      maxConcurrentTasks,\n-    });\n+  if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxTask.limit) {","score":{"reward":7.668,"formatting":{"content":{"h2":{"score":1,"elementCount":1},"p":{"score":0,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":143,"wordValue":0.1,"result":2.3},"readability":{"fleschKincaid":62.54766317016319,"syllables":203,"sentences":6,"score":0.974523368298368},"multiplier":1,"relevance":0.9}},{"id":1756470235,"content":"I feel like admins shouldn't have limits but to be honest I feel this feature has no teeth because we can just use the GitHub UI. \nIt would be more interesting if it unassigns when collaborators self assign and they hit the limit.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1756470235","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -38,7 +38,10 @@ To configure your Ubiquibot to run this plugin, add the following to the `.ubiqu\n   with:\n     reviewDelayTolerance: \"3 Days\"\n     taskStaleTimeoutDuration: \"30 Days\"\n-    maxConcurrentTasks: 3\n+    maxConcurrentTasks: # Default concurrent task limits per role.\n+      admin: 10","score":{"reward":4.06,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":44,"wordValue":0.1,"result":2.27},"readability":{"fleschKincaid":67.21863636363636,"syllables":61,"sentences":2,"score":0.9278136363636363},"multiplier":1,"relevance":0.7}},{"id":2243887606,"content":"@Keyrxng  let's add support for custom roles in a future task if it's only for enterprise. It's not something we need or can easily test for as you mention.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2243887606","commentType":"PULL_COLLABORATOR","score":{"reward":2.45,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":74.27000000000001,"syllables":44,"sentences":2,"score":0.8573},"multiplier":1,"relevance":0.5}},{"id":2345723255,"content":"According to the original conversation on the issue, admins should not have limits. Please remove from the default.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2345723255","commentType":"PULL_COLLABORATOR","score":{"reward":2.816,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":52.00000000000003,"syllables":31,"sentences":2,"score":0.9200000000000003},"multiplier":1,"relevance":0.8}},{"id":2345744520,"content":"Just delete the admin related config. Remove any logic related to admins. It makes no sense to limit admins, that's the purpose of an admin","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2345744520","commentType":"PULL_COLLABORATOR","score":{"reward":3.504,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":26,"wordValue":0.1,"result":1.74},"readability":{"fleschKincaid":74.39217948717952,"syllables":38,"sentences":3,"score":0.8560782051282048},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2206520874,"effect":{"addition":0,"deletion":0},"reward":0,"priority":2},{"reviewId":2239482685,"effect":{"addition":691,"deletion":238},"reward":18.58,"priority":2},{"reviewId":2299702983,"effect":{"addition":883,"deletion":409},"reward":25.84,"priority":2},{"reviewId":2299797954,"effect":{"addition":2,"deletion":18},"reward":0.4,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 81.456 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>4</td><td>44.82</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.2</td></tr><tr><td>Issue</td><td>Comment</td><td>9</td><td>11.51</td></tr><tr><td>Review</td><td>Comment</td><td>7</td><td>21.926</td></tr></tbody></table></details>"},"gentlementlegen":{"total":200,"userId":9807008,"comments":[{"id":2345825205,"content":"I updated the configuration accordingly. Also, it seems that the generation ran into an issue: the content is too long to evaluate, see [this run](https://github.com/ubiquibot/conversation-rewards/actions/runs/10828487091/job/30043960563#step:7:194).\r\nhttps://github.com/ubiquibot/conversation-rewards/issues/115","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2345825205","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2},"priority":2,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":47.206704545454556,"syllables":59,"sentences":4,"score":0.8720670454545456},"multiplier":1,"relevance":0}},{"id":2346088811,"content":"@0x4007 It seems that the optimization wasn't enough, I'll investigate more and see exactly what the payload is and why is it so long beyond the large amount of comments.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2346088811","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":52.74250000000002,"syllables":46,"sentences":1,"score":0.9274250000000002},"multiplier":1,"relevance":0}},{"id":2346095213,"content":"@0x4007 In this specific case the length of the comment is around 84 000 characters. Should we just strip the metadata in such case an only leave the URL to the job run? The job run itself contains everything that is inside the metadata, so we wouldn't lose any info.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2346095213","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":71.80352941176473,"syllables":71,"sentences":3,"score":0.8819647058823528},"multiplier":1,"relevance":0}},{"id":2346097002,"content":"On it, will open a PR soon. I can add inside the metadata comment that is was stripped due to the length as well.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2346097002","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":88.905,"syllables":30,"sentences":2,"score":0.71095},"multiplier":1,"relevance":0}},{"id":2346281729,"content":"@jordan-ae This was not intended to be claimable, I am not sure if I used a fake account or not. I will regenerate from the main branch once the fix is merged.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/8#issuecomment-2346281729","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":84.9784090909091,"syllables":41,"sentences":2,"score":0.7502159090909091},"multiplier":1,"relevance":0}},{"id":2299654340,"content":"Works for me, here is my QA: https://github.com/Meniole/command-start-stop/issues/20","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#pullrequestreview-2299654340","commentType":"PULL_COLLABORATOR","score":{"reward":1.236,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":87.67750000000001,"syllables":21,"sentences":2,"score":0.7232249999999999},"multiplier":1,"relevance":0.3}},{"id":1677880579,"content":"Could have a more explicit name, showing that it checks for the user's organization","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1677880579","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,9 @@\n+import { Context } from \"../../types\";\n+\n+export async function isUserMember(context: Context, user: string) {","score":{"reward":2.198,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":61.890000000000015,"syllables":23,"sentences":1,"score":0.9810999999999999},"multiplier":1,"relevance":0.7}},{"id":1677881360,"content":"According to the spec, this should be configurable.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1677881360","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -44,7 +46,7 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n \n   // check for max and enforce max\n \n-  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks) {\n+  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks && !isUserMember(context, assignee)) {","score":{"reward":1.552,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":50.66500000000002,"syllables":14,"sentences":1,"score":0.9066500000000002},"multiplier":1,"relevance":0.8}},{"id":1687226469,"content":"Any reason to remove the package manager for this pull-request?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1687226469","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -84,6 +84,5 @@\n     \"extends\": [\n       \"@commitlint/config-conventional\"\n     ]\n-  },\n-  \"packageManager\": \"yarn@4.2.2\"","score":{"reward":1.25,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":64.9245454545455,"syllables":17,"sentences":1,"score":0.9507545454545451},"multiplier":1,"relevance":0.5}},{"id":1687228225,"content":"User role should be a `T.Literal` most likely","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1687228225","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -13,6 +13,10 @@ export interface PluginInputs<T extends SupportedEventsU = SupportedEventsU, TU\n \n const ONE_DAY = 24 * 60 * 60 * 1000;\n \n+const userRoleSchema = T.String();","score":{"reward":1.232,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":66.7871428571429,"syllables":11,"sentences":1,"score":0.9321285714285711},"multiplier":1,"relevance":0.7}},{"id":1687259391,"content":"Maybe the best choice would be to have a `T.Union` with `T.Literal` and `T.String`. The idea is to have a better auto-complete and less error prone type.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1687259391","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -13,6 +13,10 @@ export interface PluginInputs<T extends SupportedEventsU = SupportedEventsU, TU\n \n const ONE_DAY = 24 * 60 * 60 * 1000;\n \n+const userRoleSchema = T.String();","score":{"reward":3.264,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":92.62750000000001,"syllables":30,"sentences":2,"score":0.6737249999999999},"multiplier":1,"relevance":0.8}},{"id":1695048784,"content":"Maybe it'd be better to seed these values within the database mock","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1695048784","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -16,6 +16,20 @@ export const handlers = [\n     }\n     return HttpResponse.json(item);\n   }),\n+  //get member\n+  http.get(\"https://api.github.com/orgs/:org/memberships/:username\", ({ params: { username } }) => {","score":{"reward":1.932,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":76.50153846153849,"syllables":18,"sentences":1,"score":0.8349846153846151},"multiplier":1,"relevance":0.7}},{"id":1695050646,"content":"We should not use real endpoints. If it is to put dummy values, then set something that doesn't exists. If it is to actually reach a db, you have 2 options:\r\n- mock Supabase library (efficient but tedious)\r\n- intercept requests with `msw` (longer to do but easier to use on the long run from my experience)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1695050646","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -17,8 +17,9 @@ type Sender = Context[\"payload\"][\"sender\"];\n \n const octokit = jest.requireActual(\"@octokit/rest\");\n \n-const url = process.env.SUPABASE_URL;\n-const key = process.env.SUPABASE_KEY;\n+const url = \"https://sbxscxthunnhozvgtshx.supabase.co\";","score":{"reward":5.44,"formatting":{"content":{"p":{"score":0,"elementCount":3},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2}},"result":0.2},"priority":2,"words":{"wordCount":55,"wordValue":0.1,"result":2.46},"readability":{"fleschKincaid":66.71030303030307,"syllables":79,"sentences":3,"score":0.9328969696969693},"multiplier":1,"relevance":0.8}},{"id":1696143361,"content":"This default is not proper since `maxConcurrentTask` should have its own default, not inside the parent object.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1696143361","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -24,10 +26,33 @@ export const startStopSchema = T.Object({\n   ),\n   miscellaneous: T.Object(\n     {\n-      maxConcurrentTasks: T.Number(),\n       startRequiresWallet: T.Boolean(),\n+      maxConcurrentTasks: T.Array(\n+        T.Object({\n+          role: userRoleSchema,\n+          limit: T.Integer(),\n+        })\n+      ),\n     },\n-    { default: { maxConcurrentTasks: 3, startRequiresWallet: true } }\n+    {\n+      default: {\n+        maxConcurrentTasks: [","score":{"reward":2.88,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":74.27000000000001,"syllables":22,"sentences":1,"score":0.8573},"multiplier":1,"relevance":0.9}},{"id":1696355457,"content":"Looks like a public key, and that URL is not under our org. But we should avoid committing these anyway.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1696355457","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -17,8 +17,9 @@ type Sender = Context[\"payload\"][\"sender\"];\n \n const octokit = jest.requireActual(\"@octokit/rest\");\n \n-const url = process.env.SUPABASE_URL;\n-const key = process.env.SUPABASE_KEY;\n+const url = \"https://sbxscxthunnhozvgtshx.supabase.co\";\n+const key =\n+  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InNieHNjeHRodW5uaG96dmd0c2h4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3MTE0Nzg2MDcsImV4cCI6MjAyNzA1NDYwN30.-DstUzIspsRlLQPHR1da6nY5GBBs5I4Wd0jlK5zFzyU\";","score":{"reward":3.276,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":82.47500000000001,"syllables":27,"sentences":2,"score":0.7752499999999999},"multiplier":1,"relevance":0.9}},{"id":1697926672,"content":"Ideally this should be picked up from the configuration or the test so the string is dynamic maybe, so if we change it the tests doesn't fail? Forget about this if it's too much work.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1697926672","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -208,12 +209,12 @@ describe(\"User start/stop\", () => {\n       await userStartStop(context);\n     } catch (error) {\n       if (error instanceof Error) {\n-        expect(error.message).toEqual(\"Too many assigned issues, you have reached your max limit of 3 issues.\");\n+        expect(error.message).toEqual(\"Too many assigned issues, you have reached your max limit of 2 issues.\");","score":{"reward":2.08,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":80.59263513513515,"syllables":47,"sentences":2,"score":0.7940736486486485},"multiplier":1,"relevance":0.4}},{"id":1699467692,"content":"I feel like this is not properly named given what it returns.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1699467692","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,25 @@\n+import { Context } from \"../../types\";\n+\n+interface MatchingUserProps {\n+  role: string;\n+  limit: number;\n+}\n+\n+export async function getUserRole(context: Context, user: string): Promise<MatchingUserProps> {","score":{"reward":2.048,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":81.85500000000002,"syllables":16,"sentences":1,"score":0.7814499999999999},"multiplier":1,"relevance":0.8}},{"id":1699468244,"content":"Probably should come from the logger","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1699468244","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -37,21 +38,18 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   // check max assigned issues\n \n   const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);\n-  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed: ${JSON.stringify(openedPullRequests)}`);\n+  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed`, {\n+    openedPullRequests: openedPullRequests.map((i) => i.html_url),\n+  });\n \n   const assignedIssues = await getAssignedIssues(context, sender.login);\n-  logger.info(\"Max issue allowed is\", { maxConcurrentTasks });\n+  logger.info(\"Max issues allowed is\", { limit: maxTask.limit, assigned: assignedIssues.length });\n \n   // check for max and enforce max\n \n-  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks) {\n-    const log = logger.error(\"Too many assigned issues, you have reached your max limit\", {\n-      assignedIssues: assignedIssues.length,\n-      openedPullRequests: openedPullRequests.length,\n-      maxConcurrentTasks,\n-    });\n-    await addCommentToIssue(context, log?.logMessage.diff as string);\n-    throw new Error(`Too many assigned issues, you have reached your max limit of ${maxConcurrentTasks} issues.`);\n+  if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxTask.limit) {\n+    await addCommentToIssue(context, \"```diff\\n! Too many assigned issues, you have reached your max limit.\\n```\");","score":{"reward":0.924,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":73.84500000000001,"syllables":9,"sentences":1,"score":0.8615499999999998},"multiplier":1,"relevance":0.6}},{"id":1708483683,"content":"This is called `getUserRole` but it returns a variable named `smallestTask`, I am a bit confused","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1708483683","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,25 @@\n+import { Context } from \"../../types\";\n+\n+interface MatchingUserProps {\n+  role: string;\n+  limit: number;\n+}\n+\n+export async function getUserRole(context: Context, user: string): Promise<MatchingUserProps> {","score":{"reward":2.272,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":83.85357142857143,"syllables":18,"sentences":1,"score":0.7614642857142857},"multiplier":1,"relevance":0.8}},{"id":1708484263,"content":"```suggestion\r\n    openedPullRequests: openedPullRequests.map((pr) => pr.html_url),\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1708484263","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -37,21 +38,19 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   // check max assigned issues\n \n   const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);\n-  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed: ${JSON.stringify(openedPullRequests)}`);\n+  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed`, {\n+    openedPullRequests: openedPullRequests.map((i) => i.html_url),","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.5}},{"id":1708489295,"content":"Should probably using `rest`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1708489295","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -127,37 +133,28 @@ export async function addAssignees(context: Context, issueNo: number, assignees:\n   }\n }\n \n-export async function getAllPullRequests(context: Context, state: \"open\" | \"closed\" | \"all\" = \"open\") {\n-  const payload = context.payload;\n+export async function getAllPullRequests(context: Context, state: \"open\" | \"closed\" | \"all\" = \"open\", username: string) {\n+  const { payload } = context;\n \n   try {\n-    return (await context.octokit.paginate(context.octokit.rest.pulls.list, {\n-      owner: payload.repository.owner.login,\n-      repo: payload.repository.name,\n-      state,\n+    return (await context.octokit.paginate(context.octokit.search.issuesAndPullRequests, {\n+      q: `org:${payload.repository.owner.login} author:${username} state:${state}`,\n       per_page: 100,\n-    })) as PullRequest[];\n+      order: \"desc\",\n+      sort: \"created\",\n+    })) as GitHubIssueSearch[\"items\"];\n   } catch (err: unknown) {\n     context.logger.error(\"Fetching all pull requests failed!\", { error: err as Error });\n     return [];\n   }\n }\n \n-export async function getAllPullRequestReviews(context: Context, pullNumber: number, format: \"raw\" | \"html\" | \"text\" | \"full\" = \"raw\") {\n-  const payload = context.payload;\n-\n-  const owner = payload.repository.owner.login;\n-  const repo = payload.repository.name;\n-\n+export async function getAllPullRequestReviews(context: Context, pullNumber: number, owner: string, repo: string) {\n   try {\n-    return (await context.octokit.paginate(context.octokit.rest.pulls.listReviews, {","score":{"reward":0.602,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":34.59000000000003,"syllables":6,"sentences":1,"score":0.7459000000000003},"multiplier":1,"relevance":0.7}},{"id":1708490244,"content":"Can be done in one instruction. What happens if the url is not from an organization?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1708490244","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -174,7 +171,9 @@ export async function getAvailableOpenedPullRequests(context: Context, username:\n \n   for (let i = 0; i < openedPullRequests.length; i++) {\n     const openedPullRequest = openedPullRequests[i];\n-    const reviews = await getAllPullRequestReviews(context, openedPullRequest.number);\n+    const owner = openedPullRequest.html_url.split(\"/\")[3];\n+    const repo = openedPullRequest.html_url.split(\"/\")[4];","score":{"reward":2.544,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":77.1025,"syllables":23,"sentences":2,"score":0.8289749999999999},"multiplier":1,"relevance":0.8}},{"id":1714657880,"content":"Wouldn't this mean that if you have no assigned issues but plenty of open pull-request, you would get limited even if you actually are assigned to nothing?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1714657880","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -37,21 +38,19 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   // check max assigned issues\n \n   const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);\n-  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed: ${JSON.stringify(openedPullRequests)}`);\n+  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed`, {\n+    openedPullRequests: openedPullRequests.map((pr) => pr.html_url),\n+  });\n \n   const assignedIssues = await getAssignedIssues(context, sender.login);\n-  logger.info(\"Max issue allowed is\", { maxConcurrentTasks });\n+  logger.info(\"Max issues allowed is\", { limit: maxTask.limit, assigned: assignedIssues.length });\n \n   // check for max and enforce max\n \n-  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks) {\n-    const log = logger.error(\"Too many assigned issues, you have reached your max limit\", {\n-      assignedIssues: assignedIssues.length,\n-      openedPullRequests: openedPullRequests.length,\n-      maxConcurrentTasks,\n-    });\n+  if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxTask.limit) {","score":{"reward":4.32,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":60.71034482758621,"syllables":40,"sentences":1,"score":0.9928965517241379},"multiplier":1,"relevance":0.9}},{"id":1714658852,"content":"Is the filter needed since the search specifies `is:open`? Might wanna add `is:pr` as well to the query.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1714658852","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,26 +1,32 @@\n import { Context } from \"../types/context\";\n-import { Issue, ISSUE_TYPE, PullRequest, Review } from \"../types/payload\";\n+import { GitHubIssueSearch, Review } from \"../types/payload\";\n import { getLinkedPullRequests, GetLinkedResults } from \"./get-linked-prs\";\n \n export function isParentIssue(body: string) {\n   const parentPattern = /-\\s+\\[( |x)\\]\\s+#\\d+/;\n   return body.match(parentPattern);\n }\n \n-export async function getAssignedIssues(context: Context, username: string): Promise<Issue[]> {\n+export async function getAssignedIssues(context: Context, username: string): Promise<GitHubIssueSearch[\"items\"]> {\n   const payload = context.payload;\n \n   try {\n-    return await context.octokit.paginate(\n-      context.octokit.issues.listForRepo,\n-      {\n-        owner: payload.repository.owner.login,\n-        repo: payload.repository.name,\n-        state: ISSUE_TYPE.OPEN,\n+    return await context.octokit\n+      .paginate(context.octokit.search.issuesAndPullRequests, {\n+        q: `org:${payload.repository.owner.login} assignee:${username} is:open`,\n         per_page: 100,\n-      },\n-      ({ data: issues }) => issues.filter((issue: Issue) => !issue.pull_request && issue.assignee && issue.assignee.login === username)\n-    );\n+        order: \"desc\",\n+        sort: \"created\",\n+      })\n+      .then((issues) =>\n+        issues.filter((issue) => {","score":{"reward":2.48,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":87.67750000000001,"syllables":21,"sentences":2,"score":0.7232249999999999},"multiplier":1,"relevance":0.8}},{"id":1714676491,"content":"I also agree with you. I guess any pull-request should have a related issue specification, I was thinking more when we open a bunch of PRs that actually are quick fixes. But I guess it is better to secure it that way.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1714676491","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -37,21 +38,19 @@ export async function start(context: Context, issue: Context[\"payload\"][\"issue\"]\n   // check max assigned issues\n \n   const openedPullRequests = await getAvailableOpenedPullRequests(context, sender.login);\n-  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed: ${JSON.stringify(openedPullRequests)}`);\n+  logger.info(`Opened Pull Requests with approved reviews or with no reviews but over 24 hours have passed`, {\n+    openedPullRequests: openedPullRequests.map((pr) => pr.html_url),\n+  });\n \n   const assignedIssues = await getAssignedIssues(context, sender.login);\n-  logger.info(\"Max issue allowed is\", { maxConcurrentTasks });\n+  logger.info(\"Max issues allowed is\", { limit: maxTask.limit, assigned: assignedIssues.length });\n \n   // check for max and enforce max\n \n-  if (assignedIssues.length - openedPullRequests.length >= maxConcurrentTasks) {\n-    const log = logger.error(\"Too many assigned issues, you have reached your max limit\", {\n-      assignedIssues: assignedIssues.length,\n-      openedPullRequests: openedPullRequests.length,\n-      maxConcurrentTasks,\n-    });\n+  if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxTask.limit) {","score":{"reward":3.36,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":78.17503875968995,"syllables":58,"sentences":3,"score":0.8182496124031005},"multiplier":1,"relevance":0.6}},{"id":1714698562,"content":"I think it is redundant and error prone if we ever change the query later, since the same check is ran twice. Hopefully the API should be reliable.\r\nI missed the `!` you are right, `is:issue` would be the right call.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1714698562","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,26 +1,32 @@\n import { Context } from \"../types/context\";\n-import { Issue, ISSUE_TYPE, PullRequest, Review } from \"../types/payload\";\n+import { GitHubIssueSearch, Review } from \"../types/payload\";\n import { getLinkedPullRequests, GetLinkedResults } from \"./get-linked-prs\";\n \n export function isParentIssue(body: string) {\n   const parentPattern = /-\\s+\\[( |x)\\]\\s+#\\d+/;\n   return body.match(parentPattern);\n }\n \n-export async function getAssignedIssues(context: Context, username: string): Promise<Issue[]> {\n+export async function getAssignedIssues(context: Context, username: string): Promise<GitHubIssueSearch[\"items\"]> {\n   const payload = context.payload;\n \n   try {\n-    return await context.octokit.paginate(\n-      context.octokit.issues.listForRepo,\n-      {\n-        owner: payload.repository.owner.login,\n-        repo: payload.repository.name,\n-        state: ISSUE_TYPE.OPEN,\n+    return await context.octokit\n+      .paginate(context.octokit.search.issuesAndPullRequests, {\n+        q: `org:${payload.repository.owner.login} assignee:${username} is:open`,\n         per_page: 100,\n-      },\n-      ({ data: issues }) => issues.filter((issue: Issue) => !issue.pull_request && issue.assignee && issue.assignee.login === username)\n-    );\n+        order: \"desc\",\n+        sort: \"created\",\n+      })\n+      .then((issues) =>\n+        issues.filter((issue) => {","score":{"reward":3.682,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":2,"words":{"wordCount":39,"wordValue":0.1,"result":2.15},"readability":{"fleschKincaid":85.17846153846155,"syllables":50,"sentences":3,"score":0.7482153846153845},"multiplier":1,"relevance":0.7}},{"id":1717069749,"content":"@jordan-ae this has not been taken care of. If the configuration looks like\r\n```yml\r\n        miscellaneous:\r\n          # maxConcurrentTasks: []\r\n          startRequiresWallet: true\r\n```\r\nIt crashes with the message\r\n```\r\n        \"Error: Unable to decode value as it does not match the expected schema\"\r\n```\r\nbecause no default value is set. Also, it seems to crash with an empty array.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1717069749","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -24,10 +26,33 @@ export const startStopSchema = T.Object({\n   ),\n   miscellaneous: T.Object(\n     {\n-      maxConcurrentTasks: T.Number(),\n       startRequiresWallet: T.Boolean(),\n+      maxConcurrentTasks: T.Array(\n+        T.Object({\n+          role: userRoleSchema,\n+          limit: T.Integer(),\n+        })\n+      ),\n     },\n-    { default: { maxConcurrentTasks: 3, startRequiresWallet: true } }\n+    {\n+      default: {\n+        maxConcurrentTasks: [","score":{"reward":4.5,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":2,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":78.38460784313727,"syllables":47,"sentences":3,"score":0.8161539215686272},"multiplier":1,"relevance":0.9}},{"id":1720963917,"content":"Should be lowercase","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1720963917","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -40,8 +40,11 @@ To configure your Ubiquibot to run this plugin, add the following to the `.ubiqu\n       reviewDelayTolerance: 86000\n       taskStaleTimeoutDuration: 2580000\n     miscellaneous:\n-      maxConcurrentTasks: 3\n-      startRequiresWallet: true # default is true\n+      maxConcurrentTasks: # Default concurrent task limits per role.\n+        Admin: 10","score":{"reward":0.63,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":62.79000000000002,"syllables":5,"sentences":1,"score":0.9720999999999997},"multiplier":1,"relevance":0.7}},{"id":1720964137,"content":"should be lower case as well","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1720964137","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -23,12 +25,21 @@ export const startStopSchema = T.Object({\n   ),\n   miscellaneous: T.Object(\n     {\n-      maxConcurrentTasks: T.Number(),\n       startRequiresWallet: T.Boolean(),\n+      maxConcurrentTasks: T.Record(T.String(), T.Integer()),\n     },\n-    { default: { maxConcurrentTasks: 3, startRequiresWallet: true } }\n+    {\n+      default: {\n+        maxConcurrentTasks: {\n+          Admin: 20,","score":{"reward":1.106,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":102.045,"syllables":7,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":1722608983,"content":"```suggestion\r\n      default: {}\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1722608983","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -23,12 +25,21 @@ export const startStopSchema = T.Object({\n   ),\n   miscellaneous: T.Object(\n     {\n-      maxConcurrentTasks: T.Number(),\n       startRequiresWallet: T.Boolean(),\n+      maxConcurrentTasks: T.Record(T.String(), T.Integer()),\n     },\n-    { default: { maxConcurrentTasks: 3, startRequiresWallet: true } }\n+    {\n+      default: {","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.6}},{"id":1722609126,"content":"```suggestion\r\n      startRequiresWallet: T.Boolean({ default: true }}),\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1722609126","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -23,12 +25,21 @@ export const startStopSchema = T.Object({\n   ),\n   miscellaneous: T.Object(\n     {\n-      maxConcurrentTasks: T.Number(),\n       startRequiresWallet: T.Boolean(),","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.7}},{"id":1722609466,"content":"```suggestion\r\n      maxConcurrentTasks: T.Record(T.String(), T.Integer(), { default: { admin: 20, member: 10, contributor: 2 } }),\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1722609466","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -23,12 +25,21 @@ export const startStopSchema = T.Object({\n   ),\n   miscellaneous: T.Object(\n     {\n-      maxConcurrentTasks: T.Number(),\n       startRequiresWallet: T.Boolean(),\n+      maxConcurrentTasks: T.Record(T.String(), T.Integer()),","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.8}},{"id":1732511926,"content":"This very likely doesn't compile.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1732511926","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -23,12 +25,21 @@ export const startStopSchema = T.Object({\n   ),\n   miscellaneous: T.Object(\n     {\n-      maxConcurrentTasks: T.Number(),\n-      startRequiresWallet: T.Boolean(),\n+      startRequiresWallet: T.Boolean({ default: true }}),\n+      maxConcurrentTasks: T.Record(T.String(), T.Integer(), { default: { admin: 20, member: 10, contributor: 2 } }),\n     },\n-    { default: { maxConcurrentTasks: 3, startRequiresWallet: true } }\n+    {\n+      default: {}","score":{"reward":1.232,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":45.64500000000001,"syllables":11,"sentences":1,"score":0.8564500000000002},"multiplier":1,"relevance":0.8}},{"id":1734576891,"content":"This should be removed, this is not event part of the arguments of `Type.Object` proper options.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1734576891","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -23,12 +25,20 @@ export const startStopSchema = T.Object({\n   ),\n   miscellaneous: T.Object(\n     {\n-      maxConcurrentTasks: T.Number(),\n-      startRequiresWallet: T.Boolean(),\n+      startRequiresWallet: T.Boolean({ default: true }),\n+      maxConcurrentTasks: T.Record(T.String(), T.Integer(), { default: { admin: 20, member: 10, contributor: 2 } }),\n     },\n-    { default: { maxConcurrentTasks: 3, startRequiresWallet: true } }\n+    {\n+      default: {},\n+        maxConcurrentTasks: {","score":{"reward":2.448,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":73.17000000000003,"syllables":21,"sentences":1,"score":0.8682999999999997},"multiplier":1,"relevance":0.8}},{"id":1734579951,"content":"Most likely we can make sure that the Integer value is greater than `0` because it wouldn't make sense.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1734579951","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -23,12 +25,20 @@ export const startStopSchema = T.Object({\n   ),\n   miscellaneous: T.Object(\n     {\n-      maxConcurrentTasks: T.Number(),\n-      startRequiresWallet: T.Boolean(),\n+      startRequiresWallet: T.Boolean({ default: true }),\n+      maxConcurrentTasks: T.Record(T.String(), T.Integer(), { default: { admin: 20, member: 10, contributor: 2 } }),","score":{"reward":2.534,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":71.78157894736843,"syllables":26,"sentences":1,"score":0.8821842105263157},"multiplier":1,"relevance":0.7}},{"id":1737621622,"content":"Why specifically two dashes are escaped, but not single ones?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1737621622","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -42,5 +42,8 @@ export async function startStopTask(inputs: PluginInputs, env: Env) {\n }\n \n function sanitizeMetadata(obj: LogReturn[\"metadata\"]): string {\n-  return JSON.stringify(obj, null, 2).replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/--/g, \"&#45;&#45;\");\n+  return JSON.stringify(obj, null, 2)\n+    .replace(/</g, \"&lt;\")\n+    .replace(/>/g, \"&gt;\")\n+    .replace(/--/g, \"&#45;&#45;\")","score":{"reward":1.404,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":61.32500000000002,"syllables":16,"sentences":1,"score":0.9867499999999998},"multiplier":1,"relevance":0.6}},{"id":1737622083,"content":"Is this Prettier correct?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1737622083","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,13 +15,13 @@ export const startStopSchema = T.Object(\n   {\n     reviewDelayTolerance: T.String({ default: \"1 Day\" }),\n     taskStaleTimeoutDuration: T.String({ default: \"30 Days\" }),\n-    maxConcurrentTasks: T.Number({ default: 3 }),\n     startRequiresWallet: T.Boolean({ default: true }),\n+    maxConcurrentTasks: T.Record(T.String(), T.Integer(), { default: { admin: 20, member: 10, contributor: 2 } }),\n   },\n   {\n-    default: {},\n-  }\n+    default: {}","score":{"reward":0.55,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.5}},{"id":1744793937,"content":"```suggestion\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1744793937","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,15 +1,18 @@\n-import { Context, ISSUE_TYPE, Label } from \"../../types\";\n+","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.5}},{"id":1744794726,"content":"The example configuration seems to be improperly indented.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1744794726","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":1.044,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":8.365000000000009,"syllables":18,"sentences":1,"score":0.4836500000000001},"multiplier":1,"relevance":0.6}},{"id":1744795427,"content":"```suggestion\r\n    default: {},\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1744795427","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,13 +15,13 @@ export const startStopSchema = T.Object(\n   {\n     reviewDelayTolerance: T.String({ default: \"1 Day\" }),\n     taskStaleTimeoutDuration: T.String({ default: \"30 Days\" }),\n-    maxConcurrentTasks: T.Number({ default: 3 }),\n     startRequiresWallet: T.Boolean({ default: true }),\n+    maxConcurrentTasks: T.Record(T.String(), T.Integer(), { default: { admin: 20, member: 10, contributor: 2 } }),\n   },\n   {\n-    default: {},\n-  }\n+    default: {}","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.5}},{"id":1744795658,"content":"```suggestion\r\n  }\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1744795658","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,14 +15,14 @@ export const startStopSchema = T.Object(\n   {\n     reviewDelayTolerance: T.String({ default: \"1 Day\" }),\n     taskStaleTimeoutDuration: T.String({ default: \"30 Days\" }),\n-    maxConcurrentTasks: T.Number({ default: 3 }),\n     startRequiresWallet: T.Boolean({ default: true }),\n+    maxConcurrentTasks: T.Record(T.String(), T.Integer(), { default: { admin: 20, member: 10, contributor: 2 } }),\n     emptyWalletText: T.String({ default: \"Please set your wallet address with the /wallet command first and try again.\" }),\n   },\n   {\n-    default: {},\n-  }\n+    default: {}\n+  },","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":2,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.5}},{"id":1744943000,"content":"I do not see this in the plugin inputs. What is it?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1744943000","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -36,9 +36,13 @@ To configure your Ubiquibot to run this plugin, add the following to the `.ubiqu\n   command: \"\\/start|\\/stop\"\n   example: \"/start\" # or \"/stop\"\n   with:\n+    timers:","score":{"reward":1.89,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":102.045,"syllables":14,"sentences":2,"score":1},"multiplier":1,"relevance":0.7}},{"id":1747181964,"content":"I think the code would be clearer if the whole logic was within a `if` block checking the `user === sender` to avoid the two ternaries above.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1747181964","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -141,12 +143,22 @@ async function handleTaskLimitChecks(username: string, context: Context, maxConc\n   // check for max and enforce max\n \n   if (Math.abs(assignedIssues.length - openedPullRequests.length) >= maxConcurrentTasks) {\n-    const log = logger.error(username === sender ? \"You have reached your max task limit\" : `${username} has reached their max task limit`, {\n-      assignedIssues: assignedIssues.length,\n-      openedPullRequests: openedPullRequests.length,\n-      maxConcurrentTasks,\n-    });\n-    await addCommentToIssue(context, log?.logMessage.diff as string);\n+    const logMessage = username !== sender \n+      ? `${username} has reached their max task limit`\n+      : null;\n+    \n+    const log = logMessage \n+      ? logger.error(logMessage, {\n+          assignedIssues: assignedIssues.length,\n+          openedPullRequests: openedPullRequests.length,\n+          maxConcurrentTasks,\n+        })\n+      : null;\n+  \n+    if (log && log.logMessage.diff) {","score":{"reward":3.312,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":65.78565217391306,"syllables":32,"sentences":1,"score":0.9421434782608693},"multiplier":1,"relevance":0.8}},{"id":1753064313,"content":"`Issue` import is not used after your changes, please remove it.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1753064313","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":1.32,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":86.70500000000001,"syllables":13,"sentences":1,"score":0.7329499999999999},"multiplier":1,"relevance":0.6}},{"id":1756524876,"content":"@0x4007 we can change UI assignments to follow the same logic as `/start` so user would get unassigned if they are doing too many tasks, even when forcing it through the UI.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1756524876","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -38,7 +38,10 @@ To configure your Ubiquibot to run this plugin, add the following to the `.ubiqu\n   with:\n     reviewDelayTolerance: \"3 Days\"\n     taskStaleTimeoutDuration: \"30 Days\"\n-    maxConcurrentTasks: 3\n+    maxConcurrentTasks: # Default concurrent task limits per role.\n+      admin: 10","score":{"reward":3.472,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":63.47967741935486,"syllables":41,"sentences":1,"score":0.9652032258064515},"multiplier":1,"relevance":0.7}},{"id":1756534976,"content":"Could you totally remove it?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#discussion_r1756534976","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -16,7 +16,7 @@ export const startStopSchema = T.Object(\n     reviewDelayTolerance: T.String({ default: \"1 Day\" }),\n     taskStaleTimeoutDuration: T.String({ default: \"30 Days\" }),\n     startRequiresWallet: T.Boolean({ default: true }),\n-    maxConcurrentTasks: T.Record(T.String(), T.Integer(), { default: { admin: 20, member: 10, contributor: 2 } }),\n+    maxConcurrentTasks: T.Record(T.String(), T.Integer(), { default: { admin: Infinity, member: 10, contributor: 2 } }),","score":{"reward":0.816,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":66.40000000000003,"syllables":8,"sentences":1,"score":0.9359999999999996},"multiplier":1,"relevance":0.6}},{"id":2227633011,"content":"@jordan-ae Please rebase, I just merged https://github.com/ubiquibot/command-start-stop/pull/1 in.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2227633011","commentType":"PULL_COLLABORATOR","score":{"reward":3.066,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":78.77220588235295,"syllables":24,"sentences":2,"score":0.8122779411764705},"multiplier":1,"relevance":0.7}},{"id":2228579931,"content":"It would be nice to have related unit tests regarding the configuration settings. Also, the max value should be configurable based on the user's association level (collaborator, contributor, member etc.).","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2228579931","commentType":"PULL_COLLABORATOR","score":{"reward":4.23,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":35.333763440860224,"syllables":59,"sentences":3,"score":0.7533376344086022},"multiplier":1,"relevance":0.9}},{"id":2229901655,"content":"I think the only valid file to ignore is the entry point. I actually solve that by mentioning the entry point within the `package.json` so Knip doesn't complain and evaluates everything correctly.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2229901655","commentType":"PULL_COLLABORATOR","score":{"reward":2.51,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":55.763750000000016,"syllables":51,"sentences":2,"score":0.9576375000000001},"multiplier":1,"relevance":0.5}},{"id":2254355836,"content":"@jordan-ae any news on this task?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2254355836","commentType":"PULL_COLLABORATOR","score":{"reward":0.36,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":103.04428571428575,"syllables":8,"sentences":1,"score":1},"multiplier":1,"relevance":0.2}},{"id":2288927314,"content":"I think the `README` does not reflect the changes that were made to the configuration. Also, since the configuration is an array, this means doubloons are possible. Either the `role` should be used as a key to make it unique, either a `Decode` to check that there is no duplicate.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2288927314","commentType":"PULL_COLLABORATOR","score":{"reward":5.328,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":47,"wordValue":0.1,"result":2.33},"readability":{"fleschKincaid":70.33333333333334,"syllables":67,"sentences":3,"score":0.8966666666666666},"multiplier":1,"relevance":0.9}},{"id":2290591294,"content":"@Keyrxng yes you are correct. I would have used `T.Record` to avoid needed to check for duplicates in a list and avoid the need to use `Decode` while ensuring every item is unique. This would require not so much refractor except changing the list loop by `Object.entries` to loop on the key / values.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2290591294","commentType":"PULL_COLLABORATOR","score":{"reward":4.8,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":50,"wordValue":0.1,"result":2.38},"readability":{"fleschKincaid":73.17033333333337,"syllables":69,"sentences":3,"score":0.8682966666666663},"multiplier":1,"relevance":0.8}},{"id":2308891666,"content":"@jordan-ae Please resolve the conflicts and the comments so this can be merged in.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2308891666","commentType":"PULL_COLLABORATOR","score":{"reward":1.184,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":84.45000000000003,"syllables":19,"sentences":1,"score":0.7554999999999997},"multiplier":1,"relevance":0.4}},{"id":2315469689,"content":"@jordan-ae How complicated is the merge? When it gets too messy what I do is keep a diff of what I changed, accept all the incoming merges, and redo again my changes manually (if they are not too important). Otherwise it is too much headache.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2315469689","commentType":"PULL_COLLABORATOR","score":{"reward":1.728,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":46,"wordValue":0.1,"result":2.31},"readability":{"fleschKincaid":77.24557971014494,"syllables":62,"sentences":3,"score":0.8275442028985506},"multiplier":1,"relevance":0.3}},{"id":2330797863,"content":"I tested this and it seems to double post when you get above your task limit: https://github.com/Meniole/command-start-stop/issues/14","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2330797863","commentType":"PULL_COLLABORATOR","score":{"reward":5.04,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":2,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":82.47550000000001,"syllables":33,"sentences":2,"score":0.7752449999999999},"multiplier":1,"relevance":0.9}},{"id":2342537167,"content":"@jordan-ae You should enable `Prettier` on save because many files are not properly formatted. Run `yarn format:prettier` to fix them all at once.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9#issuecomment-2342537167","commentType":"PULL_COLLABORATOR","score":{"reward":2.674,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":2,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":75.32035714285716,"syllables":30,"sentences":2,"score":0.8467964285714283},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2177803020,"effect":{"addition":0,"deletion":0},"reward":0,"priority":2},{"reviewId":2192679968,"effect":{"addition":56,"deletion":9},"reward":1.3,"priority":2},{"reviewId":2204664875,"effect":{"addition":189,"deletion":72},"reward":5.22,"priority":2},{"reviewId":2206387820,"effect":{"addition":26,"deletion":67},"reward":1.86,"priority":2},{"reviewId":2206712107,"effect":{"addition":0,"deletion":0},"reward":0,"priority":2},{"reviewId":2209214092,"effect":{"addition":115,"deletion":84},"reward":3.98,"priority":2},{"reviewId":2211694071,"effect":{"addition":594,"deletion":296},"reward":17.8,"priority":2},{"reviewId":2226772214,"effect":{"addition":3,"deletion":2},"reward":0.1,"priority":2},{"reviewId":2234488061,"effect":{"addition":6,"deletion":7},"reward":0.26,"priority":2},{"reviewId":2238406345,"effect":{"addition":0,"deletion":0},"reward":0,"priority":2},{"reviewId":2244294812,"effect":{"addition":647,"deletion":259},"reward":18.12,"priority":2},{"reviewId":2246856775,"effect":{"addition":7,"deletion":7},"reward":0.28,"priority":2},{"reviewId":2262759819,"effect":{"addition":3,"deletion":3},"reward":0.12,"priority":2},{"reviewId":2266097393,"effect":{"addition":4,"deletion":5},"reward":0.18,"priority":2},{"reviewId":2270774846,"effect":{"addition":319,"deletion":167},"reward":9.72,"priority":2},{"reviewId":2281838214,"effect":{"addition":434,"deletion":216},"reward":13,"priority":2},{"reviewId":2281840354,"effect":{"addition":0,"deletion":0},"reward":0,"priority":2},{"reviewId":2281840667,"effect":{"addition":434,"deletion":216},"reward":13,"priority":2},{"reviewId":2282068354,"effect":{"addition":4,"deletion":5},"reward":0.18,"priority":2},{"reviewId":2286363910,"effect":{"addition":16,"deletion":7},"reward":0.46,"priority":2},{"reviewId":2295195764,"effect":{"addition":153,"deletion":108},"reward":5.22,"priority":2},{"reviewId":2299654340,"effect":{"addition":198,"deletion":86},"reward":5.68,"priority":2},{"reviewId":2299796841,"effect":{"addition":2,"deletion":18},"reward":0.4,"priority":2}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/9"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 200 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>23</td><td>96.88</td></tr><tr><td>Issue</td><td>Comment</td><td>5</td><td>0</td></tr><tr><td>Review</td><td>Comment</td><td>51</td><td>105.75</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_94.json","json":{"obeys":{"userId":131892818,"total":75,"task":{"reward":75,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 75 XP ]</a>&nbsp;</h3><h6>@obeys</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":75,"userId":4975670,"comments":[{"id":2322843361,"content":"It's an exponent not multiplier","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/94#issuecomment-2322843361","commentType":"ISSUE_AUTHOR","score":{"reward":2.133,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":59.745000000000005,"syllables":10,"sentences":1,"score":0.9974500000000001},"multiplier":1,"relevance":0.9}},{"id":2482812547,"content":"### **Goal**\r\n- Prevent verbosity from being overly rewarded.\r\n### **Task**\r\n**Quantitative Scoring:**\r\n   - **Word Count Scoring:**\r\n     - Apply a power function to word count:  \r\n       `Reward = Base Rate * (Word Count ^ 0.85)`\r\n     - Ensure diminishing returns for longer comments.\r\n     - Make the exponent configurable, default to `0.85`.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/94","commentType":"ISSUE_SPECIFICATION","score":{"reward":5.11,"formatting":{"content":{"h3":{"score":1,"elementCount":2},"ul":{"score":0,"elementCount":3},"li":{"score":0.1,"elementCount":5},"p":{"score":0,"elementCount":6}},"result":2.5},"priority":1,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":32.56066666666669,"syllables":49,"sentences":3,"score":0.725606666666667},"multiplier":1,"relevance":1}},{"id":1741239672,"content":"I'm not quite sure but I feel like word count specifically makes the most sense.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#discussion_r1741239672","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -84,6 +72,35 @@ export class FormattingEvaluatorModule implements Module {\n     return result;\n   }\n \n+  private _calculateFormattingTotal(\n+    formatting: ReturnType<typeof this._getFormattingScore>[\"formatting\"],\n+    multiplierFactor: Multiplier\n+  ): Decimal {\n+    if (!formatting) return new Decimal(0);\n+\n+    return Object.values(formatting)\n+      .reduce((acc, curr) => {\n+        let sum = new Decimal(0);\n+\n+        for (const symbol of Object.keys(curr.symbols)) {\n+          const count = new Decimal(curr.symbols[symbol].count);\n+          const symbolMultiplier = new Decimal(curr.symbols[symbol].multiplier);\n+          const formattingElementScore = new Decimal(curr.score);\n+          const exponent = this._wordCountExponent;\n+\n+          sum = sum.add(\n+            count\n+              .pow(exponent) // (count^exponent)\n+              .mul(symbolMultiplier) // symbol multiplier\n+              .mul(formattingElementScore) // comment type multiplier\n+              .mul(multiplierFactor.multiplier) // formatting element score\n+          );","score":{"reward":1.872,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":84.845,"syllables":20,"sentences":1,"score":0.75155},"multiplier":1,"relevance":0.4}},{"id":1741691755,"content":"I had a proposal for \"segments\" which would serve as aliases for word regex, sentence regex, paragraph regex, entire comment regex. Perhaps we can rely on that as the main \"word counter.\"\r\nUltimately I think we should strive to make the config user friendly/idiot proof but I think its impossible to cover every situation for abuse proactively. I think we should define \"best practices\" and hope that partners don't shoot themselves in the foot with conflicting/bad configs.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#discussion_r1741691755","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -84,6 +72,35 @@ export class FormattingEvaluatorModule implements Module {\n     return result;\n   }\n \n+  private _calculateFormattingTotal(\n+    formatting: ReturnType<typeof this._getFormattingScore>[\"formatting\"],\n+    multiplierFactor: Multiplier\n+  ): Decimal {\n+    if (!formatting) return new Decimal(0);\n+\n+    return Object.values(formatting)\n+      .reduce((acc, curr) => {\n+        let sum = new Decimal(0);\n+\n+        for (const symbol of Object.keys(curr.symbols)) {\n+          const count = new Decimal(curr.symbols[symbol].count);\n+          const symbolMultiplier = new Decimal(curr.symbols[symbol].multiplier);\n+          const formattingElementScore = new Decimal(curr.score);\n+          const exponent = this._wordCountExponent;\n+\n+          sum = sum.add(\n+            count\n+              .pow(exponent) // (count^exponent)\n+              .mul(symbolMultiplier) // symbol multiplier\n+              .mul(formattingElementScore) // comment type multiplier\n+              .mul(multiplierFactor.multiplier) // formatting element score\n+          );","score":{"reward":8.136,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":80,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":56.462500000000034,"syllables":123,"sentences":4,"score":0.9646250000000003},"multiplier":1,"relevance":0.8}},{"id":2326341819,"content":"Use a numbers library like bignumber to handle this.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2326341819","commentType":"PULL_COLLABORATOR","score":{"reward":2.268,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":56.70000000000002,"syllables":15,"sentences":1,"score":0.9670000000000002},"multiplier":1,"relevance":0.7}},{"id":2326814492,"content":"Sure use decimal for all calculations.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2326814492","commentType":"PULL_COLLABORATOR","score":{"reward":1.155,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":45.64500000000001,"syllables":11,"sentences":1,"score":0.8564500000000002},"multiplier":1,"relevance":0.5}},{"id":2346768059,"content":"Not sure if its easy to tell to be honest. How is somebody expected to manually count all their words and complain that there is a discrepancy? We can add a small blurb in the details table if somebody complains.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2346768059","commentType":"PULL_COLLABORATOR","score":{"reward":4.968,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":40,"wordValue":0.1,"result":2.18},"readability":{"fleschKincaid":70.63166666666669,"syllables":58,"sentences":3,"score":0.8936833333333332},"multiplier":1,"relevance":0.6}},{"id":2346841189,"content":"I dont think its something people will notice. We can add if its a problem. I'm just concerned it will lead to more confusion. And if we add too much info it will look bad.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2346841189","commentType":"PULL_COLLABORATOR","score":{"reward":3.735,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":91.95000000000002,"syllables":45,"sentences":4,"score":0.6804999999999999},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2276140883,"effect":{"addition":2985,"deletion":440},"reward":102.75,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 75 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>102.75</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.11</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.133</td></tr><tr><td>Review</td><td>Comment</td><td>6</td><td>22.134</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109\" target=\"_blank\" rel=\"noopener\">#109</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+2985 -440</td><td>3</td><td>102.75</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/94\" target=\"_blank\" rel=\"noopener\">### **Goal**- Prevent verbosity from being overly rewarded.#&hellip;</a></h6></td><td><details><summary>4.2</summary><pre>content:&#13;  content:&#13;    h3:&#13;      score: 1&#13;      elementCount: 2&#13;    ul:&#13;      score: 0&#13;      elementCount: 3&#13;    li:&#13;      score: 0.1&#13;      elementCount: 5&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;  result: 2.5&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>1</td><td>1</td><td>5.11</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/94#issuecomment-2322843361\" target=\"_blank\" rel=\"noopener\">It's an exponent not multiplier</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.133</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#discussion_r1741239672\" target=\"_blank\" rel=\"noopener\">I'm not quite sure but I feel like word count specifically makes&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.872</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#discussion_r1741691755\" target=\"_blank\" rel=\"noopener\">I had a proposal for \"segments\" which would serve as aliases for&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 80&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.8</td><td>3</td><td>8.136</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2326341819\" target=\"_blank\" rel=\"noopener\">Use a numbers library like bignumber to handle this.</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.268</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2326814492\" target=\"_blank\" rel=\"noopener\">Sure use decimal for all calculations.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.155</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2346768059\" target=\"_blank\" rel=\"noopener\">Not sure if its easy to tell to be honest. How is somebody expec&hellip;</a></h6></td><td><details><summary>2.18</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 40&#13;  wordValue: 0.1&#13;  result: 2.18&#13;</pre></details></td><td>0.6</td><td>3</td><td>4.968</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2346841189\" target=\"_blank\" rel=\"noopener\">I dont think its something people will notice. We can add if its&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.5</td><td>3</td><td>3.735</td></tr></tbody></table></details>"},"gentlementlegen":{"total":75,"userId":9807008,"comments":[{"id":2300982939,"content":"If the display is fine as it is then I am good with the code changes.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#pullrequestreview-2300982939","commentType":"PULL_COLLABORATOR","score":{"reward":1.485,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":100.70750000000001,"syllables":17,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}},{"id":1747906957,"content":"Maybe this should not be here since you seem to use it after calling this function\r\nhttps://github.com/ubiquibot/conversation-rewards/pull/109/files#diff-f67f7f3e3b4bebb90033a016828f0d24ef83245ba4b26fdb7a83aa1a09466834R61","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#discussion_r1747906957","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -84,6 +72,35 @@ export class FormattingEvaluatorModule implements Module {\n     return result;\n   }\n \n+  private _calculateFormattingTotal(\n+    formatting: ReturnType<typeof this._getFormattingScore>[\"formatting\"],\n+    multiplierFactor: Multiplier\n+  ): Decimal {\n+    if (!formatting) return new Decimal(0);\n+\n+    return Object.values(formatting)\n+      .reduce((acc, curr) => {\n+        let sum = new Decimal(0);\n+\n+        for (const symbol of Object.keys(curr.symbols)) {\n+          const count = new Decimal(curr.symbols[symbol].count);\n+          const symbolMultiplier = new Decimal(curr.symbols[symbol].multiplier);\n+          const formattingElementScore = new Decimal(curr.score);\n+          const exponent = this._wordCountExponent;\n+\n+          sum = sum.add(\n+            count\n+              .pow(exponent) // (count^exponent)\n+              .mul(symbolMultiplier) // symbol multiplier\n+              .mul(formattingElementScore) // comment type multiplier\n+              .mul(multiplierFactor.multiplier) // formatting element score\n+          );\n+        }\n+        return acc.add(sum);\n+      }, new Decimal(0))\n+      .toDecimalPlaces(2);","score":{"reward":7.776,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":48.999166666666696,"syllables":46,"sentences":2,"score":0.889991666666667},"multiplier":1,"relevance":0.9}},{"id":2323145749,"content":"@cohow Thank you for the PR. I am fine with the changes, please fix the Jest tests that all broke due to the results changing with the formula.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2323145749","commentType":"PULL_COLLABORATOR","score":{"reward":4.557,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":92.91785714285714,"syllables":33,"sentences":2,"score":0.6708214285714286},"multiplier":1,"relevance":0.7}},{"id":2323784771,"content":"@cohow When I want to update them I copy paste the diff of the proper result so I don't have to manually fix all the numbers.\r\nHowever according to your screenshot there are lots of decimals to the results. I don't know if that's what we want.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2323784771","commentType":"PULL_COLLABORATOR","score":{"reward":5.328,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":50,"wordValue":0.1,"result":2.38},"readability":{"fleschKincaid":78.24633333333335,"syllables":66,"sentences":3,"score":0.8175366666666665},"multiplier":1,"relevance":0.6}},{"id":2338118027,"content":"@cohow You mean that your pull-request test fixes depend on another pull-request?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2338118027","commentType":"PULL_COLLABORATOR","score":{"reward":1.764,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":71.76785714285715,"syllables":20,"sentences":1,"score":0.8823214285714285},"multiplier":1,"relevance":0.4}},{"id":2338168154,"content":"After checking the logs, it seems that everything works as expected but since your changes also modified the results the permit urls got changed as well (for example check https://github.com/ubiquibot/conversation-rewards/actions/runs/10753678522/job/29832632935?pr=109#step:4:432) so you should just have to fix the result and every test should pass.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2338168154","commentType":"PULL_COLLABORATOR","score":{"reward":9.984,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":66.4258757062147,"syllables":84,"sentences":3,"score":0.935741242937853},"multiplier":1,"relevance":0.8}},{"id":2339789222,"content":"@cohow Seems that the tests are still failing. I would advise running them locally or on your own repo to avoid having to wait for me revalidating workflows every time.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2339789222","commentType":"PULL_COLLABORATOR","score":{"reward":5.103,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":61.890000000000015,"syllables":46,"sentences":2,"score":0.9810999999999999},"multiplier":1,"relevance":0.7}},{"id":2346664021,"content":"This is probably because you are using your own credentials so the status you see for the other user differs from when Ubiquibot checks the author association, changing the reward results. Also, be aware that there are two results: one comes from the JSON and one comes from the HTML file.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2346664021","commentType":"PULL_COLLABORATOR","score":{"reward":8.37,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":51,"wordValue":0.1,"result":2.4},"readability":{"fleschKincaid":56.54073529411767,"syllables":75,"sentences":2,"score":0.9654073529411766},"multiplier":1,"relevance":0.9}},{"id":2346765171,"content":"@cohow Fixed the tests for you. also, seems to work, here is my QA: https://github.com/Meniole/conversation-rewards/issues/12#issuecomment-2346757261\r\nHowever I think some explanation should be added to the result so the user understand what's going on in the results. @0x4007 rfc","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2346765171","commentType":"PULL_COLLABORATOR","score":{"reward":9.552,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":38,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":69.5175,"syllables":71,"sentences":4,"score":0.904825},"multiplier":1,"relevance":0.8}},{"id":2346775582,"content":"Maybe something very simple like adding `coeff: 0.85` in the output? That would also show what value was used from the configuration to avoid bad surprises.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2346775582","commentType":"PULL_COLLABORATOR","score":{"reward":5.805,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":60.70500000000001,"syllables":38,"sentences":2,"score":0.9929499999999999},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2287414333,"effect":{"addition":2985,"deletion":440},"reward":102.75,"priority":3},{"reviewId":2300982939,"effect":{"addition":49,"deletion":28},"reward":2.31,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 75 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>105.06</td></tr><tr><td>Review</td><td>Comment</td><td>10</td><td>59.724</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109\" target=\"_blank\" rel=\"noopener\">#109</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+2985 -440</td><td>3</td><td>102.75</td></tr><tr><td>+49 -28</td><td>3</td><td>2.31</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#pullrequestreview-2300982939\" target=\"_blank\" rel=\"noopener\">If the display is fine as it is then I am good with the code cha&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.485</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#discussion_r1747906957\" target=\"_blank\" rel=\"noopener\">Maybe this should not be here since you seem to use it after cal&hellip;</a></h6></td><td><details><summary>2.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.9</td><td>3</td><td>7.776</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2323145749\" target=\"_blank\" rel=\"noopener\">@cohow Thank you for the PR. I am fine with the changes, please &hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.557</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2323784771\" target=\"_blank\" rel=\"noopener\">@cohow When I want to update them I copy paste the diff of the p&hellip;</a></h6></td><td><details><summary>2.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 50&#13;  wordValue: 0.1&#13;  result: 2.38&#13;</pre></details></td><td>0.6</td><td>3</td><td>5.328</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2338118027\" target=\"_blank\" rel=\"noopener\">@cohow You mean that your pull-request test fixes depend on anot&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.764</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2338168154\" target=\"_blank\" rel=\"noopener\">After checking the logs, it seems that everything works as expec&hellip;</a></h6></td><td><details><summary>3.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 43&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>0.8</td><td>3</td><td>9.984</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2339789222\" target=\"_blank\" rel=\"noopener\">@cohow Seems that the tests are still failing. I would advise ru&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.7</td><td>3</td><td>5.103</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2346664021\" target=\"_blank\" rel=\"noopener\">This is probably because you are using your own credentials so t&hellip;</a></h6></td><td><details><summary>2.4</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 51&#13;  wordValue: 0.1&#13;  result: 2.4&#13;</pre></details></td><td>0.9</td><td>3</td><td>8.37</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2346765171\" target=\"_blank\" rel=\"noopener\">@cohow Fixed the tests for you. also, seems to work, here is my &hellip;</a></h6></td><td><details><summary>3.13</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 38&#13;  wordValue: 0.1&#13;  result: 2.13&#13;</pre></details></td><td>0.8</td><td>3</td><td>9.552</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#issuecomment-2346775582\" target=\"_blank\" rel=\"noopener\">Maybe something very simple like adding &#96;coeff: 0.85&#96; in&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.9</td><td>3</td><td>5.805</td></tr></tbody></table></details>"},"whilefoo":{"total":75,"userId":139262667,"comments":[{"id":1741220025,"content":"word count exponent is being applied to all symbols, either we leave it like that but we should rename it to symbol exponent, or we can limit it to only words @0x4007","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#discussion_r1741220025","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -84,6 +72,35 @@ export class FormattingEvaluatorModule implements Module {\n     return result;\n   }\n \n+  private _calculateFormattingTotal(\n+    formatting: ReturnType<typeof this._getFormattingScore>[\"formatting\"],\n+    multiplierFactor: Multiplier\n+  ): Decimal {\n+    if (!formatting) return new Decimal(0);\n+\n+    return Object.values(formatting)\n+      .reduce((acc, curr) => {\n+        let sum = new Decimal(0);\n+\n+        for (const symbol of Object.keys(curr.symbols)) {\n+          const count = new Decimal(curr.symbols[symbol].count);\n+          const symbolMultiplier = new Decimal(curr.symbols[symbol].multiplier);\n+          const formattingElementScore = new Decimal(curr.score);\n+          const exponent = this._wordCountExponent;\n+\n+          sum = sum.add(\n+            count\n+              .pow(exponent) // (count^exponent)\n+              .mul(symbolMultiplier) // symbol multiplier\n+              .mul(formattingElementScore) // comment type multiplier\n+              .mul(multiplierFactor.multiplier) // formatting element score\n+          );","score":{"reward":6.831,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":60.67375000000003,"syllables":43,"sentences":1,"score":0.9932624999999997},"multiplier":1,"relevance":0.9}},{"id":1741637761,"content":"The problem is that config doesn't define word multiplier anymore, instead symbol regexes are used and technically two regexes which are a little bit different can both represent words so it's hard to apply the exponent only to the word count","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#discussion_r1741637761","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -84,6 +72,35 @@ export class FormattingEvaluatorModule implements Module {\n     return result;\n   }\n \n+  private _calculateFormattingTotal(\n+    formatting: ReturnType<typeof this._getFormattingScore>[\"formatting\"],\n+    multiplierFactor: Multiplier\n+  ): Decimal {\n+    if (!formatting) return new Decimal(0);\n+\n+    return Object.values(formatting)\n+      .reduce((acc, curr) => {\n+        let sum = new Decimal(0);\n+\n+        for (const symbol of Object.keys(curr.symbols)) {\n+          const count = new Decimal(curr.symbols[symbol].count);\n+          const symbolMultiplier = new Decimal(curr.symbols[symbol].multiplier);\n+          const formattingElementScore = new Decimal(curr.score);\n+          const exponent = this._wordCountExponent;\n+\n+          sum = sum.add(\n+            count\n+              .pow(exponent) // (count^exponent)\n+              .mul(symbolMultiplier) // symbol multiplier\n+              .mul(formattingElementScore) // comment type multiplier\n+              .mul(multiplierFactor.multiplier) // formatting element score\n+          );","score":{"reward":7.013,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":33.33883720930234,"syllables":66,"sentences":1,"score":0.7333883720930234},"multiplier":1,"relevance":0.85}},{"id":1741928969,"content":"I agree with having segments as aliases, we can keep regexes but I don't think many partners will bother to use that","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#discussion_r1741928969","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -84,6 +72,35 @@ export class FormattingEvaluatorModule implements Module {\n     return result;\n   }\n \n+  private _calculateFormattingTotal(\n+    formatting: ReturnType<typeof this._getFormattingScore>[\"formatting\"],\n+    multiplierFactor: Multiplier\n+  ): Decimal {\n+    if (!formatting) return new Decimal(0);\n+\n+    return Object.values(formatting)\n+      .reduce((acc, curr) => {\n+        let sum = new Decimal(0);\n+\n+        for (const symbol of Object.keys(curr.symbols)) {\n+          const count = new Decimal(curr.symbols[symbol].count);\n+          const symbolMultiplier = new Decimal(curr.symbols[symbol].multiplier);\n+          const formattingElementScore = new Decimal(curr.score);\n+          const exponent = this._wordCountExponent;\n+\n+          sum = sum.add(\n+            count\n+              .pow(exponent) // (count^exponent)\n+              .mul(symbolMultiplier) // symbol multiplier\n+              .mul(formattingElementScore) // comment type multiplier\n+              .mul(multiplierFactor.multiplier) // formatting element score\n+          );","score":{"reward":3.69,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":69.46391304347827,"syllables":31,"sentences":1,"score":0.9053608695652173},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2276112587,"effect":{"addition":2985,"deletion":440},"reward":102.75,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 75 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>102.75</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>17.534</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109\" target=\"_blank\" rel=\"noopener\">#109</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+2985 -440</td><td>3</td><td>102.75</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#discussion_r1741220025\" target=\"_blank\" rel=\"noopener\">word count exponent is being applied to all symbols, either we l&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0.9</td><td>3</td><td>6.831</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#discussion_r1741637761\" target=\"_blank\" rel=\"noopener\">The problem is that config doesn't define word multiplier anymor&hellip;</a></h6></td><td><details><summary>2.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 43&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>0.85</td><td>3</td><td>7.013</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/109#discussion_r1741928969\" target=\"_blank\" rel=\"noopener\">I agree with having segments as aliases, we can keep regexes but&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.6</td><td>3</td><td>3.69</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_4.json","json":{"gentlementlegen":{"userId":9807008,"total":25.459,"task":{"reward":25,"multiplier":1},"comments":[{"id":2169068593,"content":"@0x4007 Partially, but there should be fatal errors that still stop the plugin from running otherwise it would indefinitely fail isn't it?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/4#issuecomment-2169068593","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.459,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":51.07260869565218,"syllables":36,"sentences":1,"score":0.9107260869565218},"multiplier":0.25,"relevance":0.9}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 25.459 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>25</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.459</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/4#issuecomment-2169068593\" target=\"_blank\" rel=\"noopener\">@0x4007 Partially, but there should be fatal errors that still s&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.459</td></tr></tbody></table></details>"},"PhantomCracker":{"total":0.432,"userId":5438246,"comments":[{"id":2069159126,"content":"@0x4007 is this still available?\r\nI was thinking on implementing a backoff solution, but I already see some changes there: \r\n`self: GitHubIssue | null = null; `","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/4#issuecomment-2069159126","commentType":"ISSUE_CONTRIBUTOR","score":{"reward":0.432,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":1,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":61.32500000000002,"syllables":32,"sentences":2,"score":0.9867499999999998},"multiplier":0.25,"relevance":0.9}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.432 XP ]</a>&nbsp;</h3><h6>@PhantomCracker</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.432</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/4#issuecomment-2069159126\" target=\"_blank\" rel=\"noopener\">@0x4007 is this still available?I was thinking on implementing&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.432</td></tr></tbody></table></details>"},"0x4007":{"total":8.273,"userId":4975670,"comments":[{"id":2168727021,"content":"@gentlementlegen did you implement this in the new plugin? Never let it fail, just exponential back off!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/4#issuecomment-2168727021","commentType":"ISSUE_AUTHOR","score":{"reward":1.71,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":58.8663235294118,"syllables":28,"sentences":2,"score":0.988663235294118},"multiplier":1,"relevance":1}},{"id":2169246959,"content":"This task is strictly about collecting the information that it should have access to from GitHub. Six hour hard timeout anyways.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/4#issuecomment-2169246959","commentType":"ISSUE_AUTHOR","score":{"reward":1.773,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":59.20607142857145,"syllables":34,"sentences":2,"score":0.9920607142857145},"multiplier":1,"relevance":0.9}},{"id":2205244990,"content":"_Originally posted by @pavlovcik in https://github.com/ubiquibot/conversation-rewards/pull/3#discussion_r1536977274_","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/4","commentType":"ISSUE_SPECIFICATION","score":{"reward":1.8,"formatting":{"content":{"p":{"score":0,"elementCount":1},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":18.44428571428574,"syllables":30,"sentences":2,"score":0.5844428571428574},"multiplier":1,"relevance":1}},{"id":2187328618,"content":"Seems good overall but consider changing the property names.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63#pullrequestreview-2187328618","commentType":"PULL_COLLABORATOR","score":{"reward":0.424,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":47.30000000000004,"syllables":16,"sentences":1,"score":0.8730000000000004},"multiplier":1,"relevance":0.4}},{"id":2187392435,"content":"Perhaps in the future we can parse time the same way we do with our other plugins like the follow up and unassignment with the plain english strings \"3.5 days\" \"7 days\"","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63#pullrequestreview-2187392435","commentType":"PULL_COLLABORATOR","score":{"reward":0.732,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":82.41477272727275,"syllables":42,"sentences":2,"score":0.7758522727272725},"multiplier":1,"relevance":0.3}},{"id":1683803013,"content":"I think these property names could be improved. i.e. `delayMs` `maxAttempts`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63#discussion_r1683803013","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -55,6 +55,9 @@ with:\n     evmNetworkId: 100\n     evmPrivateEncrypted: \"encrypted-key\"\n     erc20RewardToken: \"0xe91D153E0b41518A2Ce8Dd3D7944Fa863463a97d\"\n+    dataCollection:\n+      maxTry: 10\n+      delay: 10000","score":{"reward":0.864,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":93.47166666666669,"syllables":13,"sentences":3,"score":0.6652833333333331},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2187328618,"effect":{"addition":79,"deletion":6},"reward":0.85,"priority":1},{"reviewId":2187392435,"effect":{"addition":6,"deletion":6},"reward":0.12,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 8.273 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>0.97</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>1.8</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>3.483</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>2.02</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63\" target=\"_blank\" rel=\"noopener\">#63</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+79 -6</td><td>1</td><td>0.85</td></tr><tr><td>+6 -6</td><td>1</td><td>0.12</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/4\" target=\"_blank\" rel=\"noopener\">_Originally posted by @pavlovcik in https://github.com/ubiquibot&hellip;</a></h6></td><td><details><summary>1.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>1</td><td>1</td><td>1.8</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/4#issuecomment-2168727021\" target=\"_blank\" rel=\"noopener\">@gentlementlegen did you implement this in the new plugin? Never&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>1</td><td>1</td><td>1.71</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/4#issuecomment-2169246959\" target=\"_blank\" rel=\"noopener\">This task is strictly about collecting the information that it s&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.9</td><td>1</td><td>1.773</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63#pullrequestreview-2187328618\" target=\"_blank\" rel=\"noopener\">Seems good overall but consider changing the property names.</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.424</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63#pullrequestreview-2187392435\" target=\"_blank\" rel=\"noopener\">Perhaps in the future we can parse time the same way we do with &hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.3</td><td>1</td><td>0.732</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63#discussion_r1683803013\" target=\"_blank\" rel=\"noopener\">I think these property names could be improved. i.e. &#96;delayM&hellip;</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.864</td></tr></tbody></table></details>"},"rndquu":{"total":0.883,"userId":119500907,"comments":[{"id":2187617746,"content":"Works fine","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63#pullrequestreview-2187617746","commentType":"PULL_COLLABORATOR","score":{"reward":0.033,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":120.20500000000001,"syllables":2,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}}],"reviewRewards":[{"reviews":[{"reviewId":2187617746,"effect":{"addition":79,"deletion":6},"reward":0.85,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 0.883 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>0.85</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>0.033</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63\" target=\"_blank\" rel=\"noopener\">#63</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+79 -6</td><td>1</td><td>0.85</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63#pullrequestreview-2187617746\" target=\"_blank\" rel=\"noopener\">Works fine</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.033</td></tr></tbody></table></details>"},"whilefoo":{"total":2.925,"userId":139262667,"comments":[{"id":2239255101,"content":"actually there is an official octokit plugin [plugin-retry](https://github.com/octokit/plugin-retry.js) that handles retries for all octokit requests - we are already using this in the kernel","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63#issuecomment-2239255101","commentType":"PULL_COLLABORATOR","score":{"reward":2.925,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":34.42500000000004,"syllables":42,"sentences":1,"score":0.7442500000000004},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 2.925 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Comment</td><td>1</td><td>2.925</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/63#issuecomment-2239255101\" target=\"_blank\" rel=\"noopener\">actually there is an official octokit plugin [plugin-retry](http&hellip;</a></h6></td><td><details><summary>2.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.9</td><td>1</td><td>2.925</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_2.json","json":{"gentlementlegen":{"userId":9807008,"total":800,"task":{"reward":800,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 800 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>800</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":276.654,"userId":4975670,"comments":[{"id":2002941620,"content":"GPT-3.5 is sufficient. I run it 10x per comment and sample an average score. Its a lot cheaper too. Due to larger context lengths, I included fallbacks to use larger models but in an overwhelming majority of cases, it uses GPT-3.5.\r\nThe larger context length is necessary for long conversations. Perhaps it would be wiser to batch the conversation into separate jobs and always use GPT-3.5.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/2#issuecomment-2002941620","commentType":"ISSUE_AUTHOR","score":{"reward":11.88,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":72,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":71.81500000000001,"syllables":108,"sentences":9,"score":0.8818499999999999},"multiplier":1,"relevance":0.9}},{"id":2002991289,"content":"I think this might need to be broken down into separate tasks. Let's see after you open your pull","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/2#issuecomment-2002991289","commentType":"ISSUE_AUTHOR","score":{"reward":5.792,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":86.70500000000001,"syllables":26,"sentences":2,"score":0.7329499999999999},"multiplier":1,"relevance":0.8}},{"id":2187753199,"content":"## Context\r\nImplement a mechanism to reward contributors based on their comments by evaluating:\r\n- **Word count** as a `quantitative` metric, focusing on content formatting.\r\n- **Relevance** to the topic as outlined in the issue specification, marked as `qualitative`.\r\n- **Clarity** of articulation, ensuring comments are easily understandable.\r\nExclude:\r\n- Comments from bots.\r\n- Bot commands, identified by syntax like `/wallet 0x...`.\r\nDue to architectural changes, avoid generating permits in this module. Determine an appropriate return value to pass to the kernel for subsequent handling, aiming for:\r\n1. A final permit generation interface formatted as `Record<Username, string>`, e.g., `{ \"pavlovcik\": \"50\" }`.\r\n2. Inclusion of reward amount metadata to transparently explain the rationale behind each reward.\r\n## Score Calculation\r\nThe final score is a product of the three metrics: `quantitative (sum)` * `qualitative` * `clarity`. Word counts are adjusted by element type, excluding blockquotes.\r\n## Scope\r\nTransition from the monolithic `ubiquibot` to a kernel-plugin structure, addressing:\r\n- Migration and reimplementation of conversation rewards logic.\r\n- Integration of \"data aggregation\" for activity related to issues and pull requests.\r\n- Reward calculations based on `quantitative`, `qualitative`, and `clarity` evaluations.\r\n- Display of scoring metrics in a detailed manner as in the current [reward comment](https://github.com/ubiquity/work.ubq.fi/issues/26#issuecomment-1996890295).\r\n## Requirements\r\n- Achieve 80%+ code coverage with Jest tests.\r\n- Ensure scoring configurability, with initial hardcoding acceptable.\r\n- Define the kernel-plugin interface, focusing on core logic testing independently of the kernel.\r\n- Develop a method for returning structured data conducive to HTML table formatting by another plugin for comprehensive reward displays.\r\n## Remarks\r\n- Main entry point of old version. https://github.com/ubiquibot/comment-incentives/blob/main/src/handlers/issue/issue-closed.ts\r\n- You can see I tried classifying contributor types for the sake of our config. At a high level we had four contributor main types: assignee, issuer (the issue author) collaborator (somebody added to the team) and contributor (default)\r\n- We also need to be able to configure the scoring for all of those classes, and also, the scoring of commenting on the issue or the pull request. I think my mistake the first time around was collecting each of these individually then scoring. This time around I'm collecting everything at once, and then I think it makes sense to classify and score.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/2","commentType":"ISSUE_SPECIFICATION","score":{"reward":11.87,"formatting":{"content":{"h2":{"score":1,"elementCount":5},"p":{"score":0,"elementCount":23},"ul":{"score":0,"elementCount":5},"li":{"score":0.1,"elementCount":18},"ol":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":2}},"result":8.8},"priority":1,"words":{"wordCount":323,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":40.53068798769098,"syllables":612,"sentences":27,"score":0.8053068798769099},"multiplier":1,"relevance":1}},{"id":1956386856,"content":"I'm pretty much ready to test in production. We can set up another bot app and run two in parallel, but this kernel-plugin version will not need a funded wallet linked with it.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#pullrequestreview-1956386856","commentType":"PULL_COLLABORATOR","score":{"reward":3.072,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":75.46678571428575,"syllables":47,"sentences":2,"score":0.8453321428571425},"multiplier":1,"relevance":0.3}},{"id":1529629118,"content":"Why?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529629118","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -3,7 +3,7 @@\n   \"tabWidth\": 2,\n   \"semi\": true,\n   \"singleQuote\": false,\n-  \"printWidth\": 160,\n+  \"printWidth\": 120,","score":{"reward":0.288,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":1,"wordValue":0.1,"result":0.14},"readability":{"fleschKincaid":121.22000000000003,"syllables":1,"sentences":1,"score":1},"multiplier":1,"relevance":0.4}},{"id":1529629314,"content":"How about `jest.config.ts` or json?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529629314","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":1.04,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":97.025,"syllables":5,"sentences":1,"score":0.6297499999999999},"multiplier":1,"relevance":0.5}},{"id":1529629742,"content":"```suggestion\r\n  \"description\": \"Generate rewards for on topic conversation for closing issues as complete.\",\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529629742","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,7 +1,7 @@\n {\n   \"name\": \"@ubiquibot/conversation-rewards\",\n   \"version\": \"1.0.0\",\n-  \"description\": \"Template repository with TypeScript support.\",\n+  \"description\": \"Parse conversations in pull-request and issues a corresponding reward.\",","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.7}},{"id":1529630255,"content":"Configuration should be handled in the upstream partner repo/org. If this is for testing, perhaps you should add `.test.` to the file name.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529630255","commentType":"PULL_COLLABORATOR","diffHunk":"","score":{"reward":4.872,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":73.77989130434786,"syllables":33,"sentences":2,"score":0.8622010869565214},"multiplier":1,"relevance":0.6}},{"id":1529630961,"content":"Why are they called transformers? Is this a generative pre-training transformer? lol","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529630961","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,46 +1,56 @@\n-import { config } from \"dotenv\";\n import { GetActivity } from \"./get-activity\";\n+import { ContentEvaluatorTransformer } from \"./parser/content-evaluator-transformer\";\n+import { DataPurgeTransformer } from \"./parser/data-purge-transformer\";\n+import { FormattingEvaluatorTransformer } from \"./parser/formatting-evaluator-transformer\";\n+import { Processor } from \"./parser/processor\";\n+import { UserExtractorTransformer } from \"./parser/user-extractor-transformer\";\n import { parseGitHubUrl } from \"./start\";\n \n-config();\n-const GITHUB_TOKEN = process.env.GITHUB_TOKEN;\n-if (!GITHUB_TOKEN) {\n-  console.warn(\"GITHUB_TOKEN is not set\");\n-}\n // Mock process.argv\n-process.argv = [\"path/to/node\", \"path/to/script\", `--auth=${GITHUB_TOKEN}`];\n const issueUrl = process.env.TEST_ISSUE_URL || \"https://github.com/ubiquibot/comment-incentives/issues/22\";\n \n describe(\"GetActivity class\", () => {\n   const issue = parseGitHubUrl(issueUrl);\n   const activity = new GetActivity(issue);\n-\n-  beforeAll(async () => await activity.init());\n+  beforeAll(async () => {\n+    await activity.init();\n+  });\n \n   it(\"should resolve all promises\", async () => {\n     expect(activity.self).toBeTruthy();\n     expect(activity.events).toBeTruthy();\n     expect(activity.comments).toBeTruthy();\n     expect(Array.isArray(activity.linkedReviews)).toBeTruthy();\n+    const processor = new Processor();\n+    processor\n+      .add(new UserExtractorTransformer())","score":{"reward":1.692,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":65.77512820512823,"syllables":21,"sentences":3,"score":0.9422487179487178},"multiplier":1,"relevance":0.3}},{"id":1529793870,"content":"Generally speaking, using `object` as a data type is considered bad practice. Instead you should define the object shape with something like `Record<string, unknown>` for something really generic and temporary, but the more specific, the better.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529793870","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,81 @@\n+import * as fs from \"fs\";\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import program from \"./command-line\";\n+\n+export class Processor {\n+  private _transformers: Array<Transformer> = [];\n+  private _result: Result = {};\n+  private readonly _configuration = configuration;\n+\n+  add(transformer: Transformer) {\n+    this._transformers.push(transformer);\n+    return this;\n+  }\n+  async run(data: Readonly<GetActivity>) {\n+    if (this._configuration.disabled) {\n+      console.log(\"Module is disabled. Skipping...\");\n+      return;\n+    }\n+    for (const transformer of this._transformers) {\n+      if (transformer.enabled) {\n+        this._result = await transformer.transform(data, this._result);\n+      }\n+    }\n+    // Aggregate total result\n+    for (const item of Object.keys(this._result)) {\n+      this._result[item].total = this._sumRewards(this._result[item]);\n+    }\n+    return this._result;\n+  }\n+  dump() {\n+    const { file } = program.opts();\n+    const result = JSON.stringify(this._result, undefined, 2);\n+    if (!file) {\n+      console.log(result);\n+    } else {\n+      fs.writeFileSync(file, result);\n+    }\n+  }\n+  _sumRewards(obj: Record<string, object | number>) {","score":{"reward":7.872,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":41.39659090909092,"syllables":58,"sentences":2,"score":0.8139659090909092},"multiplier":1,"relevance":0.8}},{"id":1529794724,"content":"Is it better to always return as a `Promise<Result>` instead?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529794724","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,81 @@\n+import * as fs from \"fs\";\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import program from \"./command-line\";\n+\n+export class Processor {\n+  private _transformers: Array<Transformer> = [];\n+  private _result: Result = {};\n+  private readonly _configuration = configuration;\n+\n+  add(transformer: Transformer) {\n+    this._transformers.push(transformer);\n+    return this;\n+  }\n+  async run(data: Readonly<GetActivity>) {\n+    if (this._configuration.disabled) {\n+      console.log(\"Module is disabled. Skipping...\");\n+      return;\n+    }\n+    for (const transformer of this._transformers) {\n+      if (transformer.enabled) {\n+        this._result = await transformer.transform(data, this._result);\n+      }\n+    }\n+    // Aggregate total result\n+    for (const item of Object.keys(this._result)) {\n+      this._result[item].total = this._sumRewards(this._result[item]);\n+    }\n+    return this._result;\n+  }\n+  dump() {\n+    const { file } = program.opts();\n+    const result = JSON.stringify(this._result, undefined, 2);\n+    if (!file) {\n+      console.log(result);\n+    } else {\n+      fs.writeFileSync(file, result);\n+    }\n+  }\n+  _sumRewards(obj: Record<string, object | number>) {\n+    let totalReward = 0;\n+\n+    for (const [key, value] of Object.entries(obj)) {\n+      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n+        if (key === \"reward\" && typeof value === \"number\") {\n+          totalReward += value;\n+        } else if (typeof value === \"object\") {\n+          totalReward += this._sumRewards(value as Record<string, object>);\n+        }\n+      }\n+    }\n+\n+    return totalReward;\n+  }\n+}\n+\n+export interface Transformer {\n+  transform(data: Readonly<GetActivity>, result: Result): Result | Promise<Result>;","score":{"reward":2.94,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":75.50000000000003,"syllables":13,"sentences":1,"score":0.8449999999999998},"multiplier":1,"relevance":0.7}},{"id":1529795402,"content":"Perhaps its best to initialize as an empty array instead?\r\n```suggestion\r\n    comments: Comment[];\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529795402","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,81 @@\n+import * as fs from \"fs\";\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import program from \"./command-line\";\n+\n+export class Processor {\n+  private _transformers: Array<Transformer> = [];\n+  private _result: Result = {};\n+  private readonly _configuration = configuration;\n+\n+  add(transformer: Transformer) {\n+    this._transformers.push(transformer);\n+    return this;\n+  }\n+  async run(data: Readonly<GetActivity>) {\n+    if (this._configuration.disabled) {\n+      console.log(\"Module is disabled. Skipping...\");\n+      return;\n+    }\n+    for (const transformer of this._transformers) {\n+      if (transformer.enabled) {\n+        this._result = await transformer.transform(data, this._result);\n+      }\n+    }\n+    // Aggregate total result\n+    for (const item of Object.keys(this._result)) {\n+      this._result[item].total = this._sumRewards(this._result[item]);\n+    }\n+    return this._result;\n+  }\n+  dump() {\n+    const { file } = program.opts();\n+    const result = JSON.stringify(this._result, undefined, 2);\n+    if (!file) {\n+      console.log(result);\n+    } else {\n+      fs.writeFileSync(file, result);\n+    }\n+  }\n+  _sumRewards(obj: Record<string, object | number>) {\n+    let totalReward = 0;\n+\n+    for (const [key, value] of Object.entries(obj)) {\n+      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n+        if (key === \"reward\" && typeof value === \"number\") {\n+          totalReward += value;\n+        } else if (typeof value === \"object\") {\n+          totalReward += this._sumRewards(value as Record<string, object>);\n+        }\n+      }\n+    }\n+\n+    return totalReward;\n+  }\n+}\n+\n+export interface Transformer {\n+  transform(data: Readonly<GetActivity>, result: Result): Result | Promise<Result>;\n+  get enabled(): boolean;\n+}\n+\n+export interface Result {\n+  [k: string]: {\n+    comments?: Array<Comment>;","score":{"reward":3.22,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":52.86500000000001,"syllables":17,"sentences":1,"score":0.9286500000000001},"multiplier":1,"relevance":0.7}},{"id":1529796156,"content":"I think this might need to be a `string` (or `BigNumber`) due to the decimals.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529796156","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,81 @@\n+import * as fs from \"fs\";\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import program from \"./command-line\";\n+\n+export class Processor {\n+  private _transformers: Array<Transformer> = [];\n+  private _result: Result = {};\n+  private readonly _configuration = configuration;\n+\n+  add(transformer: Transformer) {\n+    this._transformers.push(transformer);\n+    return this;\n+  }\n+  async run(data: Readonly<GetActivity>) {\n+    if (this._configuration.disabled) {\n+      console.log(\"Module is disabled. Skipping...\");\n+      return;\n+    }\n+    for (const transformer of this._transformers) {\n+      if (transformer.enabled) {\n+        this._result = await transformer.transform(data, this._result);\n+      }\n+    }\n+    // Aggregate total result\n+    for (const item of Object.keys(this._result)) {\n+      this._result[item].total = this._sumRewards(this._result[item]);\n+    }\n+    return this._result;\n+  }\n+  dump() {\n+    const { file } = program.opts();\n+    const result = JSON.stringify(this._result, undefined, 2);\n+    if (!file) {\n+      console.log(result);\n+    } else {\n+      fs.writeFileSync(file, result);\n+    }\n+  }\n+  _sumRewards(obj: Record<string, object | number>) {\n+    let totalReward = 0;\n+\n+    for (const [key, value] of Object.entries(obj)) {\n+      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n+        if (key === \"reward\" && typeof value === \"number\") {\n+          totalReward += value;\n+        } else if (typeof value === \"object\") {\n+          totalReward += this._sumRewards(value as Record<string, object>);\n+        }\n+      }\n+    }\n+\n+    return totalReward;\n+  }\n+}\n+\n+export interface Transformer {\n+  transform(data: Readonly<GetActivity>, result: Result): Result | Promise<Result>;\n+  get enabled(): boolean;\n+}\n+\n+export interface Result {\n+  [k: string]: {\n+    comments?: Array<Comment>;\n+    total: number;\n+    bounty?: {\n+      reward: number;\n+    };\n+  };\n+}\n+\n+export interface Comment {\n+  content: string;\n+  contentHtml?: string;\n+  url: string;\n+  score?: {\n+    formatting?: number;\n+    relevance?: number;\n+    reward: number;","score":{"reward":4.192,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":96.02461538461542,"syllables":15,"sentences":1,"score":0.6397538461538459},"multiplier":1,"relevance":0.8}},{"id":1529797204,"content":"```suggestion\r\n    return comment.body && comment.user?.type === \"User\";\r\n```\r\nPerhaps that is more concise.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529797204","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,68 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue, GitHubIssueComment } from \"../github-types\";\n+import { Result, Transformer } from \"./processor\";\n+\n+/**\n+ * Creates entries for each bounty hunter with its associated comments.\n+ */\n+export class UserExtractorTransformer implements Transformer {\n+  private readonly _configuration = configuration[\"user-extractor\"];\n+\n+  get enabled(): boolean {\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if the comment is made by a human user, and if it not a command.\n+   * @param comment\n+   */\n+  _checkEntryValidity(comment: GitHubIssueComment) {\n+    return !!comment.user && !!comment.body && comment.user.type === \"User\";","score":{"reward":1.82,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":83.32000000000004,"syllables":7,"sentences":1,"score":0.7667999999999996},"multiplier":1,"relevance":0.7}},{"id":1529798453,"content":"```suggestion\r\n```\r\nI feel that JSDoc is net negative in a TypeScript environment because its easy to update function signatures and forget to update the comments. Besides, the function signatures clearly define the data types and the parameters?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529798453","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,68 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue, GitHubIssueComment } from \"../github-types\";\n+import { Result, Transformer } from \"./processor\";\n+\n+/**\n+ * Creates entries for each bounty hunter with its associated comments.\n+ */\n+export class UserExtractorTransformer implements Transformer {\n+  private readonly _configuration = configuration[\"user-extractor\"];\n+\n+  get enabled(): boolean {\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if the comment is made by a human user, and if it not a command.\n+   * @param comment","score":{"reward":5.16,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":42.86500000000001,"syllables":62,"sentences":2,"score":0.8286500000000001},"multiplier":1,"relevance":0.5}},{"id":1529799508,"content":"The team had a whole debate on how the keys from the config should be camel cased in order to directly map to identifier names (like variables) @rndquu rfc","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529799508","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,68 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue, GitHubIssueComment } from \"../github-types\";\n+import { Result, Transformer } from \"./processor\";\n+\n+/**\n+ * Creates entries for each bounty hunter with its associated comments.\n+ */\n+export class UserExtractorTransformer implements Transformer {\n+  private readonly _configuration = configuration[\"user-extractor\"];\n+\n+  get enabled(): boolean {\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if the comment is made by a human user, and if it not a command.\n+   * @param comment\n+   */\n+  _checkEntryValidity(comment: GitHubIssueComment) {\n+    return !!comment.user && !!comment.body && comment.user.type === \"User\";\n+  }\n+\n+  _extractBountyPrice(issue: GitHubIssue) {\n+    if (this._configuration[\"redeem-bounty\"] === false) {","score":{"reward":5.736,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":57.793103448275886,"syllables":41,"sentences":1,"score":0.9779310344827589},"multiplier":1,"relevance":0.6}},{"id":1529800446,"content":"```suggestion\r\n      }, [] as number[])\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529800446","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,68 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue, GitHubIssueComment } from \"../github-types\";\n+import { Result, Transformer } from \"./processor\";\n+\n+/**\n+ * Creates entries for each bounty hunter with its associated comments.\n+ */\n+export class UserExtractorTransformer implements Transformer {\n+  private readonly _configuration = configuration[\"user-extractor\"];\n+\n+  get enabled(): boolean {\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if the comment is made by a human user, and if it not a command.\n+   * @param comment\n+   */\n+  _checkEntryValidity(comment: GitHubIssueComment) {\n+    return !!comment.user && !!comment.body && comment.user.type === \"User\";\n+  }\n+\n+  _extractBountyPrice(issue: GitHubIssue) {\n+    if (this._configuration[\"redeem-bounty\"] === false) {\n+      return 0;\n+    }\n+    const sortedPriceLabels = issue.labels\n+      .reduce((acc, label) => {\n+        const labelName = typeof label === \"string\" ? label : label.name;\n+        if (labelName?.startsWith(\"Price: \")) {\n+          const price = parseFloat(labelName.replace(\"Price: \", \"\"));\n+          if (!isNaN(price)) {\n+            acc.push(price);\n+          }\n+        }\n+        return acc;\n+      }, [] as Array<number>)","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.6}},{"id":1529800889,"content":"```suggestion\r\n      .sort((a, b) => a - b);\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529800889","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,68 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue, GitHubIssueComment } from \"../github-types\";\n+import { Result, Transformer } from \"./processor\";\n+\n+/**\n+ * Creates entries for each bounty hunter with its associated comments.\n+ */\n+export class UserExtractorTransformer implements Transformer {\n+  private readonly _configuration = configuration[\"user-extractor\"];\n+\n+  get enabled(): boolean {\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if the comment is made by a human user, and if it not a command.\n+   * @param comment\n+   */\n+  _checkEntryValidity(comment: GitHubIssueComment) {\n+    return !!comment.user && !!comment.body && comment.user.type === \"User\";\n+  }\n+\n+  _extractBountyPrice(issue: GitHubIssue) {\n+    if (this._configuration[\"redeem-bounty\"] === false) {\n+      return 0;\n+    }\n+    const sortedPriceLabels = issue.labels\n+      .reduce((acc, label) => {\n+        const labelName = typeof label === \"string\" ? label : label.name;\n+        if (labelName?.startsWith(\"Price: \")) {\n+          const price = parseFloat(labelName.replace(\"Price: \", \"\"));\n+          if (!isNaN(price)) {\n+            acc.push(price);\n+          }\n+        }\n+        return acc;\n+      }, [] as Array<number>)\n+      .sort((a, b) => {\n+        return a - b;\n+      });","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.6}},{"id":1529803757,"content":"I actually deliberately changed the \"bounty\" terminology to \"task\" (or \"tasks\") in order to appeal to a wider audience. \"Bounties\" is crypto audience focused, but I want our system to add value, and not alienate, non-crypto companies as well. \r\nThis makes sense to reflect this decision from our marketing materials down to our code so that there is no confusion within our organization. \r\nAlso I generally refer to them as tasks only after they are funded. Otherwise I just refer to them as GitHub issues (or issues.)\r\nAnd if there are any problems in the codebase etc I am deliberate to not use the term \"issue\" as it can be interpreted as a reference to a GitHub issue. Instead, I call them another synonym, like \"problem\"","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529803757","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,68 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue, GitHubIssueComment } from \"../github-types\";\n+import { Result, Transformer } from \"./processor\";\n+\n+/**\n+ * Creates entries for each bounty hunter with its associated comments.\n+ */\n+export class UserExtractorTransformer implements Transformer {\n+  private readonly _configuration = configuration[\"user-extractor\"];\n+\n+  get enabled(): boolean {\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if the comment is made by a human user, and if it not a command.\n+   * @param comment\n+   */\n+  _checkEntryValidity(comment: GitHubIssueComment) {\n+    return !!comment.user && !!comment.body && comment.user.type === \"User\";\n+  }\n+\n+  _extractBountyPrice(issue: GitHubIssue) {\n+    if (this._configuration[\"redeem-bounty\"] === false) {\n+      return 0;\n+    }\n+    const sortedPriceLabels = issue.labels\n+      .reduce((acc, label) => {\n+        const labelName = typeof label === \"string\" ? label : label.name;\n+        if (labelName?.startsWith(\"Price: \")) {\n+          const price = parseFloat(labelName.replace(\"Price: \", \"\"));\n+          if (!isNaN(price)) {\n+            acc.push(price);\n+          }\n+        }\n+        return acc;\n+      }, [] as Array<number>)\n+      .sort((a, b) => {\n+        return a - b;\n+      });\n+    if (!sortedPriceLabels.length) {\n+      console.warn(\"There are no price labels in this repository.\");\n+      return 0;\n+    }\n+    return sortedPriceLabels[0];\n+  }\n+\n+  transform(data: Readonly<GetActivity>, result: Result): Result {\n+    if (data.comments) {\n+      for (const comment of data.comments as GitHubIssueComment[]) {\n+        if (comment.user && comment.body && this._checkEntryValidity(comment)) {\n+          const bounty =","score":{"reward":8.792,"formatting":{"content":{"p":{"score":0,"elementCount":4}},"result":0},"priority":4,"words":{"wordCount":127,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":55.1916535433071,"syllables":200,"sentences":7,"score":0.951916535433071},"multiplier":1,"relevance":0.7}},{"id":1529807009,"content":"```suggestion\r\n              : void 0;\r\n```\r\nI heard this is considered more robust as it is possible for `undefined` to be defined in JavaScript. Not sure if this is too old school though, but thats what I would do in this situation.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529807009","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,68 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue, GitHubIssueComment } from \"../github-types\";\n+import { Result, Transformer } from \"./processor\";\n+\n+/**\n+ * Creates entries for each bounty hunter with its associated comments.\n+ */\n+export class UserExtractorTransformer implements Transformer {\n+  private readonly _configuration = configuration[\"user-extractor\"];\n+\n+  get enabled(): boolean {\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if the comment is made by a human user, and if it not a command.\n+   * @param comment\n+   */\n+  _checkEntryValidity(comment: GitHubIssueComment) {\n+    return !!comment.user && !!comment.body && comment.user.type === \"User\";\n+  }\n+\n+  _extractBountyPrice(issue: GitHubIssue) {\n+    if (this._configuration[\"redeem-bounty\"] === false) {\n+      return 0;\n+    }\n+    const sortedPriceLabels = issue.labels\n+      .reduce((acc, label) => {\n+        const labelName = typeof label === \"string\" ? label : label.name;\n+        if (labelName?.startsWith(\"Price: \")) {\n+          const price = parseFloat(labelName.replace(\"Price: \", \"\"));\n+          if (!isNaN(price)) {\n+            acc.push(price);\n+          }\n+        }\n+        return acc;\n+      }, [] as Array<number>)\n+      .sort((a, b) => {\n+        return a - b;\n+      });\n+    if (!sortedPriceLabels.length) {\n+      console.warn(\"There are no price labels in this repository.\");\n+      return 0;\n+    }\n+    return sortedPriceLabels[0];\n+  }\n+\n+  transform(data: Readonly<GetActivity>, result: Result): Result {\n+    if (data.comments) {\n+      for (const comment of data.comments as GitHubIssueComment[]) {\n+        if (comment.user && comment.body && this._checkEntryValidity(comment)) {\n+          const bounty =\n+            (data.self as GitHubIssue)?.assignee?.id === comment.user.id\n+              ? {\n+                  reward: this._extractBountyPrice(data.self as GitHubIssue),\n+                }\n+              : undefined;","score":{"reward":6.072,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":80.30107142857145,"syllables":45,"sentences":2,"score":0.7969892857142855},"multiplier":1,"relevance":0.6}},{"id":1529813657,"content":"It's fine as is but thinking its AI related is my bias.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529813657","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,46 +1,56 @@\n-import { config } from \"dotenv\";\n import { GetActivity } from \"./get-activity\";\n+import { ContentEvaluatorTransformer } from \"./parser/content-evaluator-transformer\";\n+import { DataPurgeTransformer } from \"./parser/data-purge-transformer\";\n+import { FormattingEvaluatorTransformer } from \"./parser/formatting-evaluator-transformer\";\n+import { Processor } from \"./parser/processor\";\n+import { UserExtractorTransformer } from \"./parser/user-extractor-transformer\";\n import { parseGitHubUrl } from \"./start\";\n \n-config();\n-const GITHUB_TOKEN = process.env.GITHUB_TOKEN;\n-if (!GITHUB_TOKEN) {\n-  console.warn(\"GITHUB_TOKEN is not set\");\n-}\n // Mock process.argv\n-process.argv = [\"path/to/node\", \"path/to/script\", `--auth=${GITHUB_TOKEN}`];\n const issueUrl = process.env.TEST_ISSUE_URL || \"https://github.com/ubiquibot/comment-incentives/issues/22\";\n \n describe(\"GetActivity class\", () => {\n   const issue = parseGitHubUrl(issueUrl);\n   const activity = new GetActivity(issue);\n-\n-  beforeAll(async () => await activity.init());\n+  beforeAll(async () => {\n+    await activity.init();\n+  });\n \n   it(\"should resolve all promises\", async () => {\n     expect(activity.self).toBeTruthy();\n     expect(activity.events).toBeTruthy();\n     expect(activity.comments).toBeTruthy();\n     expect(Array.isArray(activity.linkedReviews)).toBeTruthy();\n+    const processor = new Processor();\n+    processor\n+      .add(new UserExtractorTransformer())","score":{"reward":1.572,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":96.02461538461542,"syllables":15,"sentences":1,"score":0.6397538461538459},"multiplier":1,"relevance":0.3}},{"id":1529826057,"content":"This whole thing is the comment module. That may make sense only from the perspective of the kernel which is a separate codebase?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529826057","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,81 @@\n+import * as fs from \"fs\";\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import program from \"./command-line\";\n+\n+export class Processor {\n+  private _transformers: Array<Transformer> = [];\n+  private _result: Result = {};\n+  private readonly _configuration = configuration;\n+\n+  add(transformer: Transformer) {\n+    this._transformers.push(transformer);\n+    return this;\n+  }\n+  async run(data: Readonly<GetActivity>) {\n+    if (this._configuration.disabled) {\n+      console.log(\"Module is disabled. Skipping...\");\n+      return;\n+    }\n+    for (const transformer of this._transformers) {\n+      if (transformer.enabled) {\n+        this._result = await transformer.transform(data, this._result);\n+      }\n+    }\n+    // Aggregate total result\n+    for (const item of Object.keys(this._result)) {\n+      this._result[item].total = this._sumRewards(this._result[item]);\n+    }\n+    return this._result;\n+  }\n+  dump() {\n+    const { file } = program.opts();\n+    const result = JSON.stringify(this._result, undefined, 2);\n+    if (!file) {\n+      console.log(result);\n+    } else {\n+      fs.writeFileSync(file, result);\n+    }\n+  }\n+  _sumRewards(obj: Record<string, object | number>) {\n+    let totalReward = 0;\n+\n+    for (const [key, value] of Object.entries(obj)) {\n+      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n+        if (key === \"reward\" && typeof value === \"number\") {\n+          totalReward += value;\n+        } else if (typeof value === \"object\") {\n+          totalReward += this._sumRewards(value as Record<string, object>);\n+        }\n+      }\n+    }\n+\n+    return totalReward;\n+  }\n+}\n+\n+export interface Transformer {\n+  transform(data: Readonly<GetActivity>, result: Result): Result | Promise<Result>;\n+  get enabled(): boolean;\n+}\n+\n+export interface Result {\n+  [k: string]: {\n+    comments?: Array<Comment>;","score":{"reward":4.12,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":66.42336956521743,"syllables":35,"sentences":2,"score":0.9357663043478257},"multiplier":1,"relevance":0.5}},{"id":1529826658,"content":"I'm not sure I think I was trained by some linters at some point. I think my bias may also stem from using `[]` to instantiate new arrays instead of `new Array()` due to v8 optimizations.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529826658","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,68 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue, GitHubIssueComment } from \"../github-types\";\n+import { Result, Transformer } from \"./processor\";\n+\n+/**\n+ * Creates entries for each bounty hunter with its associated comments.\n+ */\n+export class UserExtractorTransformer implements Transformer {\n+  private readonly _configuration = configuration[\"user-extractor\"];\n+\n+  get enabled(): boolean {\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if the comment is made by a human user, and if it not a command.\n+   * @param comment\n+   */\n+  _checkEntryValidity(comment: GitHubIssueComment) {\n+    return !!comment.user && !!comment.body && comment.user.type === \"User\";\n+  }\n+\n+  _extractBountyPrice(issue: GitHubIssue) {\n+    if (this._configuration[\"redeem-bounty\"] === false) {\n+      return 0;\n+    }\n+    const sortedPriceLabels = issue.labels\n+      .reduce((acc, label) => {\n+        const labelName = typeof label === \"string\" ? label : label.name;\n+        if (labelName?.startsWith(\"Price: \")) {\n+          const price = parseFloat(labelName.replace(\"Price: \", \"\"));\n+          if (!isNaN(price)) {\n+            acc.push(price);\n+          }\n+        }\n+        return acc;\n+      }, [] as Array<number>)","score":{"reward":4.016,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":77.60941176470591,"syllables":45,"sentences":2,"score":0.8239058823529409},"multiplier":1,"relevance":0.4}},{"id":1529827562,"content":"---\r\nhttps://chat.openai.com/share/3206263b-ba8d-4c4c-9890-5264fd0bdb02","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529827562","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,68 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue, GitHubIssueComment } from \"../github-types\";\n+import { Result, Transformer } from \"./processor\";\n+\n+/**\n+ * Creates entries for each bounty hunter with its associated comments.\n+ */\n+export class UserExtractorTransformer implements Transformer {\n+  private readonly _configuration = configuration[\"user-extractor\"];\n+\n+  get enabled(): boolean {\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if the comment is made by a human user, and if it not a command.\n+   * @param comment\n+   */\n+  _checkEntryValidity(comment: GitHubIssueComment) {\n+    return !!comment.user && !!comment.body && comment.user.type === \"User\";\n+  }\n+\n+  _extractBountyPrice(issue: GitHubIssue) {\n+    if (this._configuration[\"redeem-bounty\"] === false) {\n+      return 0;\n+    }\n+    const sortedPriceLabels = issue.labels\n+      .reduce((acc, label) => {\n+        const labelName = typeof label === \"string\" ? label : label.name;\n+        if (labelName?.startsWith(\"Price: \")) {\n+          const price = parseFloat(labelName.replace(\"Price: \", \"\"));\n+          if (!isNaN(price)) {\n+            acc.push(price);\n+          }\n+        }\n+        return acc;\n+      }, [] as Array<number>)","score":{"reward":1.04,"formatting":{"content":{"hr":{"score":0,"elementCount":1},"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":101.93166666666669,"syllables":12,"sentences":3,"score":1},"multiplier":1,"relevance":0.2}},{"id":1529831471,"content":"We only plan to support the latest Chrome browsers basically, or wherever Metamask is commonly used. Also only Node `20.10.0`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529831471","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,68 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue, GitHubIssueComment } from \"../github-types\";\n+import { Result, Transformer } from \"./processor\";\n+\n+/**\n+ * Creates entries for each bounty hunter with its associated comments.\n+ */\n+export class UserExtractorTransformer implements Transformer {\n+  private readonly _configuration = configuration[\"user-extractor\"];\n+\n+  get enabled(): boolean {\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if the comment is made by a human user, and if it not a command.\n+   * @param comment\n+   */\n+  _checkEntryValidity(comment: GitHubIssueComment) {\n+    return !!comment.user && !!comment.body && comment.user.type === \"User\";\n+  }\n+\n+  _extractBountyPrice(issue: GitHubIssue) {\n+    if (this._configuration[\"redeem-bounty\"] === false) {\n+      return 0;\n+    }\n+    const sortedPriceLabels = issue.labels\n+      .reduce((acc, label) => {\n+        const labelName = typeof label === \"string\" ? label : label.name;\n+        if (labelName?.startsWith(\"Price: \")) {\n+          const price = parseFloat(labelName.replace(\"Price: \", \"\"));\n+          if (!isNaN(price)) {\n+            acc.push(price);\n+          }\n+        }\n+        return acc;\n+      }, [] as Array<number>)\n+      .sort((a, b) => {\n+        return a - b;\n+      });\n+    if (!sortedPriceLabels.length) {\n+      console.warn(\"There are no price labels in this repository.\");\n+      return 0;\n+    }\n+    return sortedPriceLabels[0];\n+  }\n+\n+  transform(data: Readonly<GetActivity>, result: Result): Result {\n+    if (data.comments) {\n+      for (const comment of data.comments as GitHubIssueComment[]) {\n+        if (comment.user && comment.body && this._checkEntryValidity(comment)) {\n+          const bounty =\n+            (data.self as GitHubIssue)?.assignee?.id === comment.user.id\n+              ? {\n+                  reward: this._extractBountyPrice(data.self as GitHubIssue),\n+                }\n+              : undefined;","score":{"reward":3.6,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":45.80302631578948,"syllables":34,"sentences":2,"score":0.8580302631578948},"multiplier":1,"relevance":0.5}},{"id":1529848343,"content":"Vscode doesn't do any of that by default so it seems to be a liability.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529848343","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,68 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue, GitHubIssueComment } from \"../github-types\";\n+import { Result, Transformer } from \"./processor\";\n+\n+/**\n+ * Creates entries for each bounty hunter with its associated comments.\n+ */\n+export class UserExtractorTransformer implements Transformer {\n+  private readonly _configuration = configuration[\"user-extractor\"];\n+\n+  get enabled(): boolean {\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if the comment is made by a human user, and if it not a command.\n+   * @param comment","score":{"reward":3.12,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":84.845,"syllables":20,"sentences":1,"score":0.75155},"multiplier":1,"relevance":0.5}},{"id":1529849912,"content":"Maybe that's true in your and my experience. But I was told otherwise from some other developers. Perhaps outside of gaming and crypto it's not a widely used term?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529849912","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,68 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue, GitHubIssueComment } from \"../github-types\";\n+import { Result, Transformer } from \"./processor\";\n+\n+/**\n+ * Creates entries for each bounty hunter with its associated comments.\n+ */\n+export class UserExtractorTransformer implements Transformer {\n+  private readonly _configuration = configuration[\"user-extractor\"];\n+\n+  get enabled(): boolean {\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if the comment is made by a human user, and if it not a command.\n+   * @param comment\n+   */\n+  _checkEntryValidity(comment: GitHubIssueComment) {\n+    return !!comment.user && !!comment.body && comment.user.type === \"User\";\n+  }\n+\n+  _extractBountyPrice(issue: GitHubIssue) {\n+    if (this._configuration[\"redeem-bounty\"] === false) {\n+      return 0;\n+    }\n+    const sortedPriceLabels = issue.labels\n+      .reduce((acc, label) => {\n+        const labelName = typeof label === \"string\" ? label : label.name;\n+        if (labelName?.startsWith(\"Price: \")) {\n+          const price = parseFloat(labelName.replace(\"Price: \", \"\"));\n+          if (!isNaN(price)) {\n+            acc.push(price);\n+          }\n+        }\n+        return acc;\n+      }, [] as Array<number>)\n+      .sort((a, b) => {\n+        return a - b;\n+      });\n+    if (!sortedPriceLabels.length) {\n+      console.warn(\"There are no price labels in this repository.\");\n+      return 0;\n+    }\n+    return sortedPriceLabels[0];\n+  }\n+\n+  transform(data: Readonly<GetActivity>, result: Result): Result {\n+    if (data.comments) {\n+      for (const comment of data.comments as GitHubIssueComment[]) {\n+        if (comment.user && comment.body && this._checkEntryValidity(comment)) {\n+          const bounty =","score":{"reward":3.872,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":73.54021505376345,"syllables":45,"sentences":3,"score":0.8645978494623655},"multiplier":1,"relevance":0.4}},{"id":1529853505,"content":"This doesn't seem right. \nIt should be 0 but it should count the words inside, unlike `blockquote` and `code`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529853505","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,31 @@\n+content-evaluator:\n+  enabled: true\n+user-extractor:\n+  redeem-bounty: true\n+data-purge:\n+  enabled: true\n+#disabled: true\n+formatting-evaluator:\n+  enabled: true\n+  scores:\n+    br: 1\n+    code: 1\n+    p: 0.1","score":{"reward":5.012,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":103.70000000000002,"syllables":20,"sentences":2,"score":1},"multiplier":1,"relevance":0.7}},{"id":1529855374,"content":"I thought this was higher at 5 by default? I wonder if it makes sense to do 1 or 0 for default settings and then recommend ubiquity tested settings during onboarding. \nI also want to note that images are automatically wrapped inside of anchors so that's why images should be set to 0.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529855374","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,31 @@\n+content-evaluator:\n+  enabled: true\n+user-extractor:\n+  redeem-bounty: true\n+data-purge:\n+  enabled: true\n+#disabled: true\n+formatting-evaluator:\n+  enabled: true\n+  scores:\n+    br: 1\n+    code: 1\n+    p: 0.1\n+    em: 0\n+    img: 0\n+    strong: 0\n+    blockquote: 0\n+    h1: 1\n+    h2: 1\n+    h3: 1\n+    h4: 1\n+    h5: 1\n+    h6: 1\n+    a: 1","score":{"reward":7.512,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":54,"wordValue":0.1,"result":2.44},"readability":{"fleschKincaid":66.36500000000001,"syllables":78,"sentences":3,"score":0.9363499999999999},"multiplier":1,"relevance":0.6}},{"id":1529857238,"content":"Strong and italics seem to be recognized as the same item in my previous testing with the mdast library. \nThe reason why this is 0 by default is because the only time we normally see italics is when a new issue is automatically generated from a comment and GitHub adds the context at the end like \"written by X at Y issue\"\nI never seen contributors use bold either for comments or issue specifications.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529857238","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,31 @@\n+content-evaluator:\n+  enabled: true\n+user-extractor:\n+  redeem-bounty: true\n+data-purge:\n+  enabled: true\n+#disabled: true\n+formatting-evaluator:\n+  enabled: true\n+  scores:\n+    br: 1\n+    code: 1\n+    p: 0.1\n+    em: 0\n+    img: 0\n+    strong: 0","score":{"reward":7.704,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":74,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":36.6637837837838,"syllables":116,"sentences":2,"score":0.766637837837838},"multiplier":1,"relevance":0.6}},{"id":1529858455,"content":"```suggestion\n    br: 0\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529858455","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,31 @@\n+content-evaluator:\n+  enabled: true\n+user-extractor:\n+  redeem-bounty: true\n+data-purge:\n+  enabled: true\n+#disabled: true\n+formatting-evaluator:\n+  enabled: true\n+  scores:\n+    br: 1","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.7}},{"id":1529858816,"content":"```suggestion\n    hr: 0\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529858816","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,31 @@\n+content-evaluator:\n+  enabled: true\n+user-extractor:\n+  redeem-bounty: true\n+data-purge:\n+  enabled: true\n+#disabled: true\n+formatting-evaluator:\n+  enabled: true\n+  scores:\n+    br: 1\n+    code: 1\n+    p: 0.1\n+    em: 0\n+    img: 0\n+    strong: 0\n+    blockquote: 0\n+    h1: 1\n+    h2: 1\n+    h3: 1\n+    h4: 1\n+    h5: 1\n+    h6: 1\n+    a: 1\n+    li: 1\n+    td: 1\n+    hr: 1","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.7}},{"id":1535132558,"content":"I was looking through the GitHub Actions logs and couldn't understand this `type` property's purpose.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1535132558","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -7,3 +7,38 @@ As of 28 February: test driven development to aggregate all necessary informatio\n - most importantly: this can inherit bot authentication and link pull requests to issues in private repositories. \n \n Be sure to review all `*.test.*` files for implementation details. \n+\n+## Data structure\n+\n+```json\n+{\n+  \"userName\": {\n+    \"total\": 40.5,\n+    \"task\": {\n+      \"reward\": 37.5\n+    },\n+    \"comments\": [\n+      {\n+        \"content\": \"comment content\",\n+        \"url\": \"https://url-to-item\",\n+        \"type\": 18,","score":{"reward":3.936,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":63.69500000000001,"syllables":24,"sentences":1,"score":0.96305},"multiplier":1,"relevance":0.6}},{"id":1535133359,"content":"I was just providing you context for why they are set as 0. Its fine.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1535133359","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,31 @@\n+content-evaluator:\n+  enabled: true\n+user-extractor:\n+  redeem-bounty: true\n+data-purge:\n+  enabled: true\n+#disabled: true\n+formatting-evaluator:\n+  enabled: true\n+  scores:\n+    br: 1\n+    code: 1\n+    p: 0.1\n+    em: 0\n+    img: 0\n+    strong: 0","score":{"reward":2.304,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":97.7025,"syllables":18,"sentences":2,"score":0.622975},"multiplier":1,"relevance":0.4}},{"id":1535169994,"content":"A key might be useful to have for debugging purposes somewhere!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1535169994","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -7,3 +7,38 @@ As of 28 February: test driven development to aggregate all necessary informatio\n - most importantly: this can inherit bot authentication and link pull requests to issues in private repositories. \n \n Be sure to review all `*.test.*` files for implementation details. \n+\n+## Data structure\n+\n+```json\n+{\n+  \"userName\": {\n+    \"total\": 40.5,\n+    \"task\": {\n+      \"reward\": 37.5\n+    },\n+    \"comments\": [\n+      {\n+        \"content\": \"comment content\",\n+        \"url\": \"https://url-to-item\",\n+        \"type\": 18,","score":{"reward":2.5,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":57.23363636363638,"syllables":18,"sentences":1,"score":0.9723363636363638},"multiplier":1,"relevance":0.5}},{"id":1536640111,"content":"Can you make this identifier named something that will not collide with dealing with GitHub comments?\nI think it's important to be mindful of likely identifier collisions when exporting etc\n```suggestion\nexport interface GithubCommentScore {\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536640111","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,118 @@\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import configuration from \"../configuration/config-reader\";\n+import { CommentType, GetActivity } from \"../get-activity\";\n+import program from \"./command-line\";\n+import { ContentEvaluatorModule } from \"./content-evaluator-module\";\n+import { DataPurgeModule } from \"./data-purge-module\";\n+import { FormattingEvaluatorModule } from \"./formatting-evaluator-module\";\n+import { UserExtractorModule } from \"./user-extractor-module\";\n+\n+export class Processor {\n+  private _transformers: Module[] = [];\n+  private _result: Result = {};\n+  private readonly _configuration = configuration;\n+\n+  constructor() {\n+    this.add(new UserExtractorModule())\n+      .add(new DataPurgeModule())\n+      .add(new FormattingEvaluatorModule())\n+      .add(new ContentEvaluatorModule());\n+  }\n+\n+  add(transformer: Module) {\n+    this._transformers.push(transformer);\n+    return this;\n+  }\n+\n+  async run(data: Readonly<GetActivity>) {\n+    if (this._configuration.disabled) {\n+      console.log(\"Module is disabled. Skipping...\");\n+      return;\n+    }\n+    for (const transformer of this._transformers) {\n+      if (transformer.enabled) {\n+        this._result = await transformer.transform(data, this._result);\n+      }\n+    }\n+    // Aggregate total result\n+    for (const item of Object.keys(this._result)) {\n+      this._result[item].total = this._sumRewards(this._result[item]);\n+    }\n+    return this._result;\n+  }\n+\n+  dump() {\n+    const { file } = program.opts();\n+    const result = JSON.stringify(\n+      this._result,\n+      (key: string, value: string | number) => {\n+        // Changes \"type\" to be human-readable\n+        if (key === \"type\" && typeof value === \"number\") {\n+          const typeNames: string[] = [];\n+          const types = Object.values(CommentType) as number[];\n+          types.forEach((typeValue) => {\n+            if (value & typeValue) {\n+              typeNames.push(CommentType[typeValue]);\n+            }\n+          });\n+          return typeNames.join(\"|\");\n+        }\n+        return value;\n+      },\n+      2\n+    );\n+    if (!file) {\n+      console.log(result);\n+    } else {\n+      fs.writeFileSync(file, result);\n+    }\n+  }\n+\n+  _sumRewards(obj: Record<string, unknown>) {\n+    let totalReward = new Decimal(0);\n+\n+    for (const [key, value] of Object.entries(obj)) {\n+      if (Object.prototype.hasOwnProperty.call(obj, key)) {\n+        if (key === \"reward\" && typeof value === \"number\") {\n+          totalReward = totalReward.add(value);\n+        } else if (typeof value === \"object\") {\n+          totalReward = totalReward.add(this._sumRewards(value as Record<string, unknown>));\n+        }\n+      }\n+    }\n+\n+    return totalReward.toNumber();\n+  }\n+}\n+\n+export interface Module {\n+  transform(data: Readonly<GetActivity>, result: Result): Promise<Result>;\n+  get enabled(): boolean;\n+}\n+\n+export interface Result {\n+  [k: string]: {\n+    comments?: GithubComment[];\n+    total: number;\n+    task?: {\n+      reward: number;\n+    };\n+  };\n+}\n+\n+export interface GithubComment {","score":{"reward":7.776,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":49.192822580645185,"syllables":52,"sentences":2,"score":0.8919282258064518},"multiplier":1,"relevance":0.8}},{"id":1536640313,"content":"Not sure if we need to specify -32k","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536640313","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,141 @@\n+import Decimal from \"decimal.js\";\n+import { encodingForModel } from \"js-tiktoken\";\n+import OpenAI from \"openai\";\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue } from \"../github-types\";\n+import { GithubComment, Module, Result } from \"./processor\";\n+\n+/**\n+ * Evaluates and rates comments.\n+ */\n+export class ContentEvaluatorModule implements Module {\n+  readonly _openAi = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n+  readonly configuration = configuration.contentEvaluator;\n+\n+  get enabled(): boolean {\n+    return this.configuration.enabled;\n+  }\n+\n+  async transform(data: Readonly<GetActivity>, result: Result) {\n+    const promises: Promise<void>[] = [];\n+\n+    for (const key of Object.keys(result)) {\n+      const currentElement = result[key];\n+      const comments = currentElement.comments || [];\n+      const specificationBody = (data.self as GitHubIssue)?.body;\n+\n+      if (specificationBody && comments.length) {\n+        promises.push(\n+          this._processComment(\n+            comments,\n+            specificationBody,\n+            comments.map((comment) => comment.content)\n+          )\n+        );\n+      }\n+    }\n+\n+    await Promise.all(promises);\n+    return result;\n+  }\n+\n+  async _processComment(comments: GithubComment[], specificationBody: string, commentsBody: string[]) {\n+    const relevance = await this._sampleRelevanceScoreResults(specificationBody, commentsBody);\n+\n+    if (relevance.length !== comments.length) {\n+      console.error(\"Relevance / Comment length mismatch! Skipping.\");\n+      return;\n+    }\n+\n+    for (let i = 0; i < relevance.length; i++) {\n+      const currentComment = comments[i];\n+      const currentRelevance = relevance[i];\n+      const currentReward = new Decimal(currentComment.score?.reward ? currentComment.score.reward : 0);\n+      currentComment.score = {\n+        ...(currentComment.score || {}),\n+        relevance: currentRelevance.toNumber(),\n+        reward: currentReward.mul(currentRelevance).toNumber(),\n+      };\n+    }\n+  }\n+\n+  async _evaluateComments(specification: string, comments: string[]) {\n+    const prompt = this._generatePrompt(specification, comments);\n+\n+    try {\n+      const response: OpenAI.Chat.ChatCompletion = await this._openAi.chat.completions.create({\n+        model: this._getOptimalModel(prompt),\n+        messages: [\n+          {\n+            role: \"system\",\n+            content: prompt,\n+          },\n+        ],\n+        temperature: 1,\n+        max_tokens: 128,\n+        top_p: 1,\n+        frequency_penalty: 0,\n+        presence_penalty: 0,\n+      });\n+\n+      const rawResponse = String(response.choices[0].message.content);\n+      const parsedResponse = JSON.parse(rawResponse) as number[];\n+      return parsedResponse.map((o) => new Decimal(o));\n+    } catch (error) {\n+      console.error(`Failed to evaluate comment`, error);\n+      return [];\n+    }\n+  }\n+\n+  _getOptimalModel(prompt: string) {\n+    const encoder = encodingForModel(\"gpt-3.5-turbo\");\n+    const totalSumOfTokens = encoder.encode(prompt).length;\n+\n+    if (totalSumOfTokens <= 4097) {\n+      return \"gpt-3.5-turbo\";\n+    } else if (totalSumOfTokens <= 16385) {\n+      return \"gpt-3.5-turbo-16k\";\n+    } else {\n+      console.warn(\"Backup plan for development purposes only, but using gpt-4 due to huge context size\");\n+      return \"gpt-4\";","score":{"reward":2.184,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":92.965,"syllables":10,"sentences":1,"score":0.67035},"multiplier":1,"relevance":0.6}},{"id":1536640493,"content":"How's progress on mapping every webhook event type to its own bit?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536640493","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -18,6 +18,15 @@ import {\n   getPullRequestReviews,\n } from \"./start\";\n \n+export enum CommentType {","score":{"reward":3.36,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":69.99384615384618,"syllables":19,"sentences":1,"score":0.9000615384615382},"multiplier":1,"relevance":0.6}},{"id":1536977274,"content":"I guess my aspiration would be that we can handle situations where we fail to retrieve the data elegantly. What about an exponential back off? The GitHub action has the ability to run for six hours!\nOtherwise, if that's a bad idea then yes I agree with whilefoo that it should throw and exit the process. \nI'm still definitely leaning towards exponential backoff idea though, which implies that it should never be null, but instead perhaps, undefined.  \nThis can be addressed in another task","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536977274","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -18,6 +18,15 @@ import {\n   getPullRequestReviews,\n } from \"./start\";\n \n+export enum CommentType {\n+  REVIEW = 0b1,\n+  ISSUE = 0b10,\n+  ASSIGNEE = 0b100,\n+  ISSUER = 0b1000,\n+  COLLABORATOR = 0b10000,\n+  CONTRIBUTOR = 0b100000,\n+}\n+\n export class GetActivity {\n   constructor(private _issueParams: IssueParams) {}\n   self: Promise<GitHubIssue> | GitHubIssue | null = null;","score":{"reward":9.604,"formatting":{"content":{"p":{"score":0,"elementCount":1},"br":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":86,"wordValue":0.1,"result":2.64},"readability":{"fleschKincaid":60.468062015503904,"syllables":134,"sentences":6,"score":0.995319379844961},"multiplier":1,"relevance":0.7}},{"id":2005603215,"content":"I'll make a coffee and check on my computer. This deserves a proper review","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2005603215","commentType":"PULL_COLLABORATOR","score":{"reward":0.6,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":80.78250000000001,"syllables":21,"sentences":2,"score":0.7921749999999999},"multiplier":1,"relevance":0.1}},{"id":2006017678,"content":"Consider resolving conversations as you complete those.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2006017678","commentType":"PULL_COLLABORATOR","score":{"reward":1.296,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":18.44428571428574,"syllables":15,"sentences":1,"score":0.5844428571428574},"multiplier":1,"relevance":0.4}},{"id":2011172588,"content":"What's the best way to test? Maybe making a local development server is most efficient?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2011172588","commentType":"PULL_COLLABORATOR","score":{"reward":3.22,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":71.81500000000001,"syllables":24,"sentences":2,"score":0.8818499999999999},"multiplier":1,"relevance":0.5}},{"id":2011243903,"content":"It probably would make sense to make an action to test. \nThen I can see from mobile","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2011243903","commentType":"PULL_COLLABORATOR","score":{"reward":2.56,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":88.72514705882354,"syllables":22,"sentences":2,"score":0.7127485294117646},"multiplier":1,"relevance":0.4}},{"id":2012368835,"content":"https://github.com/FernandVEYRIER/conversation-rewards/actions/runs/8370670552/job/22918418831#step:5:16\nThis 0001 signals to me that you are not using BigNumber for your math operations. This is necessary for exactly this reason in javascript. \nOtherwise it looks great! Good work.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2012368835","commentType":"PULL_COLLABORATOR","score":{"reward":11.904,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":63.312090909090955,"syllables":70,"sentences":5,"score":0.9668790909090904},"multiplier":1,"relevance":0.8}},{"id":2014527120,"content":"Reviewing the action run data again: I noticed that the relevance scores seem to be with only one significant digit. This expresses to me that you are not running multiple samples and averaging them. Please make sure to do that because ChatGPT returns outliers. \r\n```\r\n\"relevance\": 0.2\r\n\"relevance\": 0.1\r\n\"relevance\": 0.2\r\n\"relevance\": 0.8\r\n\"relevance\": 0.2\r\n\"relevance\": 0.1\r\n\"relevance\": 0.2\r\n\"relevance\": 0.2\r\n\"relevance\": 0.6\r\n\"relevance\": 0.1\r\n\"relevance\": 0.2\r\n\"relevance\": 0.2\r\n\"relevance\": 0.9\r\n\"relevance\": 0.4\r\n\"relevance\": 0.8\r\n```\r\nIn my implementation I run 10x samples per comment then return an average.\r\nThis approach is a bit janky but it seems the simplest to implement and fairly accurate.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2014527120","commentType":"PULL_COLLABORATOR","score":{"reward":12.204,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":4,"words":{"wordCount":73,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":59.90093150684933,"syllables":114,"sentences":5,"score":0.9990093150684933},"multiplier":1,"relevance":0.9}},{"id":2014672447,"content":"I have no idea. For reference, previously we were averaging $5 a month with the old set up. This new setup implies 10x? So thats $50 a month which is quite steep for raw costs. \r\nI wonder if there is a more efficient approach to this. What about the old way of batching the entire conversation in one go?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2014672447","commentType":"PULL_COLLABORATOR","score":{"reward":7.44,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":59,"wordValue":0.1,"result":2.51},"readability":{"fleschKincaid":82.14230225988703,"syllables":80,"sentences":6,"score":0.7785769774011296},"multiplier":1,"relevance":0.6}},{"id":2014699270,"content":"Let's aim to make the max increase for now to $10 a month and go from there. Take a best guess doesn't matter if it's totally accurate.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2014699270","commentType":"PULL_COLLABORATOR","score":{"reward":5.448,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":90.09000000000002,"syllables":36,"sentences":2,"score":0.6990999999999998},"multiplier":1,"relevance":0.6}},{"id":2016521915,"content":"@whilefoo can you confirm that this is good to go and then we can merge","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2016521915","commentType":"PULL_COLLABORATOR","score":{"reward":1.752,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":90.09000000000002,"syllables":18,"sentences":1,"score":0.6990999999999998},"multiplier":1,"relevance":0.3}},{"id":2017076781,"content":"Thanks for the thorough review! However I was hoping you would be able to provide guidance on how the kernel will interface with this plugin @whilefoo or do you think this is pretty much ready for testing?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2017076781","commentType":"PULL_COLLABORATOR","score":{"reward":7.56,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":64.58722972972974,"syllables":54,"sentences":2,"score":0.9541277027027025},"multiplier":1,"relevance":0.7}},{"id":2017522393,"content":"@gentlementlegen just a heads up but your local git client seems out of sync with your GitHub profile somehow. There are no more avatars next to your commits.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2017522393","commentType":"PULL_COLLABORATOR","score":{"reward":1.848,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":68.74642857142858,"syllables":41,"sentences":2,"score":0.9125357142857142},"multiplier":1,"relevance":0.2}}],"reviewRewards":[{"reviews":[{"reviewId":1945074130,"effect":{"addition":437,"deletion":79},"reward":20.64,"priority":4},{"reviewId":1945376067,"effect":{"addition":214,"deletion":37},"reward":10.04,"priority":4},{"reviewId":1954071149,"effect":{"addition":321,"deletion":135},"reward":18.24,"priority":4},{"reviewId":1956386856,"effect":{"addition":110,"deletion":29},"reward":5.56,"priority":4},{"reviewId":1956754761,"effect":{"addition":77,"deletion":93},"reward":6.8,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 276.654 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>5</td><td>61.28</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>11.87</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>17.672</td></tr><tr><td>Review</td><td>Comment</td><td>47</td><td>185.832</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3\" target=\"_blank\" rel=\"noopener\">#3</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+437 -79</td><td>4</td><td>20.64</td></tr><tr><td>+214 -37</td><td>4</td><td>10.04</td></tr><tr><td>+321 -135</td><td>4</td><td>18.24</td></tr><tr><td>+110 -29</td><td>4</td><td>5.56</td></tr><tr><td>+77 -93</td><td>4</td><td>6.8</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/2\" target=\"_blank\" rel=\"noopener\">## ContextImplement a mechanism to reward contributors based o&hellip;</a></h6></td><td><details><summary>9.56</summary><pre>content:&#13;  content:&#13;    h2:&#13;      score: 1&#13;      elementCount: 5&#13;    p:&#13;      score: 0&#13;      elementCount: 23&#13;    ul:&#13;      score: 0&#13;      elementCount: 5&#13;    li:&#13;      score: 0.1&#13;      elementCount: 18&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 8.8&#13;regex:&#13;  wordCount: 323&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>1</td><td>1</td><td>11.87</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/2#issuecomment-2002941620\" target=\"_blank\" rel=\"noopener\">GPT-3.5 is sufficient. I run it 10x per comment and sample an av&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 72&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.9</td><td>4</td><td>11.88</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/2#issuecomment-2002991289\" target=\"_blank\" rel=\"noopener\">I think this might need to be broken down into separate tasks. L&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.8</td><td>4</td><td>5.792</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#pullrequestreview-1956386856\" target=\"_blank\" rel=\"noopener\">I'm pretty much ready to test in production. We can set up anoth&hellip;</a></h6></td><td><details><summary>2.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.3</td><td>4</td><td>3.072</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529629118\" target=\"_blank\" rel=\"noopener\">Why?</a></h6></td><td><details><summary>0.14</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0.1&#13;  result: 0.14&#13;</pre></details></td><td>0.4</td><td>4</td><td>0.288</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529629314\" target=\"_blank\" rel=\"noopener\">How about &#96;jest.config.ts&#96; or json?</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.5</td><td>4</td><td>1.04</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529629742\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion\"description\": \"Generate rewards fo&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529630255\" target=\"_blank\" rel=\"noopener\">Configuration should be handled in the upstream partner repo/org&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.6</td><td>4</td><td>4.872</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529630961\" target=\"_blank\" rel=\"noopener\">Why are they called transformers? Is this a generative pre-train&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.3</td><td>4</td><td>1.692</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529793870\" target=\"_blank\" rel=\"noopener\">Generally speaking, using &#96;object&#96; as a data type is con&hellip;</a></h6></td><td><details><summary>1.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.8</td><td>4</td><td>7.872</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529794724\" target=\"_blank\" rel=\"noopener\">Is it better to always return as a &#96;Promise&lt;Result&gt;&#9&hellip;</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.7</td><td>4</td><td>2.94</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529795402\" target=\"_blank\" rel=\"noopener\">Perhaps its best to initialize as an empty array instead?&#96;&hellip;</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.7</td><td>4</td><td>3.22</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529796156\" target=\"_blank\" rel=\"noopener\">I think this might need to be a &#96;string&#96; (or &#96;BigNum&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.8</td><td>4</td><td>4.192</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529797204\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionreturn comment.body &amp;&amp; co&hellip;</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>4</td><td>1.82</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529798453\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion&#96;&#96;&#96;I feel that JSDoc is&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.5</td><td>4</td><td>5.16</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529799508\" target=\"_blank\" rel=\"noopener\">The team had a whole debate on how the keys from the config shou&hellip;</a></h6></td><td><details><summary>1.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>0.6</td><td>4</td><td>5.736</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529800446\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion}, [] as number[])&#96;&#96;&&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.6</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529800889\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion.sort((a, b) =&gt; a - b);&#9&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.6</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529803757\" target=\"_blank\" rel=\"noopener\">I actually deliberately changed the \"bounty\" terminology to \"tas&hellip;</a></h6></td><td><details><summary>2.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;  result: 0&#13;regex:&#13;  wordCount: 127&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>0.7</td><td>4</td><td>8.792</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529807009\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion: void 0;&#96;&#96;&#&hellip;</a></h6></td><td><details><summary>2.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.6</td><td>4</td><td>6.072</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529813657\" target=\"_blank\" rel=\"noopener\">It's fine as is but thinking its AI related is my bias.</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.3</td><td>4</td><td>1.572</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529826057\" target=\"_blank\" rel=\"noopener\">This whole thing is the comment module. That may make sense only&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.5</td><td>4</td><td>4.12</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529826658\" target=\"_blank\" rel=\"noopener\">I'm not sure I think I was trained by some linters at some point&hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.4</td><td>4</td><td>4.016</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529827562\" target=\"_blank\" rel=\"noopener\">---https://chat.openai.com/share/3206263b-ba8d-4c4c-9890-5264f&hellip;</a></h6></td><td><details><summary>1</summary><pre>content:&#13;  content:&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.2</td><td>4</td><td>1.04</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529831471\" target=\"_blank\" rel=\"noopener\">We only plan to support the latest Chrome browsers basically, or&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.5</td><td>4</td><td>3.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529848343\" target=\"_blank\" rel=\"noopener\">Vscode doesn't do any of that by default so it seems to be a lia&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.5</td><td>4</td><td>3.12</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529849912\" target=\"_blank\" rel=\"noopener\">Maybe that's true in your and my experience. But I was told othe&hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.4</td><td>4</td><td>3.872</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529853505\" target=\"_blank\" rel=\"noopener\">This doesn't seem right. It should be 0 but it should count the&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.7</td><td>4</td><td>5.012</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529855374\" target=\"_blank\" rel=\"noopener\">I thought this was higher at 5 by default? I wonder if it makes &hellip;</a></h6></td><td><details><summary>2.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 54&#13;  wordValue: 0.1&#13;  result: 2.44&#13;</pre></details></td><td>0.6</td><td>4</td><td>7.512</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529857238\" target=\"_blank\" rel=\"noopener\">Strong and italics seem to be recognized as the same item in my &hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 74&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.6</td><td>4</td><td>7.704</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529858455\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionbr: 0&#96;&#96;&#96;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1529858816\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionhr: 0&#96;&#96;&#96;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1535132558\" target=\"_blank\" rel=\"noopener\">I was looking through the GitHub Actions logs and couldn't under&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.6</td><td>4</td><td>3.936</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1535133359\" target=\"_blank\" rel=\"noopener\">I was just providing you context for why they are set as 0. Its &hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.4</td><td>4</td><td>2.304</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1535169994\" target=\"_blank\" rel=\"noopener\">A key might be useful to have for debugging purposes somewhere!</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.5</td><td>4</td><td>2.5</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536640111\" target=\"_blank\" rel=\"noopener\">Can you make this identifier named something that will not colli&hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.8</td><td>4</td><td>7.776</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536640313\" target=\"_blank\" rel=\"noopener\">Not sure if we need to specify -32k</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.6</td><td>4</td><td>2.184</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536640493\" target=\"_blank\" rel=\"noopener\">How's progress on mapping every webhook event type to its own bi&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.6</td><td>4</td><td>3.36</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536977274\" target=\"_blank\" rel=\"noopener\">I guess my aspiration would be that we can handle situations whe&hellip;</a></h6></td><td><details><summary>2.64</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    br:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 86&#13;  wordValue: 0.1&#13;  result: 2.64&#13;</pre></details></td><td>0.7</td><td>4</td><td>9.604</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2005603215\" target=\"_blank\" rel=\"noopener\">I'll make a coffee and check on my computer. This deserves a pro&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.1</td><td>4</td><td>0.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2006017678\" target=\"_blank\" rel=\"noopener\">Consider resolving conversations as you complete those.</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.4</td><td>4</td><td>1.296</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2011172588\" target=\"_blank\" rel=\"noopener\">What's the best way to test? Maybe making a local development se&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.5</td><td>4</td><td>3.22</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2011243903\" target=\"_blank\" rel=\"noopener\">It probably would make sense to make an action to test. Then I &hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.4</td><td>4</td><td>2.56</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2012368835\" target=\"_blank\" rel=\"noopener\">https://github.com/FernandVEYRIER/conversation-rewards/actions/r&hellip;</a></h6></td><td><details><summary>2.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.8</td><td>4</td><td>11.904</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2014527120\" target=\"_blank\" rel=\"noopener\">Reviewing the action run data again: I noticed that the relevanc&hellip;</a></h6></td><td><details><summary>2.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 73&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.9</td><td>4</td><td>12.204</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2014672447\" target=\"_blank\" rel=\"noopener\">I have no idea. For reference, previously we were averaging $5 a&hellip;</a></h6></td><td><details><summary>2.51</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 59&#13;  wordValue: 0.1&#13;  result: 2.51&#13;</pre></details></td><td>0.6</td><td>4</td><td>7.44</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2014699270\" target=\"_blank\" rel=\"noopener\">Let's aim to make the max increase for now to $10 a month and go&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.6</td><td>4</td><td>5.448</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2016521915\" target=\"_blank\" rel=\"noopener\">@whilefoo can you confirm that this is good to go and then we ca&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.3</td><td>4</td><td>1.752</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2017076781\" target=\"_blank\" rel=\"noopener\">Thanks for the thorough review! However I was hoping you would b&hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>0.7</td><td>4</td><td>7.56</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#issuecomment-2017522393\" target=\"_blank\" rel=\"noopener\">@gentlementlegen just a heads up but your local git client seems&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.2</td><td>4</td><td>1.848</td></tr></tbody></table></details>"},"rndquu":{"total":31.14,"userId":119500907,"comments":[{"id":1531099567,"content":"We decided to use camel cased parameters ([example](https://github.com/ubiquity/ubiquibot-config/blob/6f102946f0b511cbb7a53221d9230841fdc61642/.github/ubiquibot-config.yml)) for the bot's config on partners' side. I guess the same convention should be applied to plugin configs (if `redeem-bounty` refers to it).","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1531099567","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,68 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue, GitHubIssueComment } from \"../github-types\";\n+import { Result, Transformer } from \"./processor\";\n+\n+/**\n+ * Creates entries for each bounty hunter with its associated comments.\n+ */\n+export class UserExtractorTransformer implements Transformer {\n+  private readonly _configuration = configuration[\"user-extractor\"];\n+\n+  get enabled(): boolean {\n+    return true;\n+  }\n+\n+  /**\n+   * Checks if the comment is made by a human user, and if it not a command.\n+   * @param comment\n+   */\n+  _checkEntryValidity(comment: GitHubIssueComment) {\n+    return !!comment.user && !!comment.body && comment.user.type === \"User\";\n+  }\n+\n+  _extractBountyPrice(issue: GitHubIssue) {\n+    if (this._configuration[\"redeem-bounty\"] === false) {","score":{"reward":10.5,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":65.56701612903228,"syllables":46,"sentences":2,"score":0.9443298387096771},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":1947373653,"effect":{"addition":437,"deletion":79},"reward":20.64,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 31.14 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>20.64</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>10.5</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3\" target=\"_blank\" rel=\"noopener\">#3</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+437 -79</td><td>4</td><td>20.64</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1531099567\" target=\"_blank\" rel=\"noopener\">We decided to use camel cased parameters ([example](https://gith&hellip;</a></h6></td><td><details><summary>2.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.7</td><td>4</td><td>10.5</td></tr></tbody></table></details>"},"whilefoo":{"total":112.252,"userId":139262667,"comments":[{"id":1536914897,"content":"```suggestion\r\n    for (const comment of data.allComments) {\r\n```\r\ncould use better naming","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536914897","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,38 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { Module, Result } from \"./processor\";\n+\n+/**\n+ * Removes the data in the comments that we do not want to be processed.\n+ */\n+export class DataPurgeModule implements Module {\n+  readonly configuration = configuration.dataPurge;\n+\n+  get enabled(): boolean {\n+    return this.configuration.enabled;\n+  }\n+\n+  transform(data: Readonly<GetActivity>, result: Result) {\n+    for (const value of data.allComments) {","score":{"reward":1.54,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":75.87500000000001,"syllables":6,"sentences":1,"score":0.8412499999999998},"multiplier":1,"relevance":0.7}},{"id":1536915264,"content":"won't this leave untransformed comments in the array?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536915264","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,38 @@\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { Module, Result } from \"./processor\";\n+\n+/**\n+ * Removes the data in the comments that we do not want to be processed.\n+ */\n+export class DataPurgeModule implements Module {\n+  readonly configuration = configuration.dataPurge;\n+\n+  get enabled(): boolean {\n+    return this.configuration.enabled;\n+  }\n+\n+  transform(data: Readonly<GetActivity>, result: Result) {\n+    for (const value of data.allComments) {\n+      if (value.body && value.user?.login && result[value.user.login]) {\n+        const newContent = value.body\n+          .replace(/^>.*$/gm, \"\")\n+          .replace(/[\\r\\n]+/g, \" \")\n+          .replace(/\\[.*?\\]\\(.*?\\)/g, \"\")\n+          .replace(/^\\/\\S+/g, \"\")\n+          .trim();\n+        if (newContent.length) {\n+          result[value.user.login].comments = [\n+            ...(result[value.user.login].comments ?? []),","score":{"reward":3.78,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":75.50000000000003,"syllables":13,"sentences":1,"score":0.8449999999999998},"multiplier":1,"relevance":0.9}},{"id":1536916835,"content":"```suggestion\r\n      const currentReward = new Decimal(currentComment.score?.reward || 0);\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536916835","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,141 @@\n+import Decimal from \"decimal.js\";\n+import { encodingForModel } from \"js-tiktoken\";\n+import OpenAI from \"openai\";\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue } from \"../github-types\";\n+import { GithubComment, Module, Result } from \"./processor\";\n+\n+/**\n+ * Evaluates and rates comments.\n+ */\n+export class ContentEvaluatorModule implements Module {\n+  readonly _openAi = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n+  readonly configuration = configuration.contentEvaluator;\n+\n+  get enabled(): boolean {\n+    return this.configuration.enabled;\n+  }\n+\n+  async transform(data: Readonly<GetActivity>, result: Result) {\n+    const promises: Promise<void>[] = [];\n+\n+    for (const key of Object.keys(result)) {\n+      const currentElement = result[key];\n+      const comments = currentElement.comments || [];\n+      const specificationBody = (data.self as GitHubIssue)?.body;\n+\n+      if (specificationBody && comments.length) {\n+        promises.push(\n+          this._processComment(\n+            comments,\n+            specificationBody,\n+            comments.map((comment) => comment.content)\n+          )\n+        );\n+      }\n+    }\n+\n+    await Promise.all(promises);\n+    return result;\n+  }\n+\n+  async _processComment(comments: GithubComment[], specificationBody: string, commentsBody: string[]) {\n+    const relevance = await this._sampleRelevanceScoreResults(specificationBody, commentsBody);\n+\n+    if (relevance.length !== comments.length) {\n+      console.error(\"Relevance / Comment length mismatch! Skipping.\");\n+      return;\n+    }\n+\n+    for (let i = 0; i < relevance.length; i++) {\n+      const currentComment = comments[i];\n+      const currentRelevance = relevance[i];\n+      const currentReward = new Decimal(currentComment.score?.reward ? currentComment.score.reward : 0);","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.6}},{"id":1536917017,"content":"why pass `comments` and `commentsBody`? You can get `commentsBody` from `comments`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536917017","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,141 @@\n+import Decimal from \"decimal.js\";\n+import { encodingForModel } from \"js-tiktoken\";\n+import OpenAI from \"openai\";\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue } from \"../github-types\";\n+import { GithubComment, Module, Result } from \"./processor\";\n+\n+/**\n+ * Evaluates and rates comments.\n+ */\n+export class ContentEvaluatorModule implements Module {\n+  readonly _openAi = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n+  readonly configuration = configuration.contentEvaluator;\n+\n+  get enabled(): boolean {\n+    return this.configuration.enabled;\n+  }\n+\n+  async transform(data: Readonly<GetActivity>, result: Result) {\n+    const promises: Promise<void>[] = [];\n+\n+    for (const key of Object.keys(result)) {\n+      const currentElement = result[key];\n+      const comments = currentElement.comments || [];\n+      const specificationBody = (data.self as GitHubIssue)?.body;\n+\n+      if (specificationBody && comments.length) {\n+        promises.push(\n+          this._processComment(\n+            comments,\n+            specificationBody,\n+            comments.map((comment) => comment.content)\n+          )\n+        );\n+      }\n+    }\n+\n+    await Promise.all(promises);\n+    return result;\n+  }\n+\n+  async _processComment(comments: GithubComment[], specificationBody: string, commentsBody: string[]) {","score":{"reward":2.88,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":118.6825,"syllables":7,"sentences":2,"score":1},"multiplier":1,"relevance":0.8}},{"id":1536917263,"content":"why is configuration read from a file and not from github action context?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536917263","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,20 @@\n+import { Command } from \"@commander-js/extra-typings\";\n+import { config } from \"dotenv\";\n+import packageJson from \"../../package.json\";\n+\n+if (process.env.NODE_ENV === \"test\") {\n+  config();\n+  const GITHUB_TOKEN = process.env.GITHUB_TOKEN;\n+  const OPENAI_API_KEY = process.env.OPENAI_API_KEY;\n+  process.argv = [\"path/to/node\", \"path/to/script\", `--auth`, `${GITHUB_TOKEN}`, \"--open-ai\", `${OPENAI_API_KEY}`];\n+}\n+\n+const program = new Command()\n+  .requiredOption(\"-a, --auth <token>\", \"GitHub authentication token\")\n+  .requiredOption(\"-o, --open-ai <token>\", \"OpenAi authentication token\")\n+  .option(\"-c, --config <path>\", \"The path to the desired configuration to use\", \"rewards-configuration.default.yml\")\n+  .option(\"-f, --file <file>\", \"The target file to store the results in\")\n+  .version(packageJson.version)\n+  .parse();\n+\n+export default program;","score":{"reward":3.976,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":56.97846153846157,"syllables":21,"sentences":1,"score":0.9697846153846157},"multiplier":1,"relevance":0.7}},{"id":1536917536,"content":"OpenAI token will be read from env even in production","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536917536","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,20 @@\n+import { Command } from \"@commander-js/extra-typings\";\n+import { config } from \"dotenv\";\n+import packageJson from \"../../package.json\";\n+\n+if (process.env.NODE_ENV === \"test\") {","score":{"reward":2.808,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":61.32500000000002,"syllables":16,"sentences":1,"score":0.9867499999999998},"multiplier":1,"relevance":0.6}},{"id":1536918112,"content":"```suggestion\r\nexport class IssueActivity {\r\n```\r\nGetActivity doesn't really make sense, maybe it'd better to name it IssueActivity","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536918112","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -18,6 +18,15 @@ import {\n   getPullRequestReviews,\n } from \"./start\";\n \n+export enum CommentType {\n+  REVIEW = 0b1,\n+  ISSUE = 0b10,\n+  ASSIGNEE = 0b100,\n+  ISSUER = 0b1000,\n+  COLLABORATOR = 0b10000,\n+  CONTRIBUTOR = 0b100000,\n+}\n+\n export class GetActivity {","score":{"reward":4.032,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":41.553571428571445,"syllables":25,"sentences":1,"score":0.8155357142857145},"multiplier":1,"relevance":0.7}},{"id":1536918299,"content":"```suggestion\r\n  if (path.length < 5) {\r\n```\r\nwe are accessing `path[4]` so length must be at least 5","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536918299","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -118,6 +118,9 @@ export async function getAllTimelineEvents(issueParams: IssueParams): Promise<Gi\n \n export function parseGitHubUrl(url: string): { owner: string; repo: string; issue_number: number } {\n   const path = new URL(url).pathname.split(\"/\");\n+  if (path.length < 4) {","score":{"reward":3.888,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":95.165,"syllables":12,"sentences":1,"score":0.64835},"multiplier":1,"relevance":0.9}},{"id":1536921560,"content":"```suggestion\r\n      const score = this._configuration?.scores?.[tagName] || 1;\r\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536921560","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,108 @@\n+import Decimal from \"decimal.js\";\n+import { JSDOM } from \"jsdom\";\n+import MarkdownIt from \"markdown-it\";\n+import configuration from \"../configuration/config-reader\";\n+import { CommentType, GetActivity } from \"../get-activity\";\n+import { GithubComment, Module, Result } from \"./processor\";\n+\n+interface Multiplier {\n+  formattingMultiplier: number;\n+  wordValue: number;\n+}\n+\n+export class FormattingEvaluatorModule implements Module {\n+  private readonly _configuration: {\n+    enabled: boolean;\n+    multipliers: ({ type: (keyof typeof CommentType)[] } & Multiplier)[];\n+    scores: { [key: string]: number };\n+  } = configuration.formattingEvaluator;\n+  private readonly _md = new MarkdownIt();\n+  private readonly _multipliers: { [k: string]: Multiplier } = {};\n+\n+  constructor() {\n+    if (this._configuration.multipliers) {\n+      this._multipliers = this._configuration.multipliers.reduce((acc, curr) => {\n+        return {\n+          ...acc,\n+          [curr.type.reduce((a, b) => CommentType[b] | a, 0)]: {\n+            wordValue: curr.wordValue,\n+            formattingMultiplier: curr.formattingMultiplier,\n+          },\n+        };\n+      }, {});\n+    }\n+  }\n+\n+  transform(data: Readonly<GetActivity>, result: Result) {\n+    for (const key of Object.keys(result)) {\n+      const currentElement = result[key];\n+      const comments = currentElement.comments || [];\n+      for (let i = 0; i < comments.length; i++) {\n+        const comment = comments[i];\n+        // Count with html elements if any, otherwise just treat it as plain text\n+        const { formatting } = this._getFormattingScore(comment);\n+        const multiplierFactor = this._multipliers?.[comment.type] ?? { wordValue: 0, formattingMultiplier: 0 };\n+        const formattingTotal = formatting\n+          ? Object.values(formatting).reduce(\n+              (acc, curr) =>\n+                acc.add(\n+                  new Decimal(curr.score)\n+                    .mul(multiplierFactor.formattingMultiplier)\n+                    .mul(curr.count)\n+                    .mul(multiplierFactor.wordValue)\n+                ),\n+              new Decimal(0)\n+            )\n+          : new Decimal(0);\n+        comment.score = {\n+          ...comment.score,\n+          formatting: {\n+            content: formatting,\n+            ...multiplierFactor,\n+          },\n+          reward: (comment.score?.reward ? formattingTotal.add(comment.score.reward) : formattingTotal).toNumber(),\n+        };\n+      }\n+    }\n+    return Promise.resolve(result);\n+  }\n+\n+  get enabled(): boolean {\n+    return this._configuration?.enabled;\n+  }\n+\n+  _getFormattingScore(comment: GithubComment) {\n+    const html = this._md.render(comment.content);\n+    const temp = new JSDOM(html);\n+    if (temp.window.document.body) {\n+      const res = this.classifyTagsWithWordCount(temp.window.document.body);\n+      return { formatting: res };\n+    } else {\n+      throw new Error(`Could not create DOM for comment [${comment}]`);\n+    }\n+  }\n+\n+  _countWords(text: string): number {\n+    return text.trim().split(/\\s+/).length;\n+  }\n+\n+  classifyTagsWithWordCount(htmlElement: HTMLElement) {\n+    const tagWordCount: Record<string, { count: number; score: number }> = {};\n+    const elements = htmlElement.getElementsByTagName(\"*\");\n+\n+    for (const element of elements) {\n+      const tagName = element.tagName.toLowerCase();\n+      const wordCount = this._countWords(element.textContent || \"\");\n+      let score = 1;","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":4,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.7}},{"id":1536922715,"content":"I see a lot of casts in this function, are they necessary?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536922715","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -30,31 +39,95 @@ export class GetActivity {\n     this.events = getIssueEvents(this._issueParams);\n     this.comments = getIssueComments(this._issueParams);\n     this.linkedReviews = this._getLinkedReviews();\n-    [this.self, this.events, this.comments, this.linkedReviews] = await Promise.all([this.self, this.events, this.comments, this.linkedReviews]);\n+    [this.self, this.events, this.comments, this.linkedReviews] = await Promise.all([\n+      this.self,\n+      this.events,\n+      this.comments,\n+      this.linkedReviews,\n+    ]);\n   }\n \n   private async _getLinkedReviews(): Promise<Review[]> {\n     const pulls = await collectLinkedMergedPulls(this._issueParams);\n-    const promises = pulls.map((pull) => {\n-      const repository = pull.source.issue.repository;\n+    const promises = pulls\n+      .map(async (pull) => {\n+        const repository = pull.source.issue.repository;\n \n-      if (!repository) {\n-        throw new Error(\"No repository found\");\n-      }\n-\n-      const pullParams = {\n-        owner: repository.owner.login,\n-        repo: repository.name,\n-        pull_number: pull.source.issue.number,\n-      };\n-      const review = new Review(pullParams);\n-      return review.init().then(() => review);\n-    });\n+        if (!repository) {\n+          console.error(`No repository found for [${pull.source.issue.repository}]`);\n+          return null;\n+        } else {\n+          const pullParams = {\n+            owner: repository.owner.login,\n+            repo: repository.name,\n+            pull_number: pull.source.issue.number,\n+          };\n+          const review = new Review(pullParams);\n+          await review.init();\n+          return review;\n+        }\n+      })\n+      .filter((o) => o !== null) as Promise<Review>[];\n     return Promise.all(promises);\n   }\n+\n+  _getTypeFromComment(\n+    comment: GitHubIssueComment | GitHubPullRequestReviewComment | GitHubIssue | GitHubPullRequest,\n+    self: GitHubPullRequest | GitHubIssue | null\n+  ) {\n+    let ret = 0;\n+    ret |= \"pull_request_review_id\" in comment ? CommentType.REVIEW : CommentType.ISSUE;\n+    if (comment.user?.id === self?.user?.id) {\n+      ret |= CommentType.ISSUER;\n+    } else if (comment.user?.id === self?.assignee?.id) {\n+      ret |= CommentType.ASSIGNEE;\n+    } else if (comment.author_association === \"MEMBER\") {\n+      ret |= CommentType.COLLABORATOR;\n+    } else if (comment.author_association === \"CONTRIBUTOR\") {\n+      ret |= CommentType.CONTRIBUTOR;\n+    }\n+    return ret;\n+  }\n+\n+  get allComments() {\n+    const comments: Array<\n+      (GitHubIssueComment | GitHubPullRequestReviewComment | GitHubIssue | GitHubPullRequest) & { type: CommentType }\n+    > = (this.comments as GitHubIssueComment[]).map((comment) => ({\n+      ...comment,\n+      type: this._getTypeFromComment(comment, this.self as GitHubIssue),\n+    }));\n+    if (this.self) {\n+      comments.push({\n+        ...(this.self as GitHubIssue),\n+        type: this._getTypeFromComment(this.self as GitHubIssue, this.self as GitHubIssue),\n+      });\n+    }\n+    if (this.linkedReviews) {\n+      for (const linkedReview of this.linkedReviews as Review[]) {\n+        if (linkedReview.self) {\n+          comments.push({\n+            ...(linkedReview.self as GitHubPullRequest),\n+            type: this._getTypeFromComment(\n+              linkedReview.self as GitHubPullRequest,\n+              linkedReview.self as GitHubPullRequest","score":{"reward":4.096,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":81.85500000000002,"syllables":16,"sentences":1,"score":0.7814499999999999},"multiplier":1,"relevance":0.8}},{"id":1536923315,"content":"I think we can remove this `Promise<>` because its awaited.\r\nAlso does `null` here indicate that the request to get issue/comments/reviews failed? If so in that case it'd be better if the whole calculation failed because we don't have full data.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536923315","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -18,6 +18,15 @@ import {\n   getPullRequestReviews,\n } from \"./start\";\n \n+export enum CommentType {\n+  REVIEW = 0b1,\n+  ISSUE = 0b10,\n+  ASSIGNEE = 0b100,\n+  ISSUER = 0b1000,\n+  COLLABORATOR = 0b10000,\n+  CONTRIBUTOR = 0b100000,\n+}\n+\n export class GetActivity {\n   constructor(private _issueParams: IssueParams) {}\n   self: Promise<GitHubIssue> | GitHubIssue | null = null;","score":{"reward":10.188,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":74.24015503875972,"syllables":60,"sentences":3,"score":0.8575984496124027},"multiplier":1,"relevance":0.9}},{"id":1536926737,"content":"`_processComment` will modify the comment instead of returning the comments which I think can be confusing. I saw this approach in this code multiple times for example Modules modify the result instead of returning a fresh result. While this is not wrong I'm not really a fan of functions modifying parameters because it can lead to bugs and it's not clear to the user of the function","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536926737","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,141 @@\n+import Decimal from \"decimal.js\";\n+import { encodingForModel } from \"js-tiktoken\";\n+import OpenAI from \"openai\";\n+import configuration from \"../configuration/config-reader\";\n+import { GetActivity } from \"../get-activity\";\n+import { GitHubIssue } from \"../github-types\";\n+import { GithubComment, Module, Result } from \"./processor\";\n+\n+/**\n+ * Evaluates and rates comments.\n+ */\n+export class ContentEvaluatorModule implements Module {\n+  readonly _openAi = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n+  readonly configuration = configuration.contentEvaluator;\n+\n+  get enabled(): boolean {\n+    return this.configuration.enabled;\n+  }\n+\n+  async transform(data: Readonly<GetActivity>, result: Result) {\n+    const promises: Promise<void>[] = [];\n+\n+    for (const key of Object.keys(result)) {\n+      const currentElement = result[key];\n+      const comments = currentElement.comments || [];\n+      const specificationBody = (data.self as GitHubIssue)?.body;\n+\n+      if (specificationBody && comments.length) {\n+        promises.push(\n+          this._processComment(\n+            comments,","score":{"reward":11.988,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":68,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":56.928333333333356,"syllables":102,"sentences":3,"score":0.9692833333333336},"multiplier":1,"relevance":0.9}},{"id":1536927165,"content":"It's not clear from Github but I'm guessing `configuration` is of type `any`? It'd be better to make types for the whole configuration using Typebox so you can also verify it in runtime when configuration gets loaded","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536927165","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,108 @@\n+import Decimal from \"decimal.js\";\n+import { JSDOM } from \"jsdom\";\n+import MarkdownIt from \"markdown-it\";\n+import configuration from \"../configuration/config-reader\";\n+import { CommentType, GetActivity } from \"../get-activity\";\n+import { GithubComment, Module, Result } from \"./processor\";\n+\n+interface Multiplier {\n+  formattingMultiplier: number;\n+  wordValue: number;\n+}\n+\n+export class FormattingEvaluatorModule implements Module {\n+  private readonly _configuration: {\n+    enabled: boolean;\n+    multipliers: ({ type: (keyof typeof CommentType)[] } & Multiplier)[];\n+    scores: { [key: string]: number };\n+  } = configuration.formattingEvaluator;","score":{"reward":8.832,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":38,"wordValue":0.1,"result":2.13},"readability":{"fleschKincaid":60.65000000000002,"syllables":57,"sentences":2,"score":0.9934999999999998},"multiplier":1,"relevance":0.8}},{"id":1536928542,"content":"why do you check if `key` is property of `obj` if `Object.entries(obj)` gives you all properties?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536928542","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,118 @@\n+import Decimal from \"decimal.js\";\n+import * as fs from \"fs\";\n+import configuration from \"../configuration/config-reader\";\n+import { CommentType, GetActivity } from \"../get-activity\";\n+import program from \"./command-line\";\n+import { ContentEvaluatorModule } from \"./content-evaluator-module\";\n+import { DataPurgeModule } from \"./data-purge-module\";\n+import { FormattingEvaluatorModule } from \"./formatting-evaluator-module\";\n+import { UserExtractorModule } from \"./user-extractor-module\";\n+\n+export class Processor {\n+  private _transformers: Module[] = [];\n+  private _result: Result = {};\n+  private readonly _configuration = configuration;\n+\n+  constructor() {\n+    this.add(new UserExtractorModule())\n+      .add(new DataPurgeModule())\n+      .add(new FormattingEvaluatorModule())\n+      .add(new ContentEvaluatorModule());\n+  }\n+\n+  add(transformer: Module) {\n+    this._transformers.push(transformer);\n+    return this;\n+  }\n+\n+  async run(data: Readonly<GetActivity>) {\n+    if (this._configuration.disabled) {\n+      console.log(\"Module is disabled. Skipping...\");\n+      return;\n+    }\n+    for (const transformer of this._transformers) {\n+      if (transformer.enabled) {\n+        this._result = await transformer.transform(data, this._result);\n+      }\n+    }\n+    // Aggregate total result\n+    for (const item of Object.keys(this._result)) {\n+      this._result[item].total = this._sumRewards(this._result[item]);\n+    }\n+    return this._result;\n+  }\n+\n+  dump() {\n+    const { file } = program.opts();\n+    const result = JSON.stringify(\n+      this._result,\n+      (key: string, value: string | number) => {\n+        // Changes \"type\" to be human-readable\n+        if (key === \"type\" && typeof value === \"number\") {\n+          const typeNames: string[] = [];\n+          const types = Object.values(CommentType) as number[];\n+          types.forEach((typeValue) => {\n+            if (value & typeValue) {\n+              typeNames.push(CommentType[typeValue]);\n+            }\n+          });\n+          return typeNames.join(\"|\");\n+        }\n+        return value;\n+      },\n+      2\n+    );\n+    if (!file) {\n+      console.log(result);\n+    } else {\n+      fs.writeFileSync(file, result);\n+    }\n+  }\n+\n+  _sumRewards(obj: Record<string, unknown>) {\n+    let totalReward = new Decimal(0);\n+\n+    for (const [key, value] of Object.entries(obj)) {\n+      if (Object.prototype.hasOwnProperty.call(obj, key)) {","score":{"reward":3.78,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":83.0092307692308,"syllables":17,"sentences":1,"score":0.7699076923076921},"multiplier":1,"relevance":0.7}},{"id":1537362644,"content":"then you can use `??` which applies only if left side is undefined or null","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1537362644","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -0,0 +1,108 @@\n+import Decimal from \"decimal.js\";\n+import { JSDOM } from \"jsdom\";\n+import MarkdownIt from \"markdown-it\";\n+import configuration from \"../configuration/config-reader\";\n+import { CommentType, GetActivity } from \"../get-activity\";\n+import { GithubComment, Module, Result } from \"./processor\";\n+\n+interface Multiplier {\n+  formattingMultiplier: number;\n+  wordValue: number;\n+}\n+\n+export class FormattingEvaluatorModule implements Module {\n+  private readonly _configuration: {\n+    enabled: boolean;\n+    multipliers: ({ type: (keyof typeof CommentType)[] } & Multiplier)[];\n+    scores: { [key: string]: number };\n+  } = configuration.formattingEvaluator;\n+  private readonly _md = new MarkdownIt();\n+  private readonly _multipliers: { [k: string]: Multiplier } = {};\n+\n+  constructor() {\n+    if (this._configuration.multipliers) {\n+      this._multipliers = this._configuration.multipliers.reduce((acc, curr) => {\n+        return {\n+          ...acc,\n+          [curr.type.reduce((a, b) => CommentType[b] | a, 0)]: {\n+            wordValue: curr.wordValue,\n+            formattingMultiplier: curr.formattingMultiplier,\n+          },\n+        };\n+      }, {});\n+    }\n+  }\n+\n+  transform(data: Readonly<GetActivity>, result: Result) {\n+    for (const key of Object.keys(result)) {\n+      const currentElement = result[key];\n+      const comments = currentElement.comments || [];\n+      for (let i = 0; i < comments.length; i++) {\n+        const comment = comments[i];\n+        // Count with html elements if any, otherwise just treat it as plain text\n+        const { formatting } = this._getFormattingScore(comment);\n+        const multiplierFactor = this._multipliers?.[comment.type] ?? { wordValue: 0, formattingMultiplier: 0 };\n+        const formattingTotal = formatting\n+          ? Object.values(formatting).reduce(\n+              (acc, curr) =>\n+                acc.add(\n+                  new Decimal(curr.score)\n+                    .mul(multiplierFactor.formattingMultiplier)\n+                    .mul(curr.count)\n+                    .mul(multiplierFactor.wordValue)\n+                ),\n+              new Decimal(0)\n+            )\n+          : new Decimal(0);\n+        comment.score = {\n+          ...comment.score,\n+          formatting: {\n+            content: formatting,\n+            ...multiplierFactor,\n+          },\n+          reward: (comment.score?.reward ? formattingTotal.add(comment.score.reward) : formattingTotal).toNumber(),\n+        };\n+      }\n+    }\n+    return Promise.resolve(result);\n+  }\n+\n+  get enabled(): boolean {\n+    return this._configuration?.enabled;\n+  }\n+\n+  _getFormattingScore(comment: GithubComment) {\n+    const html = this._md.render(comment.content);\n+    const temp = new JSDOM(html);\n+    if (temp.window.document.body) {\n+      const res = this.classifyTagsWithWordCount(temp.window.document.body);\n+      return { formatting: res };\n+    } else {\n+      throw new Error(`Could not create DOM for comment [${comment}]`);\n+    }\n+  }\n+\n+  _countWords(text: string): number {\n+    return text.trim().split(/\\s+/).length;\n+  }\n+\n+  classifyTagsWithWordCount(htmlElement: HTMLElement) {\n+    const tagWordCount: Record<string, { count: number; score: number }> = {};\n+    const elements = htmlElement.getElementsByTagName(\"*\");\n+\n+    for (const element of elements) {\n+      const tagName = element.tagName.toLowerCase();\n+      const wordCount = this._countWords(element.textContent || \"\");\n+      let score = 1;","score":{"reward":4.544,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":83.85357142857143,"syllables":18,"sentences":1,"score":0.7614642857142857},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":1956659024,"effect":{"addition":809,"deletion":78},"reward":35.48,"priority":4},{"reviewId":1960946571,"effect":{"addition":159,"deletion":102},"reward":10.44,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 112.252 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>45.92</td></tr><tr><td>Review</td><td>Comment</td><td>15</td><td>66.332</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3\" target=\"_blank\" rel=\"noopener\">#3</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+809 -78</td><td>4</td><td>35.48</td></tr><tr><td>+159 -102</td><td>4</td><td>10.44</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536914897\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionfor (const comment of data.allCom&hellip;</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.7</td><td>4</td><td>1.54</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536915264\" target=\"_blank\" rel=\"noopener\">won't this leave untransformed comments in the array?</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.9</td><td>4</td><td>3.78</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536916835\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionconst currentReward = new Decim&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.6</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536917017\" target=\"_blank\" rel=\"noopener\">why pass &#96;comments&#96; and &#96;commentsBody&#96;? You can &hellip;</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.8</td><td>4</td><td>2.88</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536917263\" target=\"_blank\" rel=\"noopener\">why is configuration read from a file and not from github action&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.7</td><td>4</td><td>3.976</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536917536\" target=\"_blank\" rel=\"noopener\">OpenAI token will be read from env even in production</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.6</td><td>4</td><td>2.808</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536918112\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionexport class IssueActivity {&#96;&#&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.7</td><td>4</td><td>4.032</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536918299\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionif (path.length &lt; 5) {&#96;&#9&hellip;</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.9</td><td>4</td><td>3.888</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536921560\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionconst score = this._configurati&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536922715\" target=\"_blank\" rel=\"noopener\">I see a lot of casts in this function, are they necessary?</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.8</td><td>4</td><td>4.096</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536923315\" target=\"_blank\" rel=\"noopener\">I think we can remove this &#96;Promise&lt;&gt;&#96; because its&hellip;</a></h6></td><td><details><summary>2.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 43&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>0.9</td><td>4</td><td>10.188</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536926737\" target=\"_blank\" rel=\"noopener\">&#96;_processComment&#96; will modify the comment instead of ret&hellip;</a></h6></td><td><details><summary>2.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 68&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>0.9</td><td>4</td><td>11.988</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536927165\" target=\"_blank\" rel=\"noopener\">It's not clear from Github but I'm guessing &#96;configuration&#&hellip;</a></h6></td><td><details><summary>2.13</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 38&#13;  wordValue: 0.1&#13;  result: 2.13&#13;</pre></details></td><td>0.8</td><td>4</td><td>8.832</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1536928542\" target=\"_blank\" rel=\"noopener\">why do you check if &#96;key&#96; is property of &#96;obj&#96; i&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.7</td><td>4</td><td>3.78</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/3#discussion_r1537362644\" target=\"_blank\" rel=\"noopener\">then you can use &#96;??&#96; which applies only if left side is&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.8</td><td>4</td><td>4.544</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_160.json","json":{"ishowvel":{"userId":186167176,"total":76.776,"task":{"reward":75,"multiplier":1},"comments":[{"id":2457011826,"content":"Don't you have to be an admin to set price and time priority.\nAlso would a valid fix to not generate rewards if the event actor of the issue closer is the same as the assignee and the price was also set by the assignee","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/160#issuecomment-2457011826","commentType":"ISSUE_ASSIGNEE","score":{"reward":1.776,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":46,"wordValue":0.1,"result":2.31},"readability":{"fleschKincaid":67.62478260869567,"syllables":63,"sentences":2,"score":0.9237521739130433},"multiplier":0.25,"relevance":0.8}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 76.776 XP ]</a>&nbsp;</h3><h6>@ishowvel</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.776</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/160#issuecomment-2457011826\" target=\"_blank\" rel=\"noopener\">Don't you have to be an admin to set price and time priority.Al&hellip;</a></h6></td><td><details><summary>2.31</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 46&#13;  wordValue: 0.1&#13;  result: 2.31&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.776</td></tr></tbody></table></details>"},"0x4007":{"total":75,"userId":4975670,"comments":[{"id":2464609685,"content":"Any collaborator can set a label \nThis is unclear but throw an error when the author closes the issue, and they are not an admin/billing_manager\nWe should also check that a collaborator approved the pull review. If so then we can make an exception and generate rewards","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/160#issuecomment-2464609685","commentType":"ISSUE_AUTHOR","score":{"reward":9,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":48,"wordValue":0.1,"result":2.35},"readability":{"fleschKincaid":52.05000000000001,"syllables":74,"sentences":2,"score":0.9205000000000001},"multiplier":1,"relevance":1}},{"id":2590620785,"content":"Occasionally there are instances where trusted contributors:\n1. File the spec\n2. Price the issue (they add both time and priority)\n3. Self assign\n4. Self merge. \nIf theres no other collaborator involved in any part of this process, we should refuse to generate the reward until somebody else steps in to reopen and close at least. \nUnfortunately after the pull is merged we cant leave a review state other than commented, and it doesnt make sense to change the labels or spec either. \n---\nOnly admins and billing managers should have this capability. I definitely need it for demo purposes when pitching.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/160","commentType":"ISSUE_SPECIFICATION","score":{"reward":3.86,"formatting":{"content":{"p":{"score":0,"elementCount":2},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":4},"hr":{"score":0,"elementCount":1}},"result":0.4},"priority":1,"words":{"wordCount":98,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":53.99814285714288,"syllables":154,"sentences":5,"score":0.9399814285714289},"multiplier":1,"relevance":1}},{"id":2428409792,"content":"Seems close but study the code elsewhere to see how we do logging and comments. They are formatted using our logger methods.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#pullrequestreview-2428409792","commentType":"PULL_COLLABORATOR","score":{"reward":4.116,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":76.46090909090911,"syllables":31,"sentences":2,"score":0.8353909090909089},"multiplier":1,"relevance":0.7}},{"id":1837365790,"content":"Syntax should be logger.error","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1837365790","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -110,7 +110,11 @@ export class GithubCommentModule extends BaseModule {\n     }\n     if (this._configuration?.post) {\n       try {\n-        await this.postComment(body);\n+        await this.postComment(\n+          Object.values(result).some((v) => v.permitUrl)\n+            ? body\n+            : \"Skipping generating permits due to issue being non collaborative\"","score":{"reward":1.809,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":68.93750000000003,"syllables":8,"sentences":2,"score":0.9106249999999997},"multiplier":1,"relevance":0.9}},{"id":1837366164,"content":"We don't use console","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1837366164","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -38,6 +38,16 @@ export class PermitGenerationModule extends BaseModule {\n   readonly _supabase = createClient<Database>(this.context.env.SUPABASE_URL, this.context.env.SUPABASE_KEY);\n \n   async transform(data: Readonly<IssueActivity>, result: Result): Promise<Result> {\n+    const canGeneratePermits = await this._canGeneratePermit(\n+      data,\n+      this.context.payload.repository.owner.login,\n+      this.context.payload.repository.name\n+    );\n+\n+    if (!canGeneratePermits) {\n+      console.warn(\"[PermitGenerationModule] Non collaborative issue detected, skipping.\");","score":{"reward":1.56,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":83.32000000000004,"syllables":7,"sentences":1,"score":0.7667999999999996},"multiplier":1,"relevance":0.8}},{"id":1846070544,"content":"Doesn't look right. Review the spec carefully. \r\nIf I authored the spec, self assign, and passed review from other collaborators; I should be able to merge and close the issue as complete and receive a reward.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1846070544","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -192,6 +202,32 @@ export class PermitGenerationModule extends BaseModule {\n     return this._deductFeeFromReward(result, treasuryGithubData);\n   }\n \n+  async _canGeneratePermit(data: Readonly<IssueActivity>, repoOwner: string, repoName: string) {\n+    if (!data.self?.closed_by || !data.self.assignee) return false;","score":{"reward":7.581,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":70.8463963963964,"syllables":54,"sentences":3,"score":0.891536036036036},"multiplier":1,"relevance":0.95}},{"id":2464605404,"content":"Please post QA and prove it works as expected","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2464605404","commentType":"PULL_COLLABORATOR","score":{"reward":2.453,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":103.70000000000002,"syllables":10,"sentences":1,"score":1},"multiplier":1,"relevance":0.75}},{"id":2466949058,"content":"@gentlementlegen They claim your changes made this harder to test so you'll know best","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2466949058","commentType":"PULL_COLLABORATOR","score":{"reward":1.8,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":78.81000000000003,"syllables":20,"sentences":1,"score":0.8118999999999997},"multiplier":1,"relevance":0.4}}],"reviewRewards":[{"reviews":[{"reviewId":2428409792,"effect":{"addition":1306,"deletion":1107},"reward":72.39,"priority":3},{"reviewId":2441832074,"effect":{"addition":9,"deletion":7},"reward":0.48,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 75 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>72.87</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>3.86</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>9</td></tr><tr><td>Review</td><td>Comment</td><td>6</td><td>19.319</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182\" target=\"_blank\" rel=\"noopener\">#182</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1306 -1107</td><td>3</td><td>72.39</td></tr><tr><td>+9 -7</td><td>3</td><td>0.48</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/160\" target=\"_blank\" rel=\"noopener\">Occasionally there are instances where trusted contributors:1. &hellip;</a></h6></td><td><details><summary>3.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 4&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0.4&#13;regex:&#13;  wordCount: 98&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>1</td><td>1</td><td>3.86</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/160#issuecomment-2464609685\" target=\"_blank\" rel=\"noopener\">Any collaborator can set a label This is unclear but throw an e&hellip;</a></h6></td><td><details><summary>2.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 48&#13;  wordValue: 0.1&#13;  result: 2.35&#13;</pre></details></td><td>1</td><td>3</td><td>9</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#pullrequestreview-2428409792\" target=\"_blank\" rel=\"noopener\">Seems close but study the code elsewhere to see how we do loggin&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.7</td><td>3</td><td>4.116</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1837365790\" target=\"_blank\" rel=\"noopener\">Syntax should be logger.error</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.9</td><td>3</td><td>1.809</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1837366164\" target=\"_blank\" rel=\"noopener\">We don't use console</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.56</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1846070544\" target=\"_blank\" rel=\"noopener\">Doesn't look right. Review the spec carefully. If I authored t&hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>0.95</td><td>3</td><td>7.581</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2464605404\" target=\"_blank\" rel=\"noopener\">Please post QA and prove it works as expected</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.75</td><td>3</td><td>2.453</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2466949058\" target=\"_blank\" rel=\"noopener\">@gentlementlegen They claim your changes made this harder to tes&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.8</td></tr></tbody></table></details>"},"gentlementlegen":{"total":75,"userId":9807008,"comments":[{"id":2474099875,"content":"`_isCollaborative`, `_nonAssigneeApprovedReviews` and `_isAdmin` are duplicated. Please move these into another file and reuse them. Otherwise it seems to work fine now.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#pullrequestreview-2474099875","commentType":"PULL_COLLABORATOR","score":{"reward":4.779,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":80.18561403508772,"syllables":27,"sentences":3,"score":0.7981438596491227},"multiplier":1,"relevance":0.9}},{"id":1839416024,"content":"Isn't there any equivalent directly with the rest methods?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1839416024","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -192,6 +202,32 @@ export class PermitGenerationModule extends BaseModule {\n     return this._deductFeeFromReward(result, treasuryGithubData);\n   }\n \n+  async _canGeneratePermit(data: Readonly<IssueActivity>, repoOwner: string, repoName: string) {\n+    if (!data.self?.closed_by || !data.self.assignee) return false;\n+\n+    const octokit = this.context.octokit as unknown as Context[\"octokit\"];\n+    const assignee = data.self?.assignee;\n+\n+    const assigneePerms = await octokit.request(\"GET /repos/{owner}/{repo}/collaborators/{username}/permission\", {","score":{"reward":2.106,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":61.32500000000002,"syllables":16,"sentences":1,"score":0.9867499999999998},"multiplier":1,"relevance":0.6}},{"id":1851355234,"content":"you can remove the `else` and just return `true` for simplicity","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1851355234","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -209,6 +210,30 @@ export class GithubCommentModule extends BaseModule {\n     return content.join(\"\");\n   }\n \n+  async _isCollaborative(data: Readonly<IssueActivity>) {\n+    if (!data.self?.closed_by || !data.self.assignee) return false;\n+\n+    const pullReview = data.linkedReviews[0];\n+    const assignee = data.self.assignee;\n+\n+    if (data.self.closed_by.id === assignee.id) {\n+      const pricingEventsByNonAssignee = data.events.find(\n+        (event) =>\n+          event.event === \"labeled\" &&\n+          \"label\" in event &&\n+          (event.label.name.startsWith(\"Time: \") || event.label.name.startsWith(\"Priority: \")) &&\n+          event.actor.id !== assignee.id\n+      );\n+\n+      const reviewsByNonAssignee = pullReview?.reviews?.filter(\n+        (v) => v.user?.id !== assignee.id && v.state === \"APPROVED\"\n+      );\n+      return !!pricingEventsByNonAssignee || !!reviewsByNonAssignee;\n+    } else {\n+      return true;","score":{"reward":1.944,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":66.10000000000002,"syllables":14,"sentences":1,"score":0.9389999999999997},"multiplier":1,"relevance":0.6}},{"id":1856157566,"content":"The problem here is that the reviews can still have \"APPROVED\" state even though afterward a \"CHANGES_REQUESTED\" is present. You should first split the reviews by assignee and remove the ones that are in the `review_requested` array from the pull-request itself. I had to implement a similar logic here: https://github.com/ubiquity-os-marketplace/command-start-stop/pull/91/files#diff-ad7752f33a7a7086e9ee9af78c95b792d0830df17b5f9be162e0b951bcd8e1d2R251\nI do not know if there is a simpler approach using GraphQL.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1856157566","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -203,6 +220,39 @@ export class GithubCommentModule extends BaseModule {\n     return content.join(\"\");\n   }\n \n+  async _isCollaborative(data: Readonly<IssueActivity>) {\n+    if (!data.self?.closed_by || !data.self.assignee) return false;\n+\n+    const pullReview = data.linkedReviews[0];","score":{"reward":10.944,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":61,"wordValue":0.1,"result":2.53},"readability":{"fleschKincaid":56.95575000000002,"syllables":116,"sentences":4,"score":0.9695575000000002},"multiplier":1,"relevance":0.8}},{"id":1856159744,"content":"No need to store that in a variable.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1856159744","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -192,6 +202,51 @@ export class PermitGenerationModule extends BaseModule {\n     return this._deductFeeFromReward(result, treasuryGithubData);\n   }\n \n+  async _canGeneratePermit(data: Readonly<IssueActivity>, repoOwner: string, repoName: string) {\n+    if (!data.self?.closed_by || !data.self.assignee) return false;\n+\n+    const isAdmin = await this._isAdmin(data.self.assignee.login, repoOwner, repoName);\n+    if (isAdmin) return true;\n+\n+    const isCollaborative = await this._isCollaborative(data);","score":{"reward":1.638,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":92.965,"syllables":10,"sentences":1,"score":0.67035},"multiplier":1,"relevance":0.6}},{"id":1856160966,"content":"Should not need a cast.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1856160966","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -192,6 +202,51 @@ export class PermitGenerationModule extends BaseModule {\n     return this._deductFeeFromReward(result, treasuryGithubData);\n   }\n \n+  async _canGeneratePermit(data: Readonly<IssueActivity>, repoOwner: string, repoName: string) {\n+    if (!data.self?.closed_by || !data.self.assignee) return false;\n+\n+    const isAdmin = await this._isAdmin(data.self.assignee.login, repoOwner, repoName);\n+    if (isAdmin) return true;\n+\n+    const isCollaborative = await this._isCollaborative(data);\n+    return isCollaborative;\n+  }\n+\n+  async _isCollaborative(data: Readonly<IssueActivity>) {\n+    if (!data.self?.closed_by || !data.self.assignee) return false;\n+\n+    const pullReview = data.linkedReviews[0];\n+    const assignee = data.self.assignee;\n+\n+    if (data.self.closed_by.id === assignee.id) {\n+      const pricingEventsByNonAssignee = data.events.find(\n+        (event) =>\n+          event.event === \"labeled\" &&\n+          \"label\" in event &&\n+          (event.label.name.startsWith(\"Time: \") || event.label.name.startsWith(\"Priority: \")) &&\n+          event.actor.id !== assignee.id\n+      );\n+\n+      const reviewsByNonAssignee = pullReview?.reviews?.filter(\n+        (v) => v.user?.id !== assignee.id && v.state === \"APPROVED\"\n+      );\n+      return !!pricingEventsByNonAssignee || !!reviewsByNonAssignee;\n+    }\n+    return true;\n+  }\n+\n+  async _isAdmin(username: string, repoOwner: string, repoName: string): Promise<boolean> {\n+    const octokit = this.context.octokit as unknown as Context[\"octokit\"];","score":{"reward":1.449,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":117.16000000000003,"syllables":5,"sentences":1,"score":1},"multiplier":1,"relevance":0.7}},{"id":1866728900,"content":"You can inline this.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1866728900","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -203,6 +212,62 @@ export class GithubCommentModule extends BaseModule {\n     return content.join(\"\");\n   }\n \n+  _isCollaborative(data: Readonly<IssueActivity>) {\n+    if (!data.self?.closed_by || !data.self.user) return false;\n+    const issueCreator = data.self.user;\n+\n+    if (data.self.closed_by.id === issueCreator.id) {\n+      const pricingEventsByNonAssignee = data.events.find(\n+        (event) =>\n+          event.event === \"labeled\" &&\n+          \"label\" in event &&\n+          (event.label.name.startsWith(\"Time: \") || event.label.name.startsWith(\"Priority: \")) &&\n+          event.actor.id !== issueCreator.id\n+      );\n+      return !!pricingEventsByNonAssignee || !!this._nonAssigneeApprovedReviews(data);\n+    }\n+    return true;\n+  }\n+\n+  _nonAssigneeApprovedReviews(data: Readonly<IssueActivity>) {\n+    if (data.linkedReviews[0] && data.self?.assignee) {\n+      const pullRequest = data.linkedReviews[0].self;\n+      const pullReview = data.linkedReviews[0];\n+      const reviewsByNonAssignee: GitHubPullRequestReviewState[] = [];\n+      const assignee = data.self.assignee;\n+\n+      if (pullReview.reviews && pullRequest) {\n+        for (const review of pullReview.reviews) {\n+          const isReviewRequestedForUser =\n+            \"requested_reviewers\" in pullRequest &&\n+            pullRequest.requested_reviewers?.some((o) => o.id === review.user?.id);\n+          if (!isReviewRequestedForUser && review.user?.id) {\n+            reviewsByNonAssignee.push(review);\n+          }\n+        }\n+      }\n+      const approvedReviewsByNonAssignee = reviewsByNonAssignee.filter(\n+        (v) => v.user?.id !== assignee.id && v.state === \"APPROVED\"\n+      );\n+      return approvedReviewsByNonAssignee;","score":{"reward":0.936,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":97.025,"syllables":5,"sentences":1,"score":0.6297499999999999},"multiplier":1,"relevance":0.6}},{"id":2466974841,"content":"@ishowvel You can just merge the development branch here and you should not have any issues with the tests.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2466974841","commentType":"PULL_COLLABORATOR","score":{"reward":2.148,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":76.2342105263158,"syllables":25,"sentences":1,"score":0.8376578947368419},"multiplier":1,"relevance":0.4}},{"id":2476351456,"content":"@ishowvel please delete the `dist` folder so the binary gets re-generated thanks.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2476351456","commentType":"PULL_COLLABORATOR","score":{"reward":2.793,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":53.655,"syllables":20,"sentences":1,"score":0.93655},"multiplier":1,"relevance":0.7}},{"id":2481401471,"content":"To make sure this compiles, add `\"exclude\": [\"tests\"]` in `tsconfig.json`. Second, please add related unit tests to these changes.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2481401471","commentType":"PULL_COLLABORATOR","score":{"reward":3.72,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":87.67750000000001,"syllables":21,"sentences":2,"score":0.7232249999999999},"multiplier":1,"relevance":0.8}},{"id":2486588703,"content":"@ishowvel Could you please merge the development branch here and fix the conflicts?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2486588703","commentType":"PULL_COLLABORATOR","score":{"reward":2.1,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":69.99384615384618,"syllables":19,"sentences":1,"score":0.9000615384615382},"multiplier":1,"relevance":0.5}},{"id":2487731145,"content":"I tested this, and it does not work as expected. If the permits fail to generate or if the permit module is disabled, I will post that the issue is non collaborative, when I am actually an admin closing the task, see [this run](https://github.com/Meniole/text-conversation-rewards/issues/30#issuecomment-2487726413).","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2487731145","commentType":"PULL_COLLABORATOR","score":{"reward":11.286,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":44,"wordValue":0.1,"result":2.27},"readability":{"fleschKincaid":67.21863636363636,"syllables":61,"sentences":2,"score":0.9278136363636363},"multiplier":1,"relevance":0.9}},{"id":2492964513,"content":"@ishowvel Token for what purpose? What are you trying to achieve?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2492964513","commentType":"PULL_COLLABORATOR","score":{"reward":1.089,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":78.19795454545455,"syllables":16,"sentences":2,"score":0.8180204545454545},"multiplier":1,"relevance":0.3}},{"id":2493138615,"content":"Yes you can use your own token for that and set it in the environment. With the command line you can get it\n`gh auth token`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2493138615","commentType":"PULL_COLLABORATOR","score":{"reward":2.91,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":23,"wordValue":0.1,"result":1.61},"readability":{"fleschKincaid":92.17119565217394,"syllables":28,"sentences":2,"score":0.6782880434782607},"multiplier":1,"relevance":0.5}},{"id":2495247715,"content":"You do not have permissions within `ubiquity-os` which is why this happens. You should try on your own organization.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2495247715","commentType":"PULL_COLLABORATOR","score":{"reward":3.114,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":75.50000000000003,"syllables":26,"sentences":2,"score":0.8449999999999998},"multiplier":1,"relevance":0.6}},{"id":2500016867,"content":"@ishowvel What is the difference between the logic you implemented within `github-content-module` and `permit-generation-module`?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2500016867","commentType":"PULL_COLLABORATOR","score":{"reward":2.751,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":46.60500000000002,"syllables":21,"sentences":1,"score":0.8660500000000002},"multiplier":1,"relevance":0.7}},{"id":2500306606,"content":"Check this test here: https://github.com/Meniole/text-conversation-rewards/issues/33\r\nI am admin of the organization but opening and closing this pull-request does not generate permits, which doesn't fulfill the specification","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2500306606","commentType":"PULL_COLLABORATOR","score":{"reward":8.376,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":45.215,"syllables":61,"sentences":2,"score":0.8521500000000001},"multiplier":1,"relevance":0.8}},{"id":2500739069,"content":"@ishowvel I don't think there is a `billing_manager` status for a specific repository only organization wise isn't it?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2500739069","commentType":"PULL_COLLABORATOR","score":{"reward":3.204,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":40.613157894736844,"syllables":33,"sentences":1,"score":0.8061315789473684},"multiplier":1,"relevance":0.6}},{"id":2503462679,"content":"@ishowvel I restarted the Jest site and indeed tests work. However, when I re-opened and closed an issue within an organization where I am an administrator, it didn't work, see https://github.com/Meniole/text-conversation-rewards/issues/33#issuecomment-2503460148 did you test this case?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2503462679","commentType":"PULL_COLLABORATOR","score":{"reward":9.6,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":56.64500000000001,"syllables":76,"sentences":3,"score":0.9664500000000001},"multiplier":1,"relevance":0.8}},{"id":2503666412,"content":"@ishowvel I am not sure about what you're asking me exactly, the workflow run url? If so, I ran that locally on my machine. Otherwise, the commit is the latest on your branch.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2503666412","commentType":"PULL_COLLABORATOR","score":{"reward":2.268,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":34,"wordValue":0.1,"result":2.01},"readability":{"fleschKincaid":75.89637254901962,"syllables":48,"sentences":3,"score":0.8410362745098038},"multiplier":1,"relevance":0.3}},{"id":2503871411,"content":"https://github.com/Meniole/text-conversation-rewards/issues/34\r\nhttps://github.com/Meniole/text-conversation-rewards/actions/runs/12051202639/job/33601716883","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2503871411","commentType":"PULL_COLLABORATOR","score":{"reward":3.81,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":2}},"result":2},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":50.67285714285717,"syllables":37,"sentences":3,"score":0.9067285714285717},"multiplier":1,"relevance":0.5}},{"id":2507099867,"content":"@ubiquity-ubiquibot is indeed a collaborator which is why it should fail, that worked fine. By my account is the admin of the org so I should have the capability to generate permits, which didn't work.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2507099867","commentType":"PULL_COLLABORATOR","score":{"reward":6.528,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":37,"wordValue":0.1,"result":2.1},"readability":{"fleschKincaid":57.72777027027027,"syllables":57,"sentences":2,"score":0.9772777027027026},"multiplier":1,"relevance":0.8}},{"id":2516053046,"content":"Seems ok\r\nhttps://github.com/Meniole/text-conversation-rewards/issues/39\r\nhttps://github.com/Meniole/text-conversation-rewards/issues/38\r\nhttps://github.com/Meniole/text-conversation-rewards/issues/37","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2516053046","commentType":"PULL_COLLABORATOR","score":{"reward":7.344,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":3}},"result":3},"priority":3,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":44.86245689655175,"syllables":53,"sentences":4,"score":0.8486245689655175},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2431860184,"effect":{"addition":1308,"deletion":1107},"reward":72.45,"priority":3},{"reviewId":2450258495,"effect":{"addition":2056,"deletion":169},"reward":66.75,"priority":3},{"reviewId":2457710470,"effect":{"addition":24,"deletion":6},"reward":0.9,"priority":3},{"reviewId":2474099875,"effect":{"addition":95,"deletion":63},"reward":4.74,"priority":3},{"reviewId":2477182830,"effect":{"addition":79,"deletion":130},"reward":6.27,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 75 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>⚠️ Your rewards have been limited to the task price of 75 XP.</h6><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>5</td><td>151.11</td></tr><tr><td>Review</td><td>Comment</td><td>23</td><td>96.837</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182\" target=\"_blank\" rel=\"noopener\">#182</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+1308 -1107</td><td>3</td><td>72.45</td></tr><tr><td>+2056 -169</td><td>3</td><td>66.75</td></tr><tr><td>+24 -6</td><td>3</td><td>0.9</td></tr><tr><td>+95 -63</td><td>3</td><td>4.74</td></tr><tr><td>+79 -130</td><td>3</td><td>6.27</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#pullrequestreview-2474099875\" target=\"_blank\" rel=\"noopener\">&#96;_isCollaborative&#96;, &#96;_nonAssigneeApprovedReviews&#96&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.9</td><td>3</td><td>4.779</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1839416024\" target=\"_blank\" rel=\"noopener\">Isn't there any equivalent directly with the rest methods?</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.6</td><td>3</td><td>2.106</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1851355234\" target=\"_blank\" rel=\"noopener\">you can remove the &#96;else&#96; and just return &#96;true&#96;&hellip;</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.944</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1856157566\" target=\"_blank\" rel=\"noopener\">The problem here is that the reviews can still have \"APPROVED\" s&hellip;</a></h6></td><td><details><summary>3.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 61&#13;  wordValue: 0.1&#13;  result: 2.53&#13;</pre></details></td><td>0.8</td><td>3</td><td>10.944</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1856159744\" target=\"_blank\" rel=\"noopener\">No need to store that in a variable.</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.638</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1856160966\" target=\"_blank\" rel=\"noopener\">Should not need a cast.</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.449</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#discussion_r1866728900\" target=\"_blank\" rel=\"noopener\">You can inline this.</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.6</td><td>3</td><td>0.936</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2466974841\" target=\"_blank\" rel=\"noopener\">@ishowvel You can just merge the development branch here and you&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.4</td><td>3</td><td>2.148</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2476351456\" target=\"_blank\" rel=\"noopener\">@ishowvel please delete the &#96;dist&#96; folder so the binary &hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.793</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2481401471\" target=\"_blank\" rel=\"noopener\">To make sure this compiles, add &#96;\"exclude\": [\"tests\"]&#96; i&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.72</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2486588703\" target=\"_blank\" rel=\"noopener\">@ishowvel Could you please merge the development branch here and&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.5</td><td>3</td><td>2.1</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2487731145\" target=\"_blank\" rel=\"noopener\">I tested this, and it does not work as expected. If the permits &hellip;</a></h6></td><td><details><summary>3.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 44&#13;  wordValue: 0.1&#13;  result: 2.27&#13;</pre></details></td><td>0.9</td><td>3</td><td>11.286</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2492964513\" target=\"_blank\" rel=\"noopener\">@ishowvel Token for what purpose? What are you trying to achieve?</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.089</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2493138615\" target=\"_blank\" rel=\"noopener\">Yes you can use your own token for that and set it in the enviro&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 23&#13;  wordValue: 0.1&#13;  result: 1.61&#13;</pre></details></td><td>0.5</td><td>3</td><td>2.91</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2495247715\" target=\"_blank\" rel=\"noopener\">You do not have permissions within &#96;ubiquity-os&#96; which i&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0.6</td><td>3</td><td>3.114</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2500016867\" target=\"_blank\" rel=\"noopener\">@ishowvel What is the difference between the logic you implement&hellip;</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.751</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2500306606\" target=\"_blank\" rel=\"noopener\">Check this test here: https://github.com/Meniole/text-conversati&hellip;</a></h6></td><td><details><summary>2.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.8</td><td>3</td><td>8.376</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2500739069\" target=\"_blank\" rel=\"noopener\">@ishowvel I don't think there is a &#96;billing_manager&#96; sta&hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.6</td><td>3</td><td>3.204</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2503462679\" target=\"_blank\" rel=\"noopener\">@ishowvel I restarted the Jest site and indeed tests work. Howev&hellip;</a></h6></td><td><details><summary>3.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>0.8</td><td>3</td><td>9.6</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2503666412\" target=\"_blank\" rel=\"noopener\">@ishowvel I am not sure about what you're asking me exactly, the&hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 34&#13;  wordValue: 0.1&#13;  result: 2.01&#13;</pre></details></td><td>0.3</td><td>3</td><td>2.268</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2503871411\" target=\"_blank\" rel=\"noopener\">https://github.com/Meniole/text-conversation-rewards/issues/34&hellip;</a></h6></td><td><details><summary>2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.5</td><td>3</td><td>3.81</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2507099867\" target=\"_blank\" rel=\"noopener\">@ubiquity-ubiquibot is indeed a collaborator which is why it sho&hellip;</a></h6></td><td><details><summary>2.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 37&#13;  wordValue: 0.1&#13;  result: 2.1&#13;</pre></details></td><td>0.8</td><td>3</td><td>6.528</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/182#issuecomment-2516053046\" target=\"_blank\" rel=\"noopener\">Seems okhttps://github.com/Meniole/text-conversation-rewards/i&hellip;</a></h6></td><td><details><summary>3.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 3&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.6</td><td>3</td><td>7.344</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_14.json","json":{"Keyrxng":{"userId":106303466,"total":56.653,"task":{"reward":50,"multiplier":1},"comments":[{"id":2244009998,"content":"yeah @gentlementlegen  https://github.com/ubiquibot/command-start-stop/pull/10/commits/aae3cbac583a433b6c0e52986f462a9546520041 resolved here in #10","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2244009998","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.392,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":33.98397058823531,"syllables":33,"sentences":2,"score":0.739839705882353},"multiplier":0.25,"relevance":0.8}},{"id":2244031438,"content":"`registered wallet` seems to wrap only when the warning is visible for some reason, nothing springs to mind on how to fix that\r\nhttps://github.com/ubq-testing/command-start-stop/issues/5#issuecomment-2243850760\r\n![image](https://github.com/user-attachments/assets/108d79e4-d962-4ecb-9ffa-237889f54b29)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2244031438","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.16,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":72.16022727272728,"syllables":46,"sentences":2,"score":0.8783977272727271},"multiplier":0.25,"relevance":0.2}},{"id":2245455562,"content":"Been reading through the GFM and CommonMark specs, GH docs etc but  haven't been able to find any other workarounds other than `<samp>`. We'll just have to live with the whitespace if using `<code>` blocks so which of the below options is best, included `<samp>` for easy comparison. I can't find any other workarounds with these tags or others such as `<kbd>` etc.\r\n---\r\n### 1\r\n<code>\r\n<table>\r\n<tr><td>Warning!</td><td>This task was created over 10 days ago. Please confirm that this issue specification is accurate before starting.</td></tr><tr><td>Deadline</td><td>Mon, Jul 22, 10:25 PM UTC</td></tr><tr><td>Registered Wallet</td><td>Register your wallet address using the following slash command: `/wallet 0x0000...0000`</td></tr>\r\n</table>\r\n</code>\r\n---\r\n### 2\r\n<code>\r\n<table><tr><td>Warning!</td><td>This task was created over 10 days ago. Please confirm that this issue specification is accurate before starting.</td></tr><tr><td>Deadline</td><td>Mon, Jul 22, 10:25 PM UTC</td></tr><tr><td>Registered Wallet</td><td>Register your wallet address using the following slash command: `/wallet 0x0000...0000`</td></tr></table>\r\n</code>\r\n---\r\n### 3\r\n<samp>\r\n<table><tr><td>Warning!</td><td>This task was created over 10 days ago. Please confirm that this issue specification is accurate before starting.</td></tr><tr><td>Deadline</td><td>Mon, Jul 22, 10:25 PM UTC</td></tr><tr><td>Registered Wallet</td><td>Register your wallet address using the following slash command: `/wallet 0x0000...0000`</td></tr></table>\r\n</samp>\r\n---","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2245455562","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.137,"formatting":{"content":{"p":{"score":0,"elementCount":12},"hr":{"score":0,"elementCount":4},"h3":{"score":1,"elementCount":3}},"result":3},"priority":1,"words":{"wordCount":245,"wordValue":0.1,"result":1.31},"readability":{"fleschKincaid":68.23023547880692,"syllables":346,"sentences":13,"score":0.9176976452119309},"multiplier":0.25,"relevance":0.1}},{"id":2247594793,"content":"Yeah it's only mobile that `<samp>` seems to have slightly different rendering\r\nI agree it looks best but no it is somewhat different although personally I think `<samp>` is the way to go because it'll most commonly be seen via desktop vs mobile and I'd rather no whitespace than to accommodate the lesser used platform.\r\nSounds like option 3 is preferred and that's how the code is right now so no changes needed in this regard","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2247594793","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.083,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":1,"words":{"wordCount":78,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":45.77307692307693,"syllables":112,"sentences":2,"score":0.8577307692307693},"multiplier":0.25,"relevance":0.1}},{"id":2285383795,"content":"@gentlementlegen you want to add it into the spec/title here and I'll handle both?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2285383795","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.24,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":68.9825,"syllables":23,"sentences":1,"score":0.910175},"multiplier":0.25,"relevance":0.6}},{"id":2285389471,"content":"I'm certain that we landed on sticking with `<samp>` and supporting the most used platform as it's only an issue on mobile so no need to do anything with that","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2285389471","commentType":"ISSUE_ASSIGNEE","score":{"reward":0.124,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":31,"wordValue":0.1,"result":1.92},"readability":{"fleschKincaid":60.750645161290336,"syllables":42,"sentences":1,"score":0.9924935483870967},"multiplier":0.25,"relevance":0.2}},{"id":2016430172,"content":"Resolves #14\r\nI'm assuming this will be merged quickly and once it and #9 both are more specific test cases can be built if needed. I don't wish to replicate the same changes across PRs in regards to fixing the pr and issue fetching etc\r\nRefactors:\r\n- direct config access no need for `timers` and `misc` props\r\n- `isTaskStale` uses `ms` same as config items and more readable\r\nwith config: \r\n```yml\r\n      - plugin: http://localhost:4000\r\n        runsOn: [\"issue_comment.created\"]\r\n        with:\r\n          reviewDelayTolerance: \"3 Days\"\r\n          taskStaleTimeoutDuration: \"15 Days\"\r\n          maxConcurrentTasks: 3\r\n          startRequiresWallet: false\r\n```\r\nQA:\r\n- [More than 15 days old](https://github.com/ubq-testing/bot-ai/issues/50)\r\n- [Less than 15 days old](https://github.com/ubq-testing/bot-ai/issues/51)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21","commentType":"PULL_SPECIFICATION","score":{"reward":5.517,"formatting":{"content":{"p":{"score":0,"elementCount":9},"ul":{"score":0,"elementCount":2},"li":{"score":0.1,"elementCount":4},"a":{"score":1,"elementCount":2}},"result":2.4},"priority":1,"words":{"wordCount":77,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":57.88737012987016,"syllables":100,"sentences":2,"score":0.9788737012987017},"multiplier":1,"relevance":0.85}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 56.653 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>50</td></tr><tr><td>Issue</td><td>Comment</td><td>6</td><td>1.136</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>5.517</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2244009998\" target=\"_blank\" rel=\"noopener\">yeah @gentlementlegen  https://github.com/ubiquibot/command-star&hellip;</a></h6></td><td><details><summary>1.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.392</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2244031438\" target=\"_blank\" rel=\"noopener\">&#96;registered wallet&#96; seems to wrap only when the warning &hellip;</a></h6></td><td><details><summary>2.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.16</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2245455562\" target=\"_blank\" rel=\"noopener\">Been reading through the GFM and CommonMark specs, GH docs etc b&hellip;</a></h6></td><td><details><summary>4.31</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 12&#13;    hr:&#13;      score: 0&#13;      elementCount: 4&#13;    h3:&#13;      score: 1&#13;      elementCount: 3&#13;  result: 3&#13;regex:&#13;  wordCount: 245&#13;  wordValue: 0.1&#13;  result: 1.31&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.137</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2247594793\" target=\"_blank\" rel=\"noopener\">Yeah it's only mobile that &#96;&lt;samp&gt;&#96; seems to have &hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 78&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.083</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2285383795\" target=\"_blank\" rel=\"noopener\">@gentlementlegen you want to add it into the spec/title here and&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.24</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2285389471\" target=\"_blank\" rel=\"noopener\">I'm certain that we landed on sticking with &#96;&lt;samp&gt;&#9&hellip;</a></h6></td><td><details><summary>1.92</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 31&#13;  wordValue: 0.1&#13;  result: 1.92&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.124</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21\" target=\"_blank\" rel=\"noopener\">Resolves #14I'm assuming this will be merged quickly and once &hellip;</a></h6></td><td><details><summary>5.02</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 9&#13;    ul:&#13;      score: 0&#13;      elementCount: 2&#13;    li:&#13;      score: 0.1&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2.4&#13;regex:&#13;  wordCount: 77&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.85</td><td>1</td><td>5.517</td></tr></tbody></table></details>"},"gentlementlegen":{"total":24.364,"userId":9807008,"comments":[{"id":2243997569,"content":"@Keyrxng would this be the fix for it? https://github.com/ubiquity/work.ubq.fi/issues/74#issuecomment-2242566257","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2243997569","commentType":"ISSUE_AUTHOR","score":{"reward":2.17,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":82.75694736842107,"syllables":27,"sentences":5,"score":0.7724305263157893},"multiplier":1,"relevance":1}},{"id":2244011846,"content":"Ok cool thank you, I will close this one after we got your fix merged.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2244011846","commentType":"ISSUE_AUTHOR","score":{"reward":1.256,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":101.37000000000002,"syllables":16,"sentences":1,"score":1},"multiplier":1,"relevance":0.8}},{"id":2244026707,"content":"I triple checked I cannot see any font difference.\r\n<img width=\"735\" alt=\"image\" src=\"https://github.com/user-attachments/assets/24f2453c-1e97-4a95-b7f6-54de12efa068\">\r\n<img width=\"735\" alt=\"image\" src=\"https://github.com/user-attachments/assets/b76dbc24-df8e-4004-8098-769159c38efc\">\r\n<img width=\"735\" alt=\"image\" src=\"https://github.com/user-attachments/assets/f5f0db36-202c-4409-8f5a-12fb63b1a102\">\r\n<img width=\"735\" alt=\"image\" src=\"https://github.com/user-attachments/assets/022f4a87-3ae0-4aed-8e49-a2475cdabe90\">\r\nMaybe there is a difference on mobile devices if you are using one?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2244026707","commentType":"ISSUE_AUTHOR","score":{"reward":1.598,"formatting":{"content":{"p":{"score":0,"elementCount":6},"a":{"score":1,"elementCount":4}},"result":4},"priority":1,"words":{"wordCount":46,"wordValue":0.1,"result":2.31},"readability":{"fleschKincaid":71.29000000000002,"syllables":128,"sentences":6,"score":0.8870999999999998},"multiplier":1,"relevance":0.2}},{"id":2244396724,"content":"@0x4007 Thanks for the screenshot, it seems to be more specific to mobile for the font. Maybe a font fallback happening there.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2244396724","commentType":"ISSUE_AUTHOR","score":{"reward":0.39,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":80.30636363636367,"syllables":30,"sentences":2,"score":0.7969363636363633},"multiplier":1,"relevance":0.2}},{"id":2246845672,"content":"Number 3 seems to be the best display in your propositions, if that works on mobile then let's go with it.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2246845672","commentType":"ISSUE_AUTHOR","score":{"reward":0.396,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":72.9868181818182,"syllables":29,"sentences":1,"score":0.8701318181818181},"multiplier":1,"relevance":0.2}},{"id":2285336634,"content":"@Keyrxng You mentioned that the bug was fixed, but now the opposite might be happening, see message here: https://github.com/ubiquity/pay.ubq.fi/issues/237#issuecomment-2285326567\r\nI also suggest that we change the configuration format to take a string representing a duration and not a number which is hard to understand and error prone.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2285336634","commentType":"ISSUE_AUTHOR","score":{"reward":4.27,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":46,"wordValue":0.1,"result":2.31},"readability":{"fleschKincaid":63.24493421052631,"syllables":87,"sentences":4,"score":0.9675506578947369},"multiplier":1,"relevance":1}},{"id":2285387841,"content":"@Keyrxng Done. Also, I guess the font issue should be carried out in a different issue most likely, if there is not once created already.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2285387841","commentType":"ISSUE_AUTHOR","score":{"reward":1.491,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":75.70750000000002,"syllables":35,"sentences":2,"score":0.8429249999999997},"multiplier":1,"relevance":0.7}},{"id":2308673448,"content":"For the `img` it is currently set to 0 so you can just change the configuration. For the relevance I will read the logs more in detail.\r\n---\r\nAfter reading the logs, it is possible that the allocated `max_tokens` fell short with the dummy test leading to empty relevances [here](https://github.com/ubiquibot/conversation-rewards/actions/runs/10538400999/job/29200872587#step:7:67). I guess we could add a margin (say for example 10 extra tokens) to make sure there is a result.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2308673448","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":2},"hr":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":1,"words":{"wordCount":67,"wordValue":0.1,"result":2.58},"readability":{"fleschKincaid":72.40389925373135,"syllables":93,"sentences":4,"score":0.8759610074626865},"multiplier":1,"relevance":0}},{"id":2308755339,"content":"@0x4007 It was supposed to be because the length of results is predictable, but when allocating only one token the result seems to be `{}` without the content (should be `{ \"1234\" : 0.5 }`. I'll investigate.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2308755339","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":61.05125000000001,"syllables":49,"sentences":2,"score":0.9894874999999999},"multiplier":1,"relevance":0}},{"id":2423900772,"content":"The bot shows a warning message on tasks that were opened recently, as seen [here](https://github.com/ubiquity/work.ubq.fi/issues/74#issuecomment-2242566257). It should only display this warning above a certain threshold, which comes from the configuration.\r\nA possible cause would be that value missing in the current configuration. If that is the case, the default threshold should be set, and definitely above 0 days.\r\n---\r\nTasks to be carried out:\r\n- display a warning message when the task is above the configuration threshold\r\n- do not display the warning if it is under that threshold\r\n- change the configuration to accept a string representing a duration instead of a time stamp\r\n- related tests","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14","commentType":"ISSUE_SPECIFICATION","score":{"reward":5.12,"formatting":{"content":{"p":{"score":0,"elementCount":7},"hr":{"score":0,"elementCount":1},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":4},"a":{"score":1,"elementCount":1}},"result":1.4},"priority":1,"words":{"wordCount":103,"wordValue":0.1,"result":2.59},"readability":{"fleschKincaid":54.50852427184469,"syllables":160,"sentences":5,"score":0.945085242718447},"multiplier":1,"relevance":1}},{"id":1715628766,"content":"Might wanna change `(1000 * 60 * 60)` tu use `ms`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1715628766","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -183,13 +184,26 @@ export async function getAvailableOpenedPullRequests(context: Context, username:\n       }\n     }\n \n-    if (reviews.length === 0 && (new Date().getTime() - new Date(openedPullRequest.created_at).getTime()) / (1000 * 60 * 60) >= reviewDelayTolerance) {\n+    if (\n+      reviews.length === 0 &&\n+      (new Date().getTime() - new Date(openedPullRequest.created_at).getTime()) / (1000 * 60 * 60) >= getTimeValue(reviewDelayTolerance)","score":{"reward":0.552,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":100.24000000000002,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.8}},{"id":1720908747,"content":"Maybe this check is redundant since you return `false` when `staleTaskMilliseconds` is equal to zero","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1720908747","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,9 +1,11 @@\n-export function checkTaskStale(staleTask: number, createdAt: string) {\n-  if (staleTask !== 0) {\n-    const days = Math.floor((new Date().getTime() - new Date(createdAt).getTime()) / (1000 * 60 * 60 * 24));\n-    const staleToDays = Math.floor(staleTask / (1000 * 60 * 60 * 24));\n-    return days >= staleToDays && staleToDays > 0;\n+export function checkTaskStale(staleTaskMilliseconds: number, createdAt: string): boolean {\n+  if (staleTaskMilliseconds === 0) {\n+    return false;\n   }\n \n-  return false;\n+  const currentDate = new Date();\n+  const createdDate = new Date(createdAt);\n+  const millisecondsSinceCreation = currentDate.getTime() - createdDate.getTime();\n+\n+  return millisecondsSinceCreation >= staleTaskMilliseconds && staleTaskMilliseconds > 0;","score":{"reward":1.242,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":76.50153846153849,"syllables":18,"sentences":1,"score":0.8349846153846151},"multiplier":1,"relevance":0.9}},{"id":1726194770,"content":"@Keyrxng I believe this is not intended?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1726194770","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,11 +15,11 @@ export async function generateAssignmentComment(context: Context, issueCreatedAt\n   let endTime: null | Date = null;\n   let deadline: null | string = null;\n   endTime = new Date(startTime + duration * 1000);\n-  deadline = endTime.toLocaleString(\"en-US\", options);\n+  deadline = endTime.toLocaleString(\"en-US\", options)","score":{"reward":0.581,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":7,"wordValue":0.1,"result":0.69},"readability":{"fleschKincaid":90.95857142857145,"syllables":9,"sentences":1,"score":0.6904142857142855},"multiplier":1,"relevance":0.7}},{"id":1729938237,"content":"@Keyrxng Can you please fix this? I am fine with the PR otherwise 😄","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1729938237","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,11 +15,11 @@ export async function generateAssignmentComment(context: Context, issueCreatedAt\n   let endTime: null | Date = null;\n   let deadline: null | string = null;\n   endTime = new Date(startTime + duration * 1000);\n-  deadline = endTime.toLocaleString(\"en-US\", options);\n+  deadline = endTime.toLocaleString(\"en-US\", options)","score":{"reward":0.858,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":102.62211538461541,"syllables":15,"sentences":2,"score":1},"multiplier":1,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2236093599,"effect":{"addition":63,"deletion":58},"reward":1.21,"priority":1},{"reviewId":2244237187,"effect":{"addition":7,"deletion":23},"reward":0.3,"priority":1},{"reviewId":2246804469,"effect":{"addition":1,"deletion":1},"reward":0.02,"priority":1},{"reviewId":2253118555,"effect":{"addition":158,"deletion":129},"reward":2.87,"priority":1},{"reviewId":2258672911,"effect":{"addition":2,"deletion":2},"reward":0.04,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 24.364 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>5</td><td>4.44</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.12</td></tr><tr><td>Issue</td><td>Comment</td><td>9</td><td>11.571</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>3.233</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21\" target=\"_blank\" rel=\"noopener\">#21</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+63 -58</td><td>1</td><td>1.21</td></tr><tr><td>+7 -23</td><td>1</td><td>0.3</td></tr><tr><td>+1 -1</td><td>1</td><td>0.02</td></tr><tr><td>+158 -129</td><td>1</td><td>2.87</td></tr><tr><td>+2 -2</td><td>1</td><td>0.04</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14\" target=\"_blank\" rel=\"noopener\">The bot shows a warning message on tasks that were opened recent&hellip;</a></h6></td><td><details><summary>3.99</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 7&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.4&#13;regex:&#13;  wordCount: 103&#13;  wordValue: 0.1&#13;  result: 2.59&#13;</pre></details></td><td>1</td><td>1</td><td>5.12</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2243997569\" target=\"_blank\" rel=\"noopener\">@Keyrxng would this be the fix for it? https://github.com/ubiqui&hellip;</a></h6></td><td><details><summary>1.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>1</td><td>1</td><td>2.17</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2244011846\" target=\"_blank\" rel=\"noopener\">Ok cool thank you, I will close this one after we got your fix m&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.8</td><td>1</td><td>1.256</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2244026707\" target=\"_blank\" rel=\"noopener\">I triple checked I cannot see any font difference.&lt;img widt&hellip;</a></h6></td><td><details><summary>6.31</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    a:&#13;      score: 1&#13;      elementCount: 4&#13;  result: 4&#13;regex:&#13;  wordCount: 46&#13;  wordValue: 0.1&#13;  result: 2.31&#13;</pre></details></td><td>0.2</td><td>1</td><td>1.598</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2244396724\" target=\"_blank\" rel=\"noopener\">@0x4007 Thanks for the screenshot, it seems to be more specific &hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.39</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2246845672\" target=\"_blank\" rel=\"noopener\">Number 3 seems to be the best display in your propositions, if t&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.396</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2285336634\" target=\"_blank\" rel=\"noopener\">@Keyrxng You mentioned that the bug was fixed, but now the oppos&hellip;</a></h6></td><td><details><summary>3.31</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 46&#13;  wordValue: 0.1&#13;  result: 2.31&#13;</pre></details></td><td>1</td><td>1</td><td>4.27</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2285387841\" target=\"_blank\" rel=\"noopener\">@Keyrxng Done. Also, I guess the font issue should be carried ou&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.491</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2308673448\" target=\"_blank\" rel=\"noopener\">For the &#96;img&#96; it is currently set to 0 so you can just c&hellip;</a></h6></td><td><details><summary>3.58</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 67&#13;  wordValue: 0.1&#13;  result: 2.58&#13;</pre></details></td><td>0</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2308755339\" target=\"_blank\" rel=\"noopener\">@0x4007 It was supposed to be because the length of results is p&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>0</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1715628766\" target=\"_blank\" rel=\"noopener\">Might wanna change &#96;(1000 * 60 * 60)&#96; tu use &#96;ms&#96;</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.8</td><td>1</td><td>0.552</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1720908747\" target=\"_blank\" rel=\"noopener\">Maybe this check is redundant since you return &#96;false&#96; w&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.9</td><td>1</td><td>1.242</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1726194770\" target=\"_blank\" rel=\"noopener\">@Keyrxng I believe this is not intended?</a></h6></td><td><details><summary>0.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 7&#13;  wordValue: 0.1&#13;  result: 0.69&#13;</pre></details></td><td>0.7</td><td>1</td><td>0.581</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1729938237\" target=\"_blank\" rel=\"noopener\">@Keyrxng Can you please fix this? I am fine with the PR otherwis&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.858</td></tr></tbody></table></details>"},"0x4007":{"total":4.732,"userId":4975670,"comments":[{"id":2244019369,"content":"So the font is wrong be sure to match the styles of the old assign message exactly.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2244019369","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.328,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":80.09764705882354,"syllables":22,"sentences":1,"score":0.7990235294117646},"multiplier":1,"relevance":0.2}},{"id":2244181664,"content":"Use `<code>` not `<samp>`\n![image](https://github.com/user-attachments/assets/f472449f-bd2b-42b6-ae65-f76cac6ff406)\n![image](https://github.com/user-attachments/assets/6ccd8e7c-d2cf-4e5b-9184-8df4516fd70f)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2244181664","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.033,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":120.20500000000001,"syllables":2,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}},{"id":2246822367,"content":"If its only a problem on mobile then perhaps `<samp>` is the best decision!","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2246822367","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.142,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":63.486153846153854,"syllables":20,"sentences":1,"score":0.9651384615384615},"multiplier":1,"relevance":0.1}},{"id":2308672581,"content":"I think we need to tweak the qualitative analysis. Somehow I got 0 relevance on my comments which didn't seem to be the case before with gpt3.5 10x samples. \nAlso I should be getting img credit. \nSeems like there's problems with quantitative analysis as well \n@gentlementlegen","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2308672581","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":49,"wordValue":0.1,"result":2.37},"readability":{"fleschKincaid":65.67167346938777,"syllables":76,"sentences":5,"score":0.9432832653061223},"multiplier":1,"relevance":0}},{"id":2308752680,"content":"Margin seems imprecise, which leads me to believe that the approach is wrong. Perhaps the approach should be reevaluated so that the math is perfect.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2308752680","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":25,"wordValue":0.1,"result":1.7},"readability":{"fleschKincaid":75.70750000000002,"syllables":35,"sentences":2,"score":0.8429249999999997},"multiplier":1,"relevance":0}},{"id":2241789250,"content":"I am confused what exactly is `reviewDelayTolerance`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#pullrequestreview-2241789250","commentType":"PULL_COLLABORATOR","score":{"reward":0.308,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":73.84500000000001,"syllables":9,"sentences":1,"score":0.8615499999999998},"multiplier":1,"relevance":0.4}},{"id":1719290828,"content":"```suggestion\r\n    reviewDelayTolerance: \"1 Day\"\r\n    taskStaleTimeoutDuration: \"1 Month\"\r\n```\r\nShould be the defaults as a heads up.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1719290828","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -36,12 +36,10 @@ To configure your Ubiquibot to run this plugin, add the following to the `.ubiqu\n   command: \"\\/start|\\/stop\"\n   example: \"/start\" # or \"/stop\"\n   with:\n-    timers:\n-      reviewDelayTolerance: 86000\n-      taskStaleTimeoutDuration: 2580000\n-    miscellaneous:\n-      maxConcurrentTasks: 3\n-      startRequiresWallet: true # default is true\n+    reviewDelayTolerance: \"3 Days\"\n+    taskStaleTimeoutDuration: \"30 Days\"","score":{"reward":0.891,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":103.54,"syllables":9,"sentences":1,"score":1},"multiplier":1,"relevance":0.9}},{"id":1719291299,"content":"```suggestion\r\n    reviewDelayTolerance: T.String({ default: \"1 Day\" }),\r\n    taskStaleTimeoutDuration: T.String({ default: \"1 Month\" }),\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1719291299","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -11,24 +11,17 @@ export interface PluginInputs<T extends SupportedEventsU = SupportedEventsU, TU\n   ref: string;\n }\n \n-const ONE_DAY = 24 * 60 * 60 * 1000;\n-\n-export const startStopSchema = T.Object({\n-  timers: T.Object(\n-    {\n-      reviewDelayTolerance: T.Number(),\n-      taskStaleTimeoutDuration: T.Number(),\n-    },\n-    { default: { reviewDelayTolerance: ONE_DAY * 5, taskStaleTimeoutDuration: ONE_DAY * 30 } }\n-  ),\n-  miscellaneous: T.Object(\n-    {\n-      maxConcurrentTasks: T.Number(),\n-      startRequiresWallet: T.Boolean(),\n-    },\n-    { default: { maxConcurrentTasks: 3, startRequiresWallet: true } }\n-  ),\n-});\n+export const startStopSchema = T.Object(\n+  {\n+    reviewDelayTolerance: T.String({ default: \"5 Days\" }),\n+    taskStaleTimeoutDuration: T.String({ default: \"30 Days\" }),","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":1,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.9}},{"id":2294104395,"content":"Warning message for a task being old and they should confirm the spec is still accurate? 30 days default. \nThe other should be either 3.5 days default (accommodate weekends) or 1 day. Whatever the original implementation has we can use.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#issuecomment-2294104395","commentType":"PULL_COLLABORATOR","score":{"reward":1.96,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":68.51687804878048,"syllables":63,"sentences":5,"score":0.9148312195121951},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2241788469,"effect":{"addition":48,"deletion":59},"reward":1.07,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 4.732 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>1.07</td></tr><tr><td>Issue</td><td>Comment</td><td>5</td><td>0.503</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>3.159</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21\" target=\"_blank\" rel=\"noopener\">#21</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+48 -59</td><td>1</td><td>1.07</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2244019369\" target=\"_blank\" rel=\"noopener\">So the font is wrong be sure to match the styles of the old assi&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.2</td><td>1</td><td>0.328</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2244181664\" target=\"_blank\" rel=\"noopener\">Use &#96;&lt;code&gt;&#96; not &#96;&lt;samp&gt;&#96;![image](h&hellip;</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.033</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2246822367\" target=\"_blank\" rel=\"noopener\">If its only a problem on mobile then perhaps &#96;&lt;samp&gt;&#&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.1</td><td>1</td><td>0.142</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2308672581\" target=\"_blank\" rel=\"noopener\">I think we need to tweak the qualitative analysis. Somehow I got&hellip;</a></h6></td><td><details><summary>2.37</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 49&#13;  wordValue: 0.1&#13;  result: 2.37&#13;</pre></details></td><td>0</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/14#issuecomment-2308752680\" target=\"_blank\" rel=\"noopener\">Margin seems imprecise, which leads me to believe that the appro&hellip;</a></h6></td><td><details><summary>1.7</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.7&#13;</pre></details></td><td>0</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#pullrequestreview-2241789250\" target=\"_blank\" rel=\"noopener\">I am confused what exactly is &#96;reviewDelayTolerance&#96;</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.4</td><td>1</td><td>0.308</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1719290828\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionreviewDelayTolerance: \"1 Day\"&hellip;</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.9</td><td>1</td><td>0.891</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1719291299\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionreviewDelayTolerance: T.String({ &hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.9</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#issuecomment-2294104395\" target=\"_blank\" rel=\"noopener\">Warning message for a task being old and they should confirm the&hellip;</a></h6></td><td><details><summary>2.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.7</td><td>1</td><td>1.96</td></tr></tbody></table></details>"},"whilefoo":{"total":7.691,"userId":139262667,"comments":[{"id":1715579016,"content":"you can leave this default as `{}`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1715579016","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -11,24 +11,22 @@ export interface PluginInputs<T extends SupportedEventsU = SupportedEventsU, TU\n   ref: string;\n }\n \n-const ONE_DAY = 24 * 60 * 60 * 1000;\n-\n-export const startStopSchema = T.Object({\n-  timers: T.Object(\n-    {\n-      reviewDelayTolerance: T.Number(),\n-      taskStaleTimeoutDuration: T.Number(),\n-    },\n-    { default: { reviewDelayTolerance: ONE_DAY * 5, taskStaleTimeoutDuration: ONE_DAY * 30 } }\n-  ),\n-  miscellaneous: T.Object(\n-    {\n-      maxConcurrentTasks: T.Number(),\n-      startRequiresWallet: T.Boolean(),\n+export const startStopSchema = T.Object(\n+  {\n+    reviewDelayTolerance: T.String({ default: \"5 Days\" }),\n+    taskStaleTimeoutDuration: T.String({ default: \"30 Days\" }),\n+    maxConcurrentTasks: T.Number({ default: 3 }),\n+    startRequiresWallet: T.Boolean({ default: true }),\n+  },\n+  {\n+    default: {","score":{"reward":0.474,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":102.045,"syllables":7,"sentences":1,"score":1},"multiplier":1,"relevance":0.6}},{"id":1715589248,"content":"is there a reason to convert to days? just get milliseconds of both dates and see if its higher than `staleTaskMilliseconds`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1715589248","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,9 +1,19 @@\n-export function checkTaskStale(staleTask: number, createdAt: string) {\n-  if (staleTask !== 0) {\n-    const days = Math.floor((new Date().getTime() - new Date(createdAt).getTime()) / (1000 * 60 * 60 * 24));\n-    const staleToDays = Math.floor(staleTask / (1000 * 60 * 60 * 24));\n-    return days >= staleToDays && staleToDays > 0;\n+import ms from \"ms\";\n+\n+function calculateDaysDifference(date1: Date, date2: Date): number {\n+  const millisecondsPerDay = ms(\"1d\");\n+  return Math.floor((date1.getTime() - date2.getTime()) / millisecondsPerDay);\n+}\n+\n+export function checkTaskStale(staleTaskMilliseconds: number, createdAt: string): boolean {\n+  if (staleTaskMilliseconds === 0) {\n+    return false;\n   }\n \n-  return false;\n+  const currentDate = new Date();\n+  const createdDate = new Date(createdAt);\n+  const daysSinceCreation = calculateDaysDifference(currentDate, createdDate);\n+  const staleDaysThreshold = Math.floor(staleTaskMilliseconds / ms(\"1d\"));\n+\n+  return daysSinceCreation >= staleDaysThreshold && staleDaysThreshold > 0;","score":{"reward":1.629,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":86.70500000000001,"syllables":26,"sentences":2,"score":0.7329499999999999},"multiplier":1,"relevance":0.9}},{"id":1723605413,"content":"why is it converted to hours if `getTimeValue(reviewDelayTolerance)` returns milliseconds or am I missing something","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1723605413","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -183,13 +184,23 @@ export async function getAvailableOpenedPullRequests(context: Context, username:\n       }\n     }\n \n-    if (reviews.length === 0 && (new Date().getTime() - new Date(openedPullRequest.created_at).getTime()) / (1000 * 60 * 60) >= reviewDelayTolerance) {\n+    if (reviews.length === 0 && (new Date().getTime() - new Date(openedPullRequest.created_at).getTime()) / ms(\"1h\") >= getTimeValue(reviewDelayTolerance)) {","score":{"reward":1.208,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":1,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":59.68214285714288,"syllables":22,"sentences":1,"score":0.9968214285714287},"multiplier":1,"relevance":0.8}}],"reviewRewards":[{"reviews":[{"reviewId":2236018738,"effect":{"addition":63,"deletion":58},"reward":1.21,"priority":1},{"reviewId":2248484891,"effect":{"addition":7,"deletion":23},"reward":0.3,"priority":1},{"reviewId":2252020842,"effect":{"addition":158,"deletion":129},"reward":2.87,"priority":1}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 7.691 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>3</td><td>4.38</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>3.311</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21\" target=\"_blank\" rel=\"noopener\">#21</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+63 -58</td><td>1</td><td>1.21</td></tr><tr><td>+7 -23</td><td>1</td><td>0.3</td></tr><tr><td>+158 -129</td><td>1</td><td>2.87</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1715579016\" target=\"_blank\" rel=\"noopener\">you can leave this default as &#96;{}&#96;</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.6</td><td>1</td><td>0.474</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1715589248\" target=\"_blank\" rel=\"noopener\">is there a reason to convert to days? just get milliseconds of b&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.9</td><td>1</td><td>1.629</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/21#discussion_r1723605413\" target=\"_blank\" rel=\"noopener\">why is it converted to hours if &#96;getTimeValue(reviewDelayTol&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.8</td><td>1</td><td>1.208</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_command-start-stop_64.json","json":{"ariesgun":{"userId":10436502,"total":152.241,"task":{"reward":150,"multiplier":1},"comments":[{"id":2409080077,"content":"@0x4007, Is it possible to check https://raw.githubusercontent.com/ubiquity/devpool-directory/refs/heads/development/devpool-issues.json for assigness?\r\nIt seems that the json file does not contain issues that have been assigned.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64#issuecomment-2409080077","commentType":"ISSUE_ASSIGNEE","score":{"reward":2.241,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":54.70142857142861,"syllables":60,"sentences":5,"score":0.947014285714286},"multiplier":0.25,"relevance":0.9}}],"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 152.241 XP ]</a>&nbsp;</h3><h6>@ariesgun</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>150</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.241</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64#issuecomment-2409080077\" target=\"_blank\" rel=\"noopener\">@0x4007, Is it possible to check https://raw.githubusercontent.c&hellip;</a></h6></td><td><details><summary>2.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.241</td></tr></tbody></table></details>"},"0x4007":{"total":99.153,"userId":4975670,"comments":[{"id":2404329585,"content":"```\r\ncurl -H \"Authorization: bearer $GITHUB_TOKEN\" -X POST -d @- https://api.github.com/graphql <<EOF | jq '.data.search.nodes[].url'\r\n{\r\n  \"query\": \"query AssignedIssues { search(query: \\\"assignee:0x4007 is:open is:issue\\\", type: ISSUE, first: 100) { nodes { ... on Issue { url } } } }\"\r\n}\r\n```\r\nReturns URLs. \r\n---\r\nI'm not sure if it asks the GitHub API for any assigned issue but thats a bad approach, it should be only within the network (devpool directory) or at the very least the same org.\r\nCheck https://raw.githubusercontent.com/ubiquity/devpool-directory/refs/heads/development/devpool-issues.json for assignees then.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64#issuecomment-2404329585","commentType":"ISSUE_AUTHOR","score":{"reward":11.232,"formatting":{"content":{"p":{"score":0,"elementCount":3},"hr":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":42,"wordValue":0.1,"result":2.23},"readability":{"fleschKincaid":63.70901515151516,"syllables":87,"sentences":6,"score":0.9629098484848484},"multiplier":1,"relevance":0.9}},{"id":2409088066,"content":"Then you query the API for those issue node ids if they are assigned","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64#issuecomment-2409088066","commentType":"ISSUE_AUTHOR","score":{"reward":3.36,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":89.89642857142859,"syllables":17,"sentences":1,"score":0.7010357142857141},"multiplier":1,"relevance":0.8}},{"id":2414581585,"content":"This counts against my limit and its archived so I cant really do much about it. Once we only count against tasks in our network this problem will be resolved: https://github.com/ubiquity/uad-ui-archived/issues/15","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64#issuecomment-2414581585","commentType":"ISSUE_AUTHOR","score":{"reward":9.774,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":74.33230769230771,"syllables":55,"sentences":3,"score":0.8566769230769229},"multiplier":1,"relevance":0.9}},{"id":2577897569,"content":"This needs to:\r\n1. Change to warning syntax vs diff syntax\r\n2. Link all the issues I'm currently assigned to in a comment so I can unassign myself or close them out. \r\n3. Only check assigned issues within the network, but this should be configurable to either be just within the repo, org, or network\r\n---\r\n```diff\r\n! You have reached your max task limit. Please close out some tasks before assigning new ones.\r\n```\r\n_Originally posted by @ubiquity-os[bot] in https://github.com/ubiquity/work.ubq.fi/issues/120#issuecomment-2404264757_","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.95,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"hr":{"score":0,"elementCount":1},"em":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1.3},"priority":1,"words":{"wordCount":60,"wordValue":0.1,"result":2.52},"readability":{"fleschKincaid":61.35157746478873,"syllables":110,"sentences":5,"score":0.9864842253521127},"multiplier":1,"relevance":1}},{"id":1807858828,"content":"I think the most robust way to get all \"within network\" is to get the list of orgs that installed the bot","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1807858828","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,7 +15,7 @@ export async function getAssignedIssues(context: Context, username: string): Pro\n   try {\n     return await context.octokit\n       .paginate(context.octokit.search.issuesAndPullRequests, {\n-        q: `org:${payload.repository.owner.login} assignee:${username} is:open is:issue`,\n+        q: `org:ubiquity org:ubiquity-os-marketplace org:ubiquity-os assignee:${username} is:open is:issue`,","score":{"reward":4.632,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":84.52318181818181,"syllables":26,"sentences":1,"score":0.7547681818181818},"multiplier":1,"relevance":0.8}},{"id":1808320249,"content":"Here too","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1808320249","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -173,7 +179,7 @@ export async function addAssignees(context: Context, issueNo: number, assignees:\n export async function getAllPullRequests(context: Context, state: \"open\" | \"closed\" | \"all\" = \"open\", username: string) {\n   const { payload } = context;\n   const query: RestEndpointMethodTypes[\"search\"][\"issuesAndPullRequests\"][\"parameters\"] = {\n-    q: `org:${payload.repository.owner.login} author:${username} state:${state}`,\n+    q: `org:ubiquity org:ubiquity-os-marketplace org:ubiquity-os author:${username} state:${state}`,","score":{"reward":0.594,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":120.20500000000001,"syllables":2,"sentences":1,"score":1},"multiplier":1,"relevance":0.6}},{"id":1808383806,"content":"This is what I meant by here too https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1807858828","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1808383806","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -173,7 +179,7 @@ export async function addAssignees(context: Context, issueNo: number, assignees:\n export async function getAllPullRequests(context: Context, state: \"open\" | \"closed\" | \"all\" = \"open\", username: string) {\n   const { payload } = context;\n   const query: RestEndpointMethodTypes[\"search\"][\"issuesAndPullRequests\"][\"parameters\"] = {\n-    q: `org:${payload.repository.owner.login} author:${username} state:${state}`,\n+    q: `org:ubiquity org:ubiquity-os-marketplace org:ubiquity-os author:${username} state:${state}`,","score":{"reward":1.989,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":74.01500000000001,"syllables":29,"sentences":2,"score":0.8598499999999999},"multiplier":1,"relevance":0.3}},{"id":1810165148,"content":"What we've done in the past is get it passed in from GitHub Actions. \r\nGet: https://github.com/ubiquity/cloudflare-deploy-action/blob/main/action.yml#L50-L56\r\nUse: https://github.com/ubiquity/cloudflare-deploy-action/blob/main/action.yml#L62","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1810165148","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -6,17 +6,27 @@ import { createAdapters } from \"./adapters\";\n import { userPullRequest, userSelfAssign, userStartStop, userUnassigned } from \"./handlers/user-start-stop\";\n import { Context, Env, PluginInputs } from \"./types\";\n import { addCommentToIssue } from \"./utils/issue\";\n+import { createAppAuth } from \"@octokit/auth-app\";\n \n export async function startStopTask(inputs: PluginInputs, env: Env) {\n   const customOctokit = Octokit.plugin(paginateGraphQL);\n   const octokit = new customOctokit({ auth: inputs.authToken });\n   const supabase = createClient(env.SUPABASE_URL, env.SUPABASE_KEY);\n \n+  const jwtOctokit = new Octokit({","score":{"reward":7.776,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":78.87285714285717,"syllables":60,"sentences":6,"score":0.8112714285714283},"multiplier":1,"relevance":0.9}},{"id":1817944877,"content":"Seems suspiciously wrong. Should be dynamic based on installations.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1817944877","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -634,6 +632,7 @@ export function createContext(\n     },\n     octokit: new octokit.Octokit(),\n     eventName: \"issue_comment.created\" as SupportedEventsU,\n+    organizations: [\"ubiquity\"],","score":{"reward":2.448,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":33.067500000000024,"syllables":18,"sentences":2,"score":0.7306750000000002},"multiplier":1,"relevance":0.8}},{"id":1817945176,"content":"I wish we had a mechanism to detect if this breaks to respond quickly because that system may be changed without notice in the future. I suppose for now you should throw a specific and descriptive error if it 404.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1817945176","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -4,18 +4,36 @@ import { createClient } from \"@supabase/supabase-js\";\n import { LogReturn, Logs } from \"@ubiquity-os/ubiquity-os-logger\";\n import { createAdapters } from \"./adapters\";\n import { userPullRequest, userSelfAssign, userStartStop, userUnassigned } from \"./handlers/user-start-stop\";\n-import { Context, Env, PluginInputs } from \"./types\";\n+import { Context, Env, GitHubIssueSearch, PluginInputs } from \"./types\";\n import { addCommentToIssue } from \"./utils/issue\";\n \n+async function listOrganizations(): Promise<string[]> {\n+  const res = await fetch(\"https://raw.githubusercontent.com/ubiquity/devpool-directory/refs/heads/__STORAGE__/devpool-issues.json\");","score":{"reward":7.506,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":40,"wordValue":0.1,"result":2.18},"readability":{"fleschKincaid":68.09500000000004,"syllables":56,"sentences":2,"score":0.9190499999999996},"multiplier":1,"relevance":0.9}},{"id":1817945734,"content":"Try this. `APP_ID` and `APP_PRIVATE_KEY` have now been added to the @ubiquity-os-marketplace org secrets. \r\nGET: https://github.com/ubiquity/cloudflare-deploy-action/blob/3e07491a4785469af9eee58bf697203428c0f8ee/action.yml#L50-L56\r\nSET: https://github.com/ubiquity/cloudflare-deploy-action/blob/3e07491a4785469af9eee58bf697203428c0f8ee/action.yml#L62\r\nJust make sure to get from secrets instead of it being \"passed in\" like it is here.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1817945734","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,7 +15,7 @@ export async function getAssignedIssues(context: Context, username: string): Pro\n   try {\n     return await context.octokit\n       .paginate(context.octokit.search.issuesAndPullRequests, {\n-        q: `org:${payload.repository.owner.login} assignee:${username} is:open is:issue`,\n+        q: `org:ubiquity org:ubiquity-os-marketplace org:ubiquity-os assignee:${username} is:open is:issue`,","score":{"reward":10.368,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":33,"wordValue":0.1,"result":1.98},"readability":{"fleschKincaid":64.23189655172416,"syllables":92,"sentences":7,"score":0.9576810344827584},"multiplier":1,"relevance":0.9}},{"id":2425015823,"content":"You also should post QA","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2425015823","commentType":"PULL_COLLABORATOR","score":{"reward":0.828,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":100.24000000000002,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.4}},{"id":2425043370,"content":"Prove that it works on your org. This would be a link to a github comment","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2425043370","commentType":"PULL_COLLABORATOR","score":{"reward":2.97,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":103.54,"syllables":18,"sentences":2,"score":1},"multiplier":1,"relevance":0.6}},{"id":2428563574,"content":"Currently looking into adjusting the display format:\r\n---\r\n- ###### [ubiquity-os-marketplace/command-start-stop - Task Limit Improvements #64](https://www.github.com/ubiquity-os-marketplace/command-start-stop/issues/64)\r\n```\r\n- ###### [ubiquity-os-marketplace/command-start-stop - Task Limit Improvements #64](https://www.github.com/ubiquity-os-marketplace/command-start-stop/issues/64)\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2428563574","commentType":"PULL_COLLABORATOR","score":{"reward":8.379,"formatting":{"content":{"p":{"score":0,"elementCount":1},"hr":{"score":0,"elementCount":1},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":1},"h6":{"score":1,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":2.1},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":15.403529411764737,"syllables":35,"sentences":1,"score":0.5540352941176474},"multiplier":1,"relevance":0.7}},{"id":2440204611,"content":"Need to specifically handle 404","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2440204611","commentType":"PULL_COLLABORATOR","score":{"reward":1.365,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":32.56000000000003,"syllables":10,"sentences":1,"score":0.7256000000000004},"multiplier":1,"relevance":0.7}},{"id":2441698801,"content":"A lot of work is being done on the devpool-directory backend so I anticipate that this file name will eventually be changed or removed so the faster we can diagnose this problem the better.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2441698801","commentType":"PULL_COLLABORATOR","score":{"reward":5.376,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":45.61857142857143,"syllables":52,"sentences":1,"score":0.8561857142857143},"multiplier":1,"relevance":0.7}},{"id":2450022368,"content":"Should be configurable \nRepo\nOrg\nNetwork\nAlso that's wild that I can't delete or hide your review comment","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2450022368","commentType":"PULL_COLLABORATOR","score":{"reward":4.608,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":59.63500000000003,"syllables":30,"sentences":1,"score":0.9963500000000003},"multiplier":1,"relevance":0.8}},{"id":2452397623,"content":"Your review comment is the exact same content","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2452397623","commentType":"PULL_COLLABORATOR","score":{"reward":0.576,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":8,"wordValue":0.1,"result":0.76},"readability":{"fleschKincaid":71.81500000000001,"syllables":12,"sentences":1,"score":0.8818499999999999},"multiplier":1,"relevance":0.2}},{"id":2452903812,"content":"![image](https://github.com/user-attachments/assets/b7e74626-ef69-4f13-9df8-dc876388545a)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2452903812","commentType":"PULL_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.3}},{"id":2453452510,"content":"Can we merge @gentlementlegen @whilefoo","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2453452510","commentType":"PULL_COLLABORATOR","score":{"reward":0.372,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":15.640000000000015,"syllables":11,"sentences":1,"score":0.5564000000000001},"multiplier":1,"relevance":0.2}}],"reviewRewards":[{"reviews":[{"reviewId":2380527794,"effect":{"addition":29,"deletion":8},"reward":1.11,"priority":3},{"reviewId":2381293833,"effect":{"addition":34,"deletion":4},"reward":1.14,"priority":3},{"reviewId":2384270241,"effect":{"addition":12,"deletion":5},"reward":0.51,"priority":3},{"reviewId":2397370223,"effect":{"addition":62,"deletion":67},"reward":3.87,"priority":3},{"reviewId":2397370970,"effect":{"addition":0,"deletion":0},"reward":0,"priority":3},{"reviewId":2400324301,"effect":{"addition":84,"deletion":30},"reward":3.42,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 99.153 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>6</td><td>10.05</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.95</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>24.366</td></tr><tr><td>Review</td><td>Comment</td><td>16</td><td>59.787</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66\" target=\"_blank\" rel=\"noopener\">#66</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+29 -8</td><td>3</td><td>1.11</td></tr><tr><td>+34 -4</td><td>3</td><td>1.14</td></tr><tr><td>+12 -5</td><td>3</td><td>0.51</td></tr><tr><td>+62 -67</td><td>3</td><td>3.87</td></tr><tr><td>+0 -0</td><td>3</td><td>0</td></tr><tr><td>+84 -30</td><td>3</td><td>3.42</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64\" target=\"_blank\" rel=\"noopener\">This needs to:1. Change to warning syntax vs diff syntax2. L&hellip;</a></h6></td><td><details><summary>3.82</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    em:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.3&#13;regex:&#13;  wordCount: 60&#13;  wordValue: 0.1&#13;  result: 2.52&#13;</pre></details></td><td>1</td><td>1</td><td>4.95</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64#issuecomment-2404329585\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;curl -H \"Authorization: bearer $GITHUB_TOKEN\" -&hellip;</a></h6></td><td><details><summary>3.23</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 42&#13;  wordValue: 0.1&#13;  result: 2.23&#13;</pre></details></td><td>0.9</td><td>3</td><td>11.232</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64#issuecomment-2409088066\" target=\"_blank\" rel=\"noopener\">Then you query the API for those issue node ids if they are assi&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.36</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64#issuecomment-2414581585\" target=\"_blank\" rel=\"noopener\">This counts against my limit and its archived so I cant really d&hellip;</a></h6></td><td><details><summary>2.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.9</td><td>3</td><td>9.774</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1807858828\" target=\"_blank\" rel=\"noopener\">I think the most robust way to get all \"within network\" is to ge&hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.632</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1808320249\" target=\"_blank\" rel=\"noopener\">Here too</a></h6></td><td><details><summary>0.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.6</td><td>3</td><td>0.594</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1808383806\" target=\"_blank\" rel=\"noopener\">This is what I meant by here too https://github.com/ubiquity-os-&hellip;</a></h6></td><td><details><summary>1.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.989</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1810165148\" target=\"_blank\" rel=\"noopener\">What we've done in the past is get it passed in from GitHub Acti&hellip;</a></h6></td><td><details><summary>2.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.9</td><td>3</td><td>7.776</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1817944877\" target=\"_blank\" rel=\"noopener\">Seems suspiciously wrong. Should be dynamic based on installatio&hellip;</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.8</td><td>3</td><td>2.448</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1817945176\" target=\"_blank\" rel=\"noopener\">I wish we had a mechanism to detect if this breaks to respond qu&hellip;</a></h6></td><td><details><summary>2.18</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 40&#13;  wordValue: 0.1&#13;  result: 2.18&#13;</pre></details></td><td>0.9</td><td>3</td><td>7.506</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1817945734\" target=\"_blank\" rel=\"noopener\">Try this. &#96;APP_ID&#96; and &#96;APP_PRIVATE_KEY&#96; have no&hellip;</a></h6></td><td><details><summary>2.98</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 33&#13;  wordValue: 0.1&#13;  result: 1.98&#13;</pre></details></td><td>0.9</td><td>3</td><td>10.368</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2425015823\" target=\"_blank\" rel=\"noopener\">You also should post QA</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.4</td><td>3</td><td>0.828</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2425043370\" target=\"_blank\" rel=\"noopener\">Prove that it works on your org. This would be a link to a githu&hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.6</td><td>3</td><td>2.97</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2428563574\" target=\"_blank\" rel=\"noopener\">Currently looking into adjusting the display format:---- ###&hellip;</a></h6></td><td><details><summary>3.42</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 1&#13;    h6:&#13;      score: 1&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 2.1&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.7</td><td>3</td><td>8.379</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2440204611\" target=\"_blank\" rel=\"noopener\">Need to specifically handle 404</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.365</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2441698801\" target=\"_blank\" rel=\"noopener\">A lot of work is being done on the devpool-directory backend so &hellip;</a></h6></td><td><details><summary>2.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.7</td><td>3</td><td>5.376</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2450022368\" target=\"_blank\" rel=\"noopener\">Should be configurable RepoOrgNetworkAlso that's wild that I&hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.8</td><td>3</td><td>4.608</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2452397623\" target=\"_blank\" rel=\"noopener\">Your review comment is the exact same content</a></h6></td><td><details><summary>0.76</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 8&#13;  wordValue: 0.1&#13;  result: 0.76&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.576</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2452903812\" target=\"_blank\" rel=\"noopener\">![image](https://github.com/user-attachments/assets/b7e74626-ef6&hellip;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.3</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2453452510\" target=\"_blank\" rel=\"noopener\">Can we merge @gentlementlegen @whilefoo</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.2</td><td>3</td><td>0.372</td></tr></tbody></table></details>"},"rndquu":{"total":2.538,"userId":119500907,"comments":[{"id":2424122848,"content":"@0x4007 Could you assign @ariesgun (related [comment](https://t.me/UbiquityDevPool/2885))? Only org owners can set github issue assignees.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64#issuecomment-2424122848","commentType":"ISSUE_COLLABORATOR","score":{"reward":2.538,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":52.58250000000001,"syllables":26,"sentences":2,"score":0.9258250000000001},"multiplier":1,"relevance":0.3}}],"reviewRewards":[{"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 2.538 XP ]</a>&nbsp;</h3><h6>@rndquu</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Comment</td><td>1</td><td>2.538</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64#issuecomment-2424122848\" target=\"_blank\" rel=\"noopener\">@0x4007 Could you assign @ariesgun (related [comment](https://t.&hellip;</a></h6></td><td><details><summary>2.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.3</td><td>3</td><td>2.538</td></tr></tbody></table></details>"},"gentlementlegen":{"total":80.127,"userId":9807008,"comments":[{"id":2463652190,"content":"@whilefoo the comment generation failed due to an invalid signature: https://github.com/ubiquity-os-marketplace/text-conversation-rewards/actions/runs/11735148935/job/32692347908\r\nHowever the signature for dev bot seems to have been sent properly, any ideas?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64#issuecomment-2463652190","commentType":"ISSUE_COLLABORATOR","score":{"reward":0.99,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":40.613157894736844,"syllables":66,"sentences":2,"score":0.8061315789473684},"multiplier":1,"relevance":0.1}},{"id":1808331679,"content":"Hardcoding these means third parties won't be able to use this plugin.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1808331679","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -173,7 +179,7 @@ export async function addAssignees(context: Context, issueNo: number, assignees:\n export async function getAllPullRequests(context: Context, state: \"open\" | \"closed\" | \"all\" = \"open\", username: string) {\n   const { payload } = context;\n   const query: RestEndpointMethodTypes[\"search\"][\"issuesAndPullRequests\"][\"parameters\"] = {\n-    q: `org:${payload.repository.owner.login} author:${username} state:${state}`,\n+    q: `org:ubiquity org:ubiquity-os-marketplace org:ubiquity-os author:${username} state:${state}`,","score":{"reward":3.312,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":13,"wordValue":0.1,"result":1.1},"readability":{"fleschKincaid":76.50153846153849,"syllables":18,"sentences":1,"score":0.8349846153846151},"multiplier":1,"relevance":0.8}},{"id":1809177319,"content":"I don't think this is correct. Why would we need two Octokit instances?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1809177319","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -6,17 +6,27 @@ import { createAdapters } from \"./adapters\";\n import { userPullRequest, userSelfAssign, userStartStop, userUnassigned } from \"./handlers/user-start-stop\";\n import { Context, Env, PluginInputs } from \"./types\";\n import { addCommentToIssue } from \"./utils/issue\";\n+import { createAppAuth } from \"@octokit/auth-app\";\n \n export async function startStopTask(inputs: PluginInputs, env: Env) {\n   const customOctokit = Octokit.plugin(paginateGraphQL);\n   const octokit = new customOctokit({ auth: inputs.authToken });\n   const supabase = createClient(env.SUPABASE_URL, env.SUPABASE_KEY);\n \n+  const jwtOctokit = new Octokit({","score":{"reward":3.78,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":90.95857142857145,"syllables":18,"sentences":2,"score":0.6904142857142855},"multiplier":1,"relevance":0.9}},{"id":1809700303,"content":"The octokit is logged in using a Github App token.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1809700303","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -6,17 +6,27 @@ import { createAdapters } from \"./adapters\";\n import { userPullRequest, userSelfAssign, userStartStop, userUnassigned } from \"./handlers/user-start-stop\";\n import { Context, Env, PluginInputs } from \"./types\";\n import { addCommentToIssue } from \"./utils/issue\";\n+import { createAppAuth } from \"@octokit/auth-app\";\n \n export async function startStopTask(inputs: PluginInputs, env: Env) {\n   const customOctokit = Octokit.plugin(paginateGraphQL);\n   const octokit = new customOctokit({ auth: inputs.authToken });\n   const supabase = createClient(env.SUPABASE_URL, env.SUPABASE_KEY);\n \n+  const jwtOctokit = new Octokit({","score":{"reward":2.052,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":69.78500000000001,"syllables":15,"sentences":1,"score":0.9021499999999999},"multiplier":1,"relevance":0.6}},{"id":1811658530,"content":"Do not use `any` and format properly.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1811658530","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -64,23 +64,49 @@ export async function start(\n   teammates.push(sender.login);\n \n   const toAssign = [];\n+  let assignedIssues : any[]= [];","score":{"reward":2.079,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":73.84500000000001,"syllables":9,"sentences":1,"score":0.8615499999999998},"multiplier":1,"relevance":0.9}},{"id":1811659991,"content":"Still feels wrong to me that we need two octokit instances with different auth and private keys. @whilefoo rfc","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1811659991","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -6,17 +6,27 @@ import { createAdapters } from \"./adapters\";\n import { userPullRequest, userSelfAssign, userStartStop, userUnassigned } from \"./handlers/user-start-stop\";\n import { Context, Env, PluginInputs } from \"./types\";\n import { addCommentToIssue } from \"./utils/issue\";\n+import { createAppAuth } from \"@octokit/auth-app\";\n \n export async function startStopTask(inputs: PluginInputs, env: Env) {\n   const customOctokit = Octokit.plugin(paginateGraphQL);\n   const octokit = new customOctokit({ auth: inputs.authToken });\n   const supabase = createClient(env.SUPABASE_URL, env.SUPABASE_KEY);\n \n+  const jwtOctokit = new Octokit({","score":{"reward":3.759,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":76.97144736842105,"syllables":27,"sentences":2,"score":0.8302855263157894},"multiplier":1,"relevance":0.7}},{"id":1811662428,"content":"```suggestion\r\n`)\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1811662428","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -64,23 +64,49 @@ export async function start(\n   teammates.push(sender.login);\n \n   const toAssign = [];\n+  let assignedIssues : any[]= [];\n   // check max assigned issues\n   for (const user of teammates) {\n     if (await handleTaskLimitChecks(user, context, logger, sender.login)) {\n       toAssign.push(user);\n+    } else {\n+      const issues = await getAssignedIssues(context, user);\n+      assignedIssues = issues.map((el) => {\n+        return {\n+          title: el.title,\n+          html_url: el.html_url,\n+        }\n+      })\n     }\n   }\n \n   let error: string | null = null;\n \n   if (toAssign.length === 0 && teammates.length > 1) {\n     error = \"All teammates have reached their max task limit. Please close out some tasks before assigning new ones.\";\n+    throw logger.error(error, { issueNumber: issue.number });\n   } else if (toAssign.length === 0) {\n     error = \"You have reached your max task limit. Please close out some tasks before assigning new ones.\";\n-  }\n+    let issues = \"\"\n+    const urlPattern = /https:\\/\\/(github.com\\/(\\S+)\\/(\\S+)\\/issues\\/(\\d+))/g;\n+    assignedIssues.forEach((el) => {\n+      const matches = [...el.html_url.matchAll(urlPattern)][0]\n+      if (matches) {\n+        issues = issues.concat(`- ###### [${matches[2]}/${matches[3]} - ${el.title} #${matches[4]}](https://www.${matches[1]})\\n`)\n+      } else {\n+        issues = issues.concat(`- ###### [${el.title}](${el.html_url})\\n`)\n+      }\n+    })\n \n-  if (error) {\n-    throw logger.error(error, { issueNumber: issue.number });\n+    await addCommentToIssue(context, `\n+      \n+> [!WARNING]\n+> ${error}\n+\n+${issues}\n+\n+    `)","score":{"reward":0,"formatting":{"content":{},"result":0},"priority":3,"words":{"wordCount":0,"wordValue":0.1,"result":0},"readability":{"fleschKincaid":0,"syllables":0,"sentences":0,"score":0},"multiplier":1,"relevance":0.5}},{"id":1819993620,"content":"@0x4007 Don't we want this? It can be `1.22` but setting it avoids collaborator to use the wrong package manager and encounter strange errors.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1819993620","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -83,6 +83,5 @@\n     \"extends\": [\n       \"@commitlint/config-conventional\"\n     ]\n-  },\n-  \"packageManager\": \"yarn@4.2.2\"","score":{"reward":2.544,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":67.75500000000001,"syllables":36,"sentences":2,"score":0.9224499999999999},"multiplier":1,"relevance":0.4}},{"id":1827688460,"content":"This should not be here but in the configuration.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1827688460","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -16,6 +53,7 @@ export async function startStopTask(inputs: PluginInputs, env: Env) {\n     eventName: inputs.eventName,\n     payload: inputs.eventPayload,\n     config: inputs.settings,\n+    organizations: [],","score":{"reward":2.52,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":75.50000000000003,"syllables":13,"sentences":1,"score":0.8449999999999998},"multiplier":1,"relevance":0.8}},{"id":1827688873,"content":"Since you use the organizations with a `search`, it is possible that the user has a private profile which will result in a `422` error when querying the search API. You need to provide a fallback for this.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1827688873","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -11,13 +11,20 @@ export function isParentIssue(body: string) {\n   return body.match(parentPattern);\n }\n \n-export async function getAssignedIssues(context: Context, username: string) {\n-  const payload = context.payload;\n+export async function getAssignedIssues(context: Context, username: string): Promise<GitHubIssueSearch[\"items\"]> {\n+  let repoOrgQuery = \"\";\n+  if (context.config.checkAssignedIssues === \"repo\") {\n+    repoOrgQuery = `repo:${context.payload.repository.full_name}`;\n+  } else {\n+    context.organizations.forEach((org) => {\n+      repoOrgQuery += `org:${org} `;\n+    });\n+  }\n \n   try {\n-    return await context.octokit\n+    return context.octokit\n       .paginate(context.octokit.rest.search.issuesAndPullRequests, {\n-        q: `org:${payload.repository.owner.login} assignee:${username} is:open is:issue`,\n+        q: `${repoOrgQuery} assignee:${username} is:open is:issue`,","score":{"reward":7.128,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":68.715,"syllables":51,"sentences":2,"score":0.9128499999999999},"multiplier":1,"relevance":0.9}},{"id":1830320648,"content":"The spec  states:\r\nShouldn't this be configurable? And even if not, putting it in the config also allows to add defaults on decode which would ensure it is properly initialized and types as well.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1830320648","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -16,6 +53,7 @@ export async function startStopTask(inputs: PluginInputs, env: Env) {\n     eventName: inputs.eventName,\n     payload: inputs.eventPayload,\n     config: inputs.settings,\n+    organizations: [],","score":{"reward":6.312,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":35,"wordValue":0.1,"result":2.04},"readability":{"fleschKincaid":63.381071428571445,"syllables":52,"sentences":2,"score":0.9661892857142855},"multiplier":1,"relevance":0.8}},{"id":1830321044,"content":"When I tested with a user having a private profile, the run crashed on a 422 error. I will test again.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1830321044","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -11,13 +11,20 @@ export function isParentIssue(body: string) {\n   return body.match(parentPattern);\n }\n \n-export async function getAssignedIssues(context: Context, username: string) {\n-  const payload = context.payload;\n+export async function getAssignedIssues(context: Context, username: string): Promise<GitHubIssueSearch[\"items\"]> {\n+  let repoOrgQuery = \"\";\n+  if (context.config.checkAssignedIssues === \"repo\") {\n+    repoOrgQuery = `repo:${context.payload.repository.full_name}`;\n+  } else {\n+    context.organizations.forEach((org) => {\n+      repoOrgQuery += `org:${org} `;\n+    });\n+  }\n \n   try {\n-    return await context.octokit\n+    return context.octokit\n       .paginate(context.octokit.rest.search.issuesAndPullRequests, {\n-        q: `org:${payload.repository.owner.login} assignee:${username} is:open is:issue`,\n+        q: `${repoOrgQuery} assignee:${username} is:open is:issue`,","score":{"reward":3.927,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":83.37750000000003,"syllables":28,"sentences":2,"score":0.7662249999999997},"multiplier":1,"relevance":0.7}},{"id":2451188922,"content":"@0x4007 Why did you hide my comment (if that was you)?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2451188922","commentType":"PULL_COLLABORATOR","score":{"reward":0.378,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":103.37909090909093,"syllables":12,"sentences":1,"score":1},"multiplier":1,"relevance":0.1}},{"id":2452891595,"content":"@0x4007 maybe you are confused because I first posted my comment with the wrong account and then hid it to repost with my own? I can't seem to find twice the same comment from myself.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2452891595","commentType":"PULL_COLLABORATOR","score":{"reward":0.756,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":87.515,"syllables":43,"sentences":2,"score":0.72485},"multiplier":1,"relevance":0.1}},{"id":2452907464,"content":"Yes that was with the wrong account, I hid that comment.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2452907464","commentType":"PULL_COLLABORATOR","score":{"reward":0.348,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":95.68818181818183,"syllables":13,"sentences":1,"score":0.6431181818181817},"multiplier":1,"relevance":0.1}},{"id":2453456304,"content":"@0x4007 The conflicts still need to be resolved first.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2453456304","commentType":"PULL_COLLABORATOR","score":{"reward":1.515,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":94.30000000000001,"syllables":11,"sentences":1,"score":0.6569999999999999},"multiplier":1,"relevance":0.5}},{"id":2458667558,"content":"Last QA looks ok: https://github.com/Meniole/command-start-stop/issues/46\r\nHowever when using `network` option to scan for PRs, I could go beyond the limit of one assigned issue: https://github.com/Meniole/command-start-stop/issues/47\r\n@ariesgun What does `network` look for?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2458667558","commentType":"PULL_COLLABORATOR","score":{"reward":12.987,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":2}},"result":2},"priority":3,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":69.41000000000003,"syllables":65,"sentences":3,"score":0.9058999999999997},"multiplier":1,"relevance":0.9}}],"reviewRewards":[{"reviews":[{"reviewId":2381312738,"effect":{"addition":61,"deletion":10},"reward":2.13,"priority":3},{"reviewId":2382711841,"effect":{"addition":12,"deletion":5},"reward":0.51,"priority":3},{"reviewId":2386740769,"effect":{"addition":8,"deletion":8},"reward":0.48,"priority":3},{"reviewId":2400574941,"effect":{"addition":80,"deletion":63},"reward":4.29,"priority":3},{"reviewId":2412992892,"effect":{"addition":410,"deletion":38},"reward":13.44,"priority":3},{"reviewId":2419935718,"effect":{"addition":89,"deletion":74},"reward":4.89,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 80.127 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>6</td><td>25.74</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>0.99</td></tr><tr><td>Review</td><td>Comment</td><td>16</td><td>53.397</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66\" target=\"_blank\" rel=\"noopener\">#66</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+61 -10</td><td>3</td><td>2.13</td></tr><tr><td>+12 -5</td><td>3</td><td>0.51</td></tr><tr><td>+8 -8</td><td>3</td><td>0.48</td></tr><tr><td>+80 -63</td><td>3</td><td>4.29</td></tr><tr><td>+410 -38</td><td>3</td><td>13.44</td></tr><tr><td>+89 -74</td><td>3</td><td>4.89</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64#issuecomment-2463652190\" target=\"_blank\" rel=\"noopener\">@whilefoo the comment generation failed due to an invalid signat&hellip;</a></h6></td><td><details><summary>2.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.99</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1808331679\" target=\"_blank\" rel=\"noopener\">Hardcoding these means third parties won't be able to use this p&hellip;</a></h6></td><td><details><summary>1.1</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.1&#13;  result: 1.1&#13;</pre></details></td><td>0.8</td><td>3</td><td>3.312</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1809177319\" target=\"_blank\" rel=\"noopener\">I don't think this is correct. Why would we need two Octokit ins&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.9</td><td>3</td><td>3.78</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1809700303\" target=\"_blank\" rel=\"noopener\">The octokit is logged in using a Github App token.</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.6</td><td>3</td><td>2.052</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1811658530\" target=\"_blank\" rel=\"noopener\">Do not use &#96;any&#96; and format properly.</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.079</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1811659991\" target=\"_blank\" rel=\"noopener\">Still feels wrong to me that we need two octokit instances with &hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.759</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1811662428\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion&#96;)&#96;&#96;&#96;</a></h6></td><td><details><summary>0</summary><pre>content:&#13;  content: {}&#13;  result: 0&#13;regex:&#13;  wordCount: 0&#13;  wordValue: 0.1&#13;  result: 0&#13;</pre></details></td><td>0.5</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1819993620\" target=\"_blank\" rel=\"noopener\">@0x4007 Don't we want this? It can be &#96;1.22&#96; but setting&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.4</td><td>3</td><td>2.544</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1827688460\" target=\"_blank\" rel=\"noopener\">This should not be here but in the configuration.</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.8</td><td>3</td><td>2.52</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1827688873\" target=\"_blank\" rel=\"noopener\">Since you use the organizations with a &#96;search&#96;, it is p&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.9</td><td>3</td><td>7.128</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1830320648\" target=\"_blank\" rel=\"noopener\">The spec  states:Shouldn't this be configurable? And even if n&hellip;</a></h6></td><td><details><summary>2.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 35&#13;  wordValue: 0.1&#13;  result: 2.04&#13;</pre></details></td><td>0.8</td><td>3</td><td>6.312</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1830321044\" target=\"_blank\" rel=\"noopener\">When I tested with a user having a private profile, the run cras&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0.7</td><td>3</td><td>3.927</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2451188922\" target=\"_blank\" rel=\"noopener\">@0x4007 Why did you hide my comment (if that was you)?</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.378</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2452891595\" target=\"_blank\" rel=\"noopener\">@0x4007 maybe you are confused because I first posted my comment&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.756</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2452907464\" target=\"_blank\" rel=\"noopener\">Yes that was with the wrong account, I hid that comment.</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.1</td><td>3</td><td>0.348</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2453456304\" target=\"_blank\" rel=\"noopener\">@0x4007 The conflicts still need to be resolved first.</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0.5</td><td>3</td><td>1.515</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#issuecomment-2458667558\" target=\"_blank\" rel=\"noopener\">Last QA looks ok: https://github.com/Meniole/command-start-stop/&hellip;</a></h6></td><td><details><summary>3.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0.9</td><td>3</td><td>12.987</td></tr></tbody></table></details>"},"whilefoo":{"total":81.804,"userId":139262667,"comments":[{"id":2465815678,"content":"refer to https://github.com/ubiquity-os/ubiquity-os-kernel/issues/194","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64#issuecomment-2465815678","commentType":"ISSUE_COLLABORATOR","score":{"reward":1.413,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":2,"wordValue":0.1,"result":0.25},"readability":{"fleschKincaid":45.64500000000001,"syllables":22,"sentences":2,"score":0.8564500000000002},"multiplier":1,"relevance":0.3}},{"id":2397562681,"content":"forgot to submit review :D","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#pullrequestreview-2397562681","commentType":"PULL_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":66.40000000000003,"syllables":8,"sentences":1,"score":0.9359999999999996},"multiplier":1,"relevance":0}},{"id":1813598759,"content":"Do we need bot's token just to list all installations or also installation tokens from each installation?\r\nOne option would be an API endpoint on the kernel to list installations, I'd avoid using bot's private key other than in kernel if possible.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1813598759","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -6,17 +6,27 @@ import { createAdapters } from \"./adapters\";\n import { userPullRequest, userSelfAssign, userStartStop, userUnassigned } from \"./handlers/user-start-stop\";\n import { Context, Env, PluginInputs } from \"./types\";\n import { addCommentToIssue } from \"./utils/issue\";\n+import { createAppAuth } from \"@octokit/auth-app\";\n \n export async function startStopTask(inputs: PluginInputs, env: Env) {\n   const customOctokit = Octokit.plugin(paginateGraphQL);\n   const octokit = new customOctokit({ auth: inputs.authToken });\n   const supabase = createClient(env.SUPABASE_URL, env.SUPABASE_KEY);\n \n+  const jwtOctokit = new Octokit({","score":{"reward":5.256,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":3,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":52.39750000000001,"syllables":70,"sentences":2,"score":0.9239750000000001},"multiplier":1,"relevance":0.6}},{"id":1815722316,"content":"Actually the kernel/SDK exports the app id and user ID of the production bot. I was thinking that maybe this would be actually sent along to the plugin because it can change if you run your own kernel\nThis is the api: https://docs.github.com/en/rest/users/users?apiVersion=2022-11-28#get-a-user-using-their-id","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1815722316","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -15,7 +15,7 @@ export async function getAssignedIssues(context: Context, username: string): Pro\n   try {\n     return await context.octokit\n       .paginate(context.octokit.search.issuesAndPullRequests, {\n-        q: `org:${payload.repository.owner.login} assignee:${username} is:open is:issue`,\n+        q: `org:ubiquity org:ubiquity-os-marketplace org:ubiquity-os assignee:${username} is:open is:issue`,","score":{"reward":8.484,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":43,"wordValue":0.1,"result":2.25},"readability":{"fleschKincaid":79.34052459016394,"syllables":83,"sentences":5,"score":0.8065947540983607},"multiplier":1,"relevance":0.7}},{"id":1818108651,"content":"it's a unit test","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1818108651","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -634,6 +632,7 @@ export function createContext(\n     },\n     octokit: new octokit.Octokit(),\n     eventName: \"issue_comment.created\" as SupportedEventsU,\n+    organizations: [\"ubiquity\"],","score":{"reward":0.621,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":100.24000000000002,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}},{"id":1818109834,"content":"why is this throw necessary?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1818109834","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -64,23 +64,46 @@ export async function start(\n   teammates.push(sender.login);\n \n   const toAssign = [];\n+  let assignedIssues: GitHubIssueSearch[\"items\"] = [];\n   // check max assigned issues\n   for (const user of teammates) {\n-    if (await handleTaskLimitChecks(user, context, logger, sender.login)) {\n+    const { isWithinLimit, issues } = await handleTaskLimitChecks(user, context, logger, sender.login);\n+    if (isWithinLimit) {\n       toAssign.push(user);\n+    } else {\n+      assignedIssues = assignedIssues.concat(issues);\n     }\n   }\n \n   let error: string | null = null;\n-\n   if (toAssign.length === 0 && teammates.length > 1) {\n     error = \"All teammates have reached their max task limit. Please close out some tasks before assigning new ones.\";\n+    throw logger.error(error, { issueNumber: issue.number });\n   } else if (toAssign.length === 0) {\n     error = \"You have reached your max task limit. Please close out some tasks before assigning new ones.\";\n-  }\n+    let issues = \"\";\n+    const urlPattern = /https:\\/\\/(github.com\\/(\\S+)\\/(\\S+)\\/issues\\/(\\d+))/g;\n+    assignedIssues.forEach((el) => {\n+      const matches = [...el.html_url.matchAll(urlPattern)][0];\n+      if (matches) {\n+        issues = issues.concat(`- ###### [${matches[2]}/${matches[3]} - ${el.title} #${matches[4]}](https://www.${matches[1]})\\n`);\n+      } else {\n+        issues = issues.concat(`- ###### [${el.title}](${el.html_url})\\n`);\n+      }\n+    });\n \n-  if (error) {\n-    throw logger.error(error, { issueNumber: issue.number });\n+    await addCommentToIssue(\n+      context,\n+      `\n+      \n+> [!WARNING]\n+> ${error}\n+\n+${issues}\n+\n+`\n+    );\n+    throw new Error(logger.error(error, { issueNumber: issue.number }).logMessage.raw);","score":{"reward":1.632,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":66.40000000000003,"syllables":8,"sentences":1,"score":0.9359999999999996},"multiplier":1,"relevance":0.8}},{"id":1818112236,"content":"why global regex if you just take the first match?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1818112236","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -4,18 +4,36 @@ import { createClient } from \"@supabase/supabase-js\";\n import { LogReturn, Logs } from \"@ubiquity-os/ubiquity-os-logger\";\n import { createAdapters } from \"./adapters\";\n import { userPullRequest, userSelfAssign, userStartStop, userUnassigned } from \"./handlers/user-start-stop\";\n-import { Context, Env, PluginInputs } from \"./types\";\n+import { Context, Env, GitHubIssueSearch, PluginInputs } from \"./types\";\n import { addCommentToIssue } from \"./utils/issue\";\n \n+async function listOrganizations(): Promise<string[]> {\n+  const res = await fetch(\"https://raw.githubusercontent.com/ubiquity/devpool-directory/refs/heads/__STORAGE__/devpool-issues.json\");\n+  const devpoolIssues: GitHubIssueSearch[\"items\"] = await res.json();\n+  const orgsSet: Set<string> = new Set();\n+\n+  const urlPattern = /https:\\/\\/(github.com\\/(\\S+)\\/(\\S+)\\/issues\\/(\\d+))/g;\n+  devpoolIssues.forEach((issue) => {\n+    const matches = [...issue.html_url.matchAll(urlPattern)][0];","score":{"reward":2.592,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":95.165,"syllables":12,"sentences":1,"score":0.64835},"multiplier":1,"relevance":0.8}},{"id":1820805301,"content":"move this code to the try/catch block below to avoid duplicating catch block","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1820805301","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -24,6 +50,20 @@ export async function startStopTask(inputs: PluginInputs, env: Env) {\n \n   context.adapters = createAdapters(supabase, context);\n \n+  try {\n+    const organizations = await listOrganizations(context.logger);\n+    context.organizations = organizations;\n+  } catch (err) {\n+    let errorMessage;\n+    if (err instanceof LogReturn) {\n+      errorMessage = err;\n+      await addCommentToIssue(context, `${errorMessage?.logMessage.diff}\\n<!--\\n${sanitizeMetadata(errorMessage?.metadata)}\\n-->`);\n+    } else {\n+      context.logger.error(\"An error occurred\", { err });\n+    }\n+    return;\n+  }","score":{"reward":3.915,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":77.81071428571428,"syllables":19,"sentences":1,"score":0.8218928571428572},"multiplier":1,"relevance":0.9}},{"id":1828082899,"content":"in the SDK it will log even normal Errors so its better to return here","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828082899","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -64,23 +64,46 @@ export async function start(\n   teammates.push(sender.login);\n \n   const toAssign = [];\n+  let assignedIssues: GitHubIssueSearch[\"items\"] = [];\n   // check max assigned issues\n   for (const user of teammates) {\n-    if (await handleTaskLimitChecks(user, context, logger, sender.login)) {\n+    const { isWithinLimit, issues } = await handleTaskLimitChecks(user, context, logger, sender.login);\n+    if (isWithinLimit) {\n       toAssign.push(user);\n+    } else {\n+      assignedIssues = assignedIssues.concat(issues);\n     }\n   }\n \n   let error: string | null = null;\n-\n   if (toAssign.length === 0 && teammates.length > 1) {\n     error = \"All teammates have reached their max task limit. Please close out some tasks before assigning new ones.\";\n+    throw logger.error(error, { issueNumber: issue.number });\n   } else if (toAssign.length === 0) {\n     error = \"You have reached your max task limit. Please close out some tasks before assigning new ones.\";\n-  }\n+    let issues = \"\";\n+    const urlPattern = /https:\\/\\/(github.com\\/(\\S+)\\/(\\S+)\\/issues\\/(\\d+))/g;\n+    assignedIssues.forEach((el) => {\n+      const matches = [...el.html_url.matchAll(urlPattern)][0];\n+      if (matches) {\n+        issues = issues.concat(`- ###### [${matches[2]}/${matches[3]} - ${el.title} #${matches[4]}](https://www.${matches[1]})\\n`);\n+      } else {\n+        issues = issues.concat(`- ###### [${el.title}](${el.html_url})\\n`);\n+      }\n+    });\n \n-  if (error) {\n-    throw logger.error(error, { issueNumber: issue.number });\n+    await addCommentToIssue(\n+      context,\n+      `\n+      \n+> [!WARNING]\n+> ${error}\n+\n+${issues}\n+\n+`\n+    );\n+    throw new Error(logger.error(error, { issueNumber: issue.number }).logMessage.raw);","score":{"reward":4.05,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":15,"wordValue":0.1,"result":1.21},"readability":{"fleschKincaid":78.81000000000003,"syllables":20,"sentences":1,"score":0.8118999999999997},"multiplier":1,"relevance":0.9}},{"id":1828090638,"content":"```suggestion\r\n    assignedIssueScope: T.Union([T.Literal(\"org\"), T.Literal(\"repo\"), T.Literal(\"network\")], { default: \"org\" }),\r\n```\r\nor even better create an Enum and use it everywhere:\r\n```ts\r\nenum AssignedIssueScope {\r\n  ORG = \"org\",\r\n  REPO = \"repo\",\r\n  NETWORK = \"network\"\r\n}\r\nassignedIssueScope: T.Enum(AssignedIssueScope, { default: AssignedIssueScope.ORG }),\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828090638","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -41,6 +41,7 @@ export const pluginSettingsSchema = T.Object(\n     taskStaleTimeoutDuration: T.String({ default: \"30 Days\" }),\n     startRequiresWallet: T.Boolean({ default: true }),\n     maxConcurrentTasks: maxConcurrentTasks(),\n+    checkAssignedIssues: T.String({ default: \"org\" }),","score":{"reward":3.159,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":61.32500000000002,"syllables":16,"sentences":1,"score":0.9867499999999998},"multiplier":1,"relevance":0.9}},{"id":1828098370,"content":"try to avoid `as`","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828098370","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -29,7 +36,7 @@ export async function getAssignedIssues(context: Context, username: string) {\n       );\n   } catch (err) {\n     context.logger.info(\"Will try re-fetching assigned issues...\", { error: err as Error });\n-    return getAssignedIssuesFallback(context, username);\n+    return getAssignedIssuesFallback(context, username) as Promise<GitHubIssueSearch[\"items\"]>;","score":{"reward":0.882,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":3,"wordValue":0.1,"result":0.35},"readability":{"fleschKincaid":90.99000000000004,"syllables":4,"sentences":1,"score":0.6900999999999996},"multiplier":1,"relevance":0.7}},{"id":1828101717,"content":"I think the reasoning is that it's needed at multiple places so they just put it in the context","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828101717","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -16,6 +53,7 @@ export async function startStopTask(inputs: PluginInputs, env: Env) {\n     eventName: inputs.eventName,\n     payload: inputs.eventPayload,\n     config: inputs.settings,\n+    organizations: [],","score":{"reward":2.745,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":20,"wordValue":0.1,"result":1.48},"readability":{"fleschKincaid":80.78500000000003,"syllables":25,"sentences":1,"score":0.7921499999999998},"multiplier":1,"relevance":0.5}},{"id":1828415077,"content":"TS enum is better in the way it also creates a type, but in your case you have to do `typeof AssignedIssueScope[keyof typeof AssignedIssueScope]`. I think `const enum` basically generates an object like yours","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828415077","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -41,6 +41,7 @@ export const pluginSettingsSchema = T.Object(\n     taskStaleTimeoutDuration: T.String({ default: \"30 Days\" }),\n     startRequiresWallet: T.Boolean({ default: true }),\n     maxConcurrentTasks: maxConcurrentTasks(),\n+    checkAssignedIssues: T.String({ default: \"org\" }),","score":{"reward":4.032,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":80.83214285714287,"syllables":37,"sentences":2,"score":0.7916785714285713},"multiplier":1,"relevance":0.6}},{"id":1829724142,"content":"are you making this manually? We have a [workflow](https://github.com/ubiquity-os-marketplace/command-start-stop/blob/development/.github/workflows/update-configuration.yml) that automatically updates it, it should include the enum here","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1829724142","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -46,7 +46,7 @@\n           }\n         }\n       },\n-      \"checkAssignedIssues\": {\n+      \"assignedIssueScope\": {\n         \"default\": \"org\",\n         \"type\": \"string\"\n       },","score":{"reward":7.56,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":59.16092105263158,"syllables":31,"sentences":2,"score":0.9916092105263158},"multiplier":1,"relevance":0.8}},{"id":1829855110,"content":"let the workflow generate it","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1829855110","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -46,7 +46,7 @@\n           }\n         }\n       },\n-      \"checkAssignedIssues\": {\n+      \"assignedIssueScope\": {\n         \"default\": \"org\",\n         \"type\": \"string\"\n       },","score":{"reward":1.428,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":66.40000000000003,"syllables":8,"sentences":1,"score":0.9359999999999996},"multiplier":1,"relevance":0.7}},{"id":1831694643,"content":"maybe I'm missing something, but the config item `assignedIssueScope` can be set to `repo`, `org` or `network`, this `configuration` property gets filled based on `assignedIssueScope` when the plugin starts","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1831694643","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -16,6 +53,7 @@ export async function startStopTask(inputs: PluginInputs, env: Env) {\n     eventName: inputs.eventName,\n     payload: inputs.eventPayload,\n     config: inputs.settings,\n+    organizations: [],","score":{"reward":3.165,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":69.67500000000004,"syllables":32,"sentences":1,"score":0.9032499999999996},"multiplier":1,"relevance":0.5}}],"reviewRewards":[{"reviews":[{"reviewId":2390658096,"effect":{"addition":68,"deletion":10},"reward":2.34,"priority":3},{"reviewId":2393750266,"effect":{"addition":11,"deletion":18},"reward":0.87,"priority":3},{"reviewId":2397561562,"effect":{"addition":57,"deletion":55},"reward":3.36,"priority":3},{"reviewId":2397562681,"effect":{"addition":30,"deletion":7},"reward":1.11,"priority":3},{"reviewId":2413638329,"effect":{"addition":0,"deletion":0},"reward":0,"priority":3},{"reviewId":2413650819,"effect":{"addition":410,"deletion":38},"reward":13.44,"priority":3},{"reviewId":2416241056,"effect":{"addition":91,"deletion":71},"reward":4.86,"priority":3},{"reviewId":2419396470,"effect":{"addition":0,"deletion":0},"reward":0,"priority":3},{"reviewId":2421602788,"effect":{"addition":89,"deletion":74},"reward":4.89,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 81.804 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>9</td><td>30.87</td></tr><tr><td>Issue</td><td>Comment</td><td>1</td><td>1.413</td></tr><tr><td>Review</td><td>Comment</td><td>15</td><td>49.521</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66\" target=\"_blank\" rel=\"noopener\">#66</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+68 -10</td><td>3</td><td>2.34</td></tr><tr><td>+11 -18</td><td>3</td><td>0.87</td></tr><tr><td>+57 -55</td><td>3</td><td>3.36</td></tr><tr><td>+30 -7</td><td>3</td><td>1.11</td></tr><tr><td>+0 -0</td><td>3</td><td>0</td></tr><tr><td>+410 -38</td><td>3</td><td>13.44</td></tr><tr><td>+91 -71</td><td>3</td><td>4.86</td></tr><tr><td>+0 -0</td><td>3</td><td>0</td></tr><tr><td>+89 -74</td><td>3</td><td>4.89</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/issues/64#issuecomment-2465815678\" target=\"_blank\" rel=\"noopener\">refer to https://github.com/ubiquity-os/ubiquity-os-kernel/issue&hellip;</a></h6></td><td><details><summary>1.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 2&#13;  wordValue: 0.1&#13;  result: 0.25&#13;</pre></details></td><td>0.3</td><td>3</td><td>1.413</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#pullrequestreview-2397562681\" target=\"_blank\" rel=\"noopener\">forgot to submit review :D</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1813598759\" target=\"_blank\" rel=\"noopener\">Do we need bot's token just to list all installations or also in&hellip;</a></h6></td><td><details><summary>2.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0.6</td><td>3</td><td>5.256</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1815722316\" target=\"_blank\" rel=\"noopener\">Actually the kernel/SDK exports the app id and user ID of the pr&hellip;</a></h6></td><td><details><summary>3.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 43&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>0.7</td><td>3</td><td>8.484</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1818108651\" target=\"_blank\" rel=\"noopener\">it's a unit test</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.621</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1818109834\" target=\"_blank\" rel=\"noopener\">why is this throw necessary?</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.632</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1818112236\" target=\"_blank\" rel=\"noopener\">why global regex if you just take the first match?</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.8</td><td>3</td><td>2.592</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1820805301\" target=\"_blank\" rel=\"noopener\">move this code to the try/catch block below to avoid duplicating&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.9</td><td>3</td><td>3.915</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828082899\" target=\"_blank\" rel=\"noopener\">in the SDK it will log even normal Errors so its better to retur&hellip;</a></h6></td><td><details><summary>1.21</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 15&#13;  wordValue: 0.1&#13;  result: 1.21&#13;</pre></details></td><td>0.9</td><td>3</td><td>4.05</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828090638\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestionassignedIssueScope: T.Union([T.Li&hellip;</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.9</td><td>3</td><td>3.159</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828098370\" target=\"_blank\" rel=\"noopener\">try to avoid &#96;as&#96;</a></h6></td><td><details><summary>0.35</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 3&#13;  wordValue: 0.1&#13;  result: 0.35&#13;</pre></details></td><td>0.7</td><td>3</td><td>0.882</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828101717\" target=\"_blank\" rel=\"noopener\">I think the reasoning is that it's needed at multiple places so &hellip;</a></h6></td><td><details><summary>1.48</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 20&#13;  wordValue: 0.1&#13;  result: 1.48&#13;</pre></details></td><td>0.5</td><td>3</td><td>2.745</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828415077\" target=\"_blank\" rel=\"noopener\">TS enum is better in the way it also creates a type, but in your&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.6</td><td>3</td><td>4.032</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1829724142\" target=\"_blank\" rel=\"noopener\">are you making this manually? We have a [workflow](https://githu&hellip;</a></h6></td><td><details><summary>2.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.8</td><td>3</td><td>7.56</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1829855110\" target=\"_blank\" rel=\"noopener\">let the workflow generate it</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.7</td><td>3</td><td>1.428</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1831694643\" target=\"_blank\" rel=\"noopener\">maybe I'm missing something, but the config item &#96;assignedIs&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.5</td><td>3</td><td>3.165</td></tr></tbody></table></details>"},"ubiquity-ubiquibot":{"total":7.014,"userId":163369652,"comments":[{"id":2401101568,"content":"I can't test this because there is no way to set the organizations you want to look for assigned items, and it seems to always target `ubiquity` related repos so it always let me assign to tasks without any limit. I set it to `1` in the configuration, yet I could start in two issues:\r\nhttps://github.com/Meniole/command-start-stop/issues/39\r\nhttps://github.com/Meniole/command-start-stop/issues/40\r\nThere is nothing in the configuration that let's me change the targeted repos, which doesn't seem to fulfill point three of the spec. Am I misunderstanding something? @0x4007 rfc","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#pullrequestreview-2401101568","commentType":"PULL_CONTRIBUTOR","score":{"reward":3.774,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":2}},"result":2},"priority":3,"words":{"wordCount":85,"wordValue":0.1,"result":2.64},"readability":{"fleschKincaid":68.67102750809065,"syllables":147,"sentences":6,"score":0.9132897249190935},"multiplier":0.25,"relevance":0.85}}],"reviewRewards":[{"reviews":[{"reviewId":2401101568,"effect":{"addition":92,"deletion":16},"reward":3.24,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 7.014 XP ]</a>&nbsp;</h3><h6>@ubiquity-ubiquibot</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>3.24</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>3.774</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66\" target=\"_blank\" rel=\"noopener\">#66</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+92 -16</td><td>3</td><td>3.24</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#pullrequestreview-2401101568\" target=\"_blank\" rel=\"noopener\">I can't test this because there is no way to set the organizatio&hellip;</a></h6></td><td><details><summary>4.64</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 85&#13;  wordValue: 0.1&#13;  result: 2.64&#13;</pre></details></td><td>0.85</td><td>3</td><td>3.774</td></tr></tbody></table></details>"},"Keyrxng":{"total":41.607,"userId":106303466,"comments":[{"id":1809758308,"content":"Afaik this isn't feasible @0x4007 because we need the kernel' private key which has been spoken about across a few issues. It was ofc the telegram bot most recently https://github.com/ubiquity-os-marketplace/ubiquity-os-kernel-telegram/pull/2#discussion_r1766516363","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1809758308","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -15,7 +15,7 @@ export async function getAssignedIssues(context: Context, username: string): Pro\n   try {\n     return await context.octokit\n       .paginate(context.octokit.search.issuesAndPullRequests, {\n-        q: `org:${payload.repository.owner.login} assignee:${username} is:open is:issue`,\n+        q: `org:ubiquity org:ubiquity-os-marketplace org:ubiquity-os assignee:${username} is:open is:issue`,","score":{"reward":1.656,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":52.59829457364344,"syllables":71,"sentences":3,"score":0.9259829457364345},"multiplier":0.25,"relevance":0.6}},{"id":1809760251,"content":"to list installs we need app private key do we not?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1809760251","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -6,17 +6,27 @@ import { createAdapters } from \"./adapters\";\n import { userPullRequest, userSelfAssign, userStartStop, userUnassigned } from \"./handlers/user-start-stop\";\n import { Context, Env, PluginInputs } from \"./types\";\n import { addCommentToIssue } from \"./utils/issue\";\n+import { createAppAuth } from \"@octokit/auth-app\";\n \n export async function startStopTask(inputs: PluginInputs, env: Env) {\n   const customOctokit = Octokit.plugin(paginateGraphQL);\n   const octokit = new customOctokit({ auth: inputs.authToken });\n   const supabase = createClient(env.SUPABASE_URL, env.SUPABASE_KEY);\n \n+  const jwtOctokit = new Octokit({","score":{"reward":0.609,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":95.68818181818183,"syllables":13,"sentences":1,"score":0.6431181818181817},"multiplier":0.25,"relevance":0.7}},{"id":1810508513,"content":"fair enough\r\nI want to add that the telegram bot PR was held back for weeks with the team debating exposing the kernel' private key, so if it's not to be used there then surely that also applies to here?\r\nSee [this](https://github.com/ubiquity-os/ubiquity-os-kernel/issues/164#issuecomment-2429171392) comment for one solution I can think of to all of this, since all orgs will install the storage app and we can track installs via that.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1810508513","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -6,17 +6,27 @@ import { createAdapters } from \"./adapters\";\n import { userPullRequest, userSelfAssign, userStartStop, userUnassigned } from \"./handlers/user-start-stop\";\n import { Context, Env, PluginInputs } from \"./types\";\n import { addCommentToIssue } from \"./utils/issue\";\n+import { createAppAuth } from \"@octokit/auth-app\";\n \n export async function startStopTask(inputs: PluginInputs, env: Env) {\n   const customOctokit = Octokit.plugin(paginateGraphQL);\n   const octokit = new customOctokit({ auth: inputs.authToken });\n   const supabase = createClient(env.SUPABASE_URL, env.SUPABASE_KEY);\n \n+  const jwtOctokit = new Octokit({","score":{"reward":2.784,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":70,"wordValue":0.1,"result":2.6},"readability":{"fleschKincaid":63.747142857142876,"syllables":89,"sentences":2,"score":0.9625285714285713},"multiplier":0.25,"relevance":0.8}},{"id":1811941376,"content":"listing installs is for sure the most convenient and effective way to find out the entire partner network\r\nhack 1: use `ubiquityos_app_slug` against the search API for comments and then filter a `Set` of the orgs which it has appeared in\r\nhack 2: install a secondary app to avoid exposing kernel' pk (guaranteed it seems partner's will have to do this anyway)\r\nhack 3: Auth as the kernel with `clientId` but I think that's the same as exposing the PK","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1811941376","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -6,17 +6,27 @@ import { createAdapters } from \"./adapters\";\n import { userPullRequest, userSelfAssign, userStartStop, userUnassigned } from \"./handlers/user-start-stop\";\n import { Context, Env, PluginInputs } from \"./types\";\n import { addCommentToIssue } from \"./utils/issue\";\n+import { createAppAuth } from \"@octokit/auth-app\";\n \n export async function startStopTask(inputs: PluginInputs, env: Env) {\n   const customOctokit = Octokit.plugin(paginateGraphQL);\n   const octokit = new customOctokit({ auth: inputs.authToken });\n   const supabase = createClient(env.SUPABASE_URL, env.SUPABASE_KEY);\n \n+  const jwtOctokit = new Octokit({","score":{"reward":2.052,"formatting":{"content":{"p":{"score":0,"elementCount":4}},"result":0},"priority":3,"words":{"wordCount":79,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":10.99430379746839,"syllables":108,"sentences":1,"score":0.5099430379746839},"multiplier":0.25,"relevance":0.9}},{"id":1813106198,"content":"1. partner's will use the same app slug, if you mean forks/development then they'd change to their own app slug.\r\n2. That is also an effective suggestion","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1813106198","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -6,17 +6,27 @@ import { createAdapters } from \"./adapters\";\n import { userPullRequest, userSelfAssign, userStartStop, userUnassigned } from \"./handlers/user-start-stop\";\n import { Context, Env, PluginInputs } from \"./types\";\n import { addCommentToIssue } from \"./utils/issue\";\n+import { createAppAuth } from \"@octokit/auth-app\";\n \n export async function startStopTask(inputs: PluginInputs, env: Env) {\n   const customOctokit = Octokit.plugin(paginateGraphQL);\n   const octokit = new customOctokit({ auth: inputs.authToken });\n   const supabase = createClient(env.SUPABASE_URL, env.SUPABASE_KEY);\n \n+  const jwtOctokit = new Octokit({","score":{"reward":0.93,"formatting":{"content":{"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"p":{"score":0,"elementCount":2}},"result":0.2},"priority":3,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":80.83214285714287,"syllables":37,"sentences":2,"score":0.7916785714285713},"multiplier":0.25,"relevance":0.5}},{"id":1815472576,"content":"To get a better picture of how over-assigned the contributor might be across multiple partners (eventually we'll have loads).\r\n---\r\n1. Global storage would enable us to track a userbase across all partners. The user object can be updated any time they are assigned an issue within the network and we can track with ease. This can serve us in hundreds of ways not just with this use-case.\r\n2. Parse devpool json (better with all issues filled, theres a task for it) + search API for `username: pull_requests`, filter those that match devpool orgs.\r\n3. Depending on the user' visibility settings you'll likely be able to do it with GraphQL API but I'm not as knowledgeable with that API, I use the official [GitHub GQL Explorer](https://docs.github.com/en/graphql/overview/explorer) to investigate when I need to.\r\n---\r\n`author:keyrxng is:pr` returns all of my PRs. It's trivial to match devpool json orgs to the orgs returned by this query.\r\n`author:keyrxng is:pr -org:ubq-testing` this is how to exclude an org. (166 PRs returned by this lmao, only ~10-15 are not PRs into the Ubiquity ecosystem, I like that)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1815472576","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -15,7 +15,7 @@ export async function getAssignedIssues(context: Context, username: string): Pro\n   try {\n     return await context.octokit\n       .paginate(context.octokit.search.issuesAndPullRequests, {\n-        q: `org:${payload.repository.owner.login} assignee:${username} is:open is:issue`,\n+        q: `org:ubiquity org:ubiquity-os-marketplace org:ubiquity-os assignee:${username} is:open is:issue`,","score":{"reward":2.808,"formatting":{"content":{"p":{"score":0,"elementCount":6},"hr":{"score":0,"elementCount":2},"ol":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1.3},"priority":3,"words":{"wordCount":176,"wordValue":0.1,"result":1.97},"readability":{"fleschKincaid":69.7619090909091,"syllables":248,"sentences":10,"score":0.902380909090909},"multiplier":0.25,"relevance":0.9}},{"id":1815507774,"content":"Whichever query you feel is most effective dude go for it.\r\nhttps://github.com/ubiquity-os-marketplace/command-start-stop/blob/1ceebb363cf414b5a9ad00c101ea5e1d706424fb/src/types/env.ts#L9\r\nUse this variable to find out the bot's name instead of a new config item but if not then I guess you'd need a new config item if using that approach but I feel the right thing to do is use it's ID vs a new config item.\r\nPretty sure the REST api does not provide a method to search for a user with their `user.id` or `node_id` so you'd need to use the GQL API.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1815507774","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -15,7 +15,7 @@ export async function getAssignedIssues(context: Context, username: string): Pro\n   try {\n     return await context.octokit\n       .paginate(context.octokit.search.issuesAndPullRequests, {\n-        q: `org:${payload.repository.owner.login} assignee:${username} is:open is:issue`,\n+        q: `org:ubiquity org:ubiquity-os-marketplace org:ubiquity-os assignee:${username} is:open is:issue`,","score":{"reward":2.736,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":89,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":75.94285714285715,"syllables":136,"sentences":5,"score":0.8405714285714285},"multiplier":0.25,"relevance":0.8}},{"id":1815691475,"content":"ohh I was hoping that wasn't the case. You could use `author: <xx> is:pr` and do an org comparison that way instead otherwise @0x4007 or @gentlementlegen will approve the new config item.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1815691475","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -15,7 +15,7 @@ export async function getAssignedIssues(context: Context, username: string): Pro\n   try {\n     return await context.octokit\n       .paginate(context.octokit.search.issuesAndPullRequests, {\n-        q: `org:${payload.repository.owner.login} assignee:${username} is:open is:issue`,\n+        q: `org:ubiquity org:ubiquity-os-marketplace org:ubiquity-os assignee:${username} is:open is:issue`,","score":{"reward":1.08,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":30,"wordValue":0.1,"result":1.88},"readability":{"fleschKincaid":67.53000000000003,"syllables":44,"sentences":2,"score":0.9246999999999997},"multiplier":0.25,"relevance":0.6}},{"id":1815716849,"content":"Storage has it's own [branch](https://github.com/ubiquity/devpool-directory/tree/__STORAGE__).\r\nThis fn is trying to find assigned issues so\r\n- using search API to get all PRs, then filter, then get the linked issue via GQL or PR body parsing\r\n- using search API with `assignee:keyrxng is:issue`, then just filter is another but it doesn't take PRs into consideration (not sure if that's something we should consider in this context)\r\noption two is probably best. (a lot of cases exist where a user is assigned to a task after it's closed as completed etc too which probably should be considered when filtering the results)","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1815716849","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -15,7 +15,7 @@ export async function getAssignedIssues(context: Context, username: string): Pro\n   try {\n     return await context.octokit\n       .paginate(context.octokit.search.issuesAndPullRequests, {\n-        q: `org:${payload.repository.owner.login} assignee:${username} is:open is:issue`,\n+        q: `org:ubiquity org:ubiquity-os-marketplace org:ubiquity-os assignee:${username} is:open is:issue`,","score":{"reward":2.952,"formatting":{"content":{"p":{"score":0,"elementCount":5},"ul":{"score":0,"elementCount":1},"li":{"score":0.1,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1.2},"priority":3,"words":{"wordCount":99,"wordValue":0.1,"result":2.61},"readability":{"fleschKincaid":57.1218181818182,"syllables":136,"sentences":3,"score":0.971218181818182},"multiplier":0.25,"relevance":0.8}},{"id":1828246438,"content":"update the return type annotation of `getAssignedIssues` to include the `listfor` type that the fallback returns, making it a union of either search or list results","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828246438","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -29,7 +36,7 @@ export async function getAssignedIssues(context: Context, username: string) {\n       );\n   } catch (err) {\n     context.logger.info(\"Will try re-fetching assigned issues...\", { error: err as Error });\n-    return getAssignedIssuesFallback(context, username);\n+    return getAssignedIssuesFallback(context, username) as Promise<GitHubIssueSearch[\"items\"]>;","score":{"reward":1.431,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":55.57500000000003,"syllables":36,"sentences":1,"score":0.9557500000000003},"multiplier":0.25,"relevance":0.9}},{"id":1828254727,"content":"Usually it's better to use \r\n```ts\r\nconst AssignedIssueScope = {\r\n  ORG: \"org\",\r\n  REPO: \"repo\",\r\n  NETWORK: \"network\"\r\n} as const\r\n```\r\nover enums, they are debated to be a bad practice and TS themselves said they regret adding it into the language. It results in less performant JS (because enums don't exist in JS) and can be lost during runtime in libs are not built correctly\r\nThey both represent a simple object where `Enum` adds a burden that can be avoided but it's dev preference in this regard as it's a point of debate in the TS world.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828254727","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -41,6 +41,7 @@ export const pluginSettingsSchema = T.Object(\n     taskStaleTimeoutDuration: T.String({ default: \"30 Days\" }),\n     startRequiresWallet: T.Boolean({ default: true }),\n     maxConcurrentTasks: maxConcurrentTasks(),\n+    checkAssignedIssues: T.String({ default: \"org\" }),","score":{"reward":1.992,"formatting":{"content":{"p":{"score":0,"elementCount":3}},"result":0},"priority":3,"words":{"wordCount":85,"wordValue":0.1,"result":2.64},"readability":{"fleschKincaid":47.24808823529415,"syllables":117,"sentences":2,"score":0.8724808823529415},"multiplier":0.25,"relevance":0.8}},{"id":1828257612,"content":"Can you place this in with the handlers or helpers to keep the entry tidy my friend?","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828257612","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -4,9 +4,46 @@ import { createClient } from \"@supabase/supabase-js\";\n import { LogReturn, Logs } from \"@ubiquity-os/ubiquity-os-logger\";\n import { createAdapters } from \"./adapters\";\n import { userPullRequest, userSelfAssign, userStartStop, userUnassigned } from \"./handlers/user-start-stop\";\n-import { Context, Env, PluginInputs } from \"./types\";\n+import { Context, Env, GitHubIssueSearch, PluginInputs } from \"./types\";\n import { addCommentToIssue } from \"./utils/issue\";\n \n+async function listOrganizations(context: Context): Promise<string[]> {","score":{"reward":0.84,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":17,"wordValue":0.1,"result":1.32},"readability":{"fleschKincaid":85.07411764705884,"syllables":21,"sentences":1,"score":0.7492588235294115},"multiplier":0.25,"relevance":0.7}},{"id":1828424317,"content":"https://www.typescriptlang.org/docs/handbook/enums.html#const-enum-pitfalls\r\nconst enum is fine here I'm sure because this plugin is not used as a lib but if it was and placed inside a `.ts` file it would be lost at compile time after the file was converted into `.d.ts`. The values will be inlined where they are used.\r\nI agree it's a cleaner type definition it just has gotchas with using them so I like to avoid, but dev preference for sure I'm not against them.","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828424317","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -41,6 +41,7 @@ export const pluginSettingsSchema = T.Object(\n     taskStaleTimeoutDuration: T.String({ default: \"30 Days\" }),\n     startRequiresWallet: T.Boolean({ default: true }),\n     maxConcurrentTasks: maxConcurrentTasks(),\n+    checkAssignedIssues: T.String({ default: \"org\" }),","score":{"reward":2.373,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":78,"wordValue":0.1,"result":2.63},"readability":{"fleschKincaid":77.7117509363296,"syllables":120,"sentences":6,"score":0.822882490636704},"multiplier":0.25,"relevance":0.7}},{"id":1828428872,"content":"[TS Playground](https://www.typescriptlang.org/play/#code/MYewdgzgLgBAghCBLA5mApgEwJKIK7oDKoADujALwwDeAUDDAPIBKA4gFwwBEIATilwA09GMwCiABUacuvdCRBCRAOTEAVAOosA0jIxQA7nwDWXWgF8YAQwgxQkKLXvQY0eQEZK3NyXdmn4C7oYHgAtvCIqBg4+ESk6ADCgVBiIeF0DCysXjz8SgziUjlyCvkwqpo6OfpGvKYWAQ6uUPIATDk+rf60wWERyGhYuBAExCBkqX0ZTGw5fALCBZKMxfKKi+XqWsza1eiGJmbmtLRAA)\r\nthis shows how the three enums are compiled:\r\n![image](https://github.com/user-attachments/assets/c259293d-bd38-4b1a-a3e4-0c0139aa7db3)\r\nThis also works surprisingly, less verbose but looks hacky\r\n```ts\r\nexport type AssignedIssueScopes = typeof AssignedIssueScope[][number];\r\n```","url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828428872","commentType":"PULL_CONTRIBUTOR","diffHunk":"@@ -41,6 +41,7 @@ export const pluginSettingsSchema = T.Object(\n     taskStaleTimeoutDuration: T.String({ default: \"30 Days\" }),\n     startRequiresWallet: T.Boolean({ default: true }),\n     maxConcurrentTasks: maxConcurrentTasks(),\n+    checkAssignedIssues: T.String({ default: \"org\" }),","score":{"reward":1.404,"formatting":{"content":{"p":{"score":0,"elementCount":4},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":62.87631578947371,"syllables":28,"sentences":1,"score":0.971236842105263},"multiplier":0.25,"relevance":0.6}}],"reviewRewards":[{"reviews":[{"reviewId":2383627210,"effect":{"addition":29,"deletion":8},"reward":1.11,"priority":3},{"reviewId":2383629790,"effect":{"addition":42,"deletion":5},"reward":1.41,"priority":3},{"reviewId":2393337870,"effect":{"addition":0,"deletion":0},"reward":0,"priority":3},{"reviewId":2413899913,"effect":{"addition":410,"deletion":38},"reward":13.44,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 41.607 XP ]</a>&nbsp;</h3><h6>@Keyrxng</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>4</td><td>15.96</td></tr><tr><td>Review</td><td>Comment</td><td>14</td><td>25.647</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66\" target=\"_blank\" rel=\"noopener\">#66</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+29 -8</td><td>3</td><td>1.11</td></tr><tr><td>+42 -5</td><td>3</td><td>1.41</td></tr><tr><td>+0 -0</td><td>3</td><td>0</td></tr><tr><td>+410 -38</td><td>3</td><td>13.44</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1809758308\" target=\"_blank\" rel=\"noopener\">Afaik this isn't feasible @0x4007 because we need the kernel' pr&hellip;</a></h6></td><td><details><summary>2.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.656</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1809760251\" target=\"_blank\" rel=\"noopener\">to list installs we need app private key do we not?</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.7</td><td>3</td><td>0.609</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1810508513\" target=\"_blank\" rel=\"noopener\">fair enoughI want to add that the telegram bot PR was held bac&hellip;</a></h6></td><td><details><summary>3.6</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 70&#13;  wordValue: 0.1&#13;  result: 2.6&#13;</pre></details></td><td>0.8</td><td>3</td><td>2.784</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1811941376\" target=\"_blank\" rel=\"noopener\">listing installs is for sure the most convenient and effective w&hellip;</a></h6></td><td><details><summary>2.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;  result: 0&#13;regex:&#13;  wordCount: 79&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.052</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1813106198\" target=\"_blank\" rel=\"noopener\">1. partner's will use the same app slug, if you mean forks/devel&hellip;</a></h6></td><td><details><summary>2.01</summary><pre>content:&#13;  content:&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0.2&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.5</td><td>3</td><td>0.93</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1815472576\" target=\"_blank\" rel=\"noopener\">To get a better picture of how over-assigned the contributor mig&hellip;</a></h6></td><td><details><summary>3.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 6&#13;    hr:&#13;      score: 0&#13;      elementCount: 2&#13;    ol:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.3&#13;regex:&#13;  wordCount: 176&#13;  wordValue: 0.1&#13;  result: 1.97&#13;</pre></details></td><td>0.9</td><td>3</td><td>2.808</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1815507774\" target=\"_blank\" rel=\"noopener\">Whichever query you feel is most effective dude go for it.http&hellip;</a></h6></td><td><details><summary>3.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 89&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.8</td><td>3</td><td>2.736</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1815691475\" target=\"_blank\" rel=\"noopener\">ohh I was hoping that wasn't the case. You could use &#96;author&hellip;</a></h6></td><td><details><summary>1.88</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 30&#13;  wordValue: 0.1&#13;  result: 1.88&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.08</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1815716849\" target=\"_blank\" rel=\"noopener\">Storage has it's own [branch](https://github.com/ubiquity/devpoo&hellip;</a></h6></td><td><details><summary>3.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    ul:&#13;      score: 0&#13;      elementCount: 1&#13;    li:&#13;      score: 0.1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1.2&#13;regex:&#13;  wordCount: 99&#13;  wordValue: 0.1&#13;  result: 2.61&#13;</pre></details></td><td>0.8</td><td>3</td><td>2.952</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828246438\" target=\"_blank\" rel=\"noopener\">update the return type annotation of &#96;getAssignedIssues&#96;&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0.9</td><td>3</td><td>1.431</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828254727\" target=\"_blank\" rel=\"noopener\">Usually it's better to use &#96;&#96;&#96;tsconst AssignedIs&hellip;</a></h6></td><td><details><summary>2.64</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;  result: 0&#13;regex:&#13;  wordCount: 85&#13;  wordValue: 0.1&#13;  result: 2.64&#13;</pre></details></td><td>0.8</td><td>3</td><td>1.992</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828257612\" target=\"_blank\" rel=\"noopener\">Can you place this in with the handlers or helpers to keep the e&hellip;</a></h6></td><td><details><summary>1.32</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 17&#13;  wordValue: 0.1&#13;  result: 1.32&#13;</pre></details></td><td>0.7</td><td>3</td><td>0.84</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828424317\" target=\"_blank\" rel=\"noopener\">https://www.typescriptlang.org/docs/handbook/enums.html#const-en&hellip;</a></h6></td><td><details><summary>3.63</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 78&#13;  wordValue: 0.1&#13;  result: 2.63&#13;</pre></details></td><td>0.7</td><td>3</td><td>2.373</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/command-start-stop/pull/66#discussion_r1828428872\" target=\"_blank\" rel=\"noopener\">[TS Playground](https://www.typescriptlang.org/play/#code/MYewdg&hellip;</a></h6></td><td><details><summary>2.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 4&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.6</td><td>3</td><td>1.404</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_6.json","json":{"gentlementlegen":{"userId":9807008,"total":75,"task":{"reward":75,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 75 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>75</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":15.444,"userId":4975670,"comments":[{"id":2031472180,"content":"We should increase the base rate of this organization.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/6#issuecomment-2031472180","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":9,"wordValue":0.1,"result":0.84},"readability":{"fleschKincaid":66.10000000000002,"syllables":14,"sentences":1,"score":0.9389999999999997},"multiplier":1,"relevance":0}},{"id":2036328336,"content":"Almost forgot we can toggle the access control system in the config so in this organization anybody can generate permits @gentlementlegen","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/6#issuecomment-2036328336","commentType":"ISSUE_COLLABORATOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":21,"wordValue":0.1,"result":1.52},"readability":{"fleschKincaid":16.32000000000002,"syllables":42,"sentences":1,"score":0.5632000000000003},"multiplier":1,"relevance":0}},{"id":1975440321,"content":"Code looks fine to me. Will have more feedback after we test in production I suppose!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/7#pullrequestreview-1975440321","commentType":"PULL_COLLABORATOR","score":{"reward":1.86,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":16,"wordValue":0.1,"result":1.27},"readability":{"fleschKincaid":87.67750000000001,"syllables":21,"sentences":2,"score":0.7232249999999999},"multiplier":1,"relevance":0.4}},{"id":2031745556,"content":"Looks good so far!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/7#issuecomment-2031745556","commentType":"PULL_COLLABORATOR","score":{"reward":0.513,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":4,"wordValue":0.1,"result":0.44},"readability":{"fleschKincaid":118.17500000000001,"syllables":4,"sentences":1,"score":1},"multiplier":1,"relevance":0.3}},{"id":2033486573,"content":"I just checked CI. Can you make it pass and then you can merge?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/7#issuecomment-2033486573","commentType":"PULL_COLLABORATOR","score":{"reward":2.718,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":3,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":115.13000000000002,"syllables":14,"sentences":2,"score":1},"multiplier":1,"relevance":0.6}},{"id":2036209961,"content":"<img width=\"1040\" alt=\"image\" src=\"https://github.com/ubiquibot/conversation-rewards/assets/4975670/234761d0-9e38-4c66-810f-16e04cd8164d\">\r\nMeans you can merge when its ready. The reward wouldn't generate but I can simply regenerate the reward in this case. It is most operationally efficient to merge code optimistically, especially when your reviewer (me) says looks good.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/7#issuecomment-2036209961","commentType":"PULL_COLLABORATOR","score":{"reward":8.883,"formatting":{"content":{"p":{"score":0,"elementCount":2},"a":{"score":1,"elementCount":1}},"result":1},"priority":3,"words":{"wordCount":45,"wordValue":0.1,"result":2.29},"readability":{"fleschKincaid":55.0071551724138,"syllables":94,"sentences":4,"score":0.950071551724138},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":1973455220,"effect":{"addition":32,"deletion":8},"reward":1.2,"priority":3},{"reviewId":1975440321,"effect":{"addition":7,"deletion":2},"reward":0.27,"priority":3}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/7"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 15.444 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>2</td><td>1.47</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>0</td></tr><tr><td>Review</td><td>Comment</td><td>4</td><td>13.974</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/7\" target=\"_blank\" rel=\"noopener\">#7</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+32 -8</td><td>3</td><td>1.2</td></tr><tr><td>+7 -2</td><td>3</td><td>0.27</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/6#issuecomment-2031472180\" target=\"_blank\" rel=\"noopener\">We should increase the base rate of this organization.</a></h6></td><td><details><summary>0.84</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 9&#13;  wordValue: 0.1&#13;  result: 0.84&#13;</pre></details></td><td>0</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/6#issuecomment-2036328336\" target=\"_blank\" rel=\"noopener\">Almost forgot we can toggle the access control system in the con&hellip;</a></h6></td><td><details><summary>1.52</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.1&#13;  result: 1.52&#13;</pre></details></td><td>0</td><td>3</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/7#pullrequestreview-1975440321\" target=\"_blank\" rel=\"noopener\">Code looks fine to me. Will have more feedback after we test in &hellip;</a></h6></td><td><details><summary>1.27</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 16&#13;  wordValue: 0.1&#13;  result: 1.27&#13;</pre></details></td><td>0.4</td><td>3</td><td>1.86</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/7#issuecomment-2031745556\" target=\"_blank\" rel=\"noopener\">Looks good so far!</a></h6></td><td><details><summary>0.44</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 4&#13;  wordValue: 0.1&#13;  result: 0.44&#13;</pre></details></td><td>0.3</td><td>3</td><td>0.513</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/7#issuecomment-2033486573\" target=\"_blank\" rel=\"noopener\">I just checked CI. Can you make it pass and then you can merge?</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.6</td><td>3</td><td>2.718</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/7#issuecomment-2036209961\" target=\"_blank\" rel=\"noopener\">&lt;img width=\"1040\" alt=\"image\" src=\"https://github.com/ubiquib&hellip;</a></h6></td><td><details><summary>3.29</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 45&#13;  wordValue: 0.1&#13;  result: 2.29&#13;</pre></details></td><td>0.7</td><td>3</td><td>8.883</td></tr></tbody></table></details>"}}},{"name":"results/ubiquity-os-marketplace_text-conversation-rewards_207.json","json":{"gentlementlegen":{"userId":9807008,"total":100,"task":{"reward":100,"multiplier":1},"reviewRewards":[],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 100 XP ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>1</td><td>100</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody></tbody></table></details>"},"0x4007":{"total":70.324,"userId":4975670,"comments":[{"id":2525118098,"content":"@sshivaditya this should only recommend once the pricing is posted, otherwise its trying to suggest talent for proposals.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/207#issuecomment-2525118098","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":18,"wordValue":0.1,"result":1.38},"readability":{"fleschKincaid":42.86500000000001,"syllables":31,"sentences":1,"score":0.8286500000000001},"multiplier":1,"relevance":0}},{"id":2538761769,"content":"@gentlementlegen we need to put a pause to this project. I found the original capability in daemon-pricing. Do you understand what we should do to proceed? \n![image](https://github.com/user-attachments/assets/64e8e21e-aaad-46c5-99ce-a03d12aa9b16)\nhttps://github.com/ubiquity-os-marketplace/daemon-pricing","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/207#issuecomment-2538761769","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":27,"wordValue":0.1,"result":1.78},"readability":{"fleschKincaid":54.70142857142861,"syllables":60,"sentences":5,"score":0.947014285714286},"multiplier":1,"relevance":0}},{"id":2538849796,"content":"For now let's pile it up here and make the code as modularized as possible so we can easily extract in the future?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/207#issuecomment-2538849796","commentType":"ISSUE_AUTHOR","score":{"reward":0,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":24,"wordValue":0.1,"result":1.66},"readability":{"fleschKincaid":62.62500000000003,"syllables":34,"sentences":1,"score":0.9737499999999997},"multiplier":1,"relevance":0}},{"id":2724596123,"content":"The config isn't clear how to set this correctly but it needs to be set by default that only collaborators can close issues and they can generate permits. \r\nhttps://github.com/ubiquity-os-marketplace/text-conversation-rewards/blob/main/manifest.json#L1478-L1489\r\nhttps://www.github.com/ubiquity/business-development/issues/92#issuecomment-2525078021","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/207","commentType":"ISSUE_SPECIFICATION","score":{"reward":4.94,"formatting":{"content":{"p":{"score":0,"elementCount":3},"a":{"score":1,"elementCount":2}},"result":2},"priority":1,"words":{"wordCount":29,"wordValue":0.1,"result":1.85},"readability":{"fleschKincaid":54.47992424242426,"syllables":93,"sentences":6,"score":0.9447992424242426},"multiplier":1,"relevance":1}},{"id":2499984890,"content":"After renaming the property name I think you can merge!","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#pullrequestreview-2499984890","commentType":"PULL_COLLABORATOR","score":{"reward":2.28,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":10,"wordValue":0.1,"result":0.9},"readability":{"fleschKincaid":69.78500000000001,"syllables":15,"sentences":1,"score":0.9021499999999999},"multiplier":1,"relevance":0.5}},{"id":1878879933,"content":"We needed it in the past for special purposes. Basically it was to work for a \"self serve\" demo without real funds.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1878879933","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -25,6 +40,12 @@ export async function run(context: ContextPlugin) {\n     return result.logMessage.raw;\n   }\n \n+  if (!(await isUserAllowedToGeneratePermits(context))) {\n+    const result = logger.error(\"You are not allowed to generate permits.\");\n+    await postComment(context, result);\n+    return result.logMessage.raw;\n+  }","score":{"reward":4.632,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":22,"wordValue":0.1,"result":1.57},"readability":{"fleschKincaid":84.15181818181821,"syllables":29,"sentences":2,"score":0.7584818181818178},"multiplier":1,"relevance":0.6}},{"id":1879880480,"content":"In practice I've never seen that. We don't generate any permits unless the GitHub issue is priced.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1879880480","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -292,8 +292,10 @@ export class GithubCommentModule extends BaseModule {\n       this.context.config.erc20RewardToken\n     );\n \n-    const rewardsSum = result.comments?.reduce<number>((acc, curr) => acc + (curr.score?.reward ?? 0), 0) ?? 0;\n-    const isCapped = result.total < rewardsSum;\n+    const rewardsSum =\n+      result.comments?.reduce<Decimal>((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0)) ??\n+      new Decimal(0);\n+    const isCapped = rewardsSum.gt(taskReward);","score":{"reward":5.012,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":19,"wordValue":0.1,"result":1.43},"readability":{"fleschKincaid":76.97144736842105,"syllables":27,"sentences":2,"score":0.8302855263157894},"multiplier":1,"relevance":0.7}},{"id":1879881248,"content":"You should retain the capability and leave it to be configurable, with its default to only allow collaborators to generate permits. If it was scrubbed out for some reason along the way then we can handle it in a separate task.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1879881248","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -25,6 +40,12 @@ export async function run(context: ContextPlugin) {\n     return result.logMessage.raw;\n   }\n \n+  if (!(await isUserAllowedToGeneratePermits(context))) {\n+    const result = logger.error(\"You are not allowed to generate permits.\");\n+    await postComment(context, result);\n+    return result.logMessage.raw;\n+  }","score":{"reward":8.992,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":41,"wordValue":0.1,"result":2.2},"readability":{"fleschKincaid":51.905548780487806,"syllables":65,"sentences":2,"score":0.919055487804878},"multiplier":1,"relevance":0.8}},{"id":1879885269,"content":"```suggestion\r\n<!-- Ubiquity - GithubCommentModule - GithubCommentModule.createStructuredMetadata - 28d3b8841b6a91baa874b1cf0f1d95a307e296d7\r\n```\r\nAs I recall, this should be the revision hash. Is this not implemented correctly?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1879885269","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -1,4 +1,4 @@\n-<details><summary><b><h3>&nbsp;<a href=\"https://pay.ubq.fi?claim=W3sidHlwZSI6ImVyYzIwLXBlcm1pdCIsInBlcm1pdCI6eyJwZXJtaXR0ZWQiOnsidG9rZW4iOiIweGU5MUQxNTNFMGI0MTUxOEEyQ2U4RGQzRDc5NDRGYTg2MzQ2M2E5N2QiLCJhbW91bnQiOiI1MjY0MDAwMDAwMDAwMDAwMDAwMCJ9LCJub25jZSI6IjMzOTI5NDE3NjI3OTM5NzU1OTMxNzgxMTE1NjU5ODM3OTc0NzU4OTQwMzc0OTU0MDQxMzEyODYzODI3ODA0MTE2ODc3MDgzNTI4ODgiLCJkZWFkbGluZSI6IjExNTc5MjA4OTIzNzMxNjE5NTQyMzU3MDk4NTAwODY4NzkwNzg1MzI2OTk4NDY2NTY0MDU2NDAzOTQ1NzU4NDAwNzkxMzEyOTYzOTkzNSJ9LCJ0cmFuc2ZlckRldGFpbHMiOnsidG8iOiIweDREMDcwNGY0MDBENTdCYTkzZUVhODg3NjVDM0ZjREJEODI2ZENGYzQiLCJyZXF1ZXN0ZWRBbW91bnQiOiI1MjY0MDAwMDAwMDAwMDAwMDAwMCJ9LCJvd25lciI6IjB4ZDk1MzBGM2ZiQkVhMTFiZUQwMURDMDlFNzkzMThmMmYyMDIyMzcxNiIsInNpZ25hdHVyZSI6IjB4NDIzMjA1YjQ1MmEwZmU4ZGE3MjFhNDY4OGYzYjQwY2M5MDQ0YzY4YmU0ZDYyYjRjNTcyZjBiYjJmYTdkZjUzMzYyZmIzZjNjMDhkNzU3NjgxMDM0ZTRmNDQ3ZjVmODIxZjcxZWVjNzExNzhjYzU4YjBhMmRmNTVjYzkyOTkxYzExYyIsIm5ldHdvcmtJZCI6MTAwfV0=\" target=\"_blank\" rel=\"noopener\">[ 52.64 WXDAI ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>0.5</td><td>25</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.69</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>6.544</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>15.406</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/issues/69\" target=\"_blank\" rel=\"noopener\">Looks like the filters are barely useable now that we have the s&hellip;</a></h6></td><td><details><summary>5.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 2&#13;    img:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 3&#13;regex:&#13;  wordCount: 48&#13;  wordValue: 0.1&#13;  result: 2.69&#13;</pre></details></td><td>1</td><td>1</td><td>5.69</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/issues/69#issuecomment-2186802545\" target=\"_blank\" rel=\"noopener\">Okay both bots are broken @gentlementlegen We should have spli&hellip;</a></h6></td><td><details><summary>3.77</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.2&#13;  result: 1.77&#13;</pre></details></td><td>0.8</td><td>1</td><td>3.416</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/issues/69#issuecomment-2186807999\" target=\"_blank\" rel=\"noopener\">Actually, looks like it did the right thing for your reward on v&hellip;</a></h6></td><td><details><summary>3.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.2&#13;  result: 2.66&#13;</pre></details></td><td>0.8</td><td>1</td><td>3.128</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/pull/70\" target=\"_blank\" rel=\"noopener\">Resolves https://github.com/ubiquity/work.ubq.fi/issues/69</a></h6></td><td><details><summary>2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 2&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/pull/70#issuecomment-2186530214\" target=\"_blank\" rel=\"noopener\">I always struggle with Cypress</a></h6></td><td><details><summary>1.79</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.2&#13;  result: 0.79&#13;</pre></details></td><td>0.7</td><td>1</td><td>3.106</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/pull/70#issuecomment-2186798329\" target=\"_blank\" rel=\"noopener\">Only doesn't work on my local, the guess is token expiration aft&hellip;</a></h6></td><td><details><summary>7.5</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 3&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.2&#13;  result: 4.5&#13;</pre></details></td><td>0.7</td><td>1</td><td>12.3</td></tr></tbody></table></details><details><summary><b><h3>&nbsp;<a href=\"https://pay.ubq.fi?claim=W3sidHlwZSI6ImVyYzIwLXBlcm1pdCIsInBlcm1pdCI6eyJwZXJtaXR0ZWQiOnsidG9rZW4iOiIweGU5MUQxNTNFMGI0MTUxOEEyQ2U4RGQzRDc5NDRGYTg2MzQ2M2E5N2QiLCJhbW91bnQiOiIzMjc0MzAwMDAwMDAwMDAwMDAwMCJ9LCJub25jZSI6IjgzMDc2NDM3NDQ2NDk5NTg5MzA0NjExMTI4OTYzOTE2NzEwMTA2ODg2MTAyNDM2MDIzODgxNTIwMDU4MzQ2ODAwNTc4NzU0NDAxNzU1IiwiZGVhZGxpbmUiOiIxMTU3OTIwODkyMzczMTYxOTU0MjM1NzA5ODUwMDg2ODc5MDc4NTMyNjk5ODQ2NjU2NDA1NjQwMzk0NTc1ODQwMDc5MTMxMjk2Mzk5MzUifSwidHJhbnNmZXJEZXRhaWxzIjp7InRvIjoiMHg0RDA3MDRmNDAwRDU3QmE5M2VFYTg4NzY1QzNGY0RCRDgyNmRDRmM0IiwicmVxdWVzdGVkQW1vdW50IjoiMzI3NDMwMDAwMDAwMDAwMDAwMDAifSwib3duZXIiOiIweGQ5NTMwRjNmYkJFYTExYmVEMDFEQzA5RTc5MzE4ZjJmMjAyMjM3MTYiLCJzaWduYXR1cmUiOiIweDhmYzBlYjhkMGIyMmRmYjAzOTBiMGJkZDM0NTY5Y2RlNDE2MmQ5MWE1NTc2OTEzOTkzOWVkZmM4OTdlMWVjZTg3NDZmNjNkY2RlZjg0MjQ1YzIyNjY5NTEwMzAxZDQxZTkxN2Q4NzQ2NjU5Yjg1NDRhNzMwODdkMWEwYjkyNDkyMWIiLCJuZXR3b3JrSWQiOjEwMH1d\" target=\"_blank\" rel=\"noopener\">[ 32.743 WXDAI ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>0.5</td><td>25</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>5.168</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>2.575</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/issues/69#issuecomment-2186805818\" target=\"_blank\" rel=\"noopener\">@0x4007 So it should be 25 each? I can confirm this is not handl&hellip;</a></h6></td><td><details><summary>2.54</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.54&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.232</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/issues/69#issuecomment-2186813200\" target=\"_blank\" rel=\"noopener\">Ah yes because it doesn't apply the &#96;0.5&#96; multiplier I s&hellip;</a></h6></td><td><details><summary>3.17</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 1&#13;    code:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 2&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.17&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.936</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/pull/70#issuecomment-2186914050\" target=\"_blank\" rel=\"noopener\">After token expiration, I could not reproduce the problem and st&hellip;</a></h6></td><td><details><summary>3.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>0.7</td><td>1</td><td>2.575</td></tr></tbody></table></details>\n+<details><summary><b><h3>&nbsp;<a href=\"https://pay.ubq.fi?claim=W3sidHlwZSI6ImVyYzIwLXBlcm1pdCIsInBlcm1pdCI6eyJwZXJtaXR0ZWQiOnsidG9rZW4iOiIweGU5MUQxNTNFMGI0MTUxOEEyQ2U4RGQzRDc5NDRGYTg2MzQ2M2E5N2QiLCJhbW91bnQiOiI1MjY0MDAwMDAwMDAwMDAwMDAwMCJ9LCJub25jZSI6IjMzOTI5NDE3NjI3OTM5NzU1OTMxNzgxMTE1NjU5ODM3OTc0NzU4OTQwMzc0OTU0MDQxMzEyODYzODI3ODA0MTE2ODc3MDgzNTI4ODgiLCJkZWFkbGluZSI6IjExNTc5MjA4OTIzNzMxNjE5NTQyMzU3MDk4NTAwODY4NzkwNzg1MzI2OTk4NDY2NTY0MDU2NDAzOTQ1NzU4NDAwNzkxMzEyOTYzOTkzNSJ9LCJ0cmFuc2ZlckRldGFpbHMiOnsidG8iOiIweDREMDcwNGY0MDBENTdCYTkzZUVhODg3NjVDM0ZjREJEODI2ZENGYzQiLCJyZXF1ZXN0ZWRBbW91bnQiOiI1MjY0MDAwMDAwMDAwMDAwMDAwMCJ9LCJvd25lciI6IjB4ZDk1MzBGM2ZiQkVhMTFiZUQwMURDMDlFNzkzMThmMmYyMDIyMzcxNiIsInNpZ25hdHVyZSI6IjB4NDIzMjA1YjQ1MmEwZmU4ZGE3MjFhNDY4OGYzYjQwY2M5MDQ0YzY4YmU0ZDYyYjRjNTcyZjBiYjJmYTdkZjUzMzYyZmIzZjNjMDhkNzU3NjgxMDM0ZTRmNDQ3ZjVmODIxZjcxZWVjNzExNzhjYzU4YjBhMmRmNTVjYzkyOTkxYzExYyIsIm5ldHdvcmtJZCI6MTAwfV0=\" target=\"_blank\" rel=\"noopener\">[ 52.64 WXDAI ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>⚠️ Your rewards have been limited to the task price of 12.5 WXDAI.</h6><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>0.5</td><td>25</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>5.69</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>6.544</td></tr><tr><td>Review</td><td>Comment</td><td>3</td><td>15.406</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/issues/69\" target=\"_blank\" rel=\"noopener\">Looks like the filters are barely useable now that we have the s&hellip;</a></h6></td><td><details><summary>5.69</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 2&#13;    img:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 3&#13;regex:&#13;  wordCount: 48&#13;  wordValue: 0.1&#13;  result: 2.69&#13;</pre></details></td><td>1</td><td>1</td><td>5.69</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/issues/69#issuecomment-2186802545\" target=\"_blank\" rel=\"noopener\">Okay both bots are broken @gentlementlegen We should have spli&hellip;</a></h6></td><td><details><summary>3.77</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 13&#13;  wordValue: 0.2&#13;  result: 1.77&#13;</pre></details></td><td>0.8</td><td>1</td><td>3.416</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/issues/69#issuecomment-2186807999\" target=\"_blank\" rel=\"noopener\">Actually, looks like it did the right thing for your reward on v&hellip;</a></h6></td><td><details><summary>3.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 21&#13;  wordValue: 0.2&#13;  result: 2.66&#13;</pre></details></td><td>0.8</td><td>1</td><td>3.128</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/pull/70\" target=\"_blank\" rel=\"noopener\">Resolves https://github.com/ubiquity/work.ubq.fi/issues/69</a></h6></td><td><details><summary>2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 2&#13;regex:&#13;  wordCount: 1&#13;  wordValue: 0&#13;  result: 0&#13;</pre></details></td><td>0.7</td><td>1</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/pull/70#issuecomment-2186530214\" target=\"_blank\" rel=\"noopener\">I always struggle with Cypress</a></h6></td><td><details><summary>1.79</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.2&#13;  result: 0.79&#13;</pre></details></td><td>0.7</td><td>1</td><td>3.106</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/pull/70#issuecomment-2186798329\" target=\"_blank\" rel=\"noopener\">Only doesn't work on my local, the guess is token expiration aft&hellip;</a></h6></td><td><details><summary>7.5</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 2&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 3&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.2&#13;  result: 4.5&#13;</pre></details></td><td>0.7</td><td>1</td><td>12.3</td></tr></tbody></table></details><details><summary><b><h3>&nbsp;<a href=\"https://pay.ubq.fi?claim=W3sidHlwZSI6ImVyYzIwLXBlcm1pdCIsInBlcm1pdCI6eyJwZXJtaXR0ZWQiOnsidG9rZW4iOiIweGU5MUQxNTNFMGI0MTUxOEEyQ2U4RGQzRDc5NDRGYTg2MzQ2M2E5N2QiLCJhbW91bnQiOiIzMjc0MzAwMDAwMDAwMDAwMDAwMCJ9LCJub25jZSI6IjgzMDc2NDM3NDQ2NDk5NTg5MzA0NjExMTI4OTYzOTE2NzEwMTA2ODg2MTAyNDM2MDIzODgxNTIwMDU4MzQ2ODAwNTc4NzU0NDAxNzU1IiwiZGVhZGxpbmUiOiIxMTU3OTIwODkyMzczMTYxOTU0MjM1NzA5ODUwMDg2ODc5MDc4NTMyNjk5ODQ2NjU2NDA1NjQwMzk0NTc1ODQwMDc5MTMxMjk2Mzk5MzUifSwidHJhbnNmZXJEZXRhaWxzIjp7InRvIjoiMHg0RDA3MDRmNDAwRDU3QmE5M2VFYTg4NzY1QzNGY0RCRDgyNmRDRmM0IiwicmVxdWVzdGVkQW1vdW50IjoiMzI3NDMwMDAwMDAwMDAwMDAwMDAifSwib3duZXIiOiIweGQ5NTMwRjNmYkJFYTExYmVEMDFEQzA5RTc5MzE4ZjJmMjAyMjM3MTYiLCJzaWduYXR1cmUiOiIweDhmYzBlYjhkMGIyMmRmYjAzOTBiMGJkZDM0NTY5Y2RlNDE2MmQ5MWE1NTc2OTEzOTkzOWVkZmM4OTdlMWVjZTg3NDZmNjNkY2RlZjg0MjQ1YzIyNjY5NTEwMzAxZDQxZTkxN2Q4NzQ2NjU5Yjg1NDRhNzMwODdkMWEwYjkyNDkyMWIiLCJuZXR3b3JrSWQiOjEwMH1d\" target=\"_blank\" rel=\"noopener\">[ 32.743 WXDAI ]</a>&nbsp;</h3><h6>@gentlementlegen</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Issue</td><td>Task</td><td>0.5</td><td>25</td></tr><tr><td>Issue</td><td>Comment</td><td>2</td><td>5.168</td></tr><tr><td>Review</td><td>Comment</td><td>1</td><td>2.575</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/issues/69#issuecomment-2186805818\" target=\"_blank\" rel=\"noopener\">@0x4007 So it should be 25 each? I can confirm this is not handl&hellip;</a></h6></td><td><details><summary>2.54</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 25&#13;  wordValue: 0.1&#13;  result: 1.54&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.232</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/issues/69#issuecomment-2186813200\" target=\"_blank\" rel=\"noopener\">Ah yes because it doesn't apply the &#96;0.5&#96; multiplier I s&hellip;</a></h6></td><td><details><summary>3.17</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 1&#13;    code:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 2&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.17&#13;</pre></details></td><td>0.8</td><td>1</td><td>2.936</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity/work.ubq.fi/pull/70#issuecomment-2186914050\" target=\"_blank\" rel=\"noopener\">After token expiration, I could not reproduce the problem and st&hellip;</a></h6></td><td><details><summary>3.25</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 39&#13;  wordValue: 0.1&#13;  result: 2.25&#13;</pre></details></td><td>0.7</td><td>1</td><td>2.575</td></tr></tbody></table></details>\n <!-- Ubiquity - GithubCommentModule - GithubCommentModule.createStructuredMetadata - 1234","score":{"reward":5.256,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":14,"wordValue":0.1,"result":1.16},"readability":{"fleschKincaid":72.83000000000003,"syllables":21,"sentences":2,"score":0.8716999999999997},"multiplier":1,"relevance":0.9}},{"id":1881887606,"content":"This is an interesting scenario that I didn't think of but actually the cap should remain at whatever the label is for all the users. I think it makes sense that if two assignees are splitting the reward that it shouldn't penalize the others. Only one could possibly have been the author. I suppose there is a slim chance that one can theoretically farm comment rewards while not being assigned and then be assigned at the very end. I suppose it would still be considered valid? I'm not sure a good solution for this. \nAlso for whatever it's worth, right before closing out an issue a super easy way to troll would be to team assign yourself across multiple accounts knocking down rewards for everybody else. Anyways I think let's retain caps at the price label.  \n---\nI don't like the idea of funding proposals that were shot down. Sure it could make sense to build out the capability and then disable it for ubiquity but our ethos is to pay for results, and I think proposals that are rejected don't provide results that make sense to pay for. \nBesides, this incentivizes making useless proposals and farming rewards. Obviously we want to incentivize behaviors that are desirable, which is shipping fixes and features.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1881887606","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -292,8 +292,10 @@ export class GithubCommentModule extends BaseModule {\n       this.context.config.erc20RewardToken\n     );\n \n-    const rewardsSum = result.comments?.reduce<number>((acc, curr) => acc + (curr.score?.reward ?? 0), 0) ?? 0;\n-    const isCapped = result.total < rewardsSum;\n+    const rewardsSum =\n+      result.comments?.reduce<Decimal>((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0)) ??\n+      new Decimal(0);\n+    const isCapped = rewardsSum.gt(taskReward);","score":{"reward":10.528,"formatting":{"content":{"h2":{"score":1,"elementCount":1},"p":{"score":0,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":219,"wordValue":0.1,"result":1.54},"readability":{"fleschKincaid":61.99070205479454,"syllables":327,"sentences":12,"score":0.9800929794520546},"multiplier":1,"relevance":0.8}},{"id":1882353757,"content":"This is less ambiguous I think: `collaboratorOnlyPaymentInvocation`","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1882353757","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -82,6 +82,8 @@ with:\n     delayMs: 10000\n   incentives:\n     requirePriceLabel: true\n+    limitRewards: true\n+    allowContributorGeneration: false","score":{"reward":2.772,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":6,"wordValue":0.1,"result":0.61},"readability":{"fleschKincaid":73.84500000000001,"syllables":9,"sentences":1,"score":0.8615499999999998},"multiplier":1,"relevance":0.9}},{"id":1882357060,"content":"Seems wrong but not too worried cause its in a test file.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1882357060","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -66,7 +67,7 @@ describe(\"GithubCommentModule Fee Tests\", () => {\n \n     jest.spyOn(githubCommentModule, \"_generateHtml\");\n \n-    const bodyContent = await githubCommentModule.getBodyContent(result);\n+    const bodyContent = await githubCommentModule.getBodyContent({} as unknown as IssueActivity, result);","score":{"reward":2.976,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":12,"wordValue":0.1,"result":1.04},"readability":{"fleschKincaid":95.955,"syllables":14,"sentences":1,"score":0.64045},"multiplier":1,"relevance":0.6}},{"id":2540324681,"content":"@gentlementlegen \nIt was implied that you were supposed to invert the logic. Read the property name carefully and you'll see that it's saying only team members can invoke permit generation\n```json\n{\n         \"collaboratorOnlyPaymentInvocation\": {\n            \"default\": false,\n            \"description\": \"If true, will allow contributors to generate permits.\",\n            \"type\": \"boolean\"\n}\n```","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#issuecomment-2540324681","commentType":"PULL_COLLABORATOR","score":{"reward":9.92,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":32,"wordValue":0.1,"result":1.95},"readability":{"fleschKincaid":50.47625000000002,"syllables":53,"sentences":2,"score":0.9047625000000002},"multiplier":1,"relevance":1}},{"id":2540868777,"content":"Contributors means outsiders so the description at least surely is wrong.","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#issuecomment-2540868777","commentType":"PULL_COLLABORATOR","score":{"reward":1.936,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":11,"wordValue":0.1,"result":0.97},"readability":{"fleschKincaid":41.8518181818182,"syllables":20,"sentences":1,"score":0.818518181818182},"multiplier":1,"relevance":0.4}}],"reviewRewards":[{"reviews":[{"reviewId":2493643669,"effect":{"addition":117,"deletion":42},"reward":6.36,"priority":4},{"reviewId":2495206703,"effect":{"addition":2,"deletion":1},"reward":0.12,"priority":4},{"reviewId":2499070030,"effect":{"addition":49,"deletion":15},"reward":2.56,"priority":4},{"reviewId":2499977845,"effect":{"addition":25,"deletion":26},"reward":2.04,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 70.324 XP ]</a>&nbsp;</h3><h6>@0x4007</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>4</td><td>11.08</td></tr><tr><td>Issue</td><td>Specification</td><td>1</td><td>4.94</td></tr><tr><td>Issue</td><td>Comment</td><td>3</td><td>0</td></tr><tr><td>Review</td><td>Comment</td><td>10</td><td>54.304</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209\" target=\"_blank\" rel=\"noopener\">#209</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+117 -42</td><td>4</td><td>6.36</td></tr><tr><td>+2 -1</td><td>4</td><td>0.12</td></tr><tr><td>+49 -15</td><td>4</td><td>2.56</td></tr><tr><td>+25 -26</td><td>4</td><td>2.04</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/207\" target=\"_blank\" rel=\"noopener\">The config isn't clear how to set this correctly but it needs to&hellip;</a></h6></td><td><details><summary>3.85</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 3&#13;    a:&#13;      score: 1&#13;      elementCount: 2&#13;  result: 2&#13;regex:&#13;  wordCount: 29&#13;  wordValue: 0.1&#13;  result: 1.85&#13;</pre></details></td><td>1</td><td>1</td><td>4.94</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/207#issuecomment-2525118098\" target=\"_blank\" rel=\"noopener\">@sshivaditya this should only recommend once the pricing is post&hellip;</a></h6></td><td><details><summary>1.38</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 18&#13;  wordValue: 0.1&#13;  result: 1.38&#13;</pre></details></td><td>0</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/207#issuecomment-2538761769\" target=\"_blank\" rel=\"noopener\">@gentlementlegen we need to put a pause to this project. I found&hellip;</a></h6></td><td><details><summary>2.78</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 27&#13;  wordValue: 0.1&#13;  result: 1.78&#13;</pre></details></td><td>0</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/issues/207#issuecomment-2538849796\" target=\"_blank\" rel=\"noopener\">For now let's pile it up here and make the code as modularized a&hellip;</a></h6></td><td><details><summary>1.66</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 24&#13;  wordValue: 0.1&#13;  result: 1.66&#13;</pre></details></td><td>0</td><td>4</td><td>0</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#pullrequestreview-2499984890\" target=\"_blank\" rel=\"noopener\">After renaming the property name I think you can merge!</a></h6></td><td><details><summary>0.9</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 10&#13;  wordValue: 0.1&#13;  result: 0.9&#13;</pre></details></td><td>0.5</td><td>4</td><td>2.28</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1878879933\" target=\"_blank\" rel=\"noopener\">We needed it in the past for special purposes. Basically it was &hellip;</a></h6></td><td><details><summary>1.57</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 22&#13;  wordValue: 0.1&#13;  result: 1.57&#13;</pre></details></td><td>0.6</td><td>4</td><td>4.632</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1879880480\" target=\"_blank\" rel=\"noopener\">In practice I've never seen that. We don't generate any permits &hellip;</a></h6></td><td><details><summary>1.43</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 19&#13;  wordValue: 0.1&#13;  result: 1.43&#13;</pre></details></td><td>0.7</td><td>4</td><td>5.012</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1879881248\" target=\"_blank\" rel=\"noopener\">You should retain the capability and leave it to be configurable&hellip;</a></h6></td><td><details><summary>2.2</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 41&#13;  wordValue: 0.1&#13;  result: 2.2&#13;</pre></details></td><td>0.8</td><td>4</td><td>8.992</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1879885269\" target=\"_blank\" rel=\"noopener\">&#96;&#96;&#96;suggestion&lt;!-- Ubiquity - GithubCommentModul&hellip;</a></h6></td><td><details><summary>1.16</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 14&#13;  wordValue: 0.1&#13;  result: 1.16&#13;</pre></details></td><td>0.9</td><td>4</td><td>5.256</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1881887606\" target=\"_blank\" rel=\"noopener\">This is an interesting scenario that I didn't think of but actua&hellip;</a></h6></td><td><details><summary>2.54</summary><pre>content:&#13;  content:&#13;    h2:&#13;      score: 1&#13;      elementCount: 1&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 219&#13;  wordValue: 0.1&#13;  result: 1.54&#13;</pre></details></td><td>0.8</td><td>4</td><td>10.528</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1882353757\" target=\"_blank\" rel=\"noopener\">This is less ambiguous I think: &#96;collaboratorOnlyPaymentInvo&hellip;</a></h6></td><td><details><summary>0.61</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 6&#13;  wordValue: 0.1&#13;  result: 0.61&#13;</pre></details></td><td>0.9</td><td>4</td><td>2.772</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1882357060\" target=\"_blank\" rel=\"noopener\">Seems wrong but not too worried cause its in a test file.</a></h6></td><td><details><summary>1.04</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 12&#13;  wordValue: 0.1&#13;  result: 1.04&#13;</pre></details></td><td>0.6</td><td>4</td><td>2.976</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#issuecomment-2540324681\" target=\"_blank\" rel=\"noopener\">@gentlementlegen It was implied that you were supposed to inver&hellip;</a></h6></td><td><details><summary>1.95</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 32&#13;  wordValue: 0.1&#13;  result: 1.95&#13;</pre></details></td><td>1</td><td>4</td><td>9.92</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#issuecomment-2540868777\" target=\"_blank\" rel=\"noopener\">Contributors means outsiders so the description at least surely &hellip;</a></h6></td><td><details><summary>0.97</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 11&#13;  wordValue: 0.1&#13;  result: 0.97&#13;</pre></details></td><td>0.4</td><td>4</td><td>1.936</td></tr></tbody></table></details>"},"whilefoo":{"total":46.32,"userId":139262667,"comments":[{"id":1876816854,"content":"what is this reward cap?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1876816854","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -292,8 +292,10 @@ export class GithubCommentModule extends BaseModule {\n       this.context.config.erc20RewardToken\n     );\n \n-    const rewardsSum = result.comments?.reduce<number>((acc, curr) => acc + (curr.score?.reward ?? 0), 0) ?? 0;\n-    const isCapped = result.total < rewardsSum;\n+    const rewardsSum =\n+      result.comments?.reduce<Decimal>((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0)) ??\n+      new Decimal(0);\n+    const isCapped = rewardsSum.gt(taskReward);","score":{"reward":1.656,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":5,"wordValue":0.1,"result":0.53},"readability":{"fleschKincaid":100.24000000000002,"syllables":6,"sentences":1,"score":1},"multiplier":1,"relevance":0.6}},{"id":1876819975,"content":"isn't there supposed to be a config to enable/disable permit generation by outside collaborators?\r\nalso why not just throw the error and let sdk handle it?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1876819975","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -25,6 +40,12 @@ export async function run(context: ContextPlugin) {\n     return result.logMessage.raw;\n   }\n \n+  if (!(await isUserAllowedToGeneratePermits(context))) {\n+    const result = logger.error(\"You are not allowed to generate permits.\");\n+    await postComment(context, result);\n+    return result.logMessage.raw;\n+  }","score":{"reward":7.888,"formatting":{"content":{"p":{"score":0,"elementCount":2}},"result":0},"priority":4,"words":{"wordCount":28,"wordValue":0.1,"result":1.81},"readability":{"fleschKincaid":53.639285714285734,"syllables":46,"sentences":2,"score":0.9363928571428574},"multiplier":1,"relevance":0.85}},{"id":1878747155,"content":"I guess we could add the setting but I feel like it's not a priority since that's such a rare use case because why would anyone want someone outside the org to generate permits","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1878747155","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -25,6 +40,12 @@ export async function run(context: ContextPlugin) {\n     return result.logMessage.raw;\n   }\n \n+  if (!(await isUserAllowedToGeneratePermits(context))) {\n+    const result = logger.error(\"You are not allowed to generate permits.\");\n+    await postComment(context, result);\n+    return result.logMessage.raw;\n+  }","score":{"reward":4.288,"formatting":{"content":{"p":{"score":0,"elementCount":1}},"result":0},"priority":4,"words":{"wordCount":36,"wordValue":0.1,"result":2.07},"readability":{"fleschKincaid":62.195000000000036,"syllables":46,"sentences":1,"score":0.9780499999999996},"multiplier":1,"relevance":0.4}},{"id":1878753088,"content":"[[ 0.3 WXDAI ]](https://github.com/Meniole/text-conversation-rewards/issues/undefined) @gentlementlegen\r\n⚠️ Your rewards have been limited to the task price of 0 WXDAI.\r\nThis was generated in your QA but it doesn't make sense. \r\nWhy was a reward of 0.3 generated if cap is 0? \r\nAlso if there is no task price I think we shouldn't check for cap","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1878753088","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -292,8 +292,10 @@ export class GithubCommentModule extends BaseModule {\n       this.context.config.erc20RewardToken\n     );\n \n-    const rewardsSum = result.comments?.reduce<number>((acc, curr) => acc + (curr.score?.reward ?? 0), 0) ?? 0;\n-    const isCapped = result.total < rewardsSum;\n+    const rewardsSum =\n+      result.comments?.reduce<Decimal>((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0)) ??\n+      new Decimal(0);\n+    const isCapped = rewardsSum.gt(taskReward);","score":{"reward":13.248,"formatting":{"content":{"p":{"score":0,"elementCount":5},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":55,"wordValue":0.1,"result":2.46},"readability":{"fleschKincaid":94.47265151515151,"syllables":67,"sentences":6,"score":0.6552734848484849},"multiplier":1,"relevance":0.8}},{"id":1880591572,"content":"I think sometimes an issue is about discussing a potential feature but at the end it might get closed because we decided not to implement it ([example](https://github.com/ubiquity/ts-template/issues/67)). I guess everybody that participated in the discussion should get rewarded, maybe not as much as if it gets implemented but everybody still put time into it.\r\n---\r\n@gentlementlegen as I understand the cap is only for users that are not assigned to the task, so this should also check that?","url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1880591572","commentType":"PULL_COLLABORATOR","diffHunk":"@@ -292,8 +292,10 @@ export class GithubCommentModule extends BaseModule {\n       this.context.config.erc20RewardToken\n     );\n \n-    const rewardsSum = result.comments?.reduce<number>((acc, curr) => acc + (curr.score?.reward ?? 0), 0) ?? 0;\n-    const isCapped = result.total < rewardsSum;\n+    const rewardsSum =\n+      result.comments?.reduce<Decimal>((acc, curr) => acc.add(curr.score?.reward ?? 0), new Decimal(0)) ??\n+      new Decimal(0);\n+    const isCapped = rewardsSum.gt(taskReward);","score":{"reward":12.88,"formatting":{"content":{"p":{"score":0,"elementCount":2},"hr":{"score":0,"elementCount":1},"a":{"score":1,"elementCount":1}},"result":1},"priority":4,"words":{"wordCount":77,"wordValue":0.1,"result":2.62},"readability":{"fleschKincaid":50.03787878787881,"syllables":119,"sentences":3,"score":0.9003787878787881},"multiplier":1,"relevance":0.7}}],"reviewRewards":[{"reviews":[{"reviewId":2490194328,"effect":{"addition":117,"deletion":42},"reward":6.36,"priority":4}],"url":"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209"}],"evaluationCommentHtml":"<details><summary><b><h3>&nbsp;<a href=\"undefined\" target=\"_blank\" rel=\"noopener\">[ 46.32 XP ]</a>&nbsp;</h3><h6>@whilefoo</h6></b></summary><h6>Contributions Overview</h6><table><thead><tr><th>View</th><th>Contribution</th><th>Count</th><th>Reward</th></tr></thead><tbody><tr><td>Review</td><td>Code Review</td><td>1</td><td>6.36</td></tr><tr><td>Review</td><td>Comment</td><td>5</td><td>39.96</td></tr></tbody></table><h6>Review Details for&nbsp;<a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209\" target=\"_blank\" rel=\"noopener\">#209</a></h6><table><thead><tr><th>Changes</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td>+117 -42</td><td>4</td><td>6.36</td></tr></tbody></table><h6>Conversation Incentives</h6><table><thead><tr><th>Comment</th><th>Formatting</th><th>Relevance</th><th>Priority</th><th>Reward</th></tr></thead><tbody><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1876816854\" target=\"_blank\" rel=\"noopener\">what is this reward cap?</a></h6></td><td><details><summary>0.53</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 5&#13;  wordValue: 0.1&#13;  result: 0.53&#13;</pre></details></td><td>0.6</td><td>4</td><td>1.656</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1876819975\" target=\"_blank\" rel=\"noopener\">isn't there supposed to be a config to enable/disable permit gen&hellip;</a></h6></td><td><details><summary>1.81</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;  result: 0&#13;regex:&#13;  wordCount: 28&#13;  wordValue: 0.1&#13;  result: 1.81&#13;</pre></details></td><td>0.85</td><td>4</td><td>7.888</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1878747155\" target=\"_blank\" rel=\"noopener\">I guess we could add the setting but I feel like it's not a prio&hellip;</a></h6></td><td><details><summary>2.07</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 1&#13;  result: 0&#13;regex:&#13;  wordCount: 36&#13;  wordValue: 0.1&#13;  result: 2.07&#13;</pre></details></td><td>0.4</td><td>4</td><td>4.288</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1878753088\" target=\"_blank\" rel=\"noopener\">[[ 0.3 WXDAI ]](https://github.com/Meniole/text-conversation-rew&hellip;</a></h6></td><td><details><summary>3.46</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 5&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 55&#13;  wordValue: 0.1&#13;  result: 2.46&#13;</pre></details></td><td>0.8</td><td>4</td><td>13.248</td></tr><tr><td><h6><a href=\"https://github.com/ubiquity-os-marketplace/text-conversation-rewards/pull/209#discussion_r1880591572\" target=\"_blank\" rel=\"noopener\">I think sometimes an issue is about discussing a potential featu&hellip;</a></h6></td><td><details><summary>3.62</summary><pre>content:&#13;  content:&#13;    p:&#13;      score: 0&#13;      elementCount: 2&#13;    hr:&#13;      score: 0&#13;      elementCount: 1&#13;    a:&#13;      score: 1&#13;      elementCount: 1&#13;  result: 1&#13;regex:&#13;  wordCount: 77&#13;  wordValue: 0.1&#13;  result: 2.62&#13;</pre></details></td><td>0.7</td><td>4</td><td>12.88</td></tr></tbody></table></details>"}}}]}